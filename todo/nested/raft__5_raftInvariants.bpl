// Dafny 2.2.0.10923
// Command Line Options: /noVerify /print:raft.bpl raftTimesOut.dfy

const $$Language$Dafny: bool;

axiom $$Language$Dafny;

type Ty;

type Bv0 = int;

const unique TBool: Ty;

const unique TChar: Ty;

const unique TInt: Ty;

const unique TReal: Ty;

const unique TORDINAL: Ty;

function TBitvector(int) : Ty;

function TSet(Ty) : Ty;

function TISet(Ty) : Ty;

function TMultiSet(Ty) : Ty;

function TSeq(Ty) : Ty;

function TMap(Ty, Ty) : Ty;

function TIMap(Ty, Ty) : Ty;

function Inv0_TBitvector(Ty) : int;

axiom (forall w: int :: { TBitvector(w) } Inv0_TBitvector(TBitvector(w)) == w);

function Inv0_TSet(Ty) : Ty;

axiom (forall t: Ty :: { TSet(t) } Inv0_TSet(TSet(t)) == t);

function Inv0_TISet(Ty) : Ty;

axiom (forall t: Ty :: { TISet(t) } Inv0_TISet(TISet(t)) == t);

function Inv0_TSeq(Ty) : Ty;

axiom (forall t: Ty :: { TSeq(t) } Inv0_TSeq(TSeq(t)) == t);

function Inv0_TMultiSet(Ty) : Ty;

axiom (forall t: Ty :: { TMultiSet(t) } Inv0_TMultiSet(TMultiSet(t)) == t);

function Inv0_TMap(Ty) : Ty;

function Inv1_TMap(Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv0_TMap(TMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv1_TMap(TMap(t, u)) == u);

function Inv0_TIMap(Ty) : Ty;

function Inv1_TIMap(Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv0_TIMap(TIMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv1_TIMap(TIMap(t, u)) == u);

type TyTag;

function Tag(Ty) : TyTag;

const unique TagBool: TyTag;

const unique TagChar: TyTag;

const unique TagInt: TyTag;

const unique TagReal: TyTag;

const unique TagORDINAL: TyTag;

const unique TagSet: TyTag;

const unique TagISet: TyTag;

const unique TagMultiSet: TyTag;

const unique TagSeq: TyTag;

const unique TagMap: TyTag;

const unique TagIMap: TyTag;

const unique TagClass: TyTag;

axiom Tag(TBool) == TagBool;

axiom Tag(TChar) == TagChar;

axiom Tag(TInt) == TagInt;

axiom Tag(TReal) == TagReal;

axiom Tag(TORDINAL) == TagORDINAL;

axiom (forall t: Ty :: { TSet(t) } Tag(TSet(t)) == TagSet);

axiom (forall t: Ty :: { TISet(t) } Tag(TISet(t)) == TagISet);

axiom (forall t: Ty :: { TMultiSet(t) } Tag(TMultiSet(t)) == TagMultiSet);

axiom (forall t: Ty :: { TSeq(t) } Tag(TSeq(t)) == TagSeq);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Tag(TMap(t, u)) == TagMap);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Tag(TIMap(t, u)) == TagIMap);

function {:identity} LitInt(x: int) : int;

axiom (forall x: int :: {:identity} { LitInt(x): int } LitInt(x): int == x);

axiom (forall x: int :: { $Box(LitInt(x)) } $Box(LitInt(x)) == Lit($Box(x)));

function {:identity} LitReal(x: real) : real;

axiom (forall x: real :: {:identity} { LitReal(x): real } LitReal(x): real == x);

axiom (forall x: real :: { $Box(LitReal(x)) } $Box(LitReal(x)) == Lit($Box(x)));

function {:identity} Lit<T>(x: T) : T;

axiom (forall<T> x: T :: {:identity} { Lit(x): T } Lit(x): T == x);

axiom (forall<T> x: T :: { $Box(Lit(x)) } $Box(Lit(x)) == Lit($Box(x)));

type char;

function char#FromInt(int) : char;

function char#ToInt(char) : int;

axiom (forall ch: char :: 
  { char#ToInt(ch) } 
  char#FromInt(char#ToInt(ch)) == ch
     && 0 <= char#ToInt(ch)
     && char#ToInt(ch) < 65536);

axiom (forall n: int :: 
  { char#FromInt(n) } 
  0 <= n && n < 65536 ==> char#ToInt(char#FromInt(n)) == n);

function char#Plus(char, char) : char;

function char#Minus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Plus(a, b) } 
  char#Plus(a, b) == char#FromInt(char#ToInt(a) + char#ToInt(b)));

axiom (forall a: char, b: char :: 
  { char#Minus(a, b) } 
  char#Minus(a, b) == char#FromInt(char#ToInt(a) - char#ToInt(b)));

type ref;

const null: ref;

const unique NoTraitAtAll: ClassName;

function TraitParent(ClassName) : ClassName;

type Box;

const $ArbitraryBoxValue: Box;

function $Box<T>(T) : Box;

function $Unbox<T>(Box) : T;

axiom (forall<T> x: T :: { $Box(x) } $Unbox($Box(x)) == x);

axiom (forall bx: Box :: 
  { $IsBox(bx, TInt) } 
  $IsBox(bx, TInt) ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, TInt));

axiom (forall bx: Box :: 
  { $IsBox(bx, TReal) } 
  $IsBox(bx, TReal)
     ==> $Box($Unbox(bx): real) == bx && $Is($Unbox(bx): real, TReal));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBool) } 
  $IsBox(bx, TBool)
     ==> $Box($Unbox(bx): bool) == bx && $Is($Unbox(bx): bool, TBool));

axiom (forall bx: Box :: 
  { $IsBox(bx, TChar) } 
  $IsBox(bx, TChar)
     ==> $Box($Unbox(bx): char) == bx && $Is($Unbox(bx): char, TChar));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSet(t)) } 
  $IsBox(bx, TSet(t))
     ==> $Box($Unbox(bx): Set Box) == bx && $Is($Unbox(bx): Set Box, TSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TISet(t)) } 
  $IsBox(bx, TISet(t))
     ==> $Box($Unbox(bx): ISet Box) == bx && $Is($Unbox(bx): ISet Box, TISet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TMultiSet(t)) } 
  $IsBox(bx, TMultiSet(t))
     ==> $Box($Unbox(bx): MultiSet Box) == bx
       && $Is($Unbox(bx): MultiSet Box, TMultiSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSeq(t)) } 
  $IsBox(bx, TSeq(t))
     ==> $Box($Unbox(bx): Seq Box) == bx && $Is($Unbox(bx): Seq Box, TSeq(t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TMap(s, t)) } 
  $IsBox(bx, TMap(s, t))
     ==> $Box($Unbox(bx): Map Box Box) == bx && $Is($Unbox(bx): Map Box Box, TMap(s, t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TIMap(s, t)) } 
  $IsBox(bx, TIMap(s, t))
     ==> $Box($Unbox(bx): IMap Box Box) == bx
       && $Is($Unbox(bx): IMap Box Box, TIMap(s, t)));

axiom (forall<T> v: T, t: Ty :: 
  { $IsBox($Box(v), t) } 
  $IsBox($Box(v), t) <==> $Is(v, t));

axiom (forall<T> v: T, t: Ty, h: Heap :: 
  { $IsAllocBox($Box(v), t, h) } 
  $IsAllocBox($Box(v), t, h) <==> $IsAlloc(v, t, h));

function $Is<T>(T, Ty) : bool;

function $IsAlloc<T>(T, Ty, Heap) : bool;

function $IsBox<T>(T, Ty) : bool;

function $IsAllocBox<T>(T, Ty, Heap) : bool;

axiom (forall v: int :: { $Is(v, TInt) } $Is(v, TInt));

axiom (forall v: real :: { $Is(v, TReal) } $Is(v, TReal));

axiom (forall v: bool :: { $Is(v, TBool) } $Is(v, TBool));

axiom (forall v: char :: { $Is(v, TChar) } $Is(v, TChar));

axiom (forall v: ORDINAL :: { $Is(v, TORDINAL) } $Is(v, TORDINAL));

axiom (forall h: Heap, v: int :: { $IsAlloc(v, TInt, h) } $IsAlloc(v, TInt, h));

axiom (forall h: Heap, v: real :: { $IsAlloc(v, TReal, h) } $IsAlloc(v, TReal, h));

axiom (forall h: Heap, v: bool :: { $IsAlloc(v, TBool, h) } $IsAlloc(v, TBool, h));

axiom (forall h: Heap, v: char :: { $IsAlloc(v, TChar, h) } $IsAlloc(v, TChar, h));

axiom (forall h: Heap, v: ORDINAL :: 
  { $IsAlloc(v, TORDINAL, h) } 
  $IsAlloc(v, TORDINAL, h));

axiom (forall v: Set Box, t0: Ty :: 
  { $Is(v, TSet(t0)) } 
  $Is(v, TSet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: ISet Box, t0: Ty :: 
  { $Is(v, TISet(t0)) } 
  $Is(v, TISet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet Box, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0))
     <==> (forall bx: Box :: { v[bx] } 0 < v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet Box, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0)) ==> $IsGoodMultiSet(v));

axiom (forall v: Seq Box, t0: Ty :: 
  { $Is(v, TSeq(t0)) } 
  $Is(v, TSeq(t0))
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsBox(Seq#Index(v, i), t0)));

axiom (forall v: Set Box, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSet(t0), h) } 
  $IsAlloc(v, TSet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: ISet Box, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TISet(t0), h) } 
  $IsAlloc(v, TISet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: MultiSet Box, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TMultiSet(t0), h) } 
  $IsAlloc(v, TMultiSet(t0), h)
     <==> (forall bx: Box :: { v[bx] } 0 < v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: Seq Box, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSeq(t0), h) } 
  $IsAlloc(v, TSeq(t0), h)
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsAllocBox(Seq#Index(v, i), t0, h)));

axiom (forall v: Map Box Box, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Map#Domain(v)[bx] } 
      Map#Domain(v)[bx] ==> $IsBox(Map#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: Map Box Box, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TMap(t0, t1), h) } 
  $IsAlloc(v, TMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Map#Domain(v)[bx] } 
      Map#Domain(v)[bx]
         ==> $IsAllocBox(Map#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

axiom (forall v: IMap Box Box, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx] ==> $IsBox(IMap#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: IMap Box Box, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TIMap(t0, t1), h) } 
  $IsAlloc(v, TIMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx]
         ==> $IsAllocBox(IMap#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

type ClassName;

const unique class._System.int: ClassName;

const unique class._System.bool: ClassName;

const unique class._System.set: ClassName;

const unique class._System.seq: ClassName;

const unique class._System.multiset: ClassName;

function Tclass._System.object?() : Ty;

function dtype(ref) : Ty;

function TypeTuple(a: ClassName, b: ClassName) : ClassName;

function TypeTupleCar(ClassName) : ClassName;

function TypeTupleCdr(ClassName) : ClassName;

axiom (forall a: ClassName, b: ClassName :: 
  { TypeTuple(a, b) } 
  TypeTupleCar(TypeTuple(a, b)) == a && TypeTupleCdr(TypeTuple(a, b)) == b);

type HandleType;

function SetRef_to_SetBox(s: [ref]bool) : Set Box;

axiom (forall s: [ref]bool, bx: Box :: 
  { SetRef_to_SetBox(s)[bx] } 
  SetRef_to_SetBox(s)[bx] == s[$Unbox(bx): ref]);

axiom (forall s: [ref]bool :: 
  { SetRef_to_SetBox(s) } 
  $Is(SetRef_to_SetBox(s), TSet(Tclass._System.object?())));

type DatatypeType;

type DtCtorId;

function DatatypeCtorId(DatatypeType) : DtCtorId;

function DtRank(DatatypeType) : int;

function BoxRank(Box) : int;

axiom (forall d: DatatypeType :: { BoxRank($Box(d)) } BoxRank($Box(d)) == DtRank(d));

type ORDINAL = Box;

function ORD#IsNat(ORDINAL) : bool;

function ORD#Offset(ORDINAL) : int;

axiom (forall o: ORDINAL :: { ORD#Offset(o) } 0 <= ORD#Offset(o));

function {:inline} ORD#IsLimit(o: ORDINAL) : bool
{
  ORD#Offset(o) == 0
}

function {:inline} ORD#IsSucc(o: ORDINAL) : bool
{
  0 < ORD#Offset(o)
}

function ORD#FromNat(int) : ORDINAL;

axiom (forall n: int :: 
  { ORD#FromNat(n) } 
  0 <= n ==> ORD#IsNat(ORD#FromNat(n)) && ORD#Offset(ORD#FromNat(n)) == n);

axiom (forall o: ORDINAL :: 
  { ORD#Offset(o) } { ORD#IsNat(o) } 
  ORD#IsNat(o) ==> o == ORD#FromNat(ORD#Offset(o)));

function ORD#Less(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p) } 
  (ORD#Less(o, p) ==> o != p)
     && (ORD#IsNat(o) && !ORD#IsNat(p) ==> ORD#Less(o, p))
     && (ORD#IsNat(o) && ORD#IsNat(p)
       ==> ORD#Less(o, p) == (ORD#Offset(o) < ORD#Offset(p))));

axiom (forall o: ORDINAL, p: ORDINAL :: { ORD#Less(o, p) } ORD#Less(o, p) ==> o != p);

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, o) } 
  ORD#Less(o, p) || o == p || ORD#Less(p, o));

axiom (forall o: ORDINAL, p: ORDINAL, r: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, r) } { ORD#Less(o, p), ORD#Less(o, r) } 
  ORD#Less(o, p) && ORD#Less(p, r) ==> ORD#Less(o, r));

function ORD#LessThanLimit(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#LessThanLimit(o, p) } 
  ORD#LessThanLimit(o, p) == ORD#Less(o, p));

function ORD#Plus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (ORD#IsNat(ORD#Plus(o, p)) ==> ORD#IsNat(o) && ORD#IsNat(p))
     && (ORD#IsNat(p)
       ==> ORD#IsNat(ORD#Plus(o, p)) == ORD#IsNat(o)
         && ORD#Offset(ORD#Plus(o, p)) == ORD#Offset(o) + ORD#Offset(p)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#Plus(o, p) || ORD#Less(o, ORD#Plus(o, p)))
     && (p == ORD#Plus(o, p) || ORD#Less(p, ORD#Plus(o, p))));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#FromNat(0) ==> ORD#Plus(o, p) == p)
     && (p == ORD#FromNat(0) ==> ORD#Plus(o, p) == o));

function ORD#Minus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> ORD#IsNat(ORD#Minus(o, p)) == ORD#IsNat(o)
       && ORD#Offset(ORD#Minus(o, p)) == ORD#Offset(o) - ORD#Offset(p));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> (p == ORD#FromNat(0) && ORD#Minus(o, p) == o)
       || (p != ORD#FromNat(0) && ORD#Less(ORD#Minus(o, p), o)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n
     ==> ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Plus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && m + n <= ORD#Offset(o)
     ==> ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Minus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(n - m))));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(n - m))));

const $ModuleContextHeight: int;

const $FunctionContextHeight: int;

type LayerType;

const $LZ: LayerType;

function $LS(LayerType) : LayerType;

function AsFuelBottom(LayerType) : LayerType;

function AtLayer<A>([LayerType]A, LayerType) : A;

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, ly) } 
  AtLayer(f, ly) == f[ly]);

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, $LS(ly)) } 
  AtLayer(f, $LS(ly)) == AtLayer(f, ly));

type Field _;

function FDim<T>(Field T) : int;

function IndexField(int) : Field Box;

axiom (forall i: int :: { IndexField(i) } FDim(IndexField(i)) == 1);

function IndexField_Inverse<T>(Field T) : int;

axiom (forall i: int :: { IndexField(i) } IndexField_Inverse(IndexField(i)) == i);

function MultiIndexField(Field Box, int) : Field Box;

axiom (forall f: Field Box, i: int :: 
  { MultiIndexField(f, i) } 
  FDim(MultiIndexField(f, i)) == FDim(f) + 1);

function MultiIndexField_Inverse0<T>(Field T) : Field T;

function MultiIndexField_Inverse1<T>(Field T) : int;

axiom (forall f: Field Box, i: int :: 
  { MultiIndexField(f, i) } 
  MultiIndexField_Inverse0(MultiIndexField(f, i)) == f
     && MultiIndexField_Inverse1(MultiIndexField(f, i)) == i);

function DeclType<T>(Field T) : ClassName;

type NameFamily;

function DeclName<T>(Field T) : NameFamily;

function FieldOfDecl<alpha>(ClassName, NameFamily) : Field alpha;

axiom (forall<T> cl: ClassName, nm: NameFamily :: 
  { FieldOfDecl(cl, nm): Field T } 
  DeclType(FieldOfDecl(cl, nm): Field T) == cl
     && DeclName(FieldOfDecl(cl, nm): Field T) == nm);

function $IsGhostField<T>(Field T) : bool;

axiom (forall<T> h: Heap, k: Heap, v: T, t: Ty :: 
  { $HeapSucc(h, k), $IsAlloc(v, t, h) } 
  $HeapSucc(h, k) ==> $IsAlloc(v, t, h) ==> $IsAlloc(v, t, k));

axiom (forall h: Heap, k: Heap, bx: Box, t: Ty :: 
  { $HeapSucc(h, k), $IsAllocBox(bx, t, h) } 
  $HeapSucc(h, k) ==> $IsAllocBox(bx, t, h) ==> $IsAllocBox(bx, t, k));

const unique alloc: Field bool;

const unique allocName: NameFamily;

axiom FDim(alloc) == 0 && DeclName(alloc) == allocName && !$IsGhostField(alloc);

function _System.array.Length(a: ref) : int;

axiom (forall o: ref :: 0 <= _System.array.Length(o));

function Int(x: real) : int;

axiom (forall x: real :: { Int(x): int } Int(x): int == int(x));

function Real(x: int) : real;

axiom (forall x: int :: { Real(x): real } Real(x): real == real(x));

axiom (forall i: int :: { Int(Real(i)) } Int(Real(i)) == i);

function {:inline} _System.real.Floor(x: real) : int
{
  Int(x)
}

type Heap = <alpha>[ref,Field alpha]alpha;

function {:inline} read<alpha>(H: Heap, r: ref, f: Field alpha) : alpha
{
  H[r, f]
}

function {:inline} update<alpha>(H: Heap, r: ref, f: Field alpha, v: alpha) : Heap
{
  H[r, f := v]
}

function $IsGoodHeap(Heap) : bool;

function $IsHeapAnchor(Heap) : bool;

var $Heap: Heap where $IsGoodHeap($Heap) && $IsHeapAnchor($Heap);

const $OneHeap: Heap;

axiom $IsGoodHeap($OneHeap);

function $HeapSucc(Heap, Heap) : bool;

axiom (forall<alpha> h: Heap, r: ref, f: Field alpha, x: alpha :: 
  { update(h, r, f, x) } 
  $IsGoodHeap(update(h, r, f, x)) ==> $HeapSucc(h, update(h, r, f, x)));

axiom (forall a: Heap, b: Heap, c: Heap :: 
  { $HeapSucc(a, b), $HeapSucc(b, c) } 
  $HeapSucc(a, b) && $HeapSucc(b, c) ==> $HeapSucc(a, c));

axiom (forall h: Heap, k: Heap :: 
  { $HeapSucc(h, k) } 
  $HeapSucc(h, k)
     ==> (forall o: ref :: { read(k, o, alloc) } read(h, o, alloc) ==> read(k, o, alloc)));

function $HeapSuccGhost(Heap, Heap) : bool;

axiom (forall h: Heap, k: Heap :: 
  { $HeapSuccGhost(h, k) } 
  $HeapSuccGhost(h, k)
     ==> $HeapSucc(h, k)
       && (forall<alpha> o: ref, f: Field alpha :: 
        { read(k, o, f) } 
        !$IsGhostField(f) ==> read(h, o, f) == read(k, o, f)));

type TickType;

var $Tick: TickType;

procedure $YieldHavoc(this: ref, rds: Set Box, nw: Set Box);
  modifies $Heap;
  ensures (forall<alpha> $o: ref, $f: Field alpha :: 
    { read($Heap, $o, $f) } 
    $o != null && read(old($Heap), $o, alloc)
       ==> 
      $o == this || rds[$Box($o)] || nw[$Box($o)]
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc0(this: ref, rds: Set Box, modi: Set Box);
  modifies $Heap;
  ensures (forall<alpha> $o: ref, $f: Field alpha :: 
    { read($Heap, $o, $f) } 
    $o != null && read(old($Heap), $o, alloc)
       ==> 
      rds[$Box($o)] && !modi[$Box($o)] && $o != this
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc1(this: ref, modi: Set Box, nw: Set Box);
  modifies $Heap;
  ensures (forall<alpha> $o: ref, $f: Field alpha :: 
    { read($Heap, $o, $f) } 
    $o != null && read(old($Heap), $o, alloc)
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || $o == this
         || modi[$Box($o)]
         || nw[$Box($o)]);
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterCollectNewObjects(prevHeap: Heap, newHeap: Heap, this: ref, NW: Field (Set Box))
   returns (s: Set Box);
  ensures (forall bx: Box :: 
    { s[bx] } 
    s[bx]
       <==> read(newHeap, this, NW)[bx]
         || (
          $Unbox(bx) != null
           && !read(prevHeap, $Unbox(bx): ref, alloc)
           && read(newHeap, $Unbox(bx): ref, alloc)));



type Set T = [T]bool;

function Set#Card<T>(Set T) : int;

axiom (forall<T> s: Set T :: { Set#Card(s) } 0 <= Set#Card(s));

function Set#Empty<T>() : Set T;

axiom (forall<T> o: T :: { Set#Empty()[o] } !Set#Empty()[o]);

axiom (forall<T> s: Set T :: 
  { Set#Card(s) } 
  (Set#Card(s) == 0 <==> s == Set#Empty())
     && (Set#Card(s) != 0 ==> (exists x: T :: s[x])));

function Set#Singleton<T>(T) : Set T;

axiom (forall<T> r: T :: { Set#Singleton(r) } Set#Singleton(r)[r]);

axiom (forall<T> r: T, o: T :: 
  { Set#Singleton(r)[o] } 
  Set#Singleton(r)[o] <==> r == o);

axiom (forall<T> r: T :: 
  { Set#Card(Set#Singleton(r)) } 
  Set#Card(Set#Singleton(r)) == 1);

function Set#UnionOne<T>(Set T, T) : Set T;

axiom (forall<T> a: Set T, x: T, o: T :: 
  { Set#UnionOne(a, x)[o] } 
  Set#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall<T> a: Set T, x: T :: { Set#UnionOne(a, x) } Set#UnionOne(a, x)[x]);

axiom (forall<T> a: Set T, x: T, y: T :: 
  { Set#UnionOne(a, x), a[y] } 
  a[y] ==> Set#UnionOne(a, x)[y]);

axiom (forall<T> a: Set T, x: T :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  a[x] ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a));

axiom (forall<T> a: Set T, x: T :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  !a[x] ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a) + 1);

function Set#Union<T>(Set T, Set T) : Set T;

axiom (forall<T> a: Set T, b: Set T, o: T :: 
  { Set#Union(a, b)[o] } 
  Set#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall<T> a: Set T, b: Set T, y: T :: 
  { Set#Union(a, b), a[y] } 
  a[y] ==> Set#Union(a, b)[y]);

axiom (forall<T> a: Set T, b: Set T, y: T :: 
  { Set#Union(a, b), b[y] } 
  b[y] ==> Set#Union(a, b)[y]);

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Union(a, b) } 
  Set#Disjoint(a, b)
     ==> Set#Difference(Set#Union(a, b), a) == b
       && Set#Difference(Set#Union(a, b), b) == a);

function Set#Intersection<T>(Set T, Set T) : Set T;

axiom (forall<T> a: Set T, b: Set T, o: T :: 
  { Set#Intersection(a, b)[o] } 
  Set#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Union(Set#Union(a, b), b) } 
  Set#Union(Set#Union(a, b), b) == Set#Union(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Union(a, Set#Union(a, b)) } 
  Set#Union(a, Set#Union(a, b)) == Set#Union(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Intersection(Set#Intersection(a, b), b) } 
  Set#Intersection(Set#Intersection(a, b), b) == Set#Intersection(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Intersection(a, Set#Intersection(a, b)) } 
  Set#Intersection(a, Set#Intersection(a, b)) == Set#Intersection(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Card(Set#Union(a, b)) } { Set#Card(Set#Intersection(a, b)) } 
  Set#Card(Set#Union(a, b)) + Set#Card(Set#Intersection(a, b))
     == Set#Card(a) + Set#Card(b));

function Set#Difference<T>(Set T, Set T) : Set T;

axiom (forall<T> a: Set T, b: Set T, o: T :: 
  { Set#Difference(a, b)[o] } 
  Set#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall<T> a: Set T, b: Set T, y: T :: 
  { Set#Difference(a, b), b[y] } 
  b[y] ==> !Set#Difference(a, b)[y]);

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Card(Set#Difference(a, b)) } 
  Set#Card(Set#Difference(a, b))
         + Set#Card(Set#Difference(b, a))
         + Set#Card(Set#Intersection(a, b))
       == Set#Card(Set#Union(a, b))
     && Set#Card(Set#Difference(a, b)) == Set#Card(a) - Set#Card(Set#Intersection(a, b)));

function Set#Subset<T>(Set T, Set T) : bool;

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Subset(a, b) } 
  Set#Subset(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] ==> b[o]));

function Set#Equal<T>(Set T, Set T) : bool;

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Equal(a, b) } 
  Set#Equal(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall<T> a: Set T, b: Set T :: { Set#Equal(a, b) } Set#Equal(a, b) ==> a == b);

function Set#Disjoint<T>(Set T, Set T) : bool;

axiom (forall<T> a: Set T, b: Set T :: 
  { Set#Disjoint(a, b) } 
  Set#Disjoint(a, b) <==> (forall o: T :: { a[o] } { b[o] } !a[o] || !b[o]));

type ISet T = [T]bool;

function ISet#Empty<T>() : Set T;

axiom (forall<T> o: T :: { ISet#Empty()[o] } !ISet#Empty()[o]);

function ISet#UnionOne<T>(ISet T, T) : ISet T;

axiom (forall<T> a: ISet T, x: T, o: T :: 
  { ISet#UnionOne(a, x)[o] } 
  ISet#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall<T> a: ISet T, x: T :: { ISet#UnionOne(a, x) } ISet#UnionOne(a, x)[x]);

axiom (forall<T> a: ISet T, x: T, y: T :: 
  { ISet#UnionOne(a, x), a[y] } 
  a[y] ==> ISet#UnionOne(a, x)[y]);

function ISet#Union<T>(ISet T, ISet T) : ISet T;

axiom (forall<T> a: ISet T, b: ISet T, o: T :: 
  { ISet#Union(a, b)[o] } 
  ISet#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall<T> a: ISet T, b: ISet T, y: T :: 
  { ISet#Union(a, b), a[y] } 
  a[y] ==> ISet#Union(a, b)[y]);

axiom (forall<T> a: Set T, b: Set T, y: T :: 
  { ISet#Union(a, b), b[y] } 
  b[y] ==> ISet#Union(a, b)[y]);

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Union(a, b) } 
  ISet#Disjoint(a, b)
     ==> ISet#Difference(ISet#Union(a, b), a) == b
       && ISet#Difference(ISet#Union(a, b), b) == a);

function ISet#Intersection<T>(ISet T, ISet T) : ISet T;

axiom (forall<T> a: ISet T, b: ISet T, o: T :: 
  { ISet#Intersection(a, b)[o] } 
  ISet#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Union(ISet#Union(a, b), b) } 
  ISet#Union(ISet#Union(a, b), b) == ISet#Union(a, b));

axiom (forall<T> a: Set T, b: Set T :: 
  { ISet#Union(a, ISet#Union(a, b)) } 
  ISet#Union(a, ISet#Union(a, b)) == ISet#Union(a, b));

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Intersection(ISet#Intersection(a, b), b) } 
  ISet#Intersection(ISet#Intersection(a, b), b) == ISet#Intersection(a, b));

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Intersection(a, ISet#Intersection(a, b)) } 
  ISet#Intersection(a, ISet#Intersection(a, b)) == ISet#Intersection(a, b));

function ISet#Difference<T>(ISet T, ISet T) : ISet T;

axiom (forall<T> a: ISet T, b: ISet T, o: T :: 
  { ISet#Difference(a, b)[o] } 
  ISet#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall<T> a: ISet T, b: ISet T, y: T :: 
  { ISet#Difference(a, b), b[y] } 
  b[y] ==> !ISet#Difference(a, b)[y]);

function ISet#Subset<T>(ISet T, ISet T) : bool;

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Subset(a, b) } 
  ISet#Subset(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] ==> b[o]));

function ISet#Equal<T>(ISet T, ISet T) : bool;

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) ==> a == b);

function ISet#Disjoint<T>(ISet T, ISet T) : bool;

axiom (forall<T> a: ISet T, b: ISet T :: 
  { ISet#Disjoint(a, b) } 
  ISet#Disjoint(a, b) <==> (forall o: T :: { a[o] } { b[o] } !a[o] || !b[o]));

function Math#min(a: int, b: int) : int;

axiom (forall a: int, b: int :: { Math#min(a, b) } a <= b <==> Math#min(a, b) == a);

axiom (forall a: int, b: int :: { Math#min(a, b) } b <= a <==> Math#min(a, b) == b);

axiom (forall a: int, b: int :: 
  { Math#min(a, b) } 
  Math#min(a, b) == a || Math#min(a, b) == b);

function Math#clip(a: int) : int;

axiom (forall a: int :: { Math#clip(a) } 0 <= a ==> Math#clip(a) == a);

axiom (forall a: int :: { Math#clip(a) } a < 0 ==> Math#clip(a) == 0);

type MultiSet T = [T]int;

function $IsGoodMultiSet<T>(ms: MultiSet T) : bool;

axiom (forall<T> ms: MultiSet T :: 
  { $IsGoodMultiSet(ms) } 
  $IsGoodMultiSet(ms)
     <==> (forall bx: T :: { ms[bx] } 0 <= ms[bx] && ms[bx] <= MultiSet#Card(ms)));

function MultiSet#Card<T>(MultiSet T) : int;

axiom (forall<T> s: MultiSet T :: { MultiSet#Card(s) } 0 <= MultiSet#Card(s));

axiom (forall<T> s: MultiSet T, x: T, n: int :: 
  { MultiSet#Card(s[x := n]) } 
  0 <= n ==> MultiSet#Card(s[x := n]) == MultiSet#Card(s) - s[x] + n);

function MultiSet#Empty<T>() : MultiSet T;

axiom (forall<T> o: T :: { MultiSet#Empty()[o] } MultiSet#Empty()[o] == 0);

axiom (forall<T> s: MultiSet T :: 
  { MultiSet#Card(s) } 
  (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty())
     && (MultiSet#Card(s) != 0 ==> (exists x: T :: 0 < s[x])));

function MultiSet#Singleton<T>(T) : MultiSet T;

axiom (forall<T> r: T, o: T :: 
  { MultiSet#Singleton(r)[o] } 
  (MultiSet#Singleton(r)[o] == 1 <==> r == o)
     && (MultiSet#Singleton(r)[o] == 0 <==> r != o));

axiom (forall<T> r: T :: 
  { MultiSet#Singleton(r) } 
  MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r));

function MultiSet#UnionOne<T>(MultiSet T, T) : MultiSet T;

axiom (forall<T> a: MultiSet T, x: T, o: T :: 
  { MultiSet#UnionOne(a, x)[o] } 
  0 < MultiSet#UnionOne(a, x)[o] <==> o == x || 0 < a[o]);

axiom (forall<T> a: MultiSet T, x: T :: 
  { MultiSet#UnionOne(a, x) } 
  MultiSet#UnionOne(a, x)[x] == a[x] + 1);

axiom (forall<T> a: MultiSet T, x: T, y: T :: 
  { MultiSet#UnionOne(a, x), a[y] } 
  0 < a[y] ==> 0 < MultiSet#UnionOne(a, x)[y]);

axiom (forall<T> a: MultiSet T, x: T, y: T :: 
  { MultiSet#UnionOne(a, x), a[y] } 
  x != y ==> a[y] == MultiSet#UnionOne(a, x)[y]);

axiom (forall<T> a: MultiSet T, x: T :: 
  { MultiSet#Card(MultiSet#UnionOne(a, x)) } 
  MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);

function MultiSet#Union<T>(MultiSet T, MultiSet T) : MultiSet T;

axiom (forall<T> a: MultiSet T, b: MultiSet T, o: T :: 
  { MultiSet#Union(a, b)[o] } 
  MultiSet#Union(a, b)[o] == a[o] + b[o]);

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Card(MultiSet#Union(a, b)) } 
  MultiSet#Card(MultiSet#Union(a, b)) == MultiSet#Card(a) + MultiSet#Card(b));

function MultiSet#Intersection<T>(MultiSet T, MultiSet T) : MultiSet T;

axiom (forall<T> a: MultiSet T, b: MultiSet T, o: T :: 
  { MultiSet#Intersection(a, b)[o] } 
  MultiSet#Intersection(a, b)[o] == Math#min(a[o], b[o]));

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Intersection(MultiSet#Intersection(a, b), b) } 
  MultiSet#Intersection(MultiSet#Intersection(a, b), b)
     == MultiSet#Intersection(a, b));

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Intersection(a, MultiSet#Intersection(a, b)) } 
  MultiSet#Intersection(a, MultiSet#Intersection(a, b))
     == MultiSet#Intersection(a, b));

function MultiSet#Difference<T>(MultiSet T, MultiSet T) : MultiSet T;

axiom (forall<T> a: MultiSet T, b: MultiSet T, o: T :: 
  { MultiSet#Difference(a, b)[o] } 
  MultiSet#Difference(a, b)[o] == Math#clip(a[o] - b[o]));

axiom (forall<T> a: MultiSet T, b: MultiSet T, y: T :: 
  { MultiSet#Difference(a, b), b[y], a[y] } 
  a[y] <= b[y] ==> MultiSet#Difference(a, b)[y] == 0);

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Card(MultiSet#Difference(a, b)) } 
  MultiSet#Card(MultiSet#Difference(a, b))
         + MultiSet#Card(MultiSet#Difference(b, a))
         + 2 * MultiSet#Card(MultiSet#Intersection(a, b))
       == MultiSet#Card(MultiSet#Union(a, b))
     && MultiSet#Card(MultiSet#Difference(a, b))
       == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

function MultiSet#Subset<T>(MultiSet T, MultiSet T) : bool;

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Subset(a, b) } 
  MultiSet#Subset(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] <= b[o]));

function MultiSet#Equal<T>(MultiSet T, MultiSet T) : bool;

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) <==> (forall o: T :: { a[o] } { b[o] } a[o] == b[o]));

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) ==> a == b);

function MultiSet#Disjoint<T>(MultiSet T, MultiSet T) : bool;

axiom (forall<T> a: MultiSet T, b: MultiSet T :: 
  { MultiSet#Disjoint(a, b) } 
  MultiSet#Disjoint(a, b)
     <==> (forall o: T :: { a[o] } { b[o] } a[o] == 0 || b[o] == 0));

function MultiSet#FromSet<T>(Set T) : MultiSet T;

axiom (forall<T> s: Set T, a: T :: 
  { MultiSet#FromSet(s)[a] } 
  (MultiSet#FromSet(s)[a] == 0 <==> !s[a])
     && (MultiSet#FromSet(s)[a] == 1 <==> s[a]));

axiom (forall<T> s: Set T :: 
  { MultiSet#Card(MultiSet#FromSet(s)) } 
  MultiSet#Card(MultiSet#FromSet(s)) == Set#Card(s));

function MultiSet#FromSeq<T>(Seq T) : MultiSet T;

axiom (forall<T> s: Seq T :: 
  { MultiSet#FromSeq(s) } 
  $IsGoodMultiSet(MultiSet#FromSeq(s)));

axiom (forall<T> s: Seq T :: 
  { MultiSet#Card(MultiSet#FromSeq(s)) } 
  MultiSet#Card(MultiSet#FromSeq(s)) == Seq#Length(s));

axiom (forall<T> s: Seq T, v: T :: 
  { MultiSet#FromSeq(Seq#Build(s, v)) } 
  MultiSet#FromSeq(Seq#Build(s, v)) == MultiSet#UnionOne(MultiSet#FromSeq(s), v));

axiom (forall<T>  :: 
  MultiSet#FromSeq(Seq#Empty(): Seq T) == MultiSet#Empty(): MultiSet T);

axiom (forall<T> a: Seq T, b: Seq T :: 
  { MultiSet#FromSeq(Seq#Append(a, b)) } 
  MultiSet#FromSeq(Seq#Append(a, b))
     == MultiSet#Union(MultiSet#FromSeq(a), MultiSet#FromSeq(b)));

axiom (forall<T> s: Seq T, i: int, v: T, x: T :: 
  { MultiSet#FromSeq(Seq#Update(s, i, v))[x] } 
  0 <= i && i < Seq#Length(s)
     ==> MultiSet#FromSeq(Seq#Update(s, i, v))[x]
       == MultiSet#Union(MultiSet#Difference(MultiSet#FromSeq(s), MultiSet#Singleton(Seq#Index(s, i))), 
        MultiSet#Singleton(v))[x]);

axiom (forall<T> s: Seq T, x: T :: 
  { MultiSet#FromSeq(s)[x] } 
  (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && x == Seq#Index(s, i))
     <==> 0 < MultiSet#FromSeq(s)[x]);

type Seq _;

function Seq#Length<T>(Seq T) : int;

axiom (forall<T> s: Seq T :: { Seq#Length(s) } 0 <= Seq#Length(s));

function Seq#Empty<T>() : Seq T;

axiom (forall<T>  :: { Seq#Empty(): Seq T } Seq#Length(Seq#Empty(): Seq T) == 0);

axiom (forall<T> s: Seq T :: 
  { Seq#Length(s) } 
  Seq#Length(s) == 0 ==> s == Seq#Empty());

axiom (forall<T> t: Ty :: { $Is(Seq#Empty(): Seq T, t) } $Is(Seq#Empty(): Seq T, t));

function Seq#Singleton<T>(T) : Seq T;

axiom (forall<T> t: T :: 
  { Seq#Length(Seq#Singleton(t)) } 
  Seq#Length(Seq#Singleton(t)) == 1);

function Seq#Build<T>(s: Seq T, val: T) : Seq T;

function Seq#Build_inv0<T>(s: Seq T) : Seq T;

function Seq#Build_inv1<T>(s: Seq T) : T;

axiom (forall<T> s: Seq T, val: T :: 
  { Seq#Build(s, val) } 
  Seq#Build_inv0(Seq#Build(s, val)) == s
     && Seq#Build_inv1(Seq#Build(s, val)) == val);

axiom (forall<T> s: Seq T, v: T :: 
  { Seq#Build(s, v) } 
  Seq#Length(Seq#Build(s, v)) == 1 + Seq#Length(s));

axiom (forall<T> s: Seq T, i: int, v: T :: 
  { Seq#Index(Seq#Build(s, v), i) } 
  (i == Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == v)
     && (i != Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == Seq#Index(s, i)));

axiom (forall s: Seq Box, bx: Box, t: Ty :: 
  { $Is(Seq#Build(s, bx), TSeq(t)) } 
  $Is(s, TSeq(t)) && $IsBox(bx, t) ==> $Is(Seq#Build(s, bx), TSeq(t)));

function Seq#Append<T>(Seq T, Seq T) : Seq T;

axiom (forall<T> s0: Seq T, s1: Seq T :: 
  { Seq#Length(Seq#Append(s0, s1)) } 
  Seq#Length(Seq#Append(s0, s1)) == Seq#Length(s0) + Seq#Length(s1));

axiom (forall s0: Seq Box, s1: Seq Box, t: Ty :: 
  { $Is(Seq#Append(s0, s1), t) } 
  $Is(s0, t) && $Is(s1, t) ==> $Is(Seq#Append(s0, s1), t));

function Seq#Index<T>(Seq T, int) : T;

axiom (forall<T> t: T :: 
  { Seq#Index(Seq#Singleton(t), 0) } 
  Seq#Index(Seq#Singleton(t), 0) == t);

axiom (forall<T> s0: Seq T, s1: Seq T, n: int :: 
  { Seq#Index(Seq#Append(s0, s1), n) } 
  (n < Seq#Length(s0) ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s0, n))
     && (Seq#Length(s0) <= n
       ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s1, n - Seq#Length(s0))));

function Seq#Update<T>(Seq T, int, T) : Seq T;

axiom (forall<T> s: Seq T, i: int, v: T :: 
  { Seq#Length(Seq#Update(s, i, v)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Length(Seq#Update(s, i, v)) == Seq#Length(s));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Index(Seq#Update(s, i, v), n) } 
  0 <= n && n < Seq#Length(s)
     ==> (i == n ==> Seq#Index(Seq#Update(s, i, v), n) == v)
       && (i != n ==> Seq#Index(Seq#Update(s, i, v), n) == Seq#Index(s, n)));

function Seq#Contains<T>(Seq T, T) : bool;

axiom (forall<T> s: Seq T, x: T :: 
  { Seq#Contains(s, x) } 
  Seq#Contains(s, x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall<T> x: T :: 
  { Seq#Contains(Seq#Empty(), x) } 
  !Seq#Contains(Seq#Empty(), x));

axiom (forall<T> s0: Seq T, s1: Seq T, x: T :: 
  { Seq#Contains(Seq#Append(s0, s1), x) } 
  Seq#Contains(Seq#Append(s0, s1), x)
     <==> Seq#Contains(s0, x) || Seq#Contains(s1, x));

axiom (forall<T> s: Seq T, v: T, x: T :: 
  { Seq#Contains(Seq#Build(s, v), x) } 
  Seq#Contains(Seq#Build(s, v), x) <==> v == x || Seq#Contains(s, x));

axiom (forall<T> s: Seq T, n: int, x: T :: 
  { Seq#Contains(Seq#Take(s, n), x) } 
  Seq#Contains(Seq#Take(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < n && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall<T> s: Seq T, n: int, x: T :: 
  { Seq#Contains(Seq#Drop(s, n), x) } 
  Seq#Contains(Seq#Drop(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= n && n <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

function Seq#Equal<T>(Seq T, Seq T) : bool;

axiom (forall<T> s0: Seq T, s1: Seq T :: 
  { Seq#Equal(s0, s1) } 
  Seq#Equal(s0, s1)
     <==> Seq#Length(s0) == Seq#Length(s1)
       && (forall j: int :: 
        { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
        0 <= j && j < Seq#Length(s0) ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

axiom (forall<T> a: Seq T, b: Seq T :: { Seq#Equal(a, b) } Seq#Equal(a, b) ==> a == b);

function Seq#SameUntil<T>(Seq T, Seq T, int) : bool;

axiom (forall<T> s0: Seq T, s1: Seq T, n: int :: 
  { Seq#SameUntil(s0, s1, n) } 
  Seq#SameUntil(s0, s1, n)
     <==> (forall j: int :: 
      { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
      0 <= j && j < n ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

function Seq#Take<T>(s: Seq T, howMany: int) : Seq T;

axiom (forall<T> s: Seq T, n: int :: 
  { Seq#Length(Seq#Take(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Take(s, n)) == n);

axiom (forall<T> s: Seq T, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Take(s, n), j) } { Seq#Index(s, j), Seq#Take(s, n) } 
  0 <= j && j < n && j < Seq#Length(s)
     ==> Seq#Index(Seq#Take(s, n), j) == Seq#Index(s, j));

function Seq#Drop<T>(s: Seq T, howMany: int) : Seq T;

axiom (forall<T> s: Seq T, n: int :: 
  { Seq#Length(Seq#Drop(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Drop(s, n)) == Seq#Length(s) - n);

axiom (forall<T> s: Seq T, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Drop(s, n), j) } 
  0 <= n && 0 <= j && j < Seq#Length(s) - n
     ==> Seq#Index(Seq#Drop(s, n), j) == Seq#Index(s, j + n));

axiom (forall<T> s: Seq T, n: int, k: int :: 
  {:weight 25} { Seq#Index(s, k), Seq#Drop(s, n) } 
  0 <= n && n <= k && k < Seq#Length(s)
     ==> Seq#Index(Seq#Drop(s, n), k - n) == Seq#Index(s, k));

axiom (forall<T> s: Seq T, t: Seq T, n: int :: 
  { Seq#Take(Seq#Append(s, t), n) } { Seq#Drop(Seq#Append(s, t), n) } 
  n == Seq#Length(s)
     ==> Seq#Take(Seq#Append(s, t), n) == s && Seq#Drop(Seq#Append(s, t), n) == t);

function Seq#FromArray(h: Heap, a: ref) : Seq Box;

axiom (forall h: Heap, a: ref :: 
  { Seq#Length(Seq#FromArray(h, a)) } 
  Seq#Length(Seq#FromArray(h, a)) == _System.array.Length(a));

axiom (forall h: Heap, a: ref :: 
  { Seq#FromArray(h, a) } 
  (forall i: int :: 
    { read(h, a, IndexField(i)) } { Seq#Index(Seq#FromArray(h, a): Seq Box, i) } 
    0 <= i && i < Seq#Length(Seq#FromArray(h, a))
       ==> Seq#Index(Seq#FromArray(h, a), i) == read(h, a, IndexField(i))));

axiom (forall h0: Heap, h1: Heap, a: ref :: 
  { Seq#FromArray(h1, a), $HeapSucc(h0, h1) } 
  $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $HeapSucc(h0, h1)
       && (forall i: int :: 
        0 <= i && i < _System.array.Length(a)
           ==> read(h0, a, IndexField(i)) == read(h1, a, IndexField(i)))
     ==> Seq#FromArray(h0, a) == Seq#FromArray(h1, a));

axiom (forall h: Heap, i: int, v: Box, a: ref :: 
  { Seq#FromArray(update(h, a, IndexField(i), v), a) } 
  0 <= i && i < _System.array.Length(a)
     ==> Seq#FromArray(update(h, a, IndexField(i), v), a)
       == Seq#Update(Seq#FromArray(h, a), i, v));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Update(Seq#Take(s, n), i, v));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  n <= i && i < Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Take(s, n));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= n && n <= i && i < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Update(Seq#Drop(s, n), i - n, v));

axiom (forall<T> s: Seq T, i: int, v: T, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Drop(s, n));

axiom (forall h: Heap, a: ref, n0: int, n1: int :: 
  { Seq#Take(Seq#FromArray(h, a), n0), Seq#Take(Seq#FromArray(h, a), n1) } 
  n0 + 1 == n1 && 0 <= n0 && n1 <= _System.array.Length(a)
     ==> Seq#Take(Seq#FromArray(h, a), n1)
       == Seq#Build(Seq#Take(Seq#FromArray(h, a), n0), read(h, a, IndexField(n0): Field Box)));

axiom (forall<T> s: Seq T, v: T, n: int :: 
  { Seq#Drop(Seq#Build(s, v), n) } 
  0 <= n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Build(s, v), n) == Seq#Build(Seq#Drop(s, n), v));

function Seq#Rank<T>(Seq T) : int;

axiom (forall s: Seq Box, i: int :: 
  { DtRank($Unbox(Seq#Index(s, i)): DatatypeType) } 
  0 <= i && i < Seq#Length(s)
     ==> DtRank($Unbox(Seq#Index(s, i)): DatatypeType) < Seq#Rank(s));

axiom (forall<T> s: Seq T, i: int :: 
  { Seq#Rank(Seq#Drop(s, i)) } 
  0 < i && i <= Seq#Length(s) ==> Seq#Rank(Seq#Drop(s, i)) < Seq#Rank(s));

axiom (forall<T> s: Seq T, i: int :: 
  { Seq#Rank(Seq#Take(s, i)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Rank(Seq#Take(s, i)) < Seq#Rank(s));

axiom (forall<T> s: Seq T, i: int, j: int :: 
  { Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) } 
  0 <= i && i < j && j <= Seq#Length(s)
     ==> Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) < Seq#Rank(s));

axiom (forall<T> s: Seq T, n: int :: 
  { Seq#Drop(s, n) } 
  n == 0 ==> Seq#Drop(s, n) == s);

axiom (forall<T> s: Seq T, n: int :: 
  { Seq#Take(s, n) } 
  n == 0 ==> Seq#Take(s, n) == Seq#Empty());

axiom (forall<T> s: Seq T, m: int, n: int :: 
  { Seq#Drop(Seq#Drop(s, m), n) } 
  0 <= m && 0 <= n && m + n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Drop(s, m), n) == Seq#Drop(s, m + n));

type Map _ _;

function Map#Domain<U,V>(Map U V) : Set U;

function Map#Elements<U,V>(Map U V) : [U]V;

function Map#Card<U,V>(Map U V) : int;

axiom (forall<U,V> m: Map U V :: { Map#Card(m) } 0 <= Map#Card(m));

axiom (forall<U,V> m: Map U V :: 
  { Set#Card(Map#Domain(m)) } 
  Set#Card(Map#Domain(m)) == Map#Card(m));

function Map#Values<U,V>(Map U V) : Set V;

axiom (forall<U,V> m: Map U V, v: V :: 
  { Map#Values(m)[v] } 
  Map#Values(m)[v]
     == (exists u: U :: 
      { Map#Domain(m)[u] } { Map#Elements(m)[u] } 
      Map#Domain(m)[u] && v == Map#Elements(m)[u]));

function Map#Items<U,V>(Map U V) : Set Box;

function _System.__tuple_h2._0(DatatypeType) : Box;

function _System.__tuple_h2._1(DatatypeType) : Box;

axiom (forall<U,V> m: Map U V :: 
  { Set#Card(Map#Items(m)) } 
  Set#Card(Map#Items(m)) == Map#Card(m));

axiom (forall m: Map Box Box, item: Box :: 
  { Map#Items(m)[item] } 
  Map#Items(m)[item]
     <==> Map#Domain(m)[_System.__tuple_h2._0($Unbox(item))]
       && Map#Elements(m)[_System.__tuple_h2._0($Unbox(item))]
         == _System.__tuple_h2._1($Unbox(item)));

function Map#Empty<U,V>() : Map U V;

axiom (forall<U,V> u: U :: 
  { Map#Domain(Map#Empty(): Map U V)[u] } 
  !Map#Domain(Map#Empty(): Map U V)[u]);

axiom (forall<U,V> m: Map U V :: 
  { Map#Card(m) } 
  (Map#Card(m) == 0 <==> m == Map#Empty())
     && (Map#Card(m) != 0 ==> (exists x: U :: Map#Domain(m)[x])));

function Map#Glue<U,V>([U]bool, [U]V, Ty) : Map U V;

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { Map#Domain(Map#Glue(a, b, t)) } 
  Map#Domain(Map#Glue(a, b, t)) == a);

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { Map#Elements(Map#Glue(a, b, t)) } 
  Map#Elements(Map#Glue(a, b, t)) == b);

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { $Is(Map#Glue(a, b, t), t) } 
  $Is(Map#Glue(a, b, t), t));

function Map#Build<U,V>(Map U V, U, V) : Map U V;

axiom (forall<U,V> m: Map U V, u: U, u': U, v: V :: 
  { Map#Domain(Map#Build(m, u, v))[u'] } { Map#Elements(Map#Build(m, u, v))[u'] } 
  (u' == u
       ==> Map#Domain(Map#Build(m, u, v))[u'] && Map#Elements(Map#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> Map#Domain(Map#Build(m, u, v))[u'] == Map#Domain(m)[u']
         && Map#Elements(Map#Build(m, u, v))[u'] == Map#Elements(m)[u']));

axiom (forall<U,V> m: Map U V, u: U, v: V :: 
  { Map#Card(Map#Build(m, u, v)) } 
  Map#Domain(m)[u] ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m));

axiom (forall<U,V> m: Map U V, u: U, v: V :: 
  { Map#Card(Map#Build(m, u, v)) } 
  !Map#Domain(m)[u] ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m) + 1);

function Map#Equal<U,V>(Map U V, Map U V) : bool;

axiom (forall<U,V> m: Map U V, m': Map U V :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m')
     <==> (forall u: U :: Map#Domain(m)[u] == Map#Domain(m')[u])
       && (forall u: U :: Map#Domain(m)[u] ==> Map#Elements(m)[u] == Map#Elements(m')[u]));

axiom (forall<U,V> m: Map U V, m': Map U V :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m') ==> m == m');

function Map#Disjoint<U,V>(Map U V, Map U V) : bool;

axiom (forall<U,V> m: Map U V, m': Map U V :: 
  { Map#Disjoint(m, m') } 
  Map#Disjoint(m, m')
     <==> (forall o: U :: 
      { Map#Domain(m)[o] } { Map#Domain(m')[o] } 
      !Map#Domain(m)[o] || !Map#Domain(m')[o]));

type IMap _ _;

function IMap#Domain<U,V>(IMap U V) : Set U;

function IMap#Elements<U,V>(IMap U V) : [U]V;

function IMap#Values<U,V>(IMap U V) : Set V;

axiom (forall<U,V> m: IMap U V, v: V :: 
  { IMap#Values(m)[v] } 
  IMap#Values(m)[v]
     == (exists u: U :: 
      { IMap#Domain(m)[u] } { IMap#Elements(m)[u] } 
      IMap#Domain(m)[u] && v == IMap#Elements(m)[u]));

function IMap#Items<U,V>(IMap U V) : Set Box;

axiom (forall m: IMap Box Box, item: Box :: 
  { IMap#Items(m)[item] } 
  IMap#Items(m)[item]
     <==> IMap#Domain(m)[_System.__tuple_h2._0($Unbox(item))]
       && IMap#Elements(m)[_System.__tuple_h2._0($Unbox(item))]
         == _System.__tuple_h2._1($Unbox(item)));

function IMap#Empty<U,V>() : IMap U V;

axiom (forall<U,V> u: U :: 
  { IMap#Domain(IMap#Empty(): IMap U V)[u] } 
  !IMap#Domain(IMap#Empty(): IMap U V)[u]);

function IMap#Glue<U,V>([U]bool, [U]V, Ty) : IMap U V;

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { IMap#Domain(IMap#Glue(a, b, t)) } 
  IMap#Domain(IMap#Glue(a, b, t)) == a);

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { IMap#Elements(IMap#Glue(a, b, t)) } 
  IMap#Elements(IMap#Glue(a, b, t)) == b);

axiom (forall<U,V> a: [U]bool, b: [U]V, t: Ty :: 
  { $Is(IMap#Glue(a, b, t), t) } 
  $Is(IMap#Glue(a, b, t), t));

function IMap#Build<U,V>(IMap U V, U, V) : IMap U V;

axiom (forall<U,V> m: IMap U V, u: U, u': U, v: V :: 
  { IMap#Domain(IMap#Build(m, u, v))[u'] } 
    { IMap#Elements(IMap#Build(m, u, v))[u'] } 
  (u' == u
       ==> IMap#Domain(IMap#Build(m, u, v))[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> IMap#Domain(IMap#Build(m, u, v))[u'] == IMap#Domain(m)[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == IMap#Elements(m)[u']));

function IMap#Equal<U,V>(IMap U V, IMap U V) : bool;

axiom (forall<U,V> m: IMap U V, m': IMap U V :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m')
     <==> (forall u: U :: IMap#Domain(m)[u] == IMap#Domain(m')[u])
       && (forall u: U :: 
        IMap#Domain(m)[u] ==> IMap#Elements(m)[u] == IMap#Elements(m')[u]));

axiom (forall<U,V> m: IMap U V, m': IMap U V :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m') ==> m == m');

function INTERNAL_add_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_add_boogie(x, y): int } 
  INTERNAL_add_boogie(x, y): int == x + y);

function INTERNAL_sub_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_sub_boogie(x, y): int } 
  INTERNAL_sub_boogie(x, y): int == x - y);

function INTERNAL_mul_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_mul_boogie(x, y): int } 
  INTERNAL_mul_boogie(x, y): int == x * y);

function INTERNAL_div_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_div_boogie(x, y): int } 
  INTERNAL_div_boogie(x, y): int == x div y);

function INTERNAL_mod_boogie(x: int, y: int) : int;

axiom (forall x: int, y: int :: 
  { INTERNAL_mod_boogie(x, y): int } 
  INTERNAL_mod_boogie(x, y): int == x mod y);

function {:never_pattern true} INTERNAL_lt_boogie(x: int, y: int) : bool;

axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_lt_boogie(x, y): bool } 
  INTERNAL_lt_boogie(x, y): bool == (x < y));

function {:never_pattern true} INTERNAL_le_boogie(x: int, y: int) : bool;

axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_le_boogie(x, y): bool } 
  INTERNAL_le_boogie(x, y): bool == (x <= y));

function {:never_pattern true} INTERNAL_gt_boogie(x: int, y: int) : bool;

axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_gt_boogie(x, y): bool } 
  INTERNAL_gt_boogie(x, y): bool == (x > y));

function {:never_pattern true} INTERNAL_ge_boogie(x: int, y: int) : bool;

axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_ge_boogie(x, y): bool } 
  INTERNAL_ge_boogie(x, y): bool == (x >= y));

function Mul(x: int, y: int) : int;

axiom (forall x: int, y: int :: { Mul(x, y): int } Mul(x, y): int == x * y);

function Div(x: int, y: int) : int;

axiom (forall x: int, y: int :: { Div(x, y): int } Div(x, y): int == x div y);

function Mod(x: int, y: int) : int;

axiom (forall x: int, y: int :: { Mod(x, y): int } Mod(x, y): int == x mod y);

function Add(x: int, y: int) : int;

axiom (forall x: int, y: int :: { Add(x, y): int } Add(x, y): int == x + y);

function Sub(x: int, y: int) : int;

axiom (forall x: int, y: int :: { Sub(x, y): int } Sub(x, y): int == x - y);

function Tclass._System.nat() : Ty;

// Tclass._System.nat Tag
axiom Tag(Tclass._System.nat()) == Tagclass._System.nat;

const unique Tagclass._System.nat: TyTag;

// Box/unbox axiom for Tclass._System.nat
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.nat()) } 
  $IsBox(bx, Tclass._System.nat())
     ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, Tclass._System.nat()));

// _System.nat: subset type $Is
axiom (forall x#0: int :: 
  { $Is(x#0, Tclass._System.nat()) } 
  $Is(x#0, Tclass._System.nat()) <==> LitInt(0) <= x#0);

// _System.nat: subset type $IsAlloc
axiom (forall x#0: int, $h: Heap :: 
  { $IsAlloc(x#0, Tclass._System.nat(), $h) } 
  $IsAlloc(x#0, Tclass._System.nat(), $h));

const unique class._System.object?: ClassName;

// Tclass._System.object? Tag
axiom Tag(Tclass._System.object?()) == Tagclass._System.object?;

const unique Tagclass._System.object?: TyTag;

// Box/unbox axiom for Tclass._System.object?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object?()) } 
  $IsBox(bx, Tclass._System.object?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object?()));

// object: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass._System.object?()) } 
  $Is($o, Tclass._System.object?()));

// object: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.object?(), $h) } 
  $IsAlloc($o, Tclass._System.object?(), $h)
     <==> $o == null || read($h, $o, alloc));

function implements$_System.object(Ty) : bool;

function Tclass._System.object() : Ty;

// Tclass._System.object Tag
axiom Tag(Tclass._System.object()) == Tagclass._System.object;

const unique Tagclass._System.object: TyTag;

// Box/unbox axiom for Tclass._System.object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object()) } 
  $IsBox(bx, Tclass._System.object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object()));

// _System.object: subset type $Is
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._System.object()) } 
  $Is(c#0, Tclass._System.object())
     <==> $Is(c#0, Tclass._System.object?()) && c#0 != null);

// _System.object: subset type $IsAlloc
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.object(), $h) } 
  $IsAlloc(c#0, Tclass._System.object(), $h)
     <==> $IsAlloc(c#0, Tclass._System.object?(), $h));

const unique class._System.array?: ClassName;

function Tclass._System.array?(Ty) : Ty;

// Tclass._System.array? Tag
axiom (forall #$arg: Ty :: 
  { Tclass._System.array?(#$arg) } 
  Tag(Tclass._System.array?(#$arg)) == Tagclass._System.array?);

const unique Tagclass._System.array?: TyTag;

// Tclass._System.array? injectivity 0
axiom (forall #$arg: Ty :: 
  { Tclass._System.array?(#$arg) } 
  Tclass._System.array?_0(Tclass._System.array?(#$arg)) == #$arg);

function Tclass._System.array?_0(Ty) : Ty;

// Box/unbox axiom for Tclass._System.array?
axiom (forall #$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array?(#$arg)) } 
  $IsBox(bx, Tclass._System.array?(#$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array?(#$arg)));

// array.: Type axiom
axiom (forall #$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(#$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(#$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
     ==> $IsBox(read($h, $o, IndexField($i0)), #$arg));

// array.: Allocation axiom
axiom (forall #$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(#$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(#$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
       && read($h, $o, alloc)
     ==> $IsAllocBox(read($h, $o, IndexField($i0)), #$arg, $h));

// array: Class $Is
axiom (forall #$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array?(#$arg)) } 
  $Is($o, Tclass._System.array?(#$arg))
     <==> $o == null || dtype($o) == Tclass._System.array?(#$arg));

// array: Class $IsAlloc
axiom (forall #$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array?(#$arg), $h) } 
  $IsAlloc($o, Tclass._System.array?(#$arg), $h)
     <==> $o == null || read($h, $o, alloc));

// array.Length: Type axiom
axiom (forall #$arg: Ty, $o: ref :: 
  { _System.array.Length($o), Tclass._System.array?(#$arg) } 
  $o != null && dtype($o) == Tclass._System.array?(#$arg)
     ==> $Is(_System.array.Length($o), TInt));

// array.Length: Allocation axiom
axiom (forall #$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array.Length($o), read($h, $o, alloc), Tclass._System.array?(#$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(#$arg)
       && read($h, $o, alloc)
     ==> $IsAlloc(_System.array.Length($o), TInt, $h));

function Tclass._System.array(Ty) : Ty;

// Tclass._System.array Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tag(Tclass._System.array(_System.array$arg)) == Tagclass._System.array);

const unique Tagclass._System.array: TyTag;

// Tclass._System.array injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tclass._System.array_0(Tclass._System.array(_System.array$arg))
     == _System.array$arg);

function Tclass._System.array_0(Ty) : Ty;

// Box/unbox axiom for Tclass._System.array
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array(_System.array$arg)));

// _System.array: subset type $Is
axiom (forall _System.array$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array(_System.array$arg)) } 
  $Is(c#0, Tclass._System.array(_System.array$arg))
     <==> $Is(c#0, Tclass._System.array?(_System.array$arg)) && c#0 != null);

// _System.array: subset type $IsAlloc
axiom (forall _System.array$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h));

function Tclass._System.___hFunc0(Ty) : Ty;

// Tclass._System.___hFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tag(Tclass._System.___hFunc0(#$R)) == Tagclass._System.___hFunc0);

const unique Tagclass._System.___hFunc0: TyTag;

// Tclass._System.___hFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tclass._System.___hFunc0_0(Tclass._System.___hFunc0(#$R)) == #$R);

function Tclass._System.___hFunc0_0(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc0(#$R)));

function Handle0([Heap]Box, [Heap]bool, [Heap]Set Box) : HandleType;

function Apply0(Ty, Heap, HandleType) : Box;

function Requires0(Ty, Heap, HandleType) : bool;

function Reads0(Ty, Heap, HandleType) : Set Box;

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set Box :: 
  { Apply0(t0, heap, Handle0(h, r, rd)) } 
  Apply0(t0, heap, Handle0(h, r, rd)) == h[heap]);

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set Box :: 
  { Requires0(t0, heap, Handle0(h, r, rd)) } 
  r[heap] ==> Requires0(t0, heap, Handle0(h, r, rd)));

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set Box, bx: Box :: 
  { Reads0(t0, heap, Handle0(h, r, rd))[bx] } 
  Reads0(t0, heap, Handle0(h, r, rd))[bx] == rd[heap][bx]);

function {:inline} Requires0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

function {:inline} Reads0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, h0, f)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, h1, f)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, h0, f)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, h1, f)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, h0, f)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads0(t0, h1, f)[$Box(o)] ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// empty-reads property for Reads0 
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Reads0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Reads0(t0, heap, f) } 
  $IsGoodHeap(heap) && $Is(f, Tclass._System.___hFunc0(t0))
     ==> (Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set Box)
       <==> Set#Equal(Reads0(t0, heap, f), Set#Empty(): Set Box)));

// empty-reads property for Requires0
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Requires0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Requires0(t0, heap, f) } 
  $IsGoodHeap(heap)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set Box)
     ==> Requires0(t0, $OneHeap, f) == Requires0(t0, heap, f));

axiom (forall f: HandleType, t0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
     <==> (forall h: Heap :: 
      { Apply0(t0, h, f) } 
      $IsGoodHeap(h) && Requires0(t0, h, f) ==> $IsBox(Apply0(t0, h, f), t0)));

axiom (forall f: HandleType, t0: Ty, u0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)), $Is(f, Tclass._System.___hFunc0(u0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t0) } { $IsBox(bx, u0) } 
        $IsBox(bx, t0) ==> $IsBox(bx, u0))
     ==> $Is(f, Tclass._System.___hFunc0(u0)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc0(t0), h)
       <==> Requires0(t0, h, f)
         ==> (forall r: ref :: 
          { Reads0(t0, h, f)[$Box(r)] } 
          r != null && Reads0(t0, h, f)[$Box(r)] ==> read(h, r, alloc))));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc0(t0), h)
     ==> 
    Requires0(t0, h, f)
     ==> $IsAllocBox(Apply0(t0, h, f), t0, h));

function Tclass._System.___hPartialFunc0(Ty) : Ty;

// Tclass._System.___hPartialFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tag(Tclass._System.___hPartialFunc0(#$R)) == Tagclass._System.___hPartialFunc0);

const unique Tagclass._System.___hPartialFunc0: TyTag;

// Tclass._System.___hPartialFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tclass._System.___hPartialFunc0_0(Tclass._System.___hPartialFunc0(#$R)) == #$R);

function Tclass._System.___hPartialFunc0_0(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hPartialFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc0(#$R)));

// _System._#PartialFunc0: subset type $Is
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hFunc0(#$R))
       && Set#Equal(Reads0(#$R, $OneHeap, f#0), Set#Empty(): Set Box));

// _System._#PartialFunc0: subset type $IsAlloc
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc0(#$R), $h));

function Tclass._System.___hTotalFunc0(Ty) : Ty;

// Tclass._System.___hTotalFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tag(Tclass._System.___hTotalFunc0(#$R)) == Tagclass._System.___hTotalFunc0);

const unique Tagclass._System.___hTotalFunc0: TyTag;

// Tclass._System.___hTotalFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tclass._System.___hTotalFunc0_0(Tclass._System.___hTotalFunc0(#$R)) == #$R);

function Tclass._System.___hTotalFunc0_0(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hTotalFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc0(#$R)));

// _System._#TotalFunc0: subset type $Is
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) && Requires0(#$R, $OneHeap, f#0));

// _System._#TotalFunc0: subset type $IsAlloc
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h));

function Tclass._System.___hFunc1(Ty, Ty) : Ty;

// Tclass._System.___hFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hFunc1(#$T0, #$R)) == Tagclass._System.___hFunc1);

const unique Tagclass._System.___hFunc1: TyTag;

// Tclass._System.___hFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_0(Tclass._System.___hFunc1(#$T0, #$R)) == #$T0);

function Tclass._System.___hFunc1_0(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_1(Tclass._System.___hFunc1(#$T0, #$R)) == #$R);

function Tclass._System.___hFunc1_1(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc1(#$T0, #$R)));

function Handle1([Heap,Box]Box, [Heap,Box]bool, [Heap,Box]Set Box) : HandleType;

function Apply1(Ty, Ty, Heap, HandleType, Box) : Box;

function Requires1(Ty, Ty, Heap, HandleType, Box) : bool;

function Reads1(Ty, Ty, Heap, HandleType, Box) : Set Box;

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set Box, 
    bx0: Box :: 
  { Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) == h[heap, bx0]);

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set Box, 
    bx0: Box :: 
  { Requires1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  r[heap, bx0] ==> Requires1(t0, t1, heap, Handle1(h, r, rd), bx0));

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set Box, 
    bx0: Box, 
    bx: Box :: 
  { Reads1(t0, t1, heap, Handle1(h, r, rd), bx0)[bx] } 
  Reads1(t0, t1, heap, Handle1(h, r, rd), bx0)[bx] == rd[heap, bx0][bx]);

function {:inline} Requires1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

function {:inline} Reads1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, h0, f, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, h1, f, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, h0, f, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, h1, f, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, h0, f, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads1(t0, t1, h1, f, bx0)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// empty-reads property for Reads1 
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Reads1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Reads1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap) && $IsBox(bx0, t0) && $Is(f, Tclass._System.___hFunc1(t0, t1))
     ==> (Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set Box)
       <==> Set#Equal(Reads1(t0, t1, heap, f, bx0), Set#Empty(): Set Box)));

// empty-reads property for Requires1
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Requires1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Requires1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set Box)
     ==> Requires1(t0, t1, $OneHeap, f, bx0) == Requires1(t0, t1, heap, f, bx0));

axiom (forall f: HandleType, t0: Ty, t1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
     <==> (forall h: Heap, bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsGoodHeap(h) && $IsBox(bx0, t0) && Requires1(t0, t1, h, f, bx0)
         ==> $IsBox(Apply1(t0, t1, h, f, bx0), t1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, u0: Ty, u1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)), $Is(f, Tclass._System.___hFunc1(u0, u1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t1) } { $IsBox(bx, u1) } 
        $IsBox(bx, t1) ==> $IsBox(bx, u1))
     ==> $Is(f, Tclass._System.___hFunc1(u0, u1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
       <==> (forall bx0: Box :: 
        { Apply1(t0, t1, h, f, bx0) } { Reads1(t0, t1, h, f, bx0) } 
        $IsBox(bx0, t0) && $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
           ==> (forall r: ref :: 
            { Reads1(t0, t1, h, f, bx0)[$Box(r)] } 
            r != null && Reads1(t0, t1, h, f, bx0)[$Box(r)] ==> read(h, r, alloc)))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
     ==> (forall bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
         ==> $IsAllocBox(Apply1(t0, t1, h, f, bx0), t1, h)));

function Tclass._System.___hPartialFunc1(Ty, Ty) : Ty;

// Tclass._System.___hPartialFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == Tagclass._System.___hPartialFunc1);

const unique Tagclass._System.___hPartialFunc1: TyTag;

// Tclass._System.___hPartialFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_0(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc1_0(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_1(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$R);

function Tclass._System.___hPartialFunc1_1(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hPartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc1(#$T0, #$R)));

// _System._#PartialFunc1: subset type $Is
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0)
           ==> Set#Equal(Reads1(#$T0, #$R, $OneHeap, f#0, x0#0), Set#Empty(): Set Box)));

// _System._#PartialFunc1: subset type $IsAlloc
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc1(#$T0, #$R), $h));

function Tclass._System.___hTotalFunc1(Ty, Ty) : Ty;

// Tclass._System.___hTotalFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hTotalFunc1(#$T0, #$R)) == Tagclass._System.___hTotalFunc1);

const unique Tagclass._System.___hTotalFunc1: TyTag;

// Tclass._System.___hTotalFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_0(Tclass._System.___hTotalFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc1_0(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_1(Tclass._System.___hTotalFunc1(#$T0, #$R)) == #$R);

function Tclass._System.___hTotalFunc1_1(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hTotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc1(#$T0, #$R)));

// _System._#TotalFunc1: subset type $Is
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0) ==> Requires1(#$T0, #$R, $OneHeap, f#0, x0#0)));

// _System._#TotalFunc1: subset type $IsAlloc
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h));

function Tclass._System.___hFunc2(Ty, Ty, Ty) : Ty;

// Tclass._System.___hFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == Tagclass._System.___hFunc2);

const unique Tagclass._System.___hFunc2: TyTag;

// Tclass._System.___hFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_0(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T0);

function Tclass._System.___hFunc2_0(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_1(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T1);

function Tclass._System.___hFunc2_1(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_2(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$R);

function Tclass._System.___hFunc2_2(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc2(#$T0, #$T1, #$R)));

function Handle2([Heap,Box,Box]Box, [Heap,Box,Box]bool, [Heap,Box,Box]Set Box) : HandleType;

function Apply2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Box;

function Requires2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : bool;

function Reads2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Set Box;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box :: 
  { Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) == h[heap, bx0, bx1]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box :: 
  { Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  r[heap, bx0, bx1] ==> Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx: Box :: 
  { Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1)[bx] } 
  Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1)[bx]
     == rd[heap, bx0, bx1][bx]);

function {:inline} Requires2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

function {:inline} Reads2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, h0, f, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, h1, f, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, h0, f, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, h1, f, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, h0, f, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads2(t0, t1, t2, h1, f, bx0, bx1)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// empty-reads property for Reads2 
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Reads2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     ==> (Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set Box)
       <==> Set#Equal(Reads2(t0, t1, t2, heap, f, bx0, bx1), Set#Empty(): Set Box)));

// empty-reads property for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Requires2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set Box)
     ==> Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1)
       == Requires2(t0, t1, t2, heap, f, bx0, bx1));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     <==> (forall h: Heap, bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, u0: Ty, u1: Ty, u2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)), $Is(f, Tclass._System.___hFunc2(u0, u1, u2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, t2) } { $IsBox(bx, u2) } 
        $IsBox(bx, t2) ==> $IsBox(bx, u2))
     ==> $Is(f, Tclass._System.___hFunc2(u0, u1, u2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
       <==> (forall bx0: Box, bx1: Box :: 
        { Apply2(t0, t1, t2, h, f, bx0, bx1) } { Reads2(t0, t1, t2, h, f, bx0, bx1) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && Requires2(t0, t1, t2, h, f, bx0, bx1)
           ==> (forall r: ref :: 
            { Reads2(t0, t1, t2, h, f, bx0, bx1)[$Box(r)] } 
            r != null && Reads2(t0, t1, t2, h, f, bx0, bx1)[$Box(r)] ==> read(h, r, alloc)))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
     ==> (forall bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsAllocBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2, h)));

function Tclass._System.___hPartialFunc2(Ty, Ty, Ty) : Ty;

// Tclass._System.___hPartialFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == Tagclass._System.___hPartialFunc2);

const unique Tagclass._System.___hPartialFunc2: TyTag;

// Tclass._System.___hPartialFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_0(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc2_0(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_1(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc2_1(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_2(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$R);

function Tclass._System.___hPartialFunc2_2(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hPartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)));

// _System._#PartialFunc2: subset type $Is
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Set#Equal(Reads2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0), Set#Empty(): Set Box)));

// _System._#PartialFunc2: subset type $IsAlloc
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hTotalFunc2(Ty, Ty, Ty) : Ty;

// Tclass._System.___hTotalFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == Tagclass._System.___hTotalFunc2);

const unique Tagclass._System.___hTotalFunc2: TyTag;

// Tclass._System.___hTotalFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_0(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc2_0(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_1(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc2_1(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_2(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$R);

function Tclass._System.___hTotalFunc2_2(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hTotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)));

// _System._#TotalFunc2: subset type $Is
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Requires2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0)));

// _System._#TotalFunc2: subset type $IsAlloc
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hFunc3(Ty, Ty, Ty, Ty) : Ty;

// Tclass._System.___hFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == Tagclass._System.___hFunc3);

const unique Tagclass._System.___hFunc3: TyTag;

// Tclass._System.___hFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_0(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hFunc3_0(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_1(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hFunc3_1(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_2(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hFunc3_2(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_3(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

function Tclass._System.___hFunc3_3(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R)));

function Handle3([Heap,Box,Box,Box]Box, [Heap,Box,Box,Box]bool, [Heap,Box,Box,Box]Set Box)
   : HandleType;

function Apply3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : Box;

function Requires3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : bool;

function Reads3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : Set Box;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Apply3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2) } 
  Apply3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2)
     == h[heap, bx0, bx1, bx2]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Requires3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2) } 
  r[heap, bx0, bx1, bx2]
     ==> Requires3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx: Box :: 
  { Reads3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2)[bx] } 
  Reads3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2)[bx]
     == rd[heap, bx0, bx1, bx2][bx]);

function {:inline} Requires3#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box)
   : bool
{
  true
}

function {:inline} Reads3#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box)
   : bool
{
  true
}

// frame axiom for Reads3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Reads3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Apply3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Apply3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// empty-reads property for Reads3 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), $IsGoodHeap(heap) } 
    { Reads3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
     ==> (Set#Equal(Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), Set#Empty(): Set Box)
       <==> Set#Equal(Reads3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2), Set#Empty(): Set Box)));

// empty-reads property for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Requires3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), $IsGoodHeap(heap) } 
    { Requires3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && Set#Equal(Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), Set#Empty(): Set Box)
     ==> Requires3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty :: 
  { $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3)) } 
  $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box :: 
      { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
         ==> $IsBox(Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), t3)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, u0: Ty, u1: Ty, u2: Ty, u3: Ty :: 
  { $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3)), $Is(f, Tclass._System.___hFunc3(u0, u1, u2, u3)) } 
  $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, t3) } { $IsBox(bx, u3) } 
        $IsBox(bx, t3) ==> $IsBox(bx, u3))
     ==> $Is(f, Tclass._System.___hFunc3(u0, u1, u2, u3)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box :: 
        { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
          { Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
           ==> (forall r: ref :: 
            { Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)[$Box(r)] } 
            r != null && Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)[$Box(r)]
               ==> read(h, r, alloc)))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box :: 
      { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
         ==> $IsAllocBox(Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), t3, h)));

function Tclass._System.___hPartialFunc3(Ty, Ty, Ty, Ty) : Ty;

// Tclass._System.___hPartialFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == Tagclass._System.___hPartialFunc3);

const unique Tagclass._System.___hPartialFunc3: TyTag;

// Tclass._System.___hPartialFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_0(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc3_0(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_1(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc3_1(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_2(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc3_2(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_3(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

function Tclass._System.___hPartialFunc3_3(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hPartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)));

// _System._#PartialFunc3: subset type $Is
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1) && $IsBox(x2#0, #$T2)
           ==> Set#Equal(Reads3(#$T0, #$T1, #$T2, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0), 
            Set#Empty(): Set Box)));

// _System._#PartialFunc3: subset type $IsAlloc
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R), $h));

function Tclass._System.___hTotalFunc3(Ty, Ty, Ty, Ty) : Ty;

// Tclass._System.___hTotalFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == Tagclass._System.___hTotalFunc3);

const unique Tagclass._System.___hTotalFunc3: TyTag;

// Tclass._System.___hTotalFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_0(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc3_0(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_1(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc3_1(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_2(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc3_2(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_3(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

function Tclass._System.___hTotalFunc3_3(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hTotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)));

// _System._#TotalFunc3: subset type $Is
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1) && $IsBox(x2#0, #$T2)
           ==> Requires3(#$T0, #$T1, #$T2, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0)));

// _System._#TotalFunc3: subset type $IsAlloc
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h));

function Tclass._System.___hFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

// Tclass._System.___hFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == Tagclass._System.___hFunc4);

const unique Tagclass._System.___hFunc4: TyTag;

// Tclass._System.___hFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_0(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hFunc4_0(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_1(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hFunc4_1(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_2(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hFunc4_2(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_3(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hFunc4_3(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_4(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

function Tclass._System.___hFunc4_4(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

function Handle4([Heap,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box]Set Box)
   : HandleType;

function Apply4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : Box;

function Requires4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : bool;

function Reads4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : Set Box;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Apply4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3) } 
  Apply4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3)
     == h[heap, bx0, bx1, bx2, bx3]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Requires4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3) } 
  r[heap, bx0, bx1, bx2, bx3]
     ==> Requires4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx: Box :: 
  { Reads4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3)[bx] } 
  Reads4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3)[bx]
     == rd[heap, bx0, bx1, bx2, bx3][bx]);

function {:inline} Requires4#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box)
   : bool
{
  true
}

function {:inline} Reads4#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box)
   : bool
{
  true
}

// frame axiom for Reads4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Reads4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Apply4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Apply4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall<a> o: ref, fld: Field a :: 
        o != null && Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// empty-reads property for Reads4 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), $IsGoodHeap(heap) } 
    { Reads4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
     ==> (Set#Equal(Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), 
        Set#Empty(): Set Box)
       <==> Set#Equal(Reads4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set Box)));

// empty-reads property for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Requires4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), $IsGoodHeap(heap) } 
    { Requires4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && Set#Equal(Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), 
        Set#Empty(): Set Box)
     ==> Requires4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty :: 
  { $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4)) } 
  $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
      { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
         ==> $IsBox(Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), t4)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty :: 
  { $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4)), $Is(f, Tclass._System.___hFunc4(u0, u1, u2, u3, u4)) } 
  $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, t4) } { $IsBox(bx, u4) } 
        $IsBox(bx, t4) ==> $IsBox(bx, u4))
     ==> $Is(f, Tclass._System.___hFunc4(u0, u1, u2, u3, u4)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
        { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
          { Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
           ==> (forall r: ref :: 
            { Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)[$Box(r)] } 
            r != null && Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)[$Box(r)]
               ==> read(h, r, alloc)))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
      { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
         ==> $IsAllocBox(Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), t4, h)));

function Tclass._System.___hPartialFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

// Tclass._System.___hPartialFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == Tagclass._System.___hPartialFunc4);

const unique Tagclass._System.___hPartialFunc4: TyTag;

// Tclass._System.___hPartialFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_0(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc4_0(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_1(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc4_1(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_2(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc4_2(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_3(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc4_3(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_4(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

function Tclass._System.___hPartialFunc4_4(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hPartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

// _System._#PartialFunc4: subset type $Is
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
           ==> Set#Equal(Reads4(#$T0, #$T1, #$T2, #$T3, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0), 
            Set#Empty(): Set Box)));

// _System._#PartialFunc4: subset type $IsAlloc
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h));

function Tclass._System.___hTotalFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

// Tclass._System.___hTotalFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == Tagclass._System.___hTotalFunc4);

const unique Tagclass._System.___hTotalFunc4: TyTag;

// Tclass._System.___hTotalFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_0(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc4_0(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_1(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc4_1(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_2(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc4_2(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_3(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc4_3(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_4(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

function Tclass._System.___hTotalFunc4_4(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hTotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

// _System._#TotalFunc4: subset type $Is
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
           ==> Requires4(#$T0, #$T1, #$T2, #$T3, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0)));

// _System._#TotalFunc4: subset type $IsAlloc
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h));

function Tclass._System.___hFunc5(Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

// Tclass._System.___hFunc5 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tag(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == Tagclass._System.___hFunc5);

const unique Tagclass._System.___hFunc5: TyTag;

// Tclass._System.___hFunc5 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_0(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T0);

function Tclass._System.___hFunc5_0(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_1(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T1);

function Tclass._System.___hFunc5_1(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_2(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T2);

function Tclass._System.___hFunc5_2(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_3(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T3);

function Tclass._System.___hFunc5_3(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_4(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T4);

function Tclass._System.___hFunc5_4(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_5(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$R);

function Tclass._System.___hFunc5_5(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)));

function Handle5([Heap,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box]Set Box)
   : HandleType;

function Apply5(Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box) : Box;

function Requires5(Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box) : bool;

function Reads5(Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box) : Set Box;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { Apply5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4) } 
  Apply5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4)
     == h[heap, bx0, bx1, bx2, bx3, bx4]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { Requires5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4) } 
  r[heap, bx0, bx1, bx2, bx3, bx4]
     ==> Requires5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box]Set Box, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx: Box :: 
  { Reads5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4)[bx] } 
  Reads5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4)[bx]
     == rd[heap, bx0, bx1, bx2, bx3, bx4][bx]);

function {:inline} Requires5#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box)
   : bool
{
  true
}

function {:inline} Reads5#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box)
   : bool
{
  true
}

// frame axiom for Reads5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Reads5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Requires5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Requires5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Requires5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Requires5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Requires5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Requires5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Apply5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Apply5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Apply5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Apply5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Apply5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall<a> o: ref, fld: Field a :: 
        o != null
             && Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4)[$Box(o)]
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Apply5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// empty-reads property for Reads5 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { Reads5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4), $IsGoodHeap(heap) } 
    { Reads5(t0, t1, t2, t3, t4, t5, heap, f, bx0, bx1, bx2, bx3, bx4) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
     ==> (Set#Equal(Reads5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4), 
        Set#Empty(): Set Box)
       <==> Set#Equal(Reads5(t0, t1, t2, t3, t4, t5, heap, f, bx0, bx1, bx2, bx3, bx4), 
        Set#Empty(): Set Box)));

// empty-reads property for Requires5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { Requires5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4), $IsGoodHeap(heap) } 
    { Requires5(t0, t1, t2, t3, t4, t5, heap, f, bx0, bx1, bx2, bx3, bx4) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && Set#Equal(Reads5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4), 
        Set#Empty(): Set Box)
     ==> Requires5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4)
       == Requires5(t0, t1, t2, t3, t4, t5, heap, f, bx0, bx1, bx2, bx3, bx4));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty :: 
  { $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5)) } 
  $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box :: 
      { Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && $IsBox(bx4, t4)
           && Requires5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4)
         ==> $IsBox(Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4), t5)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty, 
    u5: Ty :: 
  { $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5)), $Is(f, Tclass._System.___hFunc5(u0, u1, u2, u3, u4, u5)) } 
  $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u4) } { $IsBox(bx, t4) } 
        $IsBox(bx, u4) ==> $IsBox(bx, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, t5) } { $IsBox(bx, u5) } 
        $IsBox(bx, t5) ==> $IsBox(bx, u5))
     ==> $Is(f, Tclass._System.___hFunc5(u0, u1, u2, u3, u4, u5)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box :: 
        { Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4) } 
          { Reads5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && 
            $IsBox(bx4, t4)
             && $IsAllocBox(bx4, t4, h)
             && Requires5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4)
           ==> (forall r: ref :: 
            { Reads5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4)[$Box(r)] } 
            r != null
                 && Reads5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4)[$Box(r)]
               ==> read(h, r, alloc)))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5), h) } 
  $IsGoodHeap(h)
       && $IsAlloc(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box :: 
      { Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && $IsAllocBox(bx4, t4, h)
           && Requires5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4)
         ==> $IsAllocBox(Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4), t5, h)));

function Tclass._System.___hPartialFunc5(Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

// Tclass._System.___hPartialFunc5 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tag(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == Tagclass._System.___hPartialFunc5);

const unique Tagclass._System.___hPartialFunc5: TyTag;

// Tclass._System.___hPartialFunc5 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_0(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc5_0(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_1(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc5_1(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_2(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc5_2(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_3(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc5_3(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_4(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T4);

function Tclass._System.___hPartialFunc5_4(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_5(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$R);

function Tclass._System.___hPartialFunc5_5(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hPartialFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)));

// _System._#PartialFunc5: subset type $Is
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box, x4#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
           ==> Set#Equal(Reads5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0, x4#0), 
            Set#Empty(): Set Box)));

// _System._#PartialFunc5: subset type $IsAlloc
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h));

function Tclass._System.___hTotalFunc5(Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

// Tclass._System.___hTotalFunc5 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tag(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == Tagclass._System.___hTotalFunc5);

const unique Tagclass._System.___hTotalFunc5: TyTag;

// Tclass._System.___hTotalFunc5 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_0(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc5_0(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_1(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc5_1(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_2(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc5_2(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_3(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc5_3(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_4(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T4);

function Tclass._System.___hTotalFunc5_4(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_5(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$R);

function Tclass._System.___hTotalFunc5_5(Ty) : Ty;

// Box/unbox axiom for Tclass._System.___hTotalFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)));

// _System._#TotalFunc5: subset type $Is
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box, x4#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
           ==> Requires5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0, x4#0)));

// _System._#TotalFunc5: subset type $IsAlloc
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h));

const unique class._System.__tuple_h0: ClassName;

// Constructor function declaration
function #_System._tuple#0._#Make0() : DatatypeType;

const unique ##_System._tuple#0._#Make0: DtCtorId;

// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;

function _System.__tuple_h0.___hMake0_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.__tuple_h0.___hMake0_q(d) } 
  _System.__tuple_h0.___hMake0_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#0._#Make0);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.__tuple_h0.___hMake0_q(d) } 
  _System.__tuple_h0.___hMake0_q(d) ==> d == #_System._tuple#0._#Make0());

function Tclass._System.__tuple_h0() : Ty;

// Tclass._System.__tuple_h0 Tag
axiom Tag(Tclass._System.__tuple_h0()) == Tagclass._System.__tuple_h0;

const unique Tagclass._System.__tuple_h0: TyTag;

// Box/unbox axiom for Tclass._System.__tuple_h0
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.__tuple_h0()) } 
  $IsBox(bx, Tclass._System.__tuple_h0())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._System.__tuple_h0()));

// Constructor $Is
axiom $Is(#_System._tuple#0._#Make0(), Tclass._System.__tuple_h0());

// Constructor $IsAlloc
axiom (forall $h: Heap :: 
  { $IsAlloc(#_System._tuple#0._#Make0(), Tclass._System.__tuple_h0(), $h) } 
  $IsGoodHeap($h)
     ==> $IsAlloc(#_System._tuple#0._#Make0(), Tclass._System.__tuple_h0(), $h));

// Constructor literal
axiom #_System._tuple#0._#Make0() == Lit(#_System._tuple#0._#Make0());

// One-depth case-split function
function $IsA#_System.__tuple_h0(DatatypeType) : bool;

// One-depth case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.__tuple_h0(d) } 
  $IsA#_System.__tuple_h0(d) ==> _System.__tuple_h0.___hMake0_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _System.__tuple_h0.___hMake0_q(d), $Is(d, Tclass._System.__tuple_h0()) } 
  $Is(d, Tclass._System.__tuple_h0()) ==> _System.__tuple_h0.___hMake0_q(d));

const unique class._System.__tuple_h2: ClassName;

// Constructor function declaration
function #_System._tuple#2._#Make2(Box, Box) : DatatypeType;

const unique ##_System._tuple#2._#Make2: DtCtorId;

// Constructor identifier
axiom (forall a#5#0#0: Box, a#5#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#5#0#0, a#5#1#0) } 
  DatatypeCtorId(#_System._tuple#2._#Make2(a#5#0#0, a#5#1#0))
     == ##_System._tuple#2._#Make2);

function _System.__tuple_h2.___hMake2_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.__tuple_h2.___hMake2_q(d) } 
  _System.__tuple_h2.___hMake2_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#2._#Make2);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.__tuple_h2.___hMake2_q(d) } 
  _System.__tuple_h2.___hMake2_q(d)
     ==> (exists a#6#0#0: Box, a#6#1#0: Box :: 
      d == #_System._tuple#2._#Make2(a#6#0#0, a#6#1#0)));

function Tclass._System.__tuple_h2(Ty, Ty) : Ty;

// Tclass._System.__tuple_h2 Tag
axiom (forall #$T0: Ty, #$T1: Ty :: 
  { Tclass._System.__tuple_h2(#$T0, #$T1) } 
  Tag(Tclass._System.__tuple_h2(#$T0, #$T1)) == Tagclass._System.__tuple_h2);

const unique Tagclass._System.__tuple_h2: TyTag;

// Tclass._System.__tuple_h2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty :: 
  { Tclass._System.__tuple_h2(#$T0, #$T1) } 
  Tclass._System.__tuple_h2_0(Tclass._System.__tuple_h2(#$T0, #$T1)) == #$T0);

function Tclass._System.__tuple_h2_0(Ty) : Ty;

// Tclass._System.__tuple_h2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty :: 
  { Tclass._System.__tuple_h2(#$T0, #$T1) } 
  Tclass._System.__tuple_h2_1(Tclass._System.__tuple_h2(#$T0, #$T1)) == #$T1);

function Tclass._System.__tuple_h2_1(Ty) : Ty;

// Box/unbox axiom for Tclass._System.__tuple_h2
axiom (forall #$T0: Ty, #$T1: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.__tuple_h2(#$T0, #$T1)) } 
  $IsBox(bx, Tclass._System.__tuple_h2(#$T0, #$T1))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._System.__tuple_h2(#$T0, #$T1)));

// Constructor $Is
axiom (forall #$T0: Ty, #$T1: Ty, a#7#0#0: Box, a#7#1#0: Box :: 
  { $Is(#_System._tuple#2._#Make2(a#7#0#0, a#7#1#0), 
      Tclass._System.__tuple_h2(#$T0, #$T1)) } 
  $Is(#_System._tuple#2._#Make2(a#7#0#0, a#7#1#0), 
      Tclass._System.__tuple_h2(#$T0, #$T1))
     <==> $IsBox(a#7#0#0, #$T0) && $IsBox(a#7#1#0, #$T1));

// Constructor $IsAlloc
axiom (forall #$T0: Ty, #$T1: Ty, a#8#0#0: Box, a#8#1#0: Box, $h: Heap :: 
  { $IsAlloc(#_System._tuple#2._#Make2(a#8#0#0, a#8#1#0), 
      Tclass._System.__tuple_h2(#$T0, #$T1), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#2._#Make2(a#8#0#0, a#8#1#0), 
        Tclass._System.__tuple_h2(#$T0, #$T1), 
        $h)
       <==> $IsAllocBox(a#8#0#0, #$T0, $h) && $IsAllocBox(a#8#1#0, #$T1, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, #$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.__tuple_h2._0(d), #$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.__tuple_h2.___hMake2_q(d)
       && (exists #$T1: Ty :: 
        { $IsAlloc(d, Tclass._System.__tuple_h2(#$T0, #$T1), $h) } 
        $IsAlloc(d, Tclass._System.__tuple_h2(#$T0, #$T1), $h))
     ==> $IsAllocBox(_System.__tuple_h2._0(d), #$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, #$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.__tuple_h2._1(d), #$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.__tuple_h2.___hMake2_q(d)
       && (exists #$T0: Ty :: 
        { $IsAlloc(d, Tclass._System.__tuple_h2(#$T0, #$T1), $h) } 
        $IsAlloc(d, Tclass._System.__tuple_h2(#$T0, #$T1), $h))
     ==> $IsAllocBox(_System.__tuple_h2._1(d), #$T1, $h));

// Constructor literal
axiom (forall a#9#0#0: Box, a#9#1#0: Box :: 
  { #_System._tuple#2._#Make2(Lit(a#9#0#0), Lit(a#9#1#0)) } 
  #_System._tuple#2._#Make2(Lit(a#9#0#0), Lit(a#9#1#0))
     == Lit(#_System._tuple#2._#Make2(a#9#0#0, a#9#1#0)));

// Constructor injectivity
axiom (forall a#10#0#0: Box, a#10#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#10#0#0, a#10#1#0) } 
  _System.__tuple_h2._0(#_System._tuple#2._#Make2(a#10#0#0, a#10#1#0)) == a#10#0#0);

// Inductive rank
axiom (forall a#11#0#0: Box, a#11#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#11#0#0, a#11#1#0) } 
  BoxRank(a#11#0#0) < DtRank(#_System._tuple#2._#Make2(a#11#0#0, a#11#1#0)));

// Constructor injectivity
axiom (forall a#12#0#0: Box, a#12#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#12#0#0, a#12#1#0) } 
  _System.__tuple_h2._1(#_System._tuple#2._#Make2(a#12#0#0, a#12#1#0)) == a#12#1#0);

// Inductive rank
axiom (forall a#13#0#0: Box, a#13#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#13#0#0, a#13#1#0) } 
  BoxRank(a#13#1#0) < DtRank(#_System._tuple#2._#Make2(a#13#0#0, a#13#1#0)));

// One-depth case-split function
function $IsA#_System.__tuple_h2(DatatypeType) : bool;

// One-depth case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.__tuple_h2(d) } 
  $IsA#_System.__tuple_h2(d) ==> _System.__tuple_h2.___hMake2_q(d));

// Questionmark data type disjunctivity
axiom (forall #$T0: Ty, #$T1: Ty, d: DatatypeType :: 
  { _System.__tuple_h2.___hMake2_q(d), $Is(d, Tclass._System.__tuple_h2(#$T0, #$T1)) } 
  $Is(d, Tclass._System.__tuple_h2(#$T0, #$T1))
     ==> _System.__tuple_h2.___hMake2_q(d));

const BaseFuel_MissingLibrary._default.EmptyImap: LayerType;

const StartFuel_MissingLibrary._default.EmptyImap: LayerType;

const StartFuelAssert_MissingLibrary._default.EmptyImap: LayerType;

const BaseFuel_MissingLibrary._default.EmptyMap: LayerType;

const StartFuel_MissingLibrary._default.EmptyMap: LayerType;

const StartFuelAssert_MissingLibrary._default.EmptyMap: LayerType;

const BaseFuel_MissingLibrary._default.MapRemove: LayerType;

const StartFuel_MissingLibrary._default.MapRemove: LayerType;

const StartFuelAssert_MissingLibrary._default.MapRemove: LayerType;

const BaseFuel_MissingLibrary._default.SingletonImap: LayerType;

const StartFuel_MissingLibrary._default.SingletonImap: LayerType;

const StartFuelAssert_MissingLibrary._default.SingletonImap: LayerType;

const BaseFuel_MissingLibrary._default.MapUnionPreferB: LayerType;

const StartFuel_MissingLibrary._default.MapUnionPreferB: LayerType;

const StartFuelAssert_MissingLibrary._default.MapUnionPreferB: LayerType;

const BaseFuel_MissingLibrary._default.ImapUnionPreferB: LayerType;

const StartFuel_MissingLibrary._default.ImapUnionPreferB: LayerType;

const StartFuelAssert_MissingLibrary._default.ImapUnionPreferB: LayerType;

const BaseFuel_MissingLibrary._default.MemsetSeq: LayerType;

const StartFuel_MissingLibrary._default.MemsetSeq: LayerType;

const StartFuelAssert_MissingLibrary._default.MemsetSeq: LayerType;

const BaseFuel_raft._default.MapAll: LayerType;

const StartFuel_raft._default.MapAll: LayerType;

const StartFuelAssert_raft._default.MapAll: LayerType;

const BaseFuel_raft._default.Agree: LayerType;

const StartFuel_raft._default.Agree: LayerType;

const StartFuelAssert_raft._default.Agree: LayerType;

const BaseFuel_raft._default.AgreeIndexesDef: LayerType;

const StartFuel_raft._default.AgreeIndexesDef: LayerType;

const StartFuelAssert_raft._default.AgreeIndexesDef: LayerType;

const BaseFuel_raft._default.SeqMax: LayerType;

const StartFuel_raft._default.SeqMax: LayerType;

const StartFuelAssert_raft._default.SeqMax: LayerType;

const BaseFuel_raft._default.EveryLogNow: LayerType;

const StartFuel_raft._default.EveryLogNow: LayerType;

const StartFuelAssert_raft._default.EveryLogNow: LayerType;

const BaseFuel_raft._default.Next: LayerType;

const StartFuel_raft._default.Next: LayerType;

const StartFuelAssert_raft._default.Next: LayerType;

const unique class._5_raftInvariants.__default: ClassName;

function Tclass._5_raftInvariants.__default() : Ty;

// Tclass._5_raftInvariants.__default Tag
axiom Tag(Tclass._5_raftInvariants.__default())
   == Tagclass._5_raftInvariants.__default;

const unique Tagclass._5_raftInvariants.__default: TyTag;

// Box/unbox axiom for Tclass._5_raftInvariants.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._5_raftInvariants.__default()) } 
  $IsBox(bx, Tclass._5_raftInvariants.__default())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._5_raftInvariants.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass._5_raftInvariants.__default()) } 
  $Is($o, Tclass._5_raftInvariants.__default())
     <==> $o == null || dtype($o) == Tclass._5_raftInvariants.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._5_raftInvariants.__default(), $h) } 
  $IsAlloc($o, Tclass._5_raftInvariants.__default(), $h)
     <==> $o == null || read($h, $o, alloc));

// function declaration for raftInvariants._default.ElectionSafety
function _5_raftInvariants.__default.ElectionSafety(v#0: DatatypeType) : bool;

function _5_raftInvariants.__default.ElectionSafety#canCall(v#0: DatatypeType) : bool;

function Tclass._2_raft.Variables() : Ty;

// Tclass._2_raft.Variables Tag
axiom Tag(Tclass._2_raft.Variables()) == Tagclass._2_raft.Variables;

const unique Tagclass._2_raft.Variables: TyTag;

// Box/unbox axiom for Tclass._2_raft.Variables
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._2_raft.Variables()) } 
  $IsBox(bx, Tclass._2_raft.Variables())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._2_raft.Variables()));

// consequence axiom for _5_raftInvariants.__default.ElectionSafety
axiom 1 <= $FunctionContextHeight
   ==> (forall v#0: DatatypeType :: 
    { _5_raftInvariants.__default.ElectionSafety(v#0) } 
    _5_raftInvariants.__default.ElectionSafety#canCall(v#0)
         || (1 != $FunctionContextHeight && $Is(v#0, Tclass._2_raft.Variables()))
       ==> true);

function _5_raftInvariants.__default.ElectionSafety#requires(DatatypeType) : bool;

// #requires axiom for _5_raftInvariants.__default.ElectionSafety
axiom (forall v#0: DatatypeType :: 
  { _5_raftInvariants.__default.ElectionSafety#requires(v#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
     ==> _5_raftInvariants.__default.ElectionSafety#requires(v#0) == true);

function Tclass._2_raft.ElectionRecord() : Ty;

// Tclass._2_raft.ElectionRecord Tag
axiom Tag(Tclass._2_raft.ElectionRecord()) == Tagclass._2_raft.ElectionRecord;

const unique Tagclass._2_raft.ElectionRecord: TyTag;

// Box/unbox axiom for Tclass._2_raft.ElectionRecord
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._2_raft.ElectionRecord()) } 
  $IsBox(bx, Tclass._2_raft.ElectionRecord())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._2_raft.ElectionRecord()));

// definition axiom for _5_raftInvariants.__default.ElectionSafety(revealed)
axiom 1 <= $FunctionContextHeight
   ==> (forall v#0: DatatypeType :: 
    { _5_raftInvariants.__default.ElectionSafety(v#0) } 
    _5_raftInvariants.__default.ElectionSafety#canCall(v#0)
         || (1 != $FunctionContextHeight && $Is(v#0, Tclass._2_raft.Variables()))
       ==> (forall e1#0: DatatypeType, e2#0: DatatypeType :: 
          { _2_raft.ElectionRecord.leader(e2#0), _2_raft.ElectionRecord.leader(e1#0) } 
            { _2_raft.ElectionRecord.leader(e2#0), _2_raft.ElectionRecord.term(e1#0) } 
            { _2_raft.ElectionRecord.leader(e2#0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#0)] } 
            { _2_raft.ElectionRecord.leader(e1#0), _2_raft.ElectionRecord.term(e2#0) } 
            { _2_raft.ElectionRecord.leader(e1#0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#0)] } 
            { _2_raft.ElectionRecord.term(e2#0), _2_raft.ElectionRecord.term(e1#0) } 
            { _2_raft.ElectionRecord.term(e2#0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#0)] } 
            { _2_raft.ElectionRecord.term(e1#0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#0)] } 
            { _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#0)], _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#0)] } 
          $Is(e1#0, Tclass._2_raft.ElectionRecord())
               && $Is(e2#0, Tclass._2_raft.ElectionRecord())
             ==> _2_raft.Variables.Variables_q(v#0)
               && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
               && (_2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#0)]
                 ==> _2_raft.Variables.Variables_q(v#0)
                   && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0)))
               && (_2_raft.Variables.Variables_q(v#0)
                   && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
                   && _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#0)]
                 ==> _2_raft.ElectionRecord.ElectionRecord_q(e1#0)
                   && _2_raft.ElectionRecord.ElectionRecord_q(e2#0))
               && (_2_raft.ElectionRecord.ElectionRecord_q(e1#0)
                   && _2_raft.ElectionRecord.ElectionRecord_q(e2#0)
                   && _2_raft.ElectionRecord.term(e1#0) == _2_raft.ElectionRecord.term(e2#0)
                 ==> _2_raft.ElectionRecord.ElectionRecord_q(e1#0)
                   && _2_raft.ElectionRecord.ElectionRecord_q(e2#0)))
         && _5_raftInvariants.__default.ElectionSafety(v#0)
           == (forall e1#0: DatatypeType, e2#0: DatatypeType :: 
            { _2_raft.ElectionRecord.leader(e2#0), _2_raft.ElectionRecord.leader(e1#0) } 
              { _2_raft.ElectionRecord.leader(e2#0), _2_raft.ElectionRecord.term(e1#0) } 
              { _2_raft.ElectionRecord.leader(e2#0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#0)] } 
              { _2_raft.ElectionRecord.leader(e1#0), _2_raft.ElectionRecord.term(e2#0) } 
              { _2_raft.ElectionRecord.leader(e1#0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#0)] } 
              { _2_raft.ElectionRecord.term(e2#0), _2_raft.ElectionRecord.term(e1#0) } 
              { _2_raft.ElectionRecord.term(e2#0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#0)] } 
              { _2_raft.ElectionRecord.term(e1#0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#0)] } 
              { _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#0)], _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#0)] } 
            $Is(e1#0, Tclass._2_raft.ElectionRecord())
                 && $Is(e2#0, Tclass._2_raft.ElectionRecord())
               ==> 
              _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#0)]
                 && _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#0)]
                 && _2_raft.ElectionRecord.term(e1#0) == _2_raft.ElectionRecord.term(e2#0)
               ==> _2_raft.ElectionRecord.leader(e1#0) == _2_raft.ElectionRecord.leader(e2#0)));

// definition axiom for _5_raftInvariants.__default.ElectionSafety for all literals(revealed)
axiom 1 <= $FunctionContextHeight
   ==> (forall v#0: DatatypeType :: 
    {:weight 3} { _5_raftInvariants.__default.ElectionSafety(Lit(v#0)) } 
    _5_raftInvariants.__default.ElectionSafety#canCall(Lit(v#0))
         || (1 != $FunctionContextHeight && $Is(v#0, Tclass._2_raft.Variables()))
       ==> (forall e1#1: DatatypeType, e2#1: DatatypeType :: 
          { _2_raft.ElectionRecord.leader(e2#1), _2_raft.ElectionRecord.leader(e1#1) } 
            { _2_raft.ElectionRecord.leader(e2#1), _2_raft.ElectionRecord.term(e1#1) } 
            { _2_raft.ElectionRecord.leader(e2#1), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#1)] } 
            { _2_raft.ElectionRecord.leader(e1#1), _2_raft.ElectionRecord.term(e2#1) } 
            { _2_raft.ElectionRecord.leader(e1#1), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#1)] } 
            { _2_raft.ElectionRecord.term(e2#1), _2_raft.ElectionRecord.term(e1#1) } 
            { _2_raft.ElectionRecord.term(e2#1), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#1)] } 
            { _2_raft.ElectionRecord.term(e1#1), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#1)] } 
            { _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#1)], _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#1)] } 
          $Is(e1#1, Tclass._2_raft.ElectionRecord())
               && $Is(e2#1, Tclass._2_raft.ElectionRecord())
             ==> _2_raft.Variables.Variables_q(Lit(v#0))
               && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
               && (Lit(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))[$Box(e1#1)]
                 ==> _2_raft.Variables.Variables_q(Lit(v#0))
                   && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0)))))
               && (_2_raft.Variables.Variables_q(Lit(v#0))
                   && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
                   && Lit(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))[$Box(e2#1)]
                 ==> _2_raft.ElectionRecord.ElectionRecord_q(e1#1)
                   && _2_raft.ElectionRecord.ElectionRecord_q(e2#1))
               && (_2_raft.ElectionRecord.ElectionRecord_q(e1#1)
                   && _2_raft.ElectionRecord.ElectionRecord_q(e2#1)
                   && _2_raft.ElectionRecord.term(e1#1) == _2_raft.ElectionRecord.term(e2#1)
                 ==> _2_raft.ElectionRecord.ElectionRecord_q(e1#1)
                   && _2_raft.ElectionRecord.ElectionRecord_q(e2#1)))
         && _5_raftInvariants.__default.ElectionSafety(Lit(v#0))
           == (forall e1#1: DatatypeType, e2#1: DatatypeType :: 
            { _2_raft.ElectionRecord.leader(e2#1), _2_raft.ElectionRecord.leader(e1#1) } 
              { _2_raft.ElectionRecord.leader(e2#1), _2_raft.ElectionRecord.term(e1#1) } 
              { _2_raft.ElectionRecord.leader(e2#1), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#1)] } 
              { _2_raft.ElectionRecord.leader(e1#1), _2_raft.ElectionRecord.term(e2#1) } 
              { _2_raft.ElectionRecord.leader(e1#1), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#1)] } 
              { _2_raft.ElectionRecord.term(e2#1), _2_raft.ElectionRecord.term(e1#1) } 
              { _2_raft.ElectionRecord.term(e2#1), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#1)] } 
              { _2_raft.ElectionRecord.term(e1#1), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#1)] } 
              { _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#1)], _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#1)] } 
            $Is(e1#1, Tclass._2_raft.ElectionRecord())
                 && $Is(e2#1, Tclass._2_raft.ElectionRecord())
               ==> 
              Lit(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))[$Box(e1#1)]
                 && Lit(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))[$Box(e2#1)]
                 && _2_raft.ElectionRecord.term(e1#1) == _2_raft.ElectionRecord.term(e2#1)
               ==> _2_raft.ElectionRecord.leader(e1#1) == _2_raft.ElectionRecord.leader(e2#1)));

procedure CheckWellformed$$_5_raftInvariants.__default.ElectionSafety(v#0: DatatypeType where $Is(v#0, Tclass._2_raft.Variables()));
  free requires 1 == $FunctionContextHeight;
  modifies $Heap, $Tick;



procedure CheckWellformed$$_5_raftInvariants.__default.ElectionSafetyInit(v#0: DatatypeType
       where $Is(v#0, Tclass._2_raft.Variables())
         && $IsAlloc(v#0, Tclass._2_raft.Variables(), $Heap)
         && $IsA#_2_raft.Variables(v#0));
  free requires 2 == $FunctionContextHeight;
  modifies $Heap, $Tick;



procedure Call$$_5_raftInvariants.__default.ElectionSafetyInit(v#0: DatatypeType
       where $Is(v#0, Tclass._2_raft.Variables())
         && $IsAlloc(v#0, Tclass._2_raft.Variables(), $Heap)
         && $IsA#_2_raft.Variables(v#0));
  // user-defined preconditions
  requires _2_raft.__default.Init#canCall(v#0)
     ==> _2_raft.__default.Init(v#0)
       || (_2_raft.__default.InitGlobalVars#canCall(_2_raft.Variables.global(v#0))
         ==> _2_raft.__default.InitGlobalVars(_2_raft.Variables.global(v#0)) || Lit(true));
  requires _2_raft.__default.Init#canCall(v#0)
     ==> _2_raft.__default.Init(v#0)
       || (_2_raft.__default.InitGlobalVars#canCall(_2_raft.Variables.global(v#0))
         ==> _2_raft.__default.InitGlobalVars(_2_raft.Variables.global(v#0))
           || MultiSet#Equal(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
            MultiSet#Empty(): MultiSet Box));
  requires _2_raft.__default.Init#canCall(v#0)
     ==> _2_raft.__default.Init(v#0)
       || (_2_raft.__default.InitHistoryVars#canCall(v#0)
         ==> _2_raft.__default.InitHistoryVars(v#0)
           || Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)), 
            Set#Empty(): Set Box));
  requires _2_raft.__default.Init#canCall(v#0)
     ==> _2_raft.__default.Init(v#0)
       || (_2_raft.__default.InitHistoryVars#canCall(v#0)
         ==> _2_raft.__default.InitHistoryVars(v#0)
           || Set#Equal(_2_raft.GlobalVars.allLogs(_2_raft.Variables.global(v#0)), Set#Empty(): Set Box));
  requires _2_raft.__default.Init#canCall(v#0)
     ==> _2_raft.__default.Init(v#0)
       || (_2_raft.__default.InitHistoryVars#canCall(v#0)
         ==> _2_raft.__default.InitHistoryVars(v#0)
           || (_2_raft.__default.WFVars#canCall(v#0)
             ==> _2_raft.__default.WFVars(v#0)
               || Set#Equal(Map#Domain(_2_raft.Variables.host(v#0)), _2_raft.__default.ServerIDs())));
  requires _2_raft.__default.Init#canCall(v#0)
     ==> _2_raft.__default.Init(v#0)
       || (_2_raft.__default.InitHistoryVars#canCall(v#0)
         ==> _2_raft.__default.InitHistoryVars(v#0)
           || (_2_raft.__default.WFVars#canCall(v#0)
             ==> _2_raft.__default.WFVars(v#0)
               || (forall s#0: Box :: 
                { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#0]): DatatypeType } 
                  { Map#Domain(_2_raft.Variables.host(v#0))[s#0] } 
                $IsBox(s#0, #$ServerID)
                   ==> 
                  Map#Domain(_2_raft.Variables.host(v#0))[s#0]
                   ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#0]): DatatypeType)))));
  requires _2_raft.__default.Init#canCall(v#0)
     ==> _2_raft.__default.Init(v#0)
       || (_2_raft.__default.InitHistoryVars#canCall(v#0)
         ==> _2_raft.__default.InitHistoryVars(v#0)
           || (forall s#1: Box :: 
            { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#1]): DatatypeType } 
              { _2_raft.__default.ServerIDs()[s#1] } 
            $IsBox(s#1, #$ServerID)
               ==> 
              _2_raft.__default.ServerIDs()[s#1]
               ==> Map#Equal(_2_raft.CandidateVars.voterLog(_2_raft.HostVars.candidate($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#1]): DatatypeType)), 
                _2_raft.__default.EmptyVoterLog())));
  requires _2_raft.__default.Init#canCall(v#0)
     ==> _2_raft.__default.Init(v#0)
       || (forall s#2: Box :: 
        { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#2]): DatatypeType } 
          { _2_raft.__default.ServerIDs()[s#2] } 
        $IsBox(s#2, #$ServerID)
           ==> 
          _2_raft.__default.ServerIDs()[s#2]
           ==> _2_raft.__default.InitHostVars($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#2]): DatatypeType));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _5_raftInvariants.__default.ElectionSafety#canCall(v#0);
  free ensures _5_raftInvariants.__default.ElectionSafety#canCall(v#0)
     && 
    _5_raftInvariants.__default.ElectionSafety(v#0)
     && (forall e1#0: DatatypeType, e2#0: DatatypeType :: 
      { _2_raft.ElectionRecord.leader(e2#0), _2_raft.ElectionRecord.leader(e1#0) } 
        { _2_raft.ElectionRecord.leader(e2#0), _2_raft.ElectionRecord.term(e1#0) } 
        { _2_raft.ElectionRecord.leader(e2#0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#0)] } 
        { _2_raft.ElectionRecord.leader(e1#0), _2_raft.ElectionRecord.term(e2#0) } 
        { _2_raft.ElectionRecord.leader(e1#0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#0)] } 
        { _2_raft.ElectionRecord.term(e2#0), _2_raft.ElectionRecord.term(e1#0) } 
        { _2_raft.ElectionRecord.term(e2#0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#0)] } 
        { _2_raft.ElectionRecord.term(e1#0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#0)] } 
        { _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#0)], _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#0)] } 
      $Is(e1#0, Tclass._2_raft.ElectionRecord())
           && $Is(e2#0, Tclass._2_raft.ElectionRecord())
         ==> 
        _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#0)]
           && _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#0)]
           && _2_raft.ElectionRecord.term(e1#0) == _2_raft.ElectionRecord.term(e2#0)
         ==> _2_raft.ElectionRecord.leader(e1#0) == _2_raft.ElectionRecord.leader(e2#0));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure Impl$$_5_raftInvariants.__default.ElectionSafetyInit(v#0: DatatypeType
       where $Is(v#0, Tclass._2_raft.Variables())
         && $IsAlloc(v#0, Tclass._2_raft.Variables(), $Heap)
         && $IsA#_2_raft.Variables(v#0))
   returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  // user-defined preconditions
  free requires _2_raft.__default.Init#canCall(v#0)
     && 
    _2_raft.__default.Init(v#0)
     && 
    _2_raft.__default.InitGlobalVars(_2_raft.Variables.global(v#0))
     && _2_raft.__default.InitHistoryVars(v#0)
     && (forall s#5: Box :: 
      { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#5]): DatatypeType } 
        { _2_raft.__default.ServerIDs()[s#5] } 
      $IsBox(s#5, #$ServerID)
         ==> 
        _2_raft.__default.ServerIDs()[s#5]
         ==> _2_raft.__default.InitHostVars($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#5]): DatatypeType));
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _5_raftInvariants.__default.ElectionSafety#canCall(v#0);
  ensures _5_raftInvariants.__default.ElectionSafety#canCall(v#0)
     ==> _5_raftInvariants.__default.ElectionSafety(v#0)
       || (forall e1#1: DatatypeType, e2#1: DatatypeType :: 
        { _2_raft.ElectionRecord.leader(e2#1), _2_raft.ElectionRecord.leader(e1#1) } 
          { _2_raft.ElectionRecord.leader(e2#1), _2_raft.ElectionRecord.term(e1#1) } 
          { _2_raft.ElectionRecord.leader(e2#1), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#1)] } 
          { _2_raft.ElectionRecord.leader(e1#1), _2_raft.ElectionRecord.term(e2#1) } 
          { _2_raft.ElectionRecord.leader(e1#1), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#1)] } 
          { _2_raft.ElectionRecord.term(e2#1), _2_raft.ElectionRecord.term(e1#1) } 
          { _2_raft.ElectionRecord.term(e2#1), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#1)] } 
          { _2_raft.ElectionRecord.term(e1#1), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#1)] } 
          { _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#1)], _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#1)] } 
        $Is(e1#1, Tclass._2_raft.ElectionRecord())
             && $Is(e2#1, Tclass._2_raft.ElectionRecord())
           ==> 
          _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#1)]
             && _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#1)]
             && _2_raft.ElectionRecord.term(e1#1) == _2_raft.ElectionRecord.term(e2#1)
           ==> _2_raft.ElectionRecord.leader(e1#1) == _2_raft.ElectionRecord.leader(e2#1));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation Impl$$_5_raftInvariants.__default.ElectionSafetyInit(v#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;

    // AddMethodImpl: ElectionSafetyInit, Impl$$_5_raftInvariants.__default.ElectionSafetyInit
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MissingLibrary._default.EmptyImap)
       == StartFuel_MissingLibrary._default.EmptyImap;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.EmptyImap)
       == StartFuelAssert_MissingLibrary._default.EmptyImap;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.EmptyMap)
       == StartFuel_MissingLibrary._default.EmptyMap;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.EmptyMap)
       == StartFuelAssert_MissingLibrary._default.EmptyMap;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.MapRemove)
       == StartFuel_MissingLibrary._default.MapRemove;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.MapRemove)
       == StartFuelAssert_MissingLibrary._default.MapRemove;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.SingletonImap)
       == StartFuel_MissingLibrary._default.SingletonImap;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.SingletonImap)
       == StartFuelAssert_MissingLibrary._default.SingletonImap;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.MapUnionPreferB)
       == StartFuel_MissingLibrary._default.MapUnionPreferB;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.MapUnionPreferB)
       == StartFuelAssert_MissingLibrary._default.MapUnionPreferB;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.ImapUnionPreferB)
       == StartFuel_MissingLibrary._default.ImapUnionPreferB;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.ImapUnionPreferB)
       == StartFuelAssert_MissingLibrary._default.ImapUnionPreferB;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.MemsetSeq)
       == StartFuel_MissingLibrary._default.MemsetSeq;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.MemsetSeq)
       == StartFuelAssert_MissingLibrary._default.MemsetSeq;
    assume AsFuelBottom(StartFuel_raft._default.MapAll) == StartFuel_raft._default.MapAll;
    assume AsFuelBottom(StartFuelAssert_raft._default.MapAll)
       == StartFuelAssert_raft._default.MapAll;
    assume AsFuelBottom(StartFuel_raft._default.Agree) == StartFuel_raft._default.Agree;
    assume AsFuelBottom(StartFuelAssert_raft._default.Agree)
       == StartFuelAssert_raft._default.Agree;
    assume AsFuelBottom(StartFuel_raft._default.AgreeIndexesDef)
       == StartFuel_raft._default.AgreeIndexesDef;
    assume AsFuelBottom(StartFuelAssert_raft._default.AgreeIndexesDef)
       == StartFuelAssert_raft._default.AgreeIndexesDef;
    assume AsFuelBottom(StartFuel_raft._default.SeqMax) == StartFuel_raft._default.SeqMax;
    assume AsFuelBottom(StartFuelAssert_raft._default.SeqMax)
       == StartFuelAssert_raft._default.SeqMax;
    assume AsFuelBottom(StartFuel_raft._default.EveryLogNow)
       == StartFuel_raft._default.EveryLogNow;
    assume AsFuelBottom(StartFuelAssert_raft._default.EveryLogNow)
       == StartFuelAssert_raft._default.EveryLogNow;
    assume AsFuelBottom(StartFuel_raft._default.Next) == StartFuel_raft._default.Next;
    assume AsFuelBottom(StartFuelAssert_raft._default.Next)
       == StartFuelAssert_raft._default.Next;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    assume {:captureState "raftTimesOut.dfy(1098,0): initial state"} true;
    $_reverifyPost := false;
}



// function declaration for raftInvariants._default.getStep
function _5_raftInvariants.__default.getStep(v#0: DatatypeType, v'#0: DatatypeType) : DatatypeType;

function _5_raftInvariants.__default.getStep#canCall(v#0: DatatypeType, v'#0: DatatypeType) : bool;

function Tclass._2_raft.Step() : Ty;

// Tclass._2_raft.Step Tag
axiom Tag(Tclass._2_raft.Step()) == Tagclass._2_raft.Step;

const unique Tagclass._2_raft.Step: TyTag;

// Box/unbox axiom for Tclass._2_raft.Step
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._2_raft.Step()) } 
  $IsBox(bx, Tclass._2_raft.Step())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._2_raft.Step()));

// consequence axiom for _5_raftInvariants.__default.getStep
axiom 4 <= $FunctionContextHeight
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType :: 
    { _5_raftInvariants.__default.getStep(v#0, v'#0) } 
    _5_raftInvariants.__default.getStep#canCall(v#0, v'#0)
         || (4 != $FunctionContextHeight
           && 
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0)
           && _2_raft.__default.Next(StartFuel_raft._default.Next, v#0, v'#0))
       ==> _2_raft.__default.NextStep(v#0, v'#0, _5_raftInvariants.__default.getStep(v#0, v'#0))
         && $Is(_5_raftInvariants.__default.getStep(v#0, v'#0), Tclass._2_raft.Step()));

function _5_raftInvariants.__default.getStep#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for _5_raftInvariants.__default.getStep
axiom (forall $Heap: Heap, v#0: DatatypeType, v'#0: DatatypeType :: 
  { _5_raftInvariants.__default.getStep#requires(v#0, v'#0), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
       && $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
     ==> _5_raftInvariants.__default.getStep#requires(v#0, v'#0)
       == (
        _2_raft.__default.WFVars(v#0)
         && _2_raft.__default.WFVars(v'#0)
         && _2_raft.__default.Next(StartFuel_raft._default.Next, v#0, v'#0)));

function $let#0_step(v: DatatypeType, v': DatatypeType) : DatatypeType;

function $let#0$canCall(v: DatatypeType, v': DatatypeType) : bool;

axiom (forall v: DatatypeType, v': DatatypeType :: 
  { $let#0_step(v, v') } 
  $let#0$canCall(v, v')
     ==> $Is($let#0_step(v, v'), Tclass._2_raft.Step())
       && _2_raft.__default.NextStep(v, v', $let#0_step(v, v')));

const MoreFuel_raft._default.Next1: LayerType;

// definition axiom for _5_raftInvariants.__default.getStep(revealed)
axiom 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, v#0: DatatypeType, v'#0: DatatypeType :: 
    { _5_raftInvariants.__default.getStep(v#0, v'#0), $IsGoodHeap($Heap) } 
    _5_raftInvariants.__default.getStep#canCall(v#0, v'#0)
         || (4 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0)
           && _2_raft.__default.Next(StartFuel_raft._default.Next, v#0, v'#0))
       ==> $let#0$canCall(v#0, v'#0)
         && 
        StartFuel_raft._default.Next == $LS(MoreFuel_raft._default.Next1)
         && StartFuelAssert_raft._default.Next == $LS($LS(MoreFuel_raft._default.Next1))
         && AsFuelBottom(MoreFuel_raft._default.Next1) == MoreFuel_raft._default.Next1
         && _5_raftInvariants.__default.getStep(v#0, v'#0) == $let#0_step(v#0, v'#0));

const MoreFuel_raft._default.Next2: LayerType;

// definition axiom for _5_raftInvariants.__default.getStep for all literals(revealed)
axiom 4 <= $FunctionContextHeight
   ==> (forall $Heap: Heap, v#0: DatatypeType, v'#0: DatatypeType :: 
    {:weight 3} { _5_raftInvariants.__default.getStep(Lit(v#0), Lit(v'#0)), $IsGoodHeap($Heap) } 
    _5_raftInvariants.__default.getStep#canCall(Lit(v#0), Lit(v'#0))
         || (4 != $FunctionContextHeight
           && 
          $IsGoodHeap($Heap)
           && $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && 
          Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0)))
           && _2_raft.__default.Next(StartFuel_raft._default.Next, Lit(v#0), Lit(v'#0)))
       ==> $let#0$canCall(Lit(v#0), Lit(v'#0))
         && 
        StartFuel_raft._default.Next == $LS(MoreFuel_raft._default.Next2)
         && StartFuelAssert_raft._default.Next == $LS($LS(MoreFuel_raft._default.Next2))
         && AsFuelBottom(MoreFuel_raft._default.Next2) == MoreFuel_raft._default.Next2
         && _5_raftInvariants.__default.getStep(Lit(v#0), Lit(v'#0))
           == $let#0_step(Lit(v#0), Lit(v'#0)));

procedure CheckWellformed$$_5_raftInvariants.__default.getStep(v#0: DatatypeType where $Is(v#0, Tclass._2_raft.Variables()), 
    v'#0: DatatypeType where $Is(v'#0, Tclass._2_raft.Variables()))
   returns (step#0: DatatypeType where $Is(step#0, Tclass._2_raft.Step()));
  free requires 4 == $FunctionContextHeight;
  modifies $Heap, $Tick;
  ensures _2_raft.__default.NextStep(v#0, v'#0, step#0);



implementation CheckWellformed$$_5_raftInvariants.__default.getStep(v#0: DatatypeType, v'#0: DatatypeType) returns (step#0: DatatypeType)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##v#0: DatatypeType;
  var ##v#1: DatatypeType;
  var ##v#2: DatatypeType;
  var ##v'#0: DatatypeType;
  var b$reqreads#0: bool;
  var b$reqreads#1: bool;
  var b$reqreads#2: bool;
  var ##v#3: DatatypeType;
  var ##v'#1: DatatypeType;
  var ##step#0: DatatypeType;
  var step#1: DatatypeType;
  var ##v#4: DatatypeType;
  var ##v'#2: DatatypeType;
  var ##step#1: DatatypeType;
  var b$reqreads#3: bool;

    b$reqreads#0 := true;
    b$reqreads#1 := true;
    b$reqreads#2 := true;
    b$reqreads#3 := true;

    // AddWellformednessCheck for function getStep
    assume {:captureState "raftTimesOut.dfy(1101,9): initial state"} true;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MissingLibrary._default.EmptyImap)
       == StartFuel_MissingLibrary._default.EmptyImap;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.EmptyImap)
       == StartFuelAssert_MissingLibrary._default.EmptyImap;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.EmptyMap)
       == StartFuel_MissingLibrary._default.EmptyMap;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.EmptyMap)
       == StartFuelAssert_MissingLibrary._default.EmptyMap;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.MapRemove)
       == StartFuel_MissingLibrary._default.MapRemove;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.MapRemove)
       == StartFuelAssert_MissingLibrary._default.MapRemove;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.SingletonImap)
       == StartFuel_MissingLibrary._default.SingletonImap;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.SingletonImap)
       == StartFuelAssert_MissingLibrary._default.SingletonImap;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.MapUnionPreferB)
       == StartFuel_MissingLibrary._default.MapUnionPreferB;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.MapUnionPreferB)
       == StartFuelAssert_MissingLibrary._default.MapUnionPreferB;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.ImapUnionPreferB)
       == StartFuel_MissingLibrary._default.ImapUnionPreferB;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.ImapUnionPreferB)
       == StartFuelAssert_MissingLibrary._default.ImapUnionPreferB;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.MemsetSeq)
       == StartFuel_MissingLibrary._default.MemsetSeq;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.MemsetSeq)
       == StartFuelAssert_MissingLibrary._default.MemsetSeq;
    assume AsFuelBottom(StartFuel_raft._default.MapAll) == StartFuel_raft._default.MapAll;
    assume AsFuelBottom(StartFuelAssert_raft._default.MapAll)
       == StartFuelAssert_raft._default.MapAll;
    assume AsFuelBottom(StartFuel_raft._default.Agree) == StartFuel_raft._default.Agree;
    assume AsFuelBottom(StartFuelAssert_raft._default.Agree)
       == StartFuelAssert_raft._default.Agree;
    assume AsFuelBottom(StartFuel_raft._default.AgreeIndexesDef)
       == StartFuel_raft._default.AgreeIndexesDef;
    assume AsFuelBottom(StartFuelAssert_raft._default.AgreeIndexesDef)
       == StartFuelAssert_raft._default.AgreeIndexesDef;
    assume AsFuelBottom(StartFuel_raft._default.SeqMax) == StartFuel_raft._default.SeqMax;
    assume AsFuelBottom(StartFuelAssert_raft._default.SeqMax)
       == StartFuelAssert_raft._default.SeqMax;
    assume AsFuelBottom(StartFuel_raft._default.EveryLogNow)
       == StartFuel_raft._default.EveryLogNow;
    assume AsFuelBottom(StartFuelAssert_raft._default.EveryLogNow)
       == StartFuelAssert_raft._default.EveryLogNow;
    assume AsFuelBottom(StartFuel_raft._default.Next) == StartFuel_raft._default.Next;
    assume AsFuelBottom(StartFuelAssert_raft._default.Next)
       == StartFuelAssert_raft._default.Next;
    ##v#0 := v#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##v#0, Tclass._2_raft.Variables(), $Heap);
    b$reqreads#0 := (forall<alpha> $o: ref, $f: Field alpha :: false ==> $_Frame[$o, $f]);
    assume _2_raft.__default.WFVars#canCall(v#0);
    assume _2_raft.__default.WFVars(v#0);
    ##v#1 := v'#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##v#1, Tclass._2_raft.Variables(), $Heap);
    b$reqreads#1 := (forall<alpha> $o: ref, $f: Field alpha :: false ==> $_Frame[$o, $f]);
    assume _2_raft.__default.WFVars#canCall(v'#0);
    assume _2_raft.__default.WFVars(v'#0);
    ##v#2 := v#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##v#2, Tclass._2_raft.Variables(), $Heap);
    ##v'#0 := v'#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##v'#0, Tclass._2_raft.Variables(), $Heap);
    assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v#2)
       ==> _2_raft.__default.WFVars(##v#2)
         || Set#Equal(Map#Domain(_2_raft.Variables.host(##v#2)), _2_raft.__default.ServerIDs());
    assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v#2)
       ==> _2_raft.__default.WFVars(##v#2)
         || (forall s#0: Box :: 
          { $Unbox(Map#Elements(_2_raft.Variables.host(##v#2))[s#0]): DatatypeType } 
            { Map#Domain(_2_raft.Variables.host(##v#2))[s#0] } 
          $IsBox(s#0, #$ServerID)
             ==> 
            Map#Domain(_2_raft.Variables.host(##v#2))[s#0]
             ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(##v#2))[s#0]): DatatypeType)));
    assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v'#0)
       ==> _2_raft.__default.WFVars(##v'#0)
         || Set#Equal(Map#Domain(_2_raft.Variables.host(##v'#0)), _2_raft.__default.ServerIDs());
    assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v'#0)
       ==> _2_raft.__default.WFVars(##v'#0)
         || (forall s#1: Box :: 
          { $Unbox(Map#Elements(_2_raft.Variables.host(##v'#0))[s#1]): DatatypeType } 
            { Map#Domain(_2_raft.Variables.host(##v'#0))[s#1] } 
          $IsBox(s#1, #$ServerID)
             ==> 
            Map#Domain(_2_raft.Variables.host(##v'#0))[s#1]
             ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(##v'#0))[s#1]): DatatypeType)));
    assume _2_raft.__default.WFVars(##v#2) && _2_raft.__default.WFVars(##v'#0);
    b$reqreads#2 := (forall<alpha> $o: ref, $f: Field alpha :: false ==> $_Frame[$o, $f]);
    assume _2_raft.__default.Next#canCall(v#0, v'#0);
    assume _2_raft.__default.Next(StartFuel_raft._default.Next, v#0, v'#0);
    assert b$reqreads#0;
    assert b$reqreads#1;
    assert b$reqreads#2;
    if (*)
    {
        assume $Is(_5_raftInvariants.__default.getStep(v#0, v'#0), Tclass._2_raft.Step());
        ##v#3 := v#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##v#3, Tclass._2_raft.Variables(), $Heap);
        ##v'#1 := v'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##v'#1, Tclass._2_raft.Variables(), $Heap);
        ##step#0 := step#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##step#0, Tclass._2_raft.Step(), $Heap);
        assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v#3)
           ==> _2_raft.__default.WFVars(##v#3)
             || Set#Equal(Map#Domain(_2_raft.Variables.host(##v#3)), _2_raft.__default.ServerIDs());
        assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v#3)
           ==> _2_raft.__default.WFVars(##v#3)
             || (forall s#2: Box :: 
              { $Unbox(Map#Elements(_2_raft.Variables.host(##v#3))[s#2]): DatatypeType } 
                { Map#Domain(_2_raft.Variables.host(##v#3))[s#2] } 
              $IsBox(s#2, #$ServerID)
                 ==> 
                Map#Domain(_2_raft.Variables.host(##v#3))[s#2]
                 ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(##v#3))[s#2]): DatatypeType)));
        assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v'#1)
           ==> _2_raft.__default.WFVars(##v'#1)
             || Set#Equal(Map#Domain(_2_raft.Variables.host(##v'#1)), _2_raft.__default.ServerIDs());
        assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v'#1)
           ==> _2_raft.__default.WFVars(##v'#1)
             || (forall s#3: Box :: 
              { $Unbox(Map#Elements(_2_raft.Variables.host(##v'#1))[s#3]): DatatypeType } 
                { Map#Domain(_2_raft.Variables.host(##v'#1))[s#3] } 
              $IsBox(s#3, #$ServerID)
                 ==> 
                Map#Domain(_2_raft.Variables.host(##v'#1))[s#3]
                 ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(##v'#1))[s#3]): DatatypeType)));
        assume _2_raft.__default.WFVars(##v#3) && _2_raft.__default.WFVars(##v'#1);
        assume _2_raft.__default.NextStep#canCall(v#0, v'#0, step#0);
        assume _2_raft.__default.NextStep(v#0, v'#0, step#0);
        assume false;
    }
    else
    {
        $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
          $o != null && read($Heap, $o, alloc) ==> false);
        // ----- call statement ----- raftTimesOut.dfy(1106,16)
        // TrCallStmt: Before ProcessCallStmt
        // ProcessCallStmt: Make the call
        call Call$$_2_raft.__default.reveal__Next();
        // TrCallStmt: After ProcessCallStmt
        assume {:captureState "raftTimesOut.dfy(1106,17)"} true;
        havoc step#1;
        assume $Is(step#1, Tclass._2_raft.Step());
        ##v#4 := v#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##v#4, Tclass._2_raft.Variables(), $Heap);
        ##v'#2 := v'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##v'#2, Tclass._2_raft.Variables(), $Heap);
        ##step#1 := step#1;
        // assume allocatedness for argument to function
        assume $IsAlloc(##step#1, Tclass._2_raft.Step(), $Heap);
        assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v#4)
           ==> _2_raft.__default.WFVars(##v#4)
             || Set#Equal(Map#Domain(_2_raft.Variables.host(##v#4)), _2_raft.__default.ServerIDs());
        assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v#4)
           ==> _2_raft.__default.WFVars(##v#4)
             || (forall s#4: Box :: 
              { $Unbox(Map#Elements(_2_raft.Variables.host(##v#4))[s#4]): DatatypeType } 
                { Map#Domain(_2_raft.Variables.host(##v#4))[s#4] } 
              $IsBox(s#4, #$ServerID)
                 ==> 
                Map#Domain(_2_raft.Variables.host(##v#4))[s#4]
                 ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(##v#4))[s#4]): DatatypeType)));
        assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v'#2)
           ==> _2_raft.__default.WFVars(##v'#2)
             || Set#Equal(Map#Domain(_2_raft.Variables.host(##v'#2)), _2_raft.__default.ServerIDs());
        assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v'#2)
           ==> _2_raft.__default.WFVars(##v'#2)
             || (forall s#5: Box :: 
              { $Unbox(Map#Elements(_2_raft.Variables.host(##v'#2))[s#5]): DatatypeType } 
                { Map#Domain(_2_raft.Variables.host(##v'#2))[s#5] } 
              $IsBox(s#5, #$ServerID)
                 ==> 
                Map#Domain(_2_raft.Variables.host(##v'#2))[s#5]
                 ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(##v'#2))[s#5]): DatatypeType)));
        assume _2_raft.__default.WFVars(##v#4) && _2_raft.__default.WFVars(##v'#2);
        b$reqreads#3 := (forall<alpha> $o: ref, $f: Field alpha :: false ==> $_Frame[$o, $f]);
        assume _2_raft.__default.NextStep#canCall(v#0, v'#0, step#1);
        assert (exists step#2: DatatypeType :: 
          $Is(step#2, Tclass._2_raft.Step())
             && _2_raft.__default.NextStep(v#0, v'#0, step#2));
        assume _2_raft.__default.NextStep(v#0, v'#0, step#1);
        assume $let#0$canCall(v#0, v'#0);
        assume _5_raftInvariants.__default.getStep(v#0, v'#0) == $let#0_step(v#0, v'#0);
        assume $let#0$canCall(v#0, v'#0);
        // CheckWellformedWithResult: any expression
        assume $Is(_5_raftInvariants.__default.getStep(v#0, v'#0), Tclass._2_raft.Step());
        assume _5_raftInvariants.__default.getStep(v#0, v'#0) == step#0;
        assert b$reqreads#3;
    }
}



procedure CheckWellformed$$_5_raftInvariants.__default.ElectionSafetyInduction(v#0: DatatypeType
       where $Is(v#0, Tclass._2_raft.Variables())
         && $IsAlloc(v#0, Tclass._2_raft.Variables(), $Heap)
         && $IsA#_2_raft.Variables(v#0), 
    v'#0: DatatypeType
       where $Is(v'#0, Tclass._2_raft.Variables())
         && $IsAlloc(v'#0, Tclass._2_raft.Variables(), $Heap)
         && $IsA#_2_raft.Variables(v'#0));
  free requires 5 == $FunctionContextHeight;
  modifies $Heap, $Tick;



implementation CheckWellformed$$_5_raftInvariants.__default.ElectionSafetyInduction(v#0: DatatypeType, v'#0: DatatypeType)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var ##v#0: DatatypeType;
  var ##v#1: DatatypeType;
  var ##v#2: DatatypeType;
  var ##v#3: DatatypeType;
  var ##v'#0: DatatypeType;
  var ##v#4: DatatypeType;

    // AddMethodImpl: ElectionSafetyInduction, CheckWellformed$$_5_raftInvariants.__default.ElectionSafetyInduction
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MissingLibrary._default.EmptyImap)
       == StartFuel_MissingLibrary._default.EmptyImap;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.EmptyImap)
       == StartFuelAssert_MissingLibrary._default.EmptyImap;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.EmptyMap)
       == StartFuel_MissingLibrary._default.EmptyMap;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.EmptyMap)
       == StartFuelAssert_MissingLibrary._default.EmptyMap;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.MapRemove)
       == StartFuel_MissingLibrary._default.MapRemove;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.MapRemove)
       == StartFuelAssert_MissingLibrary._default.MapRemove;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.SingletonImap)
       == StartFuel_MissingLibrary._default.SingletonImap;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.SingletonImap)
       == StartFuelAssert_MissingLibrary._default.SingletonImap;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.MapUnionPreferB)
       == StartFuel_MissingLibrary._default.MapUnionPreferB;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.MapUnionPreferB)
       == StartFuelAssert_MissingLibrary._default.MapUnionPreferB;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.ImapUnionPreferB)
       == StartFuel_MissingLibrary._default.ImapUnionPreferB;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.ImapUnionPreferB)
       == StartFuelAssert_MissingLibrary._default.ImapUnionPreferB;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.MemsetSeq)
       == StartFuel_MissingLibrary._default.MemsetSeq;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.MemsetSeq)
       == StartFuelAssert_MissingLibrary._default.MemsetSeq;
    assume AsFuelBottom(StartFuel_raft._default.MapAll) == StartFuel_raft._default.MapAll;
    assume AsFuelBottom(StartFuelAssert_raft._default.MapAll)
       == StartFuelAssert_raft._default.MapAll;
    assume AsFuelBottom(StartFuel_raft._default.Agree) == StartFuel_raft._default.Agree;
    assume AsFuelBottom(StartFuelAssert_raft._default.Agree)
       == StartFuelAssert_raft._default.Agree;
    assume AsFuelBottom(StartFuel_raft._default.AgreeIndexesDef)
       == StartFuel_raft._default.AgreeIndexesDef;
    assume AsFuelBottom(StartFuelAssert_raft._default.AgreeIndexesDef)
       == StartFuelAssert_raft._default.AgreeIndexesDef;
    assume AsFuelBottom(StartFuel_raft._default.SeqMax) == StartFuel_raft._default.SeqMax;
    assume AsFuelBottom(StartFuelAssert_raft._default.SeqMax)
       == StartFuelAssert_raft._default.SeqMax;
    assume AsFuelBottom(StartFuel_raft._default.EveryLogNow)
       == StartFuel_raft._default.EveryLogNow;
    assume AsFuelBottom(StartFuelAssert_raft._default.EveryLogNow)
       == StartFuelAssert_raft._default.EveryLogNow;
    assume AsFuelBottom(StartFuel_raft._default.Next) == StartFuel_raft._default.Next;
    assume AsFuelBottom(StartFuelAssert_raft._default.Next)
       == StartFuelAssert_raft._default.Next;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    assume {:captureState "raftTimesOut.dfy(1111,6): initial state"} true;
    ##v#0 := v#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##v#0, Tclass._2_raft.Variables(), $Heap);
    assume _5_raftInvariants.__default.ElectionSafety#canCall(v#0);
    assume _5_raftInvariants.__default.ElectionSafety(v#0);
    ##v#1 := v#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##v#1, Tclass._2_raft.Variables(), $Heap);
    assume _2_raft.__default.WFVars#canCall(v#0);
    assume _2_raft.__default.WFVars(v#0);
    ##v#2 := v'#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##v#2, Tclass._2_raft.Variables(), $Heap);
    assume _2_raft.__default.WFVars#canCall(v'#0);
    assume _2_raft.__default.WFVars(v'#0);
    ##v#3 := v#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##v#3, Tclass._2_raft.Variables(), $Heap);
    ##v'#0 := v'#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##v'#0, Tclass._2_raft.Variables(), $Heap);
    assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v#3)
       ==> _2_raft.__default.WFVars(##v#3)
         || Set#Equal(Map#Domain(_2_raft.Variables.host(##v#3)), _2_raft.__default.ServerIDs());
    assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v#3)
       ==> _2_raft.__default.WFVars(##v#3)
         || (forall s#0: Box :: 
          { $Unbox(Map#Elements(_2_raft.Variables.host(##v#3))[s#0]): DatatypeType } 
            { Map#Domain(_2_raft.Variables.host(##v#3))[s#0] } 
          $IsBox(s#0, #$ServerID)
             ==> 
            Map#Domain(_2_raft.Variables.host(##v#3))[s#0]
             ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(##v#3))[s#0]): DatatypeType)));
    assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v'#0)
       ==> _2_raft.__default.WFVars(##v'#0)
         || Set#Equal(Map#Domain(_2_raft.Variables.host(##v'#0)), _2_raft.__default.ServerIDs());
    assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v'#0)
       ==> _2_raft.__default.WFVars(##v'#0)
         || (forall s#1: Box :: 
          { $Unbox(Map#Elements(_2_raft.Variables.host(##v'#0))[s#1]): DatatypeType } 
            { Map#Domain(_2_raft.Variables.host(##v'#0))[s#1] } 
          $IsBox(s#1, #$ServerID)
             ==> 
            Map#Domain(_2_raft.Variables.host(##v'#0))[s#1]
             ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(##v'#0))[s#1]): DatatypeType)));
    assume _2_raft.__default.WFVars(##v#3) && _2_raft.__default.WFVars(##v'#0);
    assume _2_raft.__default.Next#canCall(v#0, v'#0);
    assume _2_raft.__default.Next(StartFuel_raft._default.Next, v#0, v'#0);
    havoc $Heap;
    assume old($Heap) == $Heap;
    assume {:captureState "raftTimesOut.dfy(1115,26): post-state"} true;
    ##v#4 := v'#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##v#4, Tclass._2_raft.Variables(), $Heap);
    assume _5_raftInvariants.__default.ElectionSafety#canCall(v'#0);
    assume _5_raftInvariants.__default.ElectionSafety(v'#0);
}



procedure Call$$_5_raftInvariants.__default.ElectionSafetyInduction(v#0: DatatypeType
       where $Is(v#0, Tclass._2_raft.Variables())
         && $IsAlloc(v#0, Tclass._2_raft.Variables(), $Heap)
         && $IsA#_2_raft.Variables(v#0), 
    v'#0: DatatypeType
       where $Is(v'#0, Tclass._2_raft.Variables())
         && $IsAlloc(v'#0, Tclass._2_raft.Variables(), $Heap)
         && $IsA#_2_raft.Variables(v'#0));
  // user-defined preconditions
  requires _5_raftInvariants.__default.ElectionSafety#canCall(v#0)
     ==> _5_raftInvariants.__default.ElectionSafety(v#0)
       || (forall e1#0: DatatypeType, e2#0: DatatypeType :: 
        { _2_raft.ElectionRecord.leader(e2#0), _2_raft.ElectionRecord.leader(e1#0) } 
          { _2_raft.ElectionRecord.leader(e2#0), _2_raft.ElectionRecord.term(e1#0) } 
          { _2_raft.ElectionRecord.leader(e2#0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#0)] } 
          { _2_raft.ElectionRecord.leader(e1#0), _2_raft.ElectionRecord.term(e2#0) } 
          { _2_raft.ElectionRecord.leader(e1#0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#0)] } 
          { _2_raft.ElectionRecord.term(e2#0), _2_raft.ElectionRecord.term(e1#0) } 
          { _2_raft.ElectionRecord.term(e2#0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#0)] } 
          { _2_raft.ElectionRecord.term(e1#0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#0)] } 
          { _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#0)], _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#0)] } 
        $Is(e1#0, Tclass._2_raft.ElectionRecord())
             && $Is(e2#0, Tclass._2_raft.ElectionRecord())
           ==> 
          _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#0)]
             && _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#0)]
             && _2_raft.ElectionRecord.term(e1#0) == _2_raft.ElectionRecord.term(e2#0)
           ==> _2_raft.ElectionRecord.leader(e1#0) == _2_raft.ElectionRecord.leader(e2#0));
  requires _2_raft.__default.WFVars#canCall(v#0)
     ==> _2_raft.__default.WFVars(v#0)
       || Set#Equal(Map#Domain(_2_raft.Variables.host(v#0)), _2_raft.__default.ServerIDs());
  requires _2_raft.__default.WFVars#canCall(v#0)
     ==> _2_raft.__default.WFVars(v#0)
       || (forall s#2: Box :: 
        { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#2]): DatatypeType } 
          { Map#Domain(_2_raft.Variables.host(v#0))[s#2] } 
        $IsBox(s#2, #$ServerID)
           ==> 
          Map#Domain(_2_raft.Variables.host(v#0))[s#2]
           ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#2]): DatatypeType)));
  requires _2_raft.__default.WFVars#canCall(v'#0)
     ==> _2_raft.__default.WFVars(v'#0)
       || Set#Equal(Map#Domain(_2_raft.Variables.host(v'#0)), _2_raft.__default.ServerIDs());
  requires _2_raft.__default.WFVars#canCall(v'#0)
     ==> _2_raft.__default.WFVars(v'#0)
       || (forall s#3: Box :: 
        { $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s#3]): DatatypeType } 
          { Map#Domain(_2_raft.Variables.host(v'#0))[s#3] } 
        $IsBox(s#3, #$ServerID)
           ==> 
          Map#Domain(_2_raft.Variables.host(v'#0))[s#3]
           ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s#3]): DatatypeType)));
  requires _2_raft.__default.Next(StartFuelAssert_raft._default.Next, v#0, v'#0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _5_raftInvariants.__default.ElectionSafety#canCall(v'#0);
  free ensures _5_raftInvariants.__default.ElectionSafety#canCall(v'#0)
     && 
    _5_raftInvariants.__default.ElectionSafety(v'#0)
     && (forall e1#1: DatatypeType, e2#1: DatatypeType :: 
      { _2_raft.ElectionRecord.leader(e2#1), _2_raft.ElectionRecord.leader(e1#1) } 
        { _2_raft.ElectionRecord.leader(e2#1), _2_raft.ElectionRecord.term(e1#1) } 
        { _2_raft.ElectionRecord.leader(e2#1), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e1#1)] } 
        { _2_raft.ElectionRecord.leader(e1#1), _2_raft.ElectionRecord.term(e2#1) } 
        { _2_raft.ElectionRecord.leader(e1#1), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e2#1)] } 
        { _2_raft.ElectionRecord.term(e2#1), _2_raft.ElectionRecord.term(e1#1) } 
        { _2_raft.ElectionRecord.term(e2#1), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e1#1)] } 
        { _2_raft.ElectionRecord.term(e1#1), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e2#1)] } 
        { _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e2#1)], _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e1#1)] } 
      $Is(e1#1, Tclass._2_raft.ElectionRecord())
           && $Is(e2#1, Tclass._2_raft.ElectionRecord())
         ==> 
        _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e1#1)]
           && _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e2#1)]
           && _2_raft.ElectionRecord.term(e1#1) == _2_raft.ElectionRecord.term(e2#1)
         ==> _2_raft.ElectionRecord.leader(e1#1) == _2_raft.ElectionRecord.leader(e2#1));
  // frame condition
  free ensures old($Heap) == $Heap;



procedure Impl$$_5_raftInvariants.__default.ElectionSafetyInduction(v#0: DatatypeType
       where $Is(v#0, Tclass._2_raft.Variables())
         && $IsAlloc(v#0, Tclass._2_raft.Variables(), $Heap)
         && $IsA#_2_raft.Variables(v#0), 
    v'#0: DatatypeType
       where $Is(v'#0, Tclass._2_raft.Variables())
         && $IsAlloc(v'#0, Tclass._2_raft.Variables(), $Heap)
         && $IsA#_2_raft.Variables(v'#0))
   returns ($_reverifyPost: bool);
  free requires 5 == $FunctionContextHeight;
  // user-defined preconditions
  free requires _5_raftInvariants.__default.ElectionSafety#canCall(v#0)
     && 
    _5_raftInvariants.__default.ElectionSafety(v#0)
     && (forall e1#2: DatatypeType, e2#2: DatatypeType :: 
      { _2_raft.ElectionRecord.leader(e2#2), _2_raft.ElectionRecord.leader(e1#2) } 
        { _2_raft.ElectionRecord.leader(e2#2), _2_raft.ElectionRecord.term(e1#2) } 
        { _2_raft.ElectionRecord.leader(e2#2), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#2)] } 
        { _2_raft.ElectionRecord.leader(e1#2), _2_raft.ElectionRecord.term(e2#2) } 
        { _2_raft.ElectionRecord.leader(e1#2), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#2)] } 
        { _2_raft.ElectionRecord.term(e2#2), _2_raft.ElectionRecord.term(e1#2) } 
        { _2_raft.ElectionRecord.term(e2#2), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#2)] } 
        { _2_raft.ElectionRecord.term(e1#2), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#2)] } 
        { _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#2)], _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#2)] } 
      $Is(e1#2, Tclass._2_raft.ElectionRecord())
           && $Is(e2#2, Tclass._2_raft.ElectionRecord())
         ==> 
        _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e1#2)]
           && _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0))[$Box(e2#2)]
           && _2_raft.ElectionRecord.term(e1#2) == _2_raft.ElectionRecord.term(e2#2)
         ==> _2_raft.ElectionRecord.leader(e1#2) == _2_raft.ElectionRecord.leader(e2#2));
  free requires _2_raft.__default.WFVars#canCall(v#0)
     && 
    _2_raft.__default.WFVars(v#0)
     && 
    Set#Equal(Map#Domain(_2_raft.Variables.host(v#0)), _2_raft.__default.ServerIDs())
     && (forall s#4: Box :: 
      { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#4]): DatatypeType } 
        { Map#Domain(_2_raft.Variables.host(v#0))[s#4] } 
      $IsBox(s#4, #$ServerID)
         ==> 
        Map#Domain(_2_raft.Variables.host(v#0))[s#4]
         ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#4]): DatatypeType)));
  free requires _2_raft.__default.WFVars#canCall(v'#0)
     && 
    _2_raft.__default.WFVars(v'#0)
     && 
    Set#Equal(Map#Domain(_2_raft.Variables.host(v'#0)), _2_raft.__default.ServerIDs())
     && (forall s#5: Box :: 
      { $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s#5]): DatatypeType } 
        { Map#Domain(_2_raft.Variables.host(v'#0))[s#5] } 
      $IsBox(s#5, #$ServerID)
         ==> 
        Map#Domain(_2_raft.Variables.host(v'#0))[s#5]
         ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s#5]): DatatypeType)));
  requires _2_raft.__default.Next(StartFuelAssert_raft._default.Next, v#0, v'#0);
  modifies $Heap, $Tick;
  // user-defined postconditions
  free ensures _5_raftInvariants.__default.ElectionSafety#canCall(v'#0);
  ensures _5_raftInvariants.__default.ElectionSafety#canCall(v'#0)
     ==> _5_raftInvariants.__default.ElectionSafety(v'#0)
       || (forall e1#3: DatatypeType, e2#3: DatatypeType :: 
        { _2_raft.ElectionRecord.leader(e2#3), _2_raft.ElectionRecord.leader(e1#3) } 
          { _2_raft.ElectionRecord.leader(e2#3), _2_raft.ElectionRecord.term(e1#3) } 
          { _2_raft.ElectionRecord.leader(e2#3), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e1#3)] } 
          { _2_raft.ElectionRecord.leader(e1#3), _2_raft.ElectionRecord.term(e2#3) } 
          { _2_raft.ElectionRecord.leader(e1#3), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e2#3)] } 
          { _2_raft.ElectionRecord.term(e2#3), _2_raft.ElectionRecord.term(e1#3) } 
          { _2_raft.ElectionRecord.term(e2#3), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e1#3)] } 
          { _2_raft.ElectionRecord.term(e1#3), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e2#3)] } 
          { _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e2#3)], _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e1#3)] } 
        $Is(e1#3, Tclass._2_raft.ElectionRecord())
             && $Is(e2#3, Tclass._2_raft.ElectionRecord())
           ==> 
          _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e1#3)]
             && _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e2#3)]
             && _2_raft.ElectionRecord.term(e1#3) == _2_raft.ElectionRecord.term(e2#3)
           ==> _2_raft.ElectionRecord.leader(e1#3) == _2_raft.ElectionRecord.leader(e2#3));
  // frame condition
  free ensures old($Heap) == $Heap;



implementation Impl$$_5_raftInvariants.__default.ElectionSafetyInduction(v#0: DatatypeType, v'#0: DatatypeType) returns ($_reverifyPost: bool)
{
  var $_Frame: <beta>[ref,Field beta]bool;
  var step#0: DatatypeType
     where $Is(step#0, Tclass._2_raft.Step())
       && $IsAlloc(step#0, Tclass._2_raft.Step(), $Heap);
  var ##v#5: DatatypeType;
  var ##v'#1: DatatypeType;
  var ##v#0_0: DatatypeType;
  var ##v#6: DatatypeType;

    // AddMethodImpl: ElectionSafetyInduction, Impl$$_5_raftInvariants.__default.ElectionSafetyInduction
    // initialize fuel constant
    assume AsFuelBottom(StartFuel_MissingLibrary._default.EmptyImap)
       == StartFuel_MissingLibrary._default.EmptyImap;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.EmptyImap)
       == StartFuelAssert_MissingLibrary._default.EmptyImap;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.EmptyMap)
       == StartFuel_MissingLibrary._default.EmptyMap;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.EmptyMap)
       == StartFuelAssert_MissingLibrary._default.EmptyMap;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.MapRemove)
       == StartFuel_MissingLibrary._default.MapRemove;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.MapRemove)
       == StartFuelAssert_MissingLibrary._default.MapRemove;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.SingletonImap)
       == StartFuel_MissingLibrary._default.SingletonImap;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.SingletonImap)
       == StartFuelAssert_MissingLibrary._default.SingletonImap;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.MapUnionPreferB)
       == StartFuel_MissingLibrary._default.MapUnionPreferB;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.MapUnionPreferB)
       == StartFuelAssert_MissingLibrary._default.MapUnionPreferB;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.ImapUnionPreferB)
       == StartFuel_MissingLibrary._default.ImapUnionPreferB;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.ImapUnionPreferB)
       == StartFuelAssert_MissingLibrary._default.ImapUnionPreferB;
    assume AsFuelBottom(StartFuel_MissingLibrary._default.MemsetSeq)
       == StartFuel_MissingLibrary._default.MemsetSeq;
    assume AsFuelBottom(StartFuelAssert_MissingLibrary._default.MemsetSeq)
       == StartFuelAssert_MissingLibrary._default.MemsetSeq;
    assume AsFuelBottom(StartFuel_raft._default.MapAll) == StartFuel_raft._default.MapAll;
    assume AsFuelBottom(StartFuelAssert_raft._default.MapAll)
       == StartFuelAssert_raft._default.MapAll;
    assume AsFuelBottom(StartFuel_raft._default.Agree) == StartFuel_raft._default.Agree;
    assume AsFuelBottom(StartFuelAssert_raft._default.Agree)
       == StartFuelAssert_raft._default.Agree;
    assume AsFuelBottom(StartFuel_raft._default.AgreeIndexesDef)
       == StartFuel_raft._default.AgreeIndexesDef;
    assume AsFuelBottom(StartFuelAssert_raft._default.AgreeIndexesDef)
       == StartFuelAssert_raft._default.AgreeIndexesDef;
    assume AsFuelBottom(StartFuel_raft._default.SeqMax) == StartFuel_raft._default.SeqMax;
    assume AsFuelBottom(StartFuelAssert_raft._default.SeqMax)
       == StartFuelAssert_raft._default.SeqMax;
    assume AsFuelBottom(StartFuel_raft._default.EveryLogNow)
       == StartFuel_raft._default.EveryLogNow;
    assume AsFuelBottom(StartFuelAssert_raft._default.EveryLogNow)
       == StartFuelAssert_raft._default.EveryLogNow;
    assume AsFuelBottom(StartFuel_raft._default.Next) == StartFuel_raft._default.Next;
    assume AsFuelBottom(StartFuelAssert_raft._default.Next)
       == StartFuelAssert_raft._default.Next;
    $_Frame := (lambda<alpha> $o: ref, $f: Field alpha :: 
      $o != null && read($Heap, $o, alloc) ==> false);
    assume {:captureState "raftTimesOut.dfy(1116,0): initial state"} true;
    $_reverifyPost := false;
    // ----- assignment statement ----- raftTimesOut.dfy(1117,14)
    assume true;
    ##v#5 := v#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##v#5, Tclass._2_raft.Variables(), $Heap);
    ##v'#1 := v'#0;
    // assume allocatedness for argument to function
    assume $IsAlloc(##v'#1, Tclass._2_raft.Variables(), $Heap);
    assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v#5)
       ==> _2_raft.__default.WFVars(##v#5)
         || Set#Equal(Map#Domain(_2_raft.Variables.host(##v#5)), _2_raft.__default.ServerIDs());
    assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v#5)
       ==> _2_raft.__default.WFVars(##v#5)
         || (forall s#6: Box :: 
          { $Unbox(Map#Elements(_2_raft.Variables.host(##v#5))[s#6]): DatatypeType } 
            { Map#Domain(_2_raft.Variables.host(##v#5))[s#6] } 
          $IsBox(s#6, #$ServerID)
             ==> 
            Map#Domain(_2_raft.Variables.host(##v#5))[s#6]
             ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(##v#5))[s#6]): DatatypeType)));
    assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v'#1)
       ==> _2_raft.__default.WFVars(##v'#1)
         || Set#Equal(Map#Domain(_2_raft.Variables.host(##v'#1)), _2_raft.__default.ServerIDs());
    assert {:subsumption 0} _2_raft.__default.WFVars#canCall(##v'#1)
       ==> _2_raft.__default.WFVars(##v'#1)
         || (forall s#7: Box :: 
          { $Unbox(Map#Elements(_2_raft.Variables.host(##v'#1))[s#7]): DatatypeType } 
            { Map#Domain(_2_raft.Variables.host(##v'#1))[s#7] } 
          $IsBox(s#7, #$ServerID)
             ==> 
            Map#Domain(_2_raft.Variables.host(##v'#1))[s#7]
             ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(##v'#1))[s#7]): DatatypeType)));
    assume _2_raft.__default.WFVars(##v#5) && _2_raft.__default.WFVars(##v'#1);
    assert {:subsumption 0} _2_raft.__default.Next(StartFuelAssert_raft._default.Next, ##v#5, ##v'#1);
    assume _2_raft.__default.Next(StartFuel_raft._default.Next, ##v#5, ##v'#1);
    assume _5_raftInvariants.__default.getStep#canCall(v#0, v'#0);
    assume _5_raftInvariants.__default.getStep#canCall(v#0, v'#0);
    step#0 := _5_raftInvariants.__default.getStep(v#0, v'#0);
    assume {:captureState "raftTimesOut.dfy(1117,30)"} true;
    // ----- if statement ----- raftTimesOut.dfy(1118,5)
    assume true;
    if (_2_raft.Step.BecomeLeaderStep_q(step#0))
    {
        // ----- assume statement ----- raftTimesOut.dfy(1119,9)
        assume true;
        assume false;
        // ----- assert statement ----- raftTimesOut.dfy(1120,9)
        ##v#0_0 := v'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##v#0_0, Tclass._2_raft.Variables(), $Heap);
        assume _5_raftInvariants.__default.ElectionSafety#canCall(v'#0);
        assume _5_raftInvariants.__default.ElectionSafety#canCall(v'#0);
        assert {:subsumption 0} _5_raftInvariants.__default.ElectionSafety#canCall(v'#0)
           ==> _5_raftInvariants.__default.ElectionSafety(v'#0)
             || (forall e1#0_0: DatatypeType, e2#0_0: DatatypeType :: 
              { _2_raft.ElectionRecord.leader(e2#0_0), _2_raft.ElectionRecord.leader(e1#0_0) } 
                { _2_raft.ElectionRecord.leader(e2#0_0), _2_raft.ElectionRecord.term(e1#0_0) } 
                { _2_raft.ElectionRecord.leader(e2#0_0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e1#0_0)] } 
                { _2_raft.ElectionRecord.leader(e1#0_0), _2_raft.ElectionRecord.term(e2#0_0) } 
                { _2_raft.ElectionRecord.leader(e1#0_0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e2#0_0)] } 
                { _2_raft.ElectionRecord.term(e2#0_0), _2_raft.ElectionRecord.term(e1#0_0) } 
                { _2_raft.ElectionRecord.term(e2#0_0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e1#0_0)] } 
                { _2_raft.ElectionRecord.term(e1#0_0), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e2#0_0)] } 
                { _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e2#0_0)], _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e1#0_0)] } 
              $Is(e1#0_0, Tclass._2_raft.ElectionRecord())
                   && $Is(e2#0_0, Tclass._2_raft.ElectionRecord())
                 ==> 
                _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e1#0_0)]
                   && _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e2#0_0)]
                   && _2_raft.ElectionRecord.term(e1#0_0) == _2_raft.ElectionRecord.term(e2#0_0)
                 ==> _2_raft.ElectionRecord.leader(e1#0_0) == _2_raft.ElectionRecord.leader(e2#0_0));
        assume _5_raftInvariants.__default.ElectionSafety(v'#0);
    }
    else
    {
        // ----- assert statement ----- raftTimesOut.dfy(1122,9)
        assume _2_raft.Variables.Variables_q(v'#0);
        assume _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0));
        assume _2_raft.Variables.Variables_q(v#0);
        assume _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0));
        assume _2_raft.Variables.Variables_q(v'#0)
           && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
           && 
          _2_raft.Variables.Variables_q(v#0)
           && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0));
        assert Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0)), 
          _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)));
        // ----- assert statement ----- raftTimesOut.dfy(1123,9)
        ##v#6 := v'#0;
        // assume allocatedness for argument to function
        assume $IsAlloc(##v#6, Tclass._2_raft.Variables(), $Heap);
        assume _5_raftInvariants.__default.ElectionSafety#canCall(v'#0);
        assume _5_raftInvariants.__default.ElectionSafety#canCall(v'#0);
        assert {:subsumption 0} _5_raftInvariants.__default.ElectionSafety#canCall(v'#0)
           ==> _5_raftInvariants.__default.ElectionSafety(v'#0)
             || (forall e1#4: DatatypeType, e2#4: DatatypeType :: 
              { _2_raft.ElectionRecord.leader(e2#4), _2_raft.ElectionRecord.leader(e1#4) } 
                { _2_raft.ElectionRecord.leader(e2#4), _2_raft.ElectionRecord.term(e1#4) } 
                { _2_raft.ElectionRecord.leader(e2#4), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e1#4)] } 
                { _2_raft.ElectionRecord.leader(e1#4), _2_raft.ElectionRecord.term(e2#4) } 
                { _2_raft.ElectionRecord.leader(e1#4), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e2#4)] } 
                { _2_raft.ElectionRecord.term(e2#4), _2_raft.ElectionRecord.term(e1#4) } 
                { _2_raft.ElectionRecord.term(e2#4), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e1#4)] } 
                { _2_raft.ElectionRecord.term(e1#4), _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e2#4)] } 
                { _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e2#4)], _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e1#4)] } 
              $Is(e1#4, Tclass._2_raft.ElectionRecord())
                   && $Is(e2#4, Tclass._2_raft.ElectionRecord())
                 ==> 
                _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e1#4)]
                   && _2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0))[$Box(e2#4)]
                   && _2_raft.ElectionRecord.term(e1#4) == _2_raft.ElectionRecord.term(e2#4)
                 ==> _2_raft.ElectionRecord.leader(e1#4) == _2_raft.ElectionRecord.leader(e2#4));
        assume _5_raftInvariants.__default.ElectionSafety(v'#0);
    }
}



const unique class._0_MissingLibrary.Option: ClassName;

// Constructor function declaration
function #MissingLibrary.Option.None() : DatatypeType;

const unique ##MissingLibrary.Option.None: DtCtorId;

// Constructor identifier
axiom DatatypeCtorId(#MissingLibrary.Option.None()) == ##MissingLibrary.Option.None;

function _0_MissingLibrary.Option.None_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _0_MissingLibrary.Option.None_q(d) } 
  _0_MissingLibrary.Option.None_q(d)
     <==> DatatypeCtorId(d) == ##MissingLibrary.Option.None);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _0_MissingLibrary.Option.None_q(d) } 
  _0_MissingLibrary.Option.None_q(d) ==> d == #MissingLibrary.Option.None());

function Tclass._0_MissingLibrary.Option(Ty) : Ty;

// Tclass._0_MissingLibrary.Option Tag
axiom (forall MissingLibrary.Option$V: Ty :: 
  { Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V) } 
  Tag(Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V))
     == Tagclass._0_MissingLibrary.Option);

const unique Tagclass._0_MissingLibrary.Option: TyTag;

// Tclass._0_MissingLibrary.Option injectivity 0
axiom (forall MissingLibrary.Option$V: Ty :: 
  { Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V) } 
  Tclass._0_MissingLibrary.Option_0(Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V))
     == MissingLibrary.Option$V);

function Tclass._0_MissingLibrary.Option_0(Ty) : Ty;

// Box/unbox axiom for Tclass._0_MissingLibrary.Option
axiom (forall MissingLibrary.Option$V: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V)) } 
  $IsBox(bx, Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V)));

// Constructor $Is
axiom (forall MissingLibrary.Option$V: Ty :: 
  { $Is(#MissingLibrary.Option.None(), 
      Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V)) } 
  $Is(#MissingLibrary.Option.None(), 
    Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V)));

// Constructor $IsAlloc
axiom (forall MissingLibrary.Option$V: Ty, $h: Heap :: 
  { $IsAlloc(#MissingLibrary.Option.None(), 
      Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V), 
      $h) } 
  $IsGoodHeap($h)
     ==> $IsAlloc(#MissingLibrary.Option.None(), 
      Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V), 
      $h));

// Constructor literal
axiom #MissingLibrary.Option.None() == Lit(#MissingLibrary.Option.None());

// Constructor function declaration
function #MissingLibrary.Option.Some(Box) : DatatypeType;

const unique ##MissingLibrary.Option.Some: DtCtorId;

// Constructor identifier
axiom (forall a#5#0#0: Box :: 
  { #MissingLibrary.Option.Some(a#5#0#0) } 
  DatatypeCtorId(#MissingLibrary.Option.Some(a#5#0#0))
     == ##MissingLibrary.Option.Some);

function _0_MissingLibrary.Option.Some_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _0_MissingLibrary.Option.Some_q(d) } 
  _0_MissingLibrary.Option.Some_q(d)
     <==> DatatypeCtorId(d) == ##MissingLibrary.Option.Some);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _0_MissingLibrary.Option.Some_q(d) } 
  _0_MissingLibrary.Option.Some_q(d)
     ==> (exists a#6#0#0: Box :: d == #MissingLibrary.Option.Some(a#6#0#0)));

// Constructor $Is
axiom (forall MissingLibrary.Option$V: Ty, a#7#0#0: Box :: 
  { $Is(#MissingLibrary.Option.Some(a#7#0#0), 
      Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V)) } 
  $Is(#MissingLibrary.Option.Some(a#7#0#0), 
      Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V))
     <==> $IsBox(a#7#0#0, MissingLibrary.Option$V));

// Constructor $IsAlloc
axiom (forall MissingLibrary.Option$V: Ty, a#8#0#0: Box, $h: Heap :: 
  { $IsAlloc(#MissingLibrary.Option.Some(a#8#0#0), 
      Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#MissingLibrary.Option.Some(a#8#0#0), 
        Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V), 
        $h)
       <==> $IsAllocBox(a#8#0#0, MissingLibrary.Option$V, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, MissingLibrary.Option$V: Ty, $h: Heap :: 
  { $IsAllocBox(_0_MissingLibrary.Option.value(d), MissingLibrary.Option$V, $h) } 
  $IsGoodHeap($h)
       && 
      _0_MissingLibrary.Option.Some_q(d)
       && $IsAlloc(d, Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V), $h)
     ==> $IsAllocBox(_0_MissingLibrary.Option.value(d), MissingLibrary.Option$V, $h));

// Constructor literal
axiom (forall a#9#0#0: Box :: 
  { #MissingLibrary.Option.Some(Lit(a#9#0#0)) } 
  #MissingLibrary.Option.Some(Lit(a#9#0#0))
     == Lit(#MissingLibrary.Option.Some(a#9#0#0)));

function _0_MissingLibrary.Option.value(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#10#0#0: Box :: 
  { #MissingLibrary.Option.Some(a#10#0#0) } 
  _0_MissingLibrary.Option.value(#MissingLibrary.Option.Some(a#10#0#0))
     == a#10#0#0);

// Inductive rank
axiom (forall a#11#0#0: Box :: 
  { #MissingLibrary.Option.Some(a#11#0#0) } 
  BoxRank(a#11#0#0) < DtRank(#MissingLibrary.Option.Some(a#11#0#0)));

// One-depth case-split function
function $IsA#_0_MissingLibrary.Option(DatatypeType) : bool;

// One-depth case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_0_MissingLibrary.Option(d) } 
  $IsA#_0_MissingLibrary.Option(d)
     ==> _0_MissingLibrary.Option.None_q(d) || _0_MissingLibrary.Option.Some_q(d));

// Questionmark data type disjunctivity
axiom (forall MissingLibrary.Option$V: Ty, d: DatatypeType :: 
  { _0_MissingLibrary.Option.Some_q(d), $Is(d, Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V)) } 
    { _0_MissingLibrary.Option.None_q(d), $Is(d, Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V)) } 
  $Is(d, Tclass._0_MissingLibrary.Option(MissingLibrary.Option$V))
     ==> _0_MissingLibrary.Option.None_q(d) || _0_MissingLibrary.Option.Some_q(d));

const unique class._0_MissingLibrary.__default: ClassName;

function Tclass._0_MissingLibrary.__default() : Ty;

// Tclass._0_MissingLibrary.__default Tag
axiom Tag(Tclass._0_MissingLibrary.__default())
   == Tagclass._0_MissingLibrary.__default;

const unique Tagclass._0_MissingLibrary.__default: TyTag;

// Box/unbox axiom for Tclass._0_MissingLibrary.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._0_MissingLibrary.__default()) } 
  $IsBox(bx, Tclass._0_MissingLibrary.__default())
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._0_MissingLibrary.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass._0_MissingLibrary.__default()) } 
  $Is($o, Tclass._0_MissingLibrary.__default())
     <==> $o == null || dtype($o) == Tclass._0_MissingLibrary.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._0_MissingLibrary.__default(), $h) } 
  $IsAlloc($o, Tclass._0_MissingLibrary.__default(), $h)
     <==> $o == null || read($h, $o, alloc));

// function declaration for MissingLibrary._default.Last
function _0_MissingLibrary.__default.Last(MissingLibrary._default.Last$T: Ty, s#0: Seq Box) : Box;

function _0_MissingLibrary.__default.Last#canCall(MissingLibrary._default.Last$T: Ty, s#0: Seq Box) : bool;

// consequence axiom for _0_MissingLibrary.__default.Last
axiom true
   ==> (forall MissingLibrary._default.Last$T: Ty, s#0: Seq Box :: 
    { _0_MissingLibrary.__default.Last(MissingLibrary._default.Last$T, s#0) } 
    _0_MissingLibrary.__default.Last#canCall(MissingLibrary._default.Last$T, s#0)
         || ($Is(s#0, TSeq(MissingLibrary._default.Last$T)) && 0 < Seq#Length(s#0))
       ==> $IsBox(_0_MissingLibrary.__default.Last(MissingLibrary._default.Last$T, s#0), 
        MissingLibrary._default.Last$T));

function _0_MissingLibrary.__default.Last#requires(Ty, Seq Box) : bool;

// #requires axiom for _0_MissingLibrary.__default.Last
axiom (forall MissingLibrary._default.Last$T: Ty, s#0: Seq Box :: 
  { _0_MissingLibrary.__default.Last#requires(MissingLibrary._default.Last$T, s#0) } 
  $Is(s#0, TSeq(MissingLibrary._default.Last$T))
     ==> _0_MissingLibrary.__default.Last#requires(MissingLibrary._default.Last$T, s#0)
       == (0 < Seq#Length(s#0)));

// definition axiom for _0_MissingLibrary.__default.Last(revealed)
axiom true
   ==> (forall MissingLibrary._default.Last$T: Ty, s#0: Seq Box :: 
    { _0_MissingLibrary.__default.Last(MissingLibrary._default.Last$T, s#0) } 
    _0_MissingLibrary.__default.Last#canCall(MissingLibrary._default.Last$T, s#0)
         || ($Is(s#0, TSeq(MissingLibrary._default.Last$T)) && 0 < Seq#Length(s#0))
       ==> _0_MissingLibrary.__default.Last(MissingLibrary._default.Last$T, s#0)
         == Seq#Index(s#0, Seq#Length(s#0) - 1));

// definition axiom for _0_MissingLibrary.__default.Last for all literals(revealed)
axiom true
   ==> (forall MissingLibrary._default.Last$T: Ty, s#0: Seq Box :: 
    {:weight 3} { _0_MissingLibrary.__default.Last(MissingLibrary._default.Last$T, Lit(s#0)) } 
    _0_MissingLibrary.__default.Last#canCall(MissingLibrary._default.Last$T, Lit(s#0))
         || ($Is(s#0, TSeq(MissingLibrary._default.Last$T)) && 0 < Seq#Length(Lit(s#0)))
       ==> _0_MissingLibrary.__default.Last(MissingLibrary._default.Last$T, Lit(s#0))
         == Seq#Index(Lit(s#0), Seq#Length(Lit(s#0)) - 1));

// function declaration for MissingLibrary._default.EmptyImap
function _0_MissingLibrary.__default.EmptyImap(MissingLibrary._default.EmptyImap$K: Ty, 
    MissingLibrary._default.EmptyImap$V: Ty, 
    $ly: LayerType)
   : IMap Box Box;

function _0_MissingLibrary.__default.EmptyImap#canCall(MissingLibrary._default.EmptyImap$K: Ty, MissingLibrary._default.EmptyImap$V: Ty)
   : bool;

// layer synonym axiom
axiom (forall MissingLibrary._default.EmptyImap$K: Ty, 
    MissingLibrary._default.EmptyImap$V: Ty, 
    $ly: LayerType :: 
  { _0_MissingLibrary.__default.EmptyImap(MissingLibrary._default.EmptyImap$K, 
      MissingLibrary._default.EmptyImap$V, 
      $LS($ly)) } 
  _0_MissingLibrary.__default.EmptyImap(MissingLibrary._default.EmptyImap$K, 
      MissingLibrary._default.EmptyImap$V, 
      $LS($ly))
     == _0_MissingLibrary.__default.EmptyImap(MissingLibrary._default.EmptyImap$K, MissingLibrary._default.EmptyImap$V, $ly));

// fuel synonym axiom
axiom (forall MissingLibrary._default.EmptyImap$K: Ty, 
    MissingLibrary._default.EmptyImap$V: Ty, 
    $ly: LayerType :: 
  { _0_MissingLibrary.__default.EmptyImap(MissingLibrary._default.EmptyImap$K, 
      MissingLibrary._default.EmptyImap$V, 
      AsFuelBottom($ly)) } 
  _0_MissingLibrary.__default.EmptyImap(MissingLibrary._default.EmptyImap$K, MissingLibrary._default.EmptyImap$V, $ly)
     == _0_MissingLibrary.__default.EmptyImap(MissingLibrary._default.EmptyImap$K, MissingLibrary._default.EmptyImap$V, $LZ));

// consequence axiom for _0_MissingLibrary.__default.EmptyImap
axiom true
   ==> (forall MissingLibrary._default.EmptyImap$K: Ty, 
      MissingLibrary._default.EmptyImap$V: Ty, 
      $ly: LayerType :: 
    { _0_MissingLibrary.__default.EmptyImap(MissingLibrary._default.EmptyImap$K, MissingLibrary._default.EmptyImap$V, $ly) } 
    true
       ==> ISet#Equal(IMap#Domain(_0_MissingLibrary.__default.EmptyImap(MissingLibrary._default.EmptyImap$K, MissingLibrary._default.EmptyImap$V, $ly)), 
          ISet#Empty(): ISet Box)
         && $Is(_0_MissingLibrary.__default.EmptyImap(MissingLibrary._default.EmptyImap$K, MissingLibrary._default.EmptyImap$V, $ly), 
          TIMap(MissingLibrary._default.EmptyImap$K, MissingLibrary._default.EmptyImap$V)));

function _0_MissingLibrary.__default.EmptyImap#requires(Ty, Ty, LayerType) : bool;

// #requires axiom for _0_MissingLibrary.__default.EmptyImap
axiom (forall MissingLibrary._default.EmptyImap$K: Ty, 
    MissingLibrary._default.EmptyImap$V: Ty, 
    $ly: LayerType, 
    $Heap: Heap :: 
  { _0_MissingLibrary.__default.EmptyImap#requires(MissingLibrary._default.EmptyImap$K, MissingLibrary._default.EmptyImap$V, $ly), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
     ==> _0_MissingLibrary.__default.EmptyImap#requires(MissingLibrary._default.EmptyImap$K, MissingLibrary._default.EmptyImap$V, $ly)
       == true);

function $let#3_v() : Box;

function $let#3$canCall() : bool;

axiom $let#3$canCall() ==> Lit(true);

// definition axiom for _0_MissingLibrary.__default.EmptyImap(revealed)
axiom true
   ==> (forall MissingLibrary._default.EmptyImap$K: Ty, 
      MissingLibrary._default.EmptyImap$V: Ty, 
      $ly: LayerType, 
      $Heap: Heap :: 
    { _0_MissingLibrary.__default.EmptyImap(MissingLibrary._default.EmptyImap$K, 
        MissingLibrary._default.EmptyImap$V, 
        $LS($ly)), $IsGoodHeap($Heap) } 
    _0_MissingLibrary.__default.EmptyImap#canCall(MissingLibrary._default.EmptyImap$K, MissingLibrary._default.EmptyImap$V)
         || $IsGoodHeap($Heap)
       ==> $let#3$canCall()
         && _0_MissingLibrary.__default.EmptyImap(MissingLibrary._default.EmptyImap$K, 
            MissingLibrary._default.EmptyImap$V, 
            $LS($ly))
           == IMap#Glue((lambda $w#5: Box :: $IsBox($w#5, MissingLibrary._default.EmptyImap$K) && false), 
            (lambda $w#5: Box :: $let#3_v()), 
            TIMap(MissingLibrary._default.EmptyImap$K, MissingLibrary._default.EmptyImap$V)));

// definition axiom for _0_MissingLibrary.__default.EmptyImap for all literals(revealed)
axiom true
   ==> (forall MissingLibrary._default.EmptyImap$K: Ty, 
      MissingLibrary._default.EmptyImap$V: Ty, 
      $ly: LayerType, 
      $Heap: Heap :: 
    {:weight 3} { _0_MissingLibrary.__default.EmptyImap(MissingLibrary._default.EmptyImap$K, 
        MissingLibrary._default.EmptyImap$V, 
        $LS($ly)), $IsGoodHeap($Heap) } 
    _0_MissingLibrary.__default.EmptyImap#canCall(MissingLibrary._default.EmptyImap$K, MissingLibrary._default.EmptyImap$V)
         || $IsGoodHeap($Heap)
       ==> $let#3$canCall()
         && _0_MissingLibrary.__default.EmptyImap(MissingLibrary._default.EmptyImap$K, 
            MissingLibrary._default.EmptyImap$V, 
            $LS($ly))
           == IMap#Glue((lambda $w#6: Box :: $IsBox($w#6, MissingLibrary._default.EmptyImap$K) && false), 
            (lambda $w#6: Box :: $let#3_v()), 
            TIMap(MissingLibrary._default.EmptyImap$K, MissingLibrary._default.EmptyImap$V)));

// function declaration for MissingLibrary._default.EmptyMap
function _0_MissingLibrary.__default.EmptyMap(MissingLibrary._default.EmptyMap$K: Ty, 
    MissingLibrary._default.EmptyMap$V: Ty, 
    $ly: LayerType)
   : Map Box Box;

function _0_MissingLibrary.__default.EmptyMap#canCall(MissingLibrary._default.EmptyMap$K: Ty, MissingLibrary._default.EmptyMap$V: Ty)
   : bool;

// layer synonym axiom
axiom (forall MissingLibrary._default.EmptyMap$K: Ty, 
    MissingLibrary._default.EmptyMap$V: Ty, 
    $ly: LayerType :: 
  { _0_MissingLibrary.__default.EmptyMap(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V, $LS($ly)) } 
  _0_MissingLibrary.__default.EmptyMap(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V, $LS($ly))
     == _0_MissingLibrary.__default.EmptyMap(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V, $ly));

// fuel synonym axiom
axiom (forall MissingLibrary._default.EmptyMap$K: Ty, 
    MissingLibrary._default.EmptyMap$V: Ty, 
    $ly: LayerType :: 
  { _0_MissingLibrary.__default.EmptyMap(MissingLibrary._default.EmptyMap$K, 
      MissingLibrary._default.EmptyMap$V, 
      AsFuelBottom($ly)) } 
  _0_MissingLibrary.__default.EmptyMap(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V, $ly)
     == _0_MissingLibrary.__default.EmptyMap(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V, $LZ));

// consequence axiom for _0_MissingLibrary.__default.EmptyMap
axiom true
   ==> (forall MissingLibrary._default.EmptyMap$K: Ty, 
      MissingLibrary._default.EmptyMap$V: Ty, 
      $ly: LayerType :: 
    { _0_MissingLibrary.__default.EmptyMap(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V, $ly) } 
    true
       ==> Set#Equal(Map#Domain(_0_MissingLibrary.__default.EmptyMap(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V, $ly)), 
          Set#Empty(): Set Box)
         && $Is(_0_MissingLibrary.__default.EmptyMap(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V, $ly), 
          TMap(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V)));

function _0_MissingLibrary.__default.EmptyMap#requires(Ty, Ty, LayerType) : bool;

// #requires axiom for _0_MissingLibrary.__default.EmptyMap
axiom (forall MissingLibrary._default.EmptyMap$K: Ty, 
    MissingLibrary._default.EmptyMap$V: Ty, 
    $ly: LayerType, 
    $Heap: Heap :: 
  { _0_MissingLibrary.__default.EmptyMap#requires(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V, $ly), $IsGoodHeap($Heap) } 
  $IsGoodHeap($Heap)
     ==> _0_MissingLibrary.__default.EmptyMap#requires(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V, $ly)
       == true);

function $let#6_v() : Box;

function $let#6$canCall() : bool;

axiom $let#6$canCall() ==> Lit(true);

// definition axiom for _0_MissingLibrary.__default.EmptyMap(revealed)
axiom true
   ==> (forall MissingLibrary._default.EmptyMap$K: Ty, 
      MissingLibrary._default.EmptyMap$V: Ty, 
      $ly: LayerType, 
      $Heap: Heap :: 
    { _0_MissingLibrary.__default.EmptyMap(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V, $LS($ly)), $IsGoodHeap($Heap) } 
    _0_MissingLibrary.__default.EmptyMap#canCall(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V)
         || $IsGoodHeap($Heap)
       ==> $let#6$canCall()
         && _0_MissingLibrary.__default.EmptyMap(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V, $LS($ly))
           == Map#Glue((lambda $w#5: Box :: $IsBox($w#5, MissingLibrary._default.EmptyMap$K) && false), 
            (lambda $w#5: Box :: $let#6_v()), 
            TMap(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V)));

// definition axiom for _0_MissingLibrary.__default.EmptyMap for all literals(revealed)
axiom true
   ==> (forall MissingLibrary._default.EmptyMap$K: Ty, 
      MissingLibrary._default.EmptyMap$V: Ty, 
      $ly: LayerType, 
      $Heap: Heap :: 
    {:weight 3} { _0_MissingLibrary.__default.EmptyMap(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V, $LS($ly)), $IsGoodHeap($Heap) } 
    _0_MissingLibrary.__default.EmptyMap#canCall(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V)
         || $IsGoodHeap($Heap)
       ==> $let#6$canCall()
         && _0_MissingLibrary.__default.EmptyMap(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V, $LS($ly))
           == Map#Glue((lambda $w#6: Box :: $IsBox($w#6, MissingLibrary._default.EmptyMap$K) && false), 
            (lambda $w#6: Box :: $let#6_v()), 
            TMap(MissingLibrary._default.EmptyMap$K, MissingLibrary._default.EmptyMap$V)));

// function declaration for MissingLibrary._default.MapRemove
function _0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K: Ty, 
    MissingLibrary._default.MapRemove$V: Ty, 
    $ly: LayerType, 
    m#0: Map Box Box, 
    k#0: Box)
   : Map Box Box;

function _0_MissingLibrary.__default.MapRemove#canCall(MissingLibrary._default.MapRemove$K: Ty, 
    MissingLibrary._default.MapRemove$V: Ty, 
    m#0: Map Box Box, 
    k#0: Box)
   : bool;

// layer synonym axiom
axiom (forall MissingLibrary._default.MapRemove$K: Ty, 
    MissingLibrary._default.MapRemove$V: Ty, 
    $ly: LayerType, 
    m#0: Map Box Box, 
    k#0: Box :: 
  { _0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
      MissingLibrary._default.MapRemove$V, 
      $LS($ly), 
      m#0, 
      k#0) } 
  _0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
      MissingLibrary._default.MapRemove$V, 
      $LS($ly), 
      m#0, 
      k#0)
     == _0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
      MissingLibrary._default.MapRemove$V, 
      $ly, 
      m#0, 
      k#0));

// fuel synonym axiom
axiom (forall MissingLibrary._default.MapRemove$K: Ty, 
    MissingLibrary._default.MapRemove$V: Ty, 
    $ly: LayerType, 
    m#0: Map Box Box, 
    k#0: Box :: 
  { _0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
      MissingLibrary._default.MapRemove$V, 
      AsFuelBottom($ly), 
      m#0, 
      k#0) } 
  _0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
      MissingLibrary._default.MapRemove$V, 
      $ly, 
      m#0, 
      k#0)
     == _0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
      MissingLibrary._default.MapRemove$V, 
      $LZ, 
      m#0, 
      k#0));

// consequence axiom for _0_MissingLibrary.__default.MapRemove
axiom true
   ==> (forall MissingLibrary._default.MapRemove$K: Ty, 
      MissingLibrary._default.MapRemove$V: Ty, 
      $ly: LayerType, 
      m#0: Map Box Box, 
      k#0: Box :: 
    { _0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
        MissingLibrary._default.MapRemove$V, 
        $ly, 
        m#0, 
        k#0) } 
    _0_MissingLibrary.__default.MapRemove#canCall(MissingLibrary._default.MapRemove$K, 
          MissingLibrary._default.MapRemove$V, 
          m#0, 
          k#0)
         || ($Is(m#0, 
            TMap(MissingLibrary._default.MapRemove$K, MissingLibrary._default.MapRemove$V))
           && $IsBox(k#0, MissingLibrary._default.MapRemove$K))
       ==> Set#Equal(Map#Domain(_0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
              MissingLibrary._default.MapRemove$V, 
              $ly, 
              m#0, 
              k#0)), 
          Set#Difference(Map#Domain(m#0), Set#UnionOne(Set#Empty(): Set Box, k#0)))
         && (forall j#6: Box :: 
          { Map#Elements(m#0)[j#6] } 
            { Map#Elements(_0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
                MissingLibrary._default.MapRemove$V, 
                $ly, 
                m#0, 
                k#0))[j#6] } 
            { Map#Domain(_0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
                MissingLibrary._default.MapRemove$V, 
                $ly, 
                m#0, 
                k#0))[j#6] } 
          $IsBox(j#6, MissingLibrary._default.MapRemove$K)
             ==> 
            Map#Domain(_0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
                MissingLibrary._default.MapRemove$V, 
                $ly, 
                m#0, 
                k#0))[j#6]
             ==> Map#Elements(_0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
                  MissingLibrary._default.MapRemove$V, 
                  $ly, 
                  m#0, 
                  k#0))[j#6]
               == Map#Elements(m#0)[j#6])
         && $Is(_0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
            MissingLibrary._default.MapRemove$V, 
            $ly, 
            m#0, 
            k#0), 
          TMap(MissingLibrary._default.MapRemove$K, MissingLibrary._default.MapRemove$V)));

function _0_MissingLibrary.__default.MapRemove#requires(Ty, Ty, LayerType, Map Box Box, Box) : bool;

// #requires axiom for _0_MissingLibrary.__default.MapRemove
axiom (forall MissingLibrary._default.MapRemove$K: Ty, 
    MissingLibrary._default.MapRemove$V: Ty, 
    $ly: LayerType, 
    m#0: Map Box Box, 
    k#0: Box :: 
  { _0_MissingLibrary.__default.MapRemove#requires(MissingLibrary._default.MapRemove$K, 
      MissingLibrary._default.MapRemove$V, 
      $ly, 
      m#0, 
      k#0) } 
  $Is(m#0, 
        TMap(MissingLibrary._default.MapRemove$K, MissingLibrary._default.MapRemove$V))
       && $IsBox(k#0, MissingLibrary._default.MapRemove$K)
     ==> _0_MissingLibrary.__default.MapRemove#requires(MissingLibrary._default.MapRemove$K, 
        MissingLibrary._default.MapRemove$V, 
        $ly, 
        m#0, 
        k#0)
       == true);

// definition axiom for _0_MissingLibrary.__default.MapRemove(revealed)
axiom true
   ==> (forall MissingLibrary._default.MapRemove$K: Ty, 
      MissingLibrary._default.MapRemove$V: Ty, 
      $ly: LayerType, 
      m#0: Map Box Box, 
      k#0: Box :: 
    { _0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
        MissingLibrary._default.MapRemove$V, 
        $LS($ly), 
        m#0, 
        k#0) } 
    _0_MissingLibrary.__default.MapRemove#canCall(MissingLibrary._default.MapRemove$K, 
          MissingLibrary._default.MapRemove$V, 
          m#0, 
          k#0)
         || ($Is(m#0, 
            TMap(MissingLibrary._default.MapRemove$K, MissingLibrary._default.MapRemove$V))
           && $IsBox(k#0, MissingLibrary._default.MapRemove$K))
       ==> (forall j#1: Box :: { Map#Elements(m#0)[j#1] } { Map#Domain(m#0)[j#1] } true)
         && _0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
            MissingLibrary._default.MapRemove$V, 
            $LS($ly), 
            m#0, 
            k#0)
           == Map#Glue((lambda $w#7: Box :: 
              $IsBox($w#7, MissingLibrary._default.MapRemove$K)
                 && 
                Map#Domain(m#0)[$w#7]
                 && $w#7 != k#0), 
            (lambda $w#7: Box :: Map#Elements(m#0)[$w#7]), 
            TMap(MissingLibrary._default.MapRemove$K, MissingLibrary._default.MapRemove$V)));

// definition axiom for _0_MissingLibrary.__default.MapRemove for decreasing-related literals(revealed)
axiom true
   ==> (forall MissingLibrary._default.MapRemove$K: Ty, 
      MissingLibrary._default.MapRemove$V: Ty, 
      $ly: LayerType, 
      m#0: Map Box Box, 
      k#0: Box :: 
    {:weight 3} { _0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
        MissingLibrary._default.MapRemove$V, 
        $LS($ly), 
        Lit(m#0), 
        k#0) } 
    _0_MissingLibrary.__default.MapRemove#canCall(MissingLibrary._default.MapRemove$K, 
          MissingLibrary._default.MapRemove$V, 
          Lit(m#0), 
          k#0)
         || ($Is(m#0, 
            TMap(MissingLibrary._default.MapRemove$K, MissingLibrary._default.MapRemove$V))
           && $IsBox(k#0, MissingLibrary._default.MapRemove$K))
       ==> (forall j#1: Box :: { Map#Elements(m#0)[j#1] } { Map#Domain(m#0)[j#1] } true)
         && _0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
            MissingLibrary._default.MapRemove$V, 
            $LS($ly), 
            Lit(m#0), 
            k#0)
           == Map#Glue((lambda $w#8: Box :: 
              $IsBox($w#8, MissingLibrary._default.MapRemove$K)
                 && 
                Map#Domain(m#0)[$w#8]
                 && $w#8 != k#0), 
            (lambda $w#8: Box :: Map#Elements(Lit(m#0))[$w#8]), 
            TMap(MissingLibrary._default.MapRemove$K, MissingLibrary._default.MapRemove$V)));

// definition axiom for _0_MissingLibrary.__default.MapRemove for all literals(revealed)
axiom true
   ==> (forall MissingLibrary._default.MapRemove$K: Ty, 
      MissingLibrary._default.MapRemove$V: Ty, 
      $ly: LayerType, 
      m#0: Map Box Box, 
      k#0: Box :: 
    {:weight 3} { _0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
        MissingLibrary._default.MapRemove$V, 
        $LS($ly), 
        Lit(m#0), 
        Lit(k#0)) } 
    _0_MissingLibrary.__default.MapRemove#canCall(MissingLibrary._default.MapRemove$K, 
          MissingLibrary._default.MapRemove$V, 
          Lit(m#0), 
          Lit(k#0))
         || ($Is(m#0, 
            TMap(MissingLibrary._default.MapRemove$K, MissingLibrary._default.MapRemove$V))
           && $IsBox(k#0, MissingLibrary._default.MapRemove$K))
       ==> (forall j#1: Box :: { Map#Elements(m#0)[j#1] } { Map#Domain(m#0)[j#1] } true)
         && _0_MissingLibrary.__default.MapRemove(MissingLibrary._default.MapRemove$K, 
            MissingLibrary._default.MapRemove$V, 
            $LS($ly), 
            Lit(m#0), 
            Lit(k#0))
           == Map#Glue((lambda $w#9: Box :: 
              $IsBox($w#9, MissingLibrary._default.MapRemove$K)
                 && 
                Map#Domain(m#0)[$w#9]
                 && $w#9 != k#0), 
            (lambda $w#9: Box :: Map#Elements(Lit(m#0))[$w#9]), 
            TMap(MissingLibrary._default.MapRemove$K, MissingLibrary._default.MapRemove$V)));

// function declaration for MissingLibrary._default.SingletonImap
function _0_MissingLibrary.__default.SingletonImap(MissingLibrary._default.SingletonImap$K: Ty, 
    MissingLibrary._default.SingletonImap$V: Ty, 
    $ly: LayerType, 
    k#0: Box, 
    v#0: Box)
   : IMap Box Box;

function _0_MissingLibrary.__default.SingletonImap#canCall(MissingLibrary._default.SingletonImap$K: Ty, 
    MissingLibrary._default.SingletonImap$V: Ty, 
    k#0: Box, 
    v#0: Box)
   : bool;

// layer synonym axiom
axiom (forall MissingLibrary._default.SingletonImap$K: Ty, 
    MissingLibrary._default.SingletonImap$V: Ty, 
    $ly: LayerType, 
    k#0: Box, 
    v#0: Box :: 
  { _0_MissingLibrary.__default.SingletonImap(MissingLibrary._default.SingletonImap$K, 
      MissingLibrary._default.SingletonImap$V, 
      $LS($ly), 
      k#0, 
      v#0) } 
  _0_MissingLibrary.__default.SingletonImap(MissingLibrary._default.SingletonImap$K, 
      MissingLibrary._default.SingletonImap$V, 
      $LS($ly), 
      k#0, 
      v#0)
     == _0_MissingLibrary.__default.SingletonImap(MissingLibrary._default.SingletonImap$K, 
      MissingLibrary._default.SingletonImap$V, 
      $ly, 
      k#0, 
      v#0));

// fuel synonym axiom
axiom (forall MissingLibrary._default.SingletonImap$K: Ty, 
    MissingLibrary._default.SingletonImap$V: Ty, 
    $ly: LayerType, 
    k#0: Box, 
    v#0: Box :: 
  { _0_MissingLibrary.__default.SingletonImap(MissingLibrary._default.SingletonImap$K, 
      MissingLibrary._default.SingletonImap$V, 
      AsFuelBottom($ly), 
      k#0, 
      v#0) } 
  _0_MissingLibrary.__default.SingletonImap(MissingLibrary._default.SingletonImap$K, 
      MissingLibrary._default.SingletonImap$V, 
      $ly, 
      k#0, 
      v#0)
     == _0_MissingLibrary.__default.SingletonImap(MissingLibrary._default.SingletonImap$K, 
      MissingLibrary._default.SingletonImap$V, 
      $LZ, 
      k#0, 
      v#0));

// consequence axiom for _0_MissingLibrary.__default.SingletonImap
axiom true
   ==> (forall MissingLibrary._default.SingletonImap$K: Ty, 
      MissingLibrary._default.SingletonImap$V: Ty, 
      $ly: LayerType, 
      k#0: Box, 
      v#0: Box :: 
    { _0_MissingLibrary.__default.SingletonImap(MissingLibrary._default.SingletonImap$K, 
        MissingLibrary._default.SingletonImap$V, 
        $ly, 
        k#0, 
        v#0) } 
    _0_MissingLibrary.__default.SingletonImap#canCall(MissingLibrary._default.SingletonImap$K, 
          MissingLibrary._default.SingletonImap$V, 
          k#0, 
          v#0)
         || ($IsBox(k#0, MissingLibrary._default.SingletonImap$K)
           && $IsBox(v#0, MissingLibrary._default.SingletonImap$V))
       ==> ISet#Equal(IMap#Domain(_0_MissingLibrary.__default.SingletonImap(MissingLibrary._default.SingletonImap$K, 
              MissingLibrary._default.SingletonImap$V, 
              $ly, 
              k#0, 
              v#0)), 
          ISet#UnionOne(ISet#Empty(): ISet Box, k#0))
         && IMap#Elements(_0_MissingLibrary.__default.SingletonImap(MissingLibrary._default.SingletonImap$K, 
              MissingLibrary._default.SingletonImap$V, 
              $ly, 
              k#0, 
              v#0))[k#0]
           == v#0
         && $Is(_0_MissingLibrary.__default.SingletonImap(MissingLibrary._default.SingletonImap$K, 
            MissingLibrary._default.SingletonImap$V, 
            $ly, 
            k#0, 
            v#0), 
          TIMap(MissingLibrary._default.SingletonImap$K, MissingLibrary._default.SingletonImap$V)));

function _0_MissingLibrary.__default.SingletonImap#requires(Ty, Ty, LayerType, Box, Box) : bool;

// #requires axiom for _0_MissingLibrary.__default.SingletonImap
axiom (forall MissingLibrary._default.SingletonImap$K: Ty, 
    MissingLibrary._default.SingletonImap$V: Ty, 
    $ly: LayerType, 
    k#0: Box, 
    v#0: Box :: 
  { _0_MissingLibrary.__default.SingletonImap#requires(MissingLibrary._default.SingletonImap$K, 
      MissingLibrary._default.SingletonImap$V, 
      $ly, 
      k#0, 
      v#0) } 
  $IsBox(k#0, MissingLibrary._default.SingletonImap$K)
       && $IsBox(v#0, MissingLibrary._default.SingletonImap$V)
     ==> _0_MissingLibrary.__default.SingletonImap#requires(MissingLibrary._default.SingletonImap$K, 
        MissingLibrary._default.SingletonImap$V, 
        $ly, 
        k#0, 
        v#0)
       == true);

// definition axiom for _0_MissingLibrary.__default.SingletonImap(revealed)
axiom true
   ==> (forall MissingLibrary._default.SingletonImap$K: Ty, 
      MissingLibrary._default.SingletonImap$V: Ty, 
      $ly: LayerType, 
      k#0: Box, 
      v#0: Box :: 
    { _0_MissingLibrary.__default.SingletonImap(MissingLibrary._default.SingletonImap$K, 
        MissingLibrary._default.SingletonImap$V, 
        $LS($ly), 
        k#0, 
        v#0) } 
    _0_MissingLibrary.__default.SingletonImap#canCall(MissingLibrary._default.SingletonImap$K, 
          MissingLibrary._default.SingletonImap$V, 
          k#0, 
          v#0)
         || ($IsBox(k#0, MissingLibrary._default.SingletonImap$K)
           && $IsBox(v#0, MissingLibrary._default.SingletonImap$V))
       ==> _0_MissingLibrary.__default.SingletonImap(MissingLibrary._default.SingletonImap$K, 
          MissingLibrary._default.SingletonImap$V, 
          $LS($ly), 
          k#0, 
          v#0)
         == IMap#Glue((lambda $w#5: Box :: 
            $IsBox($w#5, MissingLibrary._default.SingletonImap$K) && $w#5 == k#0), 
          (lambda $w#5: Box :: v#0), 
          TIMap(MissingLibrary._default.SingletonImap$K, MissingLibrary._default.SingletonImap$V)));

// definition axiom for _0_MissingLibrary.__default.SingletonImap for all literals(revealed)
axiom true
   ==> (forall MissingLibrary._default.SingletonImap$K: Ty, 
      MissingLibrary._default.SingletonImap$V: Ty, 
      $ly: LayerType, 
      k#0: Box, 
      v#0: Box :: 
    {:weight 3} { _0_MissingLibrary.__default.SingletonImap(MissingLibrary._default.SingletonImap$K, 
        MissingLibrary._default.SingletonImap$V, 
        $LS($ly), 
        Lit(k#0), 
        Lit(v#0)) } 
    _0_MissingLibrary.__default.SingletonImap#canCall(MissingLibrary._default.SingletonImap$K, 
          MissingLibrary._default.SingletonImap$V, 
          Lit(k#0), 
          Lit(v#0))
         || ($IsBox(k#0, MissingLibrary._default.SingletonImap$K)
           && $IsBox(v#0, MissingLibrary._default.SingletonImap$V))
       ==> _0_MissingLibrary.__default.SingletonImap(MissingLibrary._default.SingletonImap$K, 
          MissingLibrary._default.SingletonImap$V, 
          $LS($ly), 
          Lit(k#0), 
          Lit(v#0))
         == IMap#Glue((lambda $w#6: Box :: 
            $IsBox($w#6, MissingLibrary._default.SingletonImap$K) && $w#6 == Lit(k#0)), 
          (lambda $w#6: Box :: Lit(v#0)), 
          TIMap(MissingLibrary._default.SingletonImap$K, MissingLibrary._default.SingletonImap$V)));

// function declaration for MissingLibrary._default.MapUnionPreferB
function _0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U: Ty, 
    MissingLibrary._default.MapUnionPreferB$T: Ty, 
    $ly: LayerType, 
    mapa#0: Map Box Box, 
    mapb#0: Map Box Box)
   : Map Box Box;

function _0_MissingLibrary.__default.MapUnionPreferB#canCall(MissingLibrary._default.MapUnionPreferB$U: Ty, 
    MissingLibrary._default.MapUnionPreferB$T: Ty, 
    mapa#0: Map Box Box, 
    mapb#0: Map Box Box)
   : bool;

// layer synonym axiom
axiom (forall MissingLibrary._default.MapUnionPreferB$U: Ty, 
    MissingLibrary._default.MapUnionPreferB$T: Ty, 
    $ly: LayerType, 
    mapa#0: Map Box Box, 
    mapb#0: Map Box Box :: 
  { _0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
      MissingLibrary._default.MapUnionPreferB$T, 
      $LS($ly), 
      mapa#0, 
      mapb#0) } 
  _0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
      MissingLibrary._default.MapUnionPreferB$T, 
      $LS($ly), 
      mapa#0, 
      mapb#0)
     == _0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
      MissingLibrary._default.MapUnionPreferB$T, 
      $ly, 
      mapa#0, 
      mapb#0));

// fuel synonym axiom
axiom (forall MissingLibrary._default.MapUnionPreferB$U: Ty, 
    MissingLibrary._default.MapUnionPreferB$T: Ty, 
    $ly: LayerType, 
    mapa#0: Map Box Box, 
    mapb#0: Map Box Box :: 
  { _0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
      MissingLibrary._default.MapUnionPreferB$T, 
      AsFuelBottom($ly), 
      mapa#0, 
      mapb#0) } 
  _0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
      MissingLibrary._default.MapUnionPreferB$T, 
      $ly, 
      mapa#0, 
      mapb#0)
     == _0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
      MissingLibrary._default.MapUnionPreferB$T, 
      $LZ, 
      mapa#0, 
      mapb#0));

// consequence axiom for _0_MissingLibrary.__default.MapUnionPreferB
axiom true
   ==> (forall MissingLibrary._default.MapUnionPreferB$U: Ty, 
      MissingLibrary._default.MapUnionPreferB$T: Ty, 
      $ly: LayerType, 
      mapa#0: Map Box Box, 
      mapb#0: Map Box Box :: 
    { _0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
        MissingLibrary._default.MapUnionPreferB$T, 
        $ly, 
        mapa#0, 
        mapb#0) } 
    _0_MissingLibrary.__default.MapUnionPreferB#canCall(MissingLibrary._default.MapUnionPreferB$U, 
          MissingLibrary._default.MapUnionPreferB$T, 
          mapa#0, 
          mapb#0)
         || ($Is(mapa#0, 
            TMap(MissingLibrary._default.MapUnionPreferB$U, 
              MissingLibrary._default.MapUnionPreferB$T))
           && $Is(mapb#0, 
            TMap(MissingLibrary._default.MapUnionPreferB$U, 
              MissingLibrary._default.MapUnionPreferB$T)))
       ==> Set#Equal(Map#Domain(_0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
              MissingLibrary._default.MapUnionPreferB$T, 
              $ly, 
              mapa#0, 
              mapb#0)), 
          Set#Union(Map#Domain(mapa#0), Map#Domain(mapb#0)))
         && (forall k#12: Box :: 
          { Map#Elements(mapb#0)[k#12] } 
            { Map#Elements(_0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
                MissingLibrary._default.MapUnionPreferB$T, 
                $ly, 
                mapa#0, 
                mapb#0))[k#12] } 
            { Map#Domain(mapb#0)[k#12] } 
          $IsBox(k#12, MissingLibrary._default.MapUnionPreferB$U)
             ==> 
            Map#Domain(mapb#0)[k#12]
             ==> Map#Elements(_0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
                  MissingLibrary._default.MapUnionPreferB$T, 
                  $ly, 
                  mapa#0, 
                  mapb#0))[k#12]
               == Map#Elements(mapb#0)[k#12])
         && (forall k#13: Box :: 
          { Map#Elements(mapb#0)[k#13] } 
            { Map#Elements(_0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
                MissingLibrary._default.MapUnionPreferB$T, 
                $ly, 
                mapa#0, 
                mapb#0))[k#13] } 
          $IsBox(k#13, MissingLibrary._default.MapUnionPreferB$U)
             ==> 
            Map#Domain(mapb#0)[k#13] && !Map#Domain(mapa#0)[k#13]
             ==> Map#Elements(_0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
                  MissingLibrary._default.MapUnionPreferB$T, 
                  $ly, 
                  mapa#0, 
                  mapb#0))[k#13]
               == Map#Elements(mapb#0)[k#13])
         && (forall k#14: Box :: 
          { Map#Elements(mapa#0)[k#14] } 
            { Map#Elements(_0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
                MissingLibrary._default.MapUnionPreferB$T, 
                $ly, 
                mapa#0, 
                mapb#0))[k#14] } 
            { Map#Domain(mapb#0)[k#14] } 
            { Map#Domain(mapa#0)[k#14] } 
          $IsBox(k#14, MissingLibrary._default.MapUnionPreferB$U)
             ==> 
            Map#Domain(mapa#0)[k#14] && !Map#Domain(mapb#0)[k#14]
             ==> Map#Elements(_0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
                  MissingLibrary._default.MapUnionPreferB$T, 
                  $ly, 
                  mapa#0, 
                  mapb#0))[k#14]
               == Map#Elements(mapa#0)[k#14])
         && $Is(_0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
            MissingLibrary._default.MapUnionPreferB$T, 
            $ly, 
            mapa#0, 
            mapb#0), 
          TMap(MissingLibrary._default.MapUnionPreferB$U, 
            MissingLibrary._default.MapUnionPreferB$T)));

function _0_MissingLibrary.__default.MapUnionPreferB#requires(Ty, Ty, LayerType, Map Box Box, Map Box Box) : bool;

// #requires axiom for _0_MissingLibrary.__default.MapUnionPreferB
axiom (forall MissingLibrary._default.MapUnionPreferB$U: Ty, 
    MissingLibrary._default.MapUnionPreferB$T: Ty, 
    $ly: LayerType, 
    mapa#0: Map Box Box, 
    mapb#0: Map Box Box :: 
  { _0_MissingLibrary.__default.MapUnionPreferB#requires(MissingLibrary._default.MapUnionPreferB$U, 
      MissingLibrary._default.MapUnionPreferB$T, 
      $ly, 
      mapa#0, 
      mapb#0) } 
  $Is(mapa#0, 
        TMap(MissingLibrary._default.MapUnionPreferB$U, 
          MissingLibrary._default.MapUnionPreferB$T))
       && $Is(mapb#0, 
        TMap(MissingLibrary._default.MapUnionPreferB$U, 
          MissingLibrary._default.MapUnionPreferB$T))
     ==> _0_MissingLibrary.__default.MapUnionPreferB#requires(MissingLibrary._default.MapUnionPreferB$U, 
        MissingLibrary._default.MapUnionPreferB$T, 
        $ly, 
        mapa#0, 
        mapb#0)
       == true);

// definition axiom for _0_MissingLibrary.__default.MapUnionPreferB(revealed)
axiom true
   ==> (forall MissingLibrary._default.MapUnionPreferB$U: Ty, 
      MissingLibrary._default.MapUnionPreferB$T: Ty, 
      $ly: LayerType, 
      mapa#0: Map Box Box, 
      mapb#0: Map Box Box :: 
    { _0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
        MissingLibrary._default.MapUnionPreferB$T, 
        $LS($ly), 
        mapa#0, 
        mapb#0) } 
    _0_MissingLibrary.__default.MapUnionPreferB#canCall(MissingLibrary._default.MapUnionPreferB$U, 
          MissingLibrary._default.MapUnionPreferB$T, 
          mapa#0, 
          mapb#0)
         || ($Is(mapa#0, 
            TMap(MissingLibrary._default.MapUnionPreferB$U, 
              MissingLibrary._default.MapUnionPreferB$T))
           && $Is(mapb#0, 
            TMap(MissingLibrary._default.MapUnionPreferB$U, 
              MissingLibrary._default.MapUnionPreferB$T)))
       ==> (forall x#0: Box :: 
          { Map#Elements(mapa#0)[x#0] } 
            { Map#Elements(mapb#0)[x#0] } 
            { Map#Domain(mapb#0)[x#0] } 
          true)
         && _0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
            MissingLibrary._default.MapUnionPreferB$T, 
            $LS($ly), 
            mapa#0, 
            mapb#0)
           == Map#Glue((lambda $w#5: Box :: 
              $IsBox($w#5, MissingLibrary._default.MapUnionPreferB$U)
                 && (Map#Domain(mapa#0)[$w#5] || Map#Domain(mapb#0)[$w#5])), 
            (lambda $w#5: Box :: 
              (if Map#Domain(mapb#0)[$w#5]
                 then Map#Elements(mapb#0)[$w#5]
                 else Map#Elements(mapa#0)[$w#5])), 
            TMap(MissingLibrary._default.MapUnionPreferB$U, 
              MissingLibrary._default.MapUnionPreferB$T)));

// definition axiom for _0_MissingLibrary.__default.MapUnionPreferB for all literals(revealed)
axiom true
   ==> (forall MissingLibrary._default.MapUnionPreferB$U: Ty, 
      MissingLibrary._default.MapUnionPreferB$T: Ty, 
      $ly: LayerType, 
      mapa#0: Map Box Box, 
      mapb#0: Map Box Box :: 
    {:weight 3} { _0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
        MissingLibrary._default.MapUnionPreferB$T, 
        $LS($ly), 
        Lit(mapa#0), 
        Lit(mapb#0)) } 
    _0_MissingLibrary.__default.MapUnionPreferB#canCall(MissingLibrary._default.MapUnionPreferB$U, 
          MissingLibrary._default.MapUnionPreferB$T, 
          Lit(mapa#0), 
          Lit(mapb#0))
         || ($Is(mapa#0, 
            TMap(MissingLibrary._default.MapUnionPreferB$U, 
              MissingLibrary._default.MapUnionPreferB$T))
           && $Is(mapb#0, 
            TMap(MissingLibrary._default.MapUnionPreferB$U, 
              MissingLibrary._default.MapUnionPreferB$T)))
       ==> (forall x#0: Box :: 
          { Map#Elements(mapa#0)[x#0] } 
            { Map#Elements(mapb#0)[x#0] } 
            { Map#Domain(mapb#0)[x#0] } 
          true)
         && _0_MissingLibrary.__default.MapUnionPreferB(MissingLibrary._default.MapUnionPreferB$U, 
            MissingLibrary._default.MapUnionPreferB$T, 
            $LS($ly), 
            Lit(mapa#0), 
            Lit(mapb#0))
           == Map#Glue((lambda $w#6: Box :: 
              $IsBox($w#6, MissingLibrary._default.MapUnionPreferB$U)
                 && (Lit(Map#Domain(Lit(mapa#0)))[$w#6] || Lit(Map#Domain(Lit(mapb#0)))[$w#6])), 
            (lambda $w#6: Box :: 
              (if Map#Domain(mapb#0)[$w#6]
                 then Map#Elements(Lit(mapb#0))[$w#6]
                 else Map#Elements(Lit(mapa#0))[$w#6])), 
            TMap(MissingLibrary._default.MapUnionPreferB$U, 
              MissingLibrary._default.MapUnionPreferB$T)));

// function declaration for MissingLibrary._default.ImapUnionPreferB
function _0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U: Ty, 
    MissingLibrary._default.ImapUnionPreferB$T: Ty, 
    $ly: LayerType, 
    mapa#0: IMap Box Box, 
    mapb#0: IMap Box Box)
   : IMap Box Box;

function _0_MissingLibrary.__default.ImapUnionPreferB#canCall(MissingLibrary._default.ImapUnionPreferB$U: Ty, 
    MissingLibrary._default.ImapUnionPreferB$T: Ty, 
    mapa#0: IMap Box Box, 
    mapb#0: IMap Box Box)
   : bool;

// layer synonym axiom
axiom (forall MissingLibrary._default.ImapUnionPreferB$U: Ty, 
    MissingLibrary._default.ImapUnionPreferB$T: Ty, 
    $ly: LayerType, 
    mapa#0: IMap Box Box, 
    mapb#0: IMap Box Box :: 
  { _0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
      MissingLibrary._default.ImapUnionPreferB$T, 
      $LS($ly), 
      mapa#0, 
      mapb#0) } 
  _0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
      MissingLibrary._default.ImapUnionPreferB$T, 
      $LS($ly), 
      mapa#0, 
      mapb#0)
     == _0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
      MissingLibrary._default.ImapUnionPreferB$T, 
      $ly, 
      mapa#0, 
      mapb#0));

// fuel synonym axiom
axiom (forall MissingLibrary._default.ImapUnionPreferB$U: Ty, 
    MissingLibrary._default.ImapUnionPreferB$T: Ty, 
    $ly: LayerType, 
    mapa#0: IMap Box Box, 
    mapb#0: IMap Box Box :: 
  { _0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
      MissingLibrary._default.ImapUnionPreferB$T, 
      AsFuelBottom($ly), 
      mapa#0, 
      mapb#0) } 
  _0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
      MissingLibrary._default.ImapUnionPreferB$T, 
      $ly, 
      mapa#0, 
      mapb#0)
     == _0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
      MissingLibrary._default.ImapUnionPreferB$T, 
      $LZ, 
      mapa#0, 
      mapb#0));

// consequence axiom for _0_MissingLibrary.__default.ImapUnionPreferB
axiom true
   ==> (forall MissingLibrary._default.ImapUnionPreferB$U: Ty, 
      MissingLibrary._default.ImapUnionPreferB$T: Ty, 
      $ly: LayerType, 
      mapa#0: IMap Box Box, 
      mapb#0: IMap Box Box :: 
    { _0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
        MissingLibrary._default.ImapUnionPreferB$T, 
        $ly, 
        mapa#0, 
        mapb#0) } 
    _0_MissingLibrary.__default.ImapUnionPreferB#canCall(MissingLibrary._default.ImapUnionPreferB$U, 
          MissingLibrary._default.ImapUnionPreferB$T, 
          mapa#0, 
          mapb#0)
         || ($Is(mapa#0, 
            TIMap(MissingLibrary._default.ImapUnionPreferB$U, 
              MissingLibrary._default.ImapUnionPreferB$T))
           && $Is(mapb#0, 
            TIMap(MissingLibrary._default.ImapUnionPreferB$U, 
              MissingLibrary._default.ImapUnionPreferB$T)))
       ==> ISet#Equal(IMap#Domain(_0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
              MissingLibrary._default.ImapUnionPreferB$T, 
              $ly, 
              mapa#0, 
              mapb#0)), 
          ISet#Union(IMap#Domain(mapa#0), IMap#Domain(mapb#0)))
         && (forall k#12: Box :: 
          { IMap#Elements(mapb#0)[k#12] } 
            { IMap#Elements(_0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
                MissingLibrary._default.ImapUnionPreferB$T, 
                $ly, 
                mapa#0, 
                mapb#0))[k#12] } 
            { IMap#Domain(mapb#0)[k#12] } 
          $IsBox(k#12, MissingLibrary._default.ImapUnionPreferB$U)
             ==> 
            IMap#Domain(mapb#0)[k#12]
             ==> IMap#Elements(_0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
                  MissingLibrary._default.ImapUnionPreferB$T, 
                  $ly, 
                  mapa#0, 
                  mapb#0))[k#12]
               == IMap#Elements(mapb#0)[k#12])
         && (forall k#13: Box :: 
          { IMap#Elements(mapb#0)[k#13] } 
            { IMap#Elements(_0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
                MissingLibrary._default.ImapUnionPreferB$T, 
                $ly, 
                mapa#0, 
                mapb#0))[k#13] } 
          $IsBox(k#13, MissingLibrary._default.ImapUnionPreferB$U)
             ==> 
            IMap#Domain(mapb#0)[k#13] && !IMap#Domain(mapa#0)[k#13]
             ==> IMap#Elements(_0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
                  MissingLibrary._default.ImapUnionPreferB$T, 
                  $ly, 
                  mapa#0, 
                  mapb#0))[k#13]
               == IMap#Elements(mapb#0)[k#13])
         && (forall k#14: Box :: 
          { IMap#Elements(mapa#0)[k#14] } 
            { IMap#Elements(_0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
                MissingLibrary._default.ImapUnionPreferB$T, 
                $ly, 
                mapa#0, 
                mapb#0))[k#14] } 
            { IMap#Domain(mapb#0)[k#14] } 
            { IMap#Domain(mapa#0)[k#14] } 
          $IsBox(k#14, MissingLibrary._default.ImapUnionPreferB$U)
             ==> 
            IMap#Domain(mapa#0)[k#14] && !IMap#Domain(mapb#0)[k#14]
             ==> IMap#Elements(_0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
                  MissingLibrary._default.ImapUnionPreferB$T, 
                  $ly, 
                  mapa#0, 
                  mapb#0))[k#14]
               == IMap#Elements(mapa#0)[k#14])
         && $Is(_0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
            MissingLibrary._default.ImapUnionPreferB$T, 
            $ly, 
            mapa#0, 
            mapb#0), 
          TIMap(MissingLibrary._default.ImapUnionPreferB$U, 
            MissingLibrary._default.ImapUnionPreferB$T)));

function _0_MissingLibrary.__default.ImapUnionPreferB#requires(Ty, Ty, LayerType, IMap Box Box, IMap Box Box) : bool;

// #requires axiom for _0_MissingLibrary.__default.ImapUnionPreferB
axiom (forall MissingLibrary._default.ImapUnionPreferB$U: Ty, 
    MissingLibrary._default.ImapUnionPreferB$T: Ty, 
    $ly: LayerType, 
    mapa#0: IMap Box Box, 
    mapb#0: IMap Box Box :: 
  { _0_MissingLibrary.__default.ImapUnionPreferB#requires(MissingLibrary._default.ImapUnionPreferB$U, 
      MissingLibrary._default.ImapUnionPreferB$T, 
      $ly, 
      mapa#0, 
      mapb#0) } 
  $Is(mapa#0, 
        TIMap(MissingLibrary._default.ImapUnionPreferB$U, 
          MissingLibrary._default.ImapUnionPreferB$T))
       && $Is(mapb#0, 
        TIMap(MissingLibrary._default.ImapUnionPreferB$U, 
          MissingLibrary._default.ImapUnionPreferB$T))
     ==> _0_MissingLibrary.__default.ImapUnionPreferB#requires(MissingLibrary._default.ImapUnionPreferB$U, 
        MissingLibrary._default.ImapUnionPreferB$T, 
        $ly, 
        mapa#0, 
        mapb#0)
       == true);

// definition axiom for _0_MissingLibrary.__default.ImapUnionPreferB(revealed)
axiom true
   ==> (forall MissingLibrary._default.ImapUnionPreferB$U: Ty, 
      MissingLibrary._default.ImapUnionPreferB$T: Ty, 
      $ly: LayerType, 
      mapa#0: IMap Box Box, 
      mapb#0: IMap Box Box :: 
    { _0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
        MissingLibrary._default.ImapUnionPreferB$T, 
        $LS($ly), 
        mapa#0, 
        mapb#0) } 
    _0_MissingLibrary.__default.ImapUnionPreferB#canCall(MissingLibrary._default.ImapUnionPreferB$U, 
          MissingLibrary._default.ImapUnionPreferB$T, 
          mapa#0, 
          mapb#0)
         || ($Is(mapa#0, 
            TIMap(MissingLibrary._default.ImapUnionPreferB$U, 
              MissingLibrary._default.ImapUnionPreferB$T))
           && $Is(mapb#0, 
            TIMap(MissingLibrary._default.ImapUnionPreferB$U, 
              MissingLibrary._default.ImapUnionPreferB$T)))
       ==> (forall x#0: Box :: 
          { IMap#Elements(mapa#0)[x#0] } 
            { IMap#Elements(mapb#0)[x#0] } 
            { IMap#Domain(mapb#0)[x#0] } 
          true)
         && _0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
            MissingLibrary._default.ImapUnionPreferB$T, 
            $LS($ly), 
            mapa#0, 
            mapb#0)
           == IMap#Glue((lambda $w#5: Box :: 
              $IsBox($w#5, MissingLibrary._default.ImapUnionPreferB$U)
                 && (IMap#Domain(mapa#0)[$w#5] || IMap#Domain(mapb#0)[$w#5])), 
            (lambda $w#5: Box :: 
              (if IMap#Domain(mapb#0)[$w#5]
                 then IMap#Elements(mapb#0)[$w#5]
                 else IMap#Elements(mapa#0)[$w#5])), 
            TIMap(MissingLibrary._default.ImapUnionPreferB$U, 
              MissingLibrary._default.ImapUnionPreferB$T)));

// definition axiom for _0_MissingLibrary.__default.ImapUnionPreferB for all literals(revealed)
axiom true
   ==> (forall MissingLibrary._default.ImapUnionPreferB$U: Ty, 
      MissingLibrary._default.ImapUnionPreferB$T: Ty, 
      $ly: LayerType, 
      mapa#0: IMap Box Box, 
      mapb#0: IMap Box Box :: 
    {:weight 3} { _0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
        MissingLibrary._default.ImapUnionPreferB$T, 
        $LS($ly), 
        Lit(mapa#0), 
        Lit(mapb#0)) } 
    _0_MissingLibrary.__default.ImapUnionPreferB#canCall(MissingLibrary._default.ImapUnionPreferB$U, 
          MissingLibrary._default.ImapUnionPreferB$T, 
          Lit(mapa#0), 
          Lit(mapb#0))
         || ($Is(mapa#0, 
            TIMap(MissingLibrary._default.ImapUnionPreferB$U, 
              MissingLibrary._default.ImapUnionPreferB$T))
           && $Is(mapb#0, 
            TIMap(MissingLibrary._default.ImapUnionPreferB$U, 
              MissingLibrary._default.ImapUnionPreferB$T)))
       ==> (forall x#0: Box :: 
          { IMap#Elements(mapa#0)[x#0] } 
            { IMap#Elements(mapb#0)[x#0] } 
            { IMap#Domain(mapb#0)[x#0] } 
          true)
         && _0_MissingLibrary.__default.ImapUnionPreferB(MissingLibrary._default.ImapUnionPreferB$U, 
            MissingLibrary._default.ImapUnionPreferB$T, 
            $LS($ly), 
            Lit(mapa#0), 
            Lit(mapb#0))
           == IMap#Glue((lambda $w#6: Box :: 
              $IsBox($w#6, MissingLibrary._default.ImapUnionPreferB$U)
                 && (Lit(IMap#Domain(Lit(mapa#0)))[$w#6] || Lit(IMap#Domain(Lit(mapb#0)))[$w#6])), 
            (lambda $w#6: Box :: 
              (if IMap#Domain(mapb#0)[$w#6]
                 then IMap#Elements(Lit(mapb#0))[$w#6]
                 else IMap#Elements(Lit(mapa#0))[$w#6])), 
            TIMap(MissingLibrary._default.ImapUnionPreferB$U, 
              MissingLibrary._default.ImapUnionPreferB$T)));

// function declaration for MissingLibrary._default.max
function _0_MissingLibrary.__default.max(a#0: int, b#0: int) : int;

function _0_MissingLibrary.__default.max#canCall(a#0: int, b#0: int) : bool;

// consequence axiom for _0_MissingLibrary.__default.max
axiom true
   ==> (forall a#0: int, b#0: int :: 
    { _0_MissingLibrary.__default.max(a#0, b#0) } 
    true ==> true);

function _0_MissingLibrary.__default.max#requires(int, int) : bool;

// #requires axiom for _0_MissingLibrary.__default.max
axiom (forall a#0: int, b#0: int :: 
  { _0_MissingLibrary.__default.max#requires(a#0, b#0) } 
  _0_MissingLibrary.__default.max#requires(a#0, b#0) == true);

// definition axiom for _0_MissingLibrary.__default.max(revealed)
axiom true
   ==> (forall a#0: int, b#0: int :: 
    { _0_MissingLibrary.__default.max(a#0, b#0) } 
    true
       ==> _0_MissingLibrary.__default.max(a#0, b#0) == (if a#0 > b#0 then a#0 else b#0));

// definition axiom for _0_MissingLibrary.__default.max for all literals(revealed)
axiom true
   ==> (forall a#0: int, b#0: int :: 
    {:weight 3} { _0_MissingLibrary.__default.max(LitInt(a#0), LitInt(b#0)) } 
    true
       ==> _0_MissingLibrary.__default.max(LitInt(a#0), LitInt(b#0))
         == (if a#0 > b#0 then a#0 else b#0));

// function declaration for MissingLibrary._default.MemsetSeq
function _0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V: Ty, $ly: LayerType, v#0: Box, len#0: int)
   : Seq Box;

function _0_MissingLibrary.__default.MemsetSeq#canCall(MissingLibrary._default.MemsetSeq$V: Ty, v#0: Box, len#0: int) : bool;

// layer synonym axiom
axiom (forall MissingLibrary._default.MemsetSeq$V: Ty, $ly: LayerType, v#0: Box, len#0: int :: 
  { _0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $LS($ly), v#0, len#0) } 
  _0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $LS($ly), v#0, len#0)
     == _0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $ly, v#0, len#0));

// fuel synonym axiom
axiom (forall MissingLibrary._default.MemsetSeq$V: Ty, $ly: LayerType, v#0: Box, len#0: int :: 
  { _0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, AsFuelBottom($ly), v#0, len#0) } 
  _0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $ly, v#0, len#0)
     == _0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $LZ, v#0, len#0));

// consequence axiom for _0_MissingLibrary.__default.MemsetSeq
axiom true
   ==> (forall MissingLibrary._default.MemsetSeq$V: Ty, $ly: LayerType, v#0: Box, len#0: int :: 
    { _0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $ly, v#0, len#0) } 
    _0_MissingLibrary.__default.MemsetSeq#canCall(MissingLibrary._default.MemsetSeq$V, v#0, len#0)
         || ($IsBox(v#0, MissingLibrary._default.MemsetSeq$V) && LitInt(0) <= len#0)
       ==> Seq#Length(_0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $ly, v#0, len#0))
           == len#0
         && (forall i#4: int :: 
          { Seq#Index(_0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $ly, v#0, len#0), 
              i#4) } 
          true
             ==> 
            LitInt(0) <= i#4 && i#4 < len#0
             ==> Seq#Index(_0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $ly, v#0, len#0), 
                i#4)
               == v#0)
         && $Is(_0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $ly, v#0, len#0), 
          TSeq(MissingLibrary._default.MemsetSeq$V)));

function _0_MissingLibrary.__default.MemsetSeq#requires(Ty, LayerType, Box, int) : bool;

// #requires axiom for _0_MissingLibrary.__default.MemsetSeq
axiom (forall MissingLibrary._default.MemsetSeq$V: Ty, $ly: LayerType, v#0: Box, len#0: int :: 
  { _0_MissingLibrary.__default.MemsetSeq#requires(MissingLibrary._default.MemsetSeq$V, $ly, v#0, len#0) } 
  $IsBox(v#0, MissingLibrary._default.MemsetSeq$V) && LitInt(0) <= len#0
     ==> _0_MissingLibrary.__default.MemsetSeq#requires(MissingLibrary._default.MemsetSeq$V, $ly, v#0, len#0)
       == true);

// definition axiom for _0_MissingLibrary.__default.MemsetSeq(revealed)
axiom true
   ==> (forall MissingLibrary._default.MemsetSeq$V: Ty, $ly: LayerType, v#0: Box, len#0: int :: 
    { _0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $LS($ly), v#0, len#0) } 
    _0_MissingLibrary.__default.MemsetSeq#canCall(MissingLibrary._default.MemsetSeq$V, v#0, len#0)
         || ($IsBox(v#0, MissingLibrary._default.MemsetSeq$V) && LitInt(0) <= len#0)
       ==> (len#0 != LitInt(0)
           ==> _0_MissingLibrary.__default.MemsetSeq#canCall(MissingLibrary._default.MemsetSeq$V, v#0, len#0 - 1))
         && _0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $LS($ly), v#0, len#0)
           == (if len#0 == LitInt(0)
             then Seq#Empty(): Seq Box
             else Seq#Append(_0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $ly, v#0, len#0 - 1), 
              Seq#Build(Seq#Empty(): Seq Box, v#0))));

// definition axiom for _0_MissingLibrary.__default.MemsetSeq for decreasing-related literals(revealed)
axiom true
   ==> (forall MissingLibrary._default.MemsetSeq$V: Ty, $ly: LayerType, v#0: Box, len#0: int :: 
    {:weight 3} { _0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $LS($ly), v#0, LitInt(len#0)) } 
    _0_MissingLibrary.__default.MemsetSeq#canCall(MissingLibrary._default.MemsetSeq$V, v#0, LitInt(len#0))
         || ($IsBox(v#0, MissingLibrary._default.MemsetSeq$V) && LitInt(0) <= len#0)
       ==> (LitInt(len#0) != LitInt(0)
           ==> _0_MissingLibrary.__default.MemsetSeq#canCall(MissingLibrary._default.MemsetSeq$V, v#0, LitInt(len#0 - 1)))
         && _0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $LS($ly), v#0, LitInt(len#0))
           == (if LitInt(len#0) == LitInt(0)
             then Seq#Empty(): Seq Box
             else Seq#Append(_0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $LS($ly), v#0, LitInt(len#0 - 1)), 
              Seq#Build(Seq#Empty(): Seq Box, v#0))));

// definition axiom for _0_MissingLibrary.__default.MemsetSeq for all literals(revealed)
axiom true
   ==> (forall MissingLibrary._default.MemsetSeq$V: Ty, $ly: LayerType, v#0: Box, len#0: int :: 
    {:weight 3} { _0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $LS($ly), Lit(v#0), LitInt(len#0)) } 
    _0_MissingLibrary.__default.MemsetSeq#canCall(MissingLibrary._default.MemsetSeq$V, Lit(v#0), LitInt(len#0))
         || ($IsBox(v#0, MissingLibrary._default.MemsetSeq$V) && LitInt(0) <= len#0)
       ==> (LitInt(len#0) != LitInt(0)
           ==> _0_MissingLibrary.__default.MemsetSeq#canCall(MissingLibrary._default.MemsetSeq$V, Lit(v#0), LitInt(len#0 - 1)))
         && _0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $LS($ly), Lit(v#0), LitInt(len#0))
           == (if LitInt(len#0) == LitInt(0)
             then Seq#Empty(): Seq Box
             else Seq#Append(_0_MissingLibrary.__default.MemsetSeq(MissingLibrary._default.MemsetSeq$V, $LS($ly), Lit(v#0), LitInt(len#0 - 1)), 
              Seq#Build(Seq#Empty(): Seq Box, Lit(v#0)))));

const #$ServerID: Ty;

const #$Value: Ty;

const unique class._2_raft.ServerState: ClassName;

// Constructor function declaration
function #raft.ServerState.Follower() : DatatypeType;

const unique ##raft.ServerState.Follower: DtCtorId;

// Constructor identifier
axiom DatatypeCtorId(#raft.ServerState.Follower()) == ##raft.ServerState.Follower;

function _2_raft.ServerState.Follower_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.ServerState.Follower_q(d) } 
  _2_raft.ServerState.Follower_q(d)
     <==> DatatypeCtorId(d) == ##raft.ServerState.Follower);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.ServerState.Follower_q(d) } 
  _2_raft.ServerState.Follower_q(d) ==> d == #raft.ServerState.Follower());

function Tclass._2_raft.ServerState() : Ty;

// Tclass._2_raft.ServerState Tag
axiom Tag(Tclass._2_raft.ServerState()) == Tagclass._2_raft.ServerState;

const unique Tagclass._2_raft.ServerState: TyTag;

// Box/unbox axiom for Tclass._2_raft.ServerState
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._2_raft.ServerState()) } 
  $IsBox(bx, Tclass._2_raft.ServerState())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._2_raft.ServerState()));

// Constructor $Is
axiom $Is(#raft.ServerState.Follower(), Tclass._2_raft.ServerState());

// Constructor $IsAlloc
axiom (forall $h: Heap :: 
  { $IsAlloc(#raft.ServerState.Follower(), Tclass._2_raft.ServerState(), $h) } 
  $IsGoodHeap($h)
     ==> $IsAlloc(#raft.ServerState.Follower(), Tclass._2_raft.ServerState(), $h));

// Constructor literal
axiom #raft.ServerState.Follower() == Lit(#raft.ServerState.Follower());

// Constructor function declaration
function #raft.ServerState.Candidate() : DatatypeType;

const unique ##raft.ServerState.Candidate: DtCtorId;

// Constructor identifier
axiom DatatypeCtorId(#raft.ServerState.Candidate()) == ##raft.ServerState.Candidate;

function _2_raft.ServerState.Candidate_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.ServerState.Candidate_q(d) } 
  _2_raft.ServerState.Candidate_q(d)
     <==> DatatypeCtorId(d) == ##raft.ServerState.Candidate);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.ServerState.Candidate_q(d) } 
  _2_raft.ServerState.Candidate_q(d) ==> d == #raft.ServerState.Candidate());

// Constructor $Is
axiom $Is(#raft.ServerState.Candidate(), Tclass._2_raft.ServerState());

// Constructor $IsAlloc
axiom (forall $h: Heap :: 
  { $IsAlloc(#raft.ServerState.Candidate(), Tclass._2_raft.ServerState(), $h) } 
  $IsGoodHeap($h)
     ==> $IsAlloc(#raft.ServerState.Candidate(), Tclass._2_raft.ServerState(), $h));

// Constructor literal
axiom #raft.ServerState.Candidate() == Lit(#raft.ServerState.Candidate());

// Constructor function declaration
function #raft.ServerState.Leader() : DatatypeType;

const unique ##raft.ServerState.Leader: DtCtorId;

// Constructor identifier
axiom DatatypeCtorId(#raft.ServerState.Leader()) == ##raft.ServerState.Leader;

function _2_raft.ServerState.Leader_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.ServerState.Leader_q(d) } 
  _2_raft.ServerState.Leader_q(d)
     <==> DatatypeCtorId(d) == ##raft.ServerState.Leader);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.ServerState.Leader_q(d) } 
  _2_raft.ServerState.Leader_q(d) ==> d == #raft.ServerState.Leader());

// Constructor $Is
axiom $Is(#raft.ServerState.Leader(), Tclass._2_raft.ServerState());

// Constructor $IsAlloc
axiom (forall $h: Heap :: 
  { $IsAlloc(#raft.ServerState.Leader(), Tclass._2_raft.ServerState(), $h) } 
  $IsGoodHeap($h)
     ==> $IsAlloc(#raft.ServerState.Leader(), Tclass._2_raft.ServerState(), $h));

// Constructor literal
axiom #raft.ServerState.Leader() == Lit(#raft.ServerState.Leader());

// One-depth case-split function
function $IsA#_2_raft.ServerState(DatatypeType) : bool;

// One-depth case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_2_raft.ServerState(d) } 
  $IsA#_2_raft.ServerState(d)
     ==> _2_raft.ServerState.Follower_q(d)
       || _2_raft.ServerState.Candidate_q(d)
       || _2_raft.ServerState.Leader_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _2_raft.ServerState.Leader_q(d), $Is(d, Tclass._2_raft.ServerState()) } 
    { _2_raft.ServerState.Candidate_q(d), $Is(d, Tclass._2_raft.ServerState()) } 
    { _2_raft.ServerState.Follower_q(d), $Is(d, Tclass._2_raft.ServerState()) } 
  $Is(d, Tclass._2_raft.ServerState())
     ==> _2_raft.ServerState.Follower_q(d)
       || _2_raft.ServerState.Candidate_q(d)
       || _2_raft.ServerState.Leader_q(d));

const unique class._2_raft.LogEntry: ClassName;

// Constructor function declaration
function #raft.LogEntry.LogEntry(int, Box) : DatatypeType;

const unique ##raft.LogEntry.LogEntry: DtCtorId;

// Constructor identifier
axiom (forall a#15#0#0: int, a#15#1#0: Box :: 
  { #raft.LogEntry.LogEntry(a#15#0#0, a#15#1#0) } 
  DatatypeCtorId(#raft.LogEntry.LogEntry(a#15#0#0, a#15#1#0))
     == ##raft.LogEntry.LogEntry);

function _2_raft.LogEntry.LogEntry_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.LogEntry.LogEntry_q(d) } 
  _2_raft.LogEntry.LogEntry_q(d)
     <==> DatatypeCtorId(d) == ##raft.LogEntry.LogEntry);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.LogEntry.LogEntry_q(d) } 
  _2_raft.LogEntry.LogEntry_q(d)
     ==> (exists a#16#0#0: int, a#16#1#0: Box :: 
      d == #raft.LogEntry.LogEntry(a#16#0#0, a#16#1#0)));

function Tclass._2_raft.LogEntry() : Ty;

// Tclass._2_raft.LogEntry Tag
axiom Tag(Tclass._2_raft.LogEntry()) == Tagclass._2_raft.LogEntry;

const unique Tagclass._2_raft.LogEntry: TyTag;

// Box/unbox axiom for Tclass._2_raft.LogEntry
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._2_raft.LogEntry()) } 
  $IsBox(bx, Tclass._2_raft.LogEntry())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._2_raft.LogEntry()));

// Constructor $Is
axiom (forall a#17#0#0: int, a#17#1#0: Box :: 
  { $Is(#raft.LogEntry.LogEntry(a#17#0#0, a#17#1#0), Tclass._2_raft.LogEntry()) } 
  $Is(#raft.LogEntry.LogEntry(a#17#0#0, a#17#1#0), Tclass._2_raft.LogEntry())
     <==> $Is(a#17#0#0, TInt) && $IsBox(a#17#1#0, #$Value));

// Constructor $IsAlloc
axiom (forall a#18#0#0: int, a#18#1#0: Box, $h: Heap :: 
  { $IsAlloc(#raft.LogEntry.LogEntry(a#18#0#0, a#18#1#0), Tclass._2_raft.LogEntry(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.LogEntry.LogEntry(a#18#0#0, a#18#1#0), Tclass._2_raft.LogEntry(), $h)
       <==> $IsAlloc(a#18#0#0, TInt, $h) && $IsAllocBox(a#18#1#0, #$Value, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.LogEntry.term(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.LogEntry.LogEntry_q(d)
       && $IsAlloc(d, Tclass._2_raft.LogEntry(), $h)
     ==> $IsAlloc(_2_raft.LogEntry.term(d), TInt, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.LogEntry.value(d), #$Value, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.LogEntry.LogEntry_q(d)
       && $IsAlloc(d, Tclass._2_raft.LogEntry(), $h)
     ==> $IsAllocBox(_2_raft.LogEntry.value(d), #$Value, $h));

// Constructor literal
axiom (forall a#19#0#0: int, a#19#1#0: Box :: 
  { #raft.LogEntry.LogEntry(LitInt(a#19#0#0), Lit(a#19#1#0)) } 
  #raft.LogEntry.LogEntry(LitInt(a#19#0#0), Lit(a#19#1#0))
     == Lit(#raft.LogEntry.LogEntry(a#19#0#0, a#19#1#0)));

function _2_raft.LogEntry.term(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#20#0#0: int, a#20#1#0: Box :: 
  { #raft.LogEntry.LogEntry(a#20#0#0, a#20#1#0) } 
  _2_raft.LogEntry.term(#raft.LogEntry.LogEntry(a#20#0#0, a#20#1#0)) == a#20#0#0);

function _2_raft.LogEntry.value(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#21#0#0: int, a#21#1#0: Box :: 
  { #raft.LogEntry.LogEntry(a#21#0#0, a#21#1#0) } 
  _2_raft.LogEntry.value(#raft.LogEntry.LogEntry(a#21#0#0, a#21#1#0)) == a#21#1#0);

// Inductive rank
axiom (forall a#22#0#0: int, a#22#1#0: Box :: 
  { #raft.LogEntry.LogEntry(a#22#0#0, a#22#1#0) } 
  BoxRank(a#22#1#0) < DtRank(#raft.LogEntry.LogEntry(a#22#0#0, a#22#1#0)));

// One-depth case-split function
function $IsA#_2_raft.LogEntry(DatatypeType) : bool;

// One-depth case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_2_raft.LogEntry(d) } 
  $IsA#_2_raft.LogEntry(d) ==> _2_raft.LogEntry.LogEntry_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _2_raft.LogEntry.LogEntry_q(d), $Is(d, Tclass._2_raft.LogEntry()) } 
  $Is(d, Tclass._2_raft.LogEntry()) ==> _2_raft.LogEntry.LogEntry_q(d));

const unique class._2_raft.Message: ClassName;

// Constructor function declaration
function #raft.Message.RequestVoteRequest(int, int, int, Box, Box) : DatatypeType;

const unique ##raft.Message.RequestVoteRequest: DtCtorId;

// Constructor identifier
axiom (forall a#23#0#0: int, a#23#1#0: int, a#23#2#0: int, a#23#3#0: Box, a#23#4#0: Box :: 
  { #raft.Message.RequestVoteRequest(a#23#0#0, a#23#1#0, a#23#2#0, a#23#3#0, a#23#4#0) } 
  DatatypeCtorId(#raft.Message.RequestVoteRequest(a#23#0#0, a#23#1#0, a#23#2#0, a#23#3#0, a#23#4#0))
     == ##raft.Message.RequestVoteRequest);

function _2_raft.Message.RequestVoteRequest_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.Message.RequestVoteRequest_q(d) } 
  _2_raft.Message.RequestVoteRequest_q(d)
     <==> DatatypeCtorId(d) == ##raft.Message.RequestVoteRequest);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.Message.RequestVoteRequest_q(d) } 
  _2_raft.Message.RequestVoteRequest_q(d)
     ==> (exists a#24#0#0: int, a#24#1#0: int, a#24#2#0: int, a#24#3#0: Box, a#24#4#0: Box :: 
      d
         == #raft.Message.RequestVoteRequest(a#24#0#0, a#24#1#0, a#24#2#0, a#24#3#0, a#24#4#0)));

function Tclass._2_raft.Message() : Ty;

// Tclass._2_raft.Message Tag
axiom Tag(Tclass._2_raft.Message()) == Tagclass._2_raft.Message;

const unique Tagclass._2_raft.Message: TyTag;

// Box/unbox axiom for Tclass._2_raft.Message
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._2_raft.Message()) } 
  $IsBox(bx, Tclass._2_raft.Message())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._2_raft.Message()));

// Constructor $Is
axiom (forall a#25#0#0: int, a#25#1#0: int, a#25#2#0: int, a#25#3#0: Box, a#25#4#0: Box :: 
  { $Is(#raft.Message.RequestVoteRequest(a#25#0#0, a#25#1#0, a#25#2#0, a#25#3#0, a#25#4#0), 
      Tclass._2_raft.Message()) } 
  $Is(#raft.Message.RequestVoteRequest(a#25#0#0, a#25#1#0, a#25#2#0, a#25#3#0, a#25#4#0), 
      Tclass._2_raft.Message())
     <==> $Is(a#25#0#0, TInt)
       && $Is(a#25#1#0, TInt)
       && $Is(a#25#2#0, TInt)
       && $IsBox(a#25#3#0, #$ServerID)
       && $IsBox(a#25#4#0, #$ServerID));

// Constructor $IsAlloc
axiom (forall a#26#0#0: int, 
    a#26#1#0: int, 
    a#26#2#0: int, 
    a#26#3#0: Box, 
    a#26#4#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#raft.Message.RequestVoteRequest(a#26#0#0, a#26#1#0, a#26#2#0, a#26#3#0, a#26#4#0), 
      Tclass._2_raft.Message(), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.Message.RequestVoteRequest(a#26#0#0, a#26#1#0, a#26#2#0, a#26#3#0, a#26#4#0), 
        Tclass._2_raft.Message(), 
        $h)
       <==> $IsAlloc(a#26#0#0, TInt, $h)
         && $IsAlloc(a#26#1#0, TInt, $h)
         && $IsAlloc(a#26#2#0, TInt, $h)
         && $IsAllocBox(a#26#3#0, #$ServerID, $h)
         && $IsAllocBox(a#26#4#0, #$ServerID, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Message.term(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.RequestVoteRequest_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAlloc(_2_raft.Message.term(d), TInt, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Message.lastLogTerm(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.RequestVoteRequest_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAlloc(_2_raft.Message.lastLogTerm(d), TInt, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Message.lastLogIndex(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.RequestVoteRequest_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAlloc(_2_raft.Message.lastLogIndex(d), TInt, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Message.source(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.RequestVoteRequest_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAllocBox(_2_raft.Message.source(d), #$ServerID, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Message.dest(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.RequestVoteRequest_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAllocBox(_2_raft.Message.dest(d), #$ServerID, $h));

// Constructor literal
axiom (forall a#27#0#0: int, a#27#1#0: int, a#27#2#0: int, a#27#3#0: Box, a#27#4#0: Box :: 
  { #raft.Message.RequestVoteRequest(LitInt(a#27#0#0), 
      LitInt(a#27#1#0), 
      LitInt(a#27#2#0), 
      Lit(a#27#3#0), 
      Lit(a#27#4#0)) } 
  #raft.Message.RequestVoteRequest(LitInt(a#27#0#0), 
      LitInt(a#27#1#0), 
      LitInt(a#27#2#0), 
      Lit(a#27#3#0), 
      Lit(a#27#4#0))
     == Lit(#raft.Message.RequestVoteRequest(a#27#0#0, a#27#1#0, a#27#2#0, a#27#3#0, a#27#4#0)));

function _2_raft.Message.term(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#28#0#0: int, a#28#1#0: int, a#28#2#0: int, a#28#3#0: Box, a#28#4#0: Box :: 
  { #raft.Message.RequestVoteRequest(a#28#0#0, a#28#1#0, a#28#2#0, a#28#3#0, a#28#4#0) } 
  _2_raft.Message.term(#raft.Message.RequestVoteRequest(a#28#0#0, a#28#1#0, a#28#2#0, a#28#3#0, a#28#4#0))
     == a#28#0#0);

function _2_raft.Message.lastLogTerm(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#29#0#0: int, a#29#1#0: int, a#29#2#0: int, a#29#3#0: Box, a#29#4#0: Box :: 
  { #raft.Message.RequestVoteRequest(a#29#0#0, a#29#1#0, a#29#2#0, a#29#3#0, a#29#4#0) } 
  _2_raft.Message.lastLogTerm(#raft.Message.RequestVoteRequest(a#29#0#0, a#29#1#0, a#29#2#0, a#29#3#0, a#29#4#0))
     == a#29#1#0);

function _2_raft.Message.lastLogIndex(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#30#0#0: int, a#30#1#0: int, a#30#2#0: int, a#30#3#0: Box, a#30#4#0: Box :: 
  { #raft.Message.RequestVoteRequest(a#30#0#0, a#30#1#0, a#30#2#0, a#30#3#0, a#30#4#0) } 
  _2_raft.Message.lastLogIndex(#raft.Message.RequestVoteRequest(a#30#0#0, a#30#1#0, a#30#2#0, a#30#3#0, a#30#4#0))
     == a#30#2#0);

function _2_raft.Message.source(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#31#0#0: int, a#31#1#0: int, a#31#2#0: int, a#31#3#0: Box, a#31#4#0: Box :: 
  { #raft.Message.RequestVoteRequest(a#31#0#0, a#31#1#0, a#31#2#0, a#31#3#0, a#31#4#0) } 
  _2_raft.Message.source(#raft.Message.RequestVoteRequest(a#31#0#0, a#31#1#0, a#31#2#0, a#31#3#0, a#31#4#0))
     == a#31#3#0);

// Inductive rank
axiom (forall a#32#0#0: int, a#32#1#0: int, a#32#2#0: int, a#32#3#0: Box, a#32#4#0: Box :: 
  { #raft.Message.RequestVoteRequest(a#32#0#0, a#32#1#0, a#32#2#0, a#32#3#0, a#32#4#0) } 
  BoxRank(a#32#3#0)
     < DtRank(#raft.Message.RequestVoteRequest(a#32#0#0, a#32#1#0, a#32#2#0, a#32#3#0, a#32#4#0)));

function _2_raft.Message.dest(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#33#0#0: int, a#33#1#0: int, a#33#2#0: int, a#33#3#0: Box, a#33#4#0: Box :: 
  { #raft.Message.RequestVoteRequest(a#33#0#0, a#33#1#0, a#33#2#0, a#33#3#0, a#33#4#0) } 
  _2_raft.Message.dest(#raft.Message.RequestVoteRequest(a#33#0#0, a#33#1#0, a#33#2#0, a#33#3#0, a#33#4#0))
     == a#33#4#0);

// Inductive rank
axiom (forall a#34#0#0: int, a#34#1#0: int, a#34#2#0: int, a#34#3#0: Box, a#34#4#0: Box :: 
  { #raft.Message.RequestVoteRequest(a#34#0#0, a#34#1#0, a#34#2#0, a#34#3#0, a#34#4#0) } 
  BoxRank(a#34#4#0)
     < DtRank(#raft.Message.RequestVoteRequest(a#34#0#0, a#34#1#0, a#34#2#0, a#34#3#0, a#34#4#0)));

// Constructor function declaration
function #raft.Message.RequestVoteResponse(int, bool, Seq Box, Box, Box) : DatatypeType;

const unique ##raft.Message.RequestVoteResponse: DtCtorId;

// Constructor identifier
axiom (forall a#35#0#0: int, a#35#1#0: bool, a#35#2#0: Seq Box, a#35#3#0: Box, a#35#4#0: Box :: 
  { #raft.Message.RequestVoteResponse(a#35#0#0, a#35#1#0, a#35#2#0, a#35#3#0, a#35#4#0) } 
  DatatypeCtorId(#raft.Message.RequestVoteResponse(a#35#0#0, a#35#1#0, a#35#2#0, a#35#3#0, a#35#4#0))
     == ##raft.Message.RequestVoteResponse);

function _2_raft.Message.RequestVoteResponse_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.Message.RequestVoteResponse_q(d) } 
  _2_raft.Message.RequestVoteResponse_q(d)
     <==> DatatypeCtorId(d) == ##raft.Message.RequestVoteResponse);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.Message.RequestVoteResponse_q(d) } 
  _2_raft.Message.RequestVoteResponse_q(d)
     ==> (exists a#36#0#0: int, a#36#1#0: bool, a#36#2#0: Seq Box, a#36#3#0: Box, a#36#4#0: Box :: 
      d
         == #raft.Message.RequestVoteResponse(a#36#0#0, a#36#1#0, a#36#2#0, a#36#3#0, a#36#4#0)));

// Constructor $Is
axiom (forall a#37#0#0: int, a#37#1#0: bool, a#37#2#0: Seq Box, a#37#3#0: Box, a#37#4#0: Box :: 
  { $Is(#raft.Message.RequestVoteResponse(a#37#0#0, a#37#1#0, a#37#2#0, a#37#3#0, a#37#4#0), 
      Tclass._2_raft.Message()) } 
  $Is(#raft.Message.RequestVoteResponse(a#37#0#0, a#37#1#0, a#37#2#0, a#37#3#0, a#37#4#0), 
      Tclass._2_raft.Message())
     <==> $Is(a#37#0#0, TInt)
       && $Is(a#37#1#0, TBool)
       && $Is(a#37#2#0, TSeq(Tclass._2_raft.LogEntry()))
       && $IsBox(a#37#3#0, #$ServerID)
       && $IsBox(a#37#4#0, #$ServerID));

// Constructor $IsAlloc
axiom (forall a#38#0#0: int, 
    a#38#1#0: bool, 
    a#38#2#0: Seq Box, 
    a#38#3#0: Box, 
    a#38#4#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#raft.Message.RequestVoteResponse(a#38#0#0, a#38#1#0, a#38#2#0, a#38#3#0, a#38#4#0), 
      Tclass._2_raft.Message(), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.Message.RequestVoteResponse(a#38#0#0, a#38#1#0, a#38#2#0, a#38#3#0, a#38#4#0), 
        Tclass._2_raft.Message(), 
        $h)
       <==> $IsAlloc(a#38#0#0, TInt, $h)
         && $IsAlloc(a#38#1#0, TBool, $h)
         && $IsAlloc(a#38#2#0, TSeq(Tclass._2_raft.LogEntry()), $h)
         && $IsAllocBox(a#38#3#0, #$ServerID, $h)
         && $IsAllocBox(a#38#4#0, #$ServerID, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Message.term(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.RequestVoteResponse_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAlloc(_2_raft.Message.term(d), TInt, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Message.voteGranted(d), TBool, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.RequestVoteResponse_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAlloc(_2_raft.Message.voteGranted(d), TBool, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Message.logGhost(d), TSeq(Tclass._2_raft.LogEntry()), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.RequestVoteResponse_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAlloc(_2_raft.Message.logGhost(d), TSeq(Tclass._2_raft.LogEntry()), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Message.source(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.RequestVoteResponse_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAllocBox(_2_raft.Message.source(d), #$ServerID, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Message.dest(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.RequestVoteResponse_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAllocBox(_2_raft.Message.dest(d), #$ServerID, $h));

// Constructor literal
axiom (forall a#39#0#0: int, a#39#1#0: bool, a#39#2#0: Seq Box, a#39#3#0: Box, a#39#4#0: Box :: 
  { #raft.Message.RequestVoteResponse(LitInt(a#39#0#0), Lit(a#39#1#0), Lit(a#39#2#0), Lit(a#39#3#0), Lit(a#39#4#0)) } 
  #raft.Message.RequestVoteResponse(LitInt(a#39#0#0), Lit(a#39#1#0), Lit(a#39#2#0), Lit(a#39#3#0), Lit(a#39#4#0))
     == Lit(#raft.Message.RequestVoteResponse(a#39#0#0, a#39#1#0, a#39#2#0, a#39#3#0, a#39#4#0)));

// Constructor injectivity
axiom (forall a#40#0#0: int, a#40#1#0: bool, a#40#2#0: Seq Box, a#40#3#0: Box, a#40#4#0: Box :: 
  { #raft.Message.RequestVoteResponse(a#40#0#0, a#40#1#0, a#40#2#0, a#40#3#0, a#40#4#0) } 
  _2_raft.Message.term(#raft.Message.RequestVoteResponse(a#40#0#0, a#40#1#0, a#40#2#0, a#40#3#0, a#40#4#0))
     == a#40#0#0);

function _2_raft.Message.voteGranted(DatatypeType) : bool;

// Constructor injectivity
axiom (forall a#41#0#0: int, a#41#1#0: bool, a#41#2#0: Seq Box, a#41#3#0: Box, a#41#4#0: Box :: 
  { #raft.Message.RequestVoteResponse(a#41#0#0, a#41#1#0, a#41#2#0, a#41#3#0, a#41#4#0) } 
  _2_raft.Message.voteGranted(#raft.Message.RequestVoteResponse(a#41#0#0, a#41#1#0, a#41#2#0, a#41#3#0, a#41#4#0))
     == a#41#1#0);

function _2_raft.Message.logGhost(DatatypeType) : Seq Box;

// Constructor injectivity
axiom (forall a#42#0#0: int, a#42#1#0: bool, a#42#2#0: Seq Box, a#42#3#0: Box, a#42#4#0: Box :: 
  { #raft.Message.RequestVoteResponse(a#42#0#0, a#42#1#0, a#42#2#0, a#42#3#0, a#42#4#0) } 
  _2_raft.Message.logGhost(#raft.Message.RequestVoteResponse(a#42#0#0, a#42#1#0, a#42#2#0, a#42#3#0, a#42#4#0))
     == a#42#2#0);

// Inductive seq element rank
axiom (forall a#43#0#0: int, 
    a#43#1#0: bool, 
    a#43#2#0: Seq Box, 
    a#43#3#0: Box, 
    a#43#4#0: Box, 
    i: int :: 
  { Seq#Index(a#43#2#0, i), #raft.Message.RequestVoteResponse(a#43#0#0, a#43#1#0, a#43#2#0, a#43#3#0, a#43#4#0) } 
  0 <= i && i < Seq#Length(a#43#2#0)
     ==> DtRank($Unbox(Seq#Index(a#43#2#0, i)): DatatypeType)
       < DtRank(#raft.Message.RequestVoteResponse(a#43#0#0, a#43#1#0, a#43#2#0, a#43#3#0, a#43#4#0)));

// Inductive seq rank
axiom (forall a#44#0#0: int, a#44#1#0: bool, a#44#2#0: Seq Box, a#44#3#0: Box, a#44#4#0: Box :: 
  { #raft.Message.RequestVoteResponse(a#44#0#0, a#44#1#0, a#44#2#0, a#44#3#0, a#44#4#0) } 
  Seq#Rank(a#44#2#0)
     < DtRank(#raft.Message.RequestVoteResponse(a#44#0#0, a#44#1#0, a#44#2#0, a#44#3#0, a#44#4#0)));

// Constructor injectivity
axiom (forall a#45#0#0: int, a#45#1#0: bool, a#45#2#0: Seq Box, a#45#3#0: Box, a#45#4#0: Box :: 
  { #raft.Message.RequestVoteResponse(a#45#0#0, a#45#1#0, a#45#2#0, a#45#3#0, a#45#4#0) } 
  _2_raft.Message.source(#raft.Message.RequestVoteResponse(a#45#0#0, a#45#1#0, a#45#2#0, a#45#3#0, a#45#4#0))
     == a#45#3#0);

// Inductive rank
axiom (forall a#46#0#0: int, a#46#1#0: bool, a#46#2#0: Seq Box, a#46#3#0: Box, a#46#4#0: Box :: 
  { #raft.Message.RequestVoteResponse(a#46#0#0, a#46#1#0, a#46#2#0, a#46#3#0, a#46#4#0) } 
  BoxRank(a#46#3#0)
     < DtRank(#raft.Message.RequestVoteResponse(a#46#0#0, a#46#1#0, a#46#2#0, a#46#3#0, a#46#4#0)));

// Constructor injectivity
axiom (forall a#47#0#0: int, a#47#1#0: bool, a#47#2#0: Seq Box, a#47#3#0: Box, a#47#4#0: Box :: 
  { #raft.Message.RequestVoteResponse(a#47#0#0, a#47#1#0, a#47#2#0, a#47#3#0, a#47#4#0) } 
  _2_raft.Message.dest(#raft.Message.RequestVoteResponse(a#47#0#0, a#47#1#0, a#47#2#0, a#47#3#0, a#47#4#0))
     == a#47#4#0);

// Inductive rank
axiom (forall a#48#0#0: int, a#48#1#0: bool, a#48#2#0: Seq Box, a#48#3#0: Box, a#48#4#0: Box :: 
  { #raft.Message.RequestVoteResponse(a#48#0#0, a#48#1#0, a#48#2#0, a#48#3#0, a#48#4#0) } 
  BoxRank(a#48#4#0)
     < DtRank(#raft.Message.RequestVoteResponse(a#48#0#0, a#48#1#0, a#48#2#0, a#48#3#0, a#48#4#0)));

// Constructor function declaration
function #raft.Message.AppendEntriesRequest(int, int, int, Seq Box, Seq Box, int, Box, Box) : DatatypeType;

const unique ##raft.Message.AppendEntriesRequest: DtCtorId;

// Constructor identifier
axiom (forall a#49#0#0: int, 
    a#49#1#0: int, 
    a#49#2#0: int, 
    a#49#3#0: Seq Box, 
    a#49#4#0: Seq Box, 
    a#49#5#0: int, 
    a#49#6#0: Box, 
    a#49#7#0: Box :: 
  { #raft.Message.AppendEntriesRequest(a#49#0#0, a#49#1#0, a#49#2#0, a#49#3#0, a#49#4#0, a#49#5#0, a#49#6#0, a#49#7#0) } 
  DatatypeCtorId(#raft.Message.AppendEntriesRequest(a#49#0#0, a#49#1#0, a#49#2#0, a#49#3#0, a#49#4#0, a#49#5#0, a#49#6#0, a#49#7#0))
     == ##raft.Message.AppendEntriesRequest);

function _2_raft.Message.AppendEntriesRequest_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.Message.AppendEntriesRequest_q(d) } 
  _2_raft.Message.AppendEntriesRequest_q(d)
     <==> DatatypeCtorId(d) == ##raft.Message.AppendEntriesRequest);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.Message.AppendEntriesRequest_q(d) } 
  _2_raft.Message.AppendEntriesRequest_q(d)
     ==> (exists a#50#0#0: int, 
        a#50#1#0: int, 
        a#50#2#0: int, 
        a#50#3#0: Seq Box, 
        a#50#4#0: Seq Box, 
        a#50#5#0: int, 
        a#50#6#0: Box, 
        a#50#7#0: Box :: 
      d
         == #raft.Message.AppendEntriesRequest(a#50#0#0, a#50#1#0, a#50#2#0, a#50#3#0, a#50#4#0, a#50#5#0, a#50#6#0, a#50#7#0)));

// Constructor $Is
axiom (forall a#51#0#0: int, 
    a#51#1#0: int, 
    a#51#2#0: int, 
    a#51#3#0: Seq Box, 
    a#51#4#0: Seq Box, 
    a#51#5#0: int, 
    a#51#6#0: Box, 
    a#51#7#0: Box :: 
  { $Is(#raft.Message.AppendEntriesRequest(a#51#0#0, a#51#1#0, a#51#2#0, a#51#3#0, a#51#4#0, a#51#5#0, a#51#6#0, a#51#7#0), 
      Tclass._2_raft.Message()) } 
  $Is(#raft.Message.AppendEntriesRequest(a#51#0#0, a#51#1#0, a#51#2#0, a#51#3#0, a#51#4#0, a#51#5#0, a#51#6#0, a#51#7#0), 
      Tclass._2_raft.Message())
     <==> $Is(a#51#0#0, TInt)
       && $Is(a#51#1#0, TInt)
       && $Is(a#51#2#0, TInt)
       && $Is(a#51#3#0, TSeq(Tclass._2_raft.LogEntry()))
       && $Is(a#51#4#0, TSeq(Tclass._2_raft.LogEntry()))
       && $Is(a#51#5#0, TInt)
       && $IsBox(a#51#6#0, #$ServerID)
       && $IsBox(a#51#7#0, #$ServerID));

// Constructor $IsAlloc
axiom (forall a#52#0#0: int, 
    a#52#1#0: int, 
    a#52#2#0: int, 
    a#52#3#0: Seq Box, 
    a#52#4#0: Seq Box, 
    a#52#5#0: int, 
    a#52#6#0: Box, 
    a#52#7#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#raft.Message.AppendEntriesRequest(a#52#0#0, a#52#1#0, a#52#2#0, a#52#3#0, a#52#4#0, a#52#5#0, a#52#6#0, a#52#7#0), 
      Tclass._2_raft.Message(), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.Message.AppendEntriesRequest(a#52#0#0, a#52#1#0, a#52#2#0, a#52#3#0, a#52#4#0, a#52#5#0, a#52#6#0, a#52#7#0), 
        Tclass._2_raft.Message(), 
        $h)
       <==> $IsAlloc(a#52#0#0, TInt, $h)
         && $IsAlloc(a#52#1#0, TInt, $h)
         && $IsAlloc(a#52#2#0, TInt, $h)
         && $IsAlloc(a#52#3#0, TSeq(Tclass._2_raft.LogEntry()), $h)
         && $IsAlloc(a#52#4#0, TSeq(Tclass._2_raft.LogEntry()), $h)
         && $IsAlloc(a#52#5#0, TInt, $h)
         && $IsAllocBox(a#52#6#0, #$ServerID, $h)
         && $IsAllocBox(a#52#7#0, #$ServerID, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Message.term(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.AppendEntriesRequest_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAlloc(_2_raft.Message.term(d), TInt, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Message.prevLogIndex(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.AppendEntriesRequest_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAlloc(_2_raft.Message.prevLogIndex(d), TInt, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Message.prevLogTerm(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.AppendEntriesRequest_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAlloc(_2_raft.Message.prevLogTerm(d), TInt, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Message.entries(d), TSeq(Tclass._2_raft.LogEntry()), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.AppendEntriesRequest_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAlloc(_2_raft.Message.entries(d), TSeq(Tclass._2_raft.LogEntry()), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Message.logGhost(d), TSeq(Tclass._2_raft.LogEntry()), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.AppendEntriesRequest_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAlloc(_2_raft.Message.logGhost(d), TSeq(Tclass._2_raft.LogEntry()), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Message.commitIndex(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.AppendEntriesRequest_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAlloc(_2_raft.Message.commitIndex(d), TInt, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Message.source(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.AppendEntriesRequest_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAllocBox(_2_raft.Message.source(d), #$ServerID, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Message.dest(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.AppendEntriesRequest_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAllocBox(_2_raft.Message.dest(d), #$ServerID, $h));

// Constructor literal
axiom (forall a#53#0#0: int, 
    a#53#1#0: int, 
    a#53#2#0: int, 
    a#53#3#0: Seq Box, 
    a#53#4#0: Seq Box, 
    a#53#5#0: int, 
    a#53#6#0: Box, 
    a#53#7#0: Box :: 
  { #raft.Message.AppendEntriesRequest(LitInt(a#53#0#0), 
      LitInt(a#53#1#0), 
      LitInt(a#53#2#0), 
      Lit(a#53#3#0), 
      Lit(a#53#4#0), 
      LitInt(a#53#5#0), 
      Lit(a#53#6#0), 
      Lit(a#53#7#0)) } 
  #raft.Message.AppendEntriesRequest(LitInt(a#53#0#0), 
      LitInt(a#53#1#0), 
      LitInt(a#53#2#0), 
      Lit(a#53#3#0), 
      Lit(a#53#4#0), 
      LitInt(a#53#5#0), 
      Lit(a#53#6#0), 
      Lit(a#53#7#0))
     == Lit(#raft.Message.AppendEntriesRequest(a#53#0#0, a#53#1#0, a#53#2#0, a#53#3#0, a#53#4#0, a#53#5#0, a#53#6#0, a#53#7#0)));

// Constructor injectivity
axiom (forall a#54#0#0: int, 
    a#54#1#0: int, 
    a#54#2#0: int, 
    a#54#3#0: Seq Box, 
    a#54#4#0: Seq Box, 
    a#54#5#0: int, 
    a#54#6#0: Box, 
    a#54#7#0: Box :: 
  { #raft.Message.AppendEntriesRequest(a#54#0#0, a#54#1#0, a#54#2#0, a#54#3#0, a#54#4#0, a#54#5#0, a#54#6#0, a#54#7#0) } 
  _2_raft.Message.term(#raft.Message.AppendEntriesRequest(a#54#0#0, a#54#1#0, a#54#2#0, a#54#3#0, a#54#4#0, a#54#5#0, a#54#6#0, a#54#7#0))
     == a#54#0#0);

function _2_raft.Message.prevLogIndex(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#55#0#0: int, 
    a#55#1#0: int, 
    a#55#2#0: int, 
    a#55#3#0: Seq Box, 
    a#55#4#0: Seq Box, 
    a#55#5#0: int, 
    a#55#6#0: Box, 
    a#55#7#0: Box :: 
  { #raft.Message.AppendEntriesRequest(a#55#0#0, a#55#1#0, a#55#2#0, a#55#3#0, a#55#4#0, a#55#5#0, a#55#6#0, a#55#7#0) } 
  _2_raft.Message.prevLogIndex(#raft.Message.AppendEntriesRequest(a#55#0#0, a#55#1#0, a#55#2#0, a#55#3#0, a#55#4#0, a#55#5#0, a#55#6#0, a#55#7#0))
     == a#55#1#0);

function _2_raft.Message.prevLogTerm(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#56#0#0: int, 
    a#56#1#0: int, 
    a#56#2#0: int, 
    a#56#3#0: Seq Box, 
    a#56#4#0: Seq Box, 
    a#56#5#0: int, 
    a#56#6#0: Box, 
    a#56#7#0: Box :: 
  { #raft.Message.AppendEntriesRequest(a#56#0#0, a#56#1#0, a#56#2#0, a#56#3#0, a#56#4#0, a#56#5#0, a#56#6#0, a#56#7#0) } 
  _2_raft.Message.prevLogTerm(#raft.Message.AppendEntriesRequest(a#56#0#0, a#56#1#0, a#56#2#0, a#56#3#0, a#56#4#0, a#56#5#0, a#56#6#0, a#56#7#0))
     == a#56#2#0);

function _2_raft.Message.entries(DatatypeType) : Seq Box;

// Constructor injectivity
axiom (forall a#57#0#0: int, 
    a#57#1#0: int, 
    a#57#2#0: int, 
    a#57#3#0: Seq Box, 
    a#57#4#0: Seq Box, 
    a#57#5#0: int, 
    a#57#6#0: Box, 
    a#57#7#0: Box :: 
  { #raft.Message.AppendEntriesRequest(a#57#0#0, a#57#1#0, a#57#2#0, a#57#3#0, a#57#4#0, a#57#5#0, a#57#6#0, a#57#7#0) } 
  _2_raft.Message.entries(#raft.Message.AppendEntriesRequest(a#57#0#0, a#57#1#0, a#57#2#0, a#57#3#0, a#57#4#0, a#57#5#0, a#57#6#0, a#57#7#0))
     == a#57#3#0);

// Inductive seq element rank
axiom (forall a#58#0#0: int, 
    a#58#1#0: int, 
    a#58#2#0: int, 
    a#58#3#0: Seq Box, 
    a#58#4#0: Seq Box, 
    a#58#5#0: int, 
    a#58#6#0: Box, 
    a#58#7#0: Box, 
    i: int :: 
  { Seq#Index(a#58#3#0, i), #raft.Message.AppendEntriesRequest(a#58#0#0, a#58#1#0, a#58#2#0, a#58#3#0, a#58#4#0, a#58#5#0, a#58#6#0, a#58#7#0) } 
  0 <= i && i < Seq#Length(a#58#3#0)
     ==> DtRank($Unbox(Seq#Index(a#58#3#0, i)): DatatypeType)
       < DtRank(#raft.Message.AppendEntriesRequest(a#58#0#0, a#58#1#0, a#58#2#0, a#58#3#0, a#58#4#0, a#58#5#0, a#58#6#0, a#58#7#0)));

// Inductive seq rank
axiom (forall a#59#0#0: int, 
    a#59#1#0: int, 
    a#59#2#0: int, 
    a#59#3#0: Seq Box, 
    a#59#4#0: Seq Box, 
    a#59#5#0: int, 
    a#59#6#0: Box, 
    a#59#7#0: Box :: 
  { #raft.Message.AppendEntriesRequest(a#59#0#0, a#59#1#0, a#59#2#0, a#59#3#0, a#59#4#0, a#59#5#0, a#59#6#0, a#59#7#0) } 
  Seq#Rank(a#59#3#0)
     < DtRank(#raft.Message.AppendEntriesRequest(a#59#0#0, a#59#1#0, a#59#2#0, a#59#3#0, a#59#4#0, a#59#5#0, a#59#6#0, a#59#7#0)));

// Constructor injectivity
axiom (forall a#60#0#0: int, 
    a#60#1#0: int, 
    a#60#2#0: int, 
    a#60#3#0: Seq Box, 
    a#60#4#0: Seq Box, 
    a#60#5#0: int, 
    a#60#6#0: Box, 
    a#60#7#0: Box :: 
  { #raft.Message.AppendEntriesRequest(a#60#0#0, a#60#1#0, a#60#2#0, a#60#3#0, a#60#4#0, a#60#5#0, a#60#6#0, a#60#7#0) } 
  _2_raft.Message.logGhost(#raft.Message.AppendEntriesRequest(a#60#0#0, a#60#1#0, a#60#2#0, a#60#3#0, a#60#4#0, a#60#5#0, a#60#6#0, a#60#7#0))
     == a#60#4#0);

// Inductive seq element rank
axiom (forall a#61#0#0: int, 
    a#61#1#0: int, 
    a#61#2#0: int, 
    a#61#3#0: Seq Box, 
    a#61#4#0: Seq Box, 
    a#61#5#0: int, 
    a#61#6#0: Box, 
    a#61#7#0: Box, 
    i: int :: 
  { Seq#Index(a#61#4#0, i), #raft.Message.AppendEntriesRequest(a#61#0#0, a#61#1#0, a#61#2#0, a#61#3#0, a#61#4#0, a#61#5#0, a#61#6#0, a#61#7#0) } 
  0 <= i && i < Seq#Length(a#61#4#0)
     ==> DtRank($Unbox(Seq#Index(a#61#4#0, i)): DatatypeType)
       < DtRank(#raft.Message.AppendEntriesRequest(a#61#0#0, a#61#1#0, a#61#2#0, a#61#3#0, a#61#4#0, a#61#5#0, a#61#6#0, a#61#7#0)));

// Inductive seq rank
axiom (forall a#62#0#0: int, 
    a#62#1#0: int, 
    a#62#2#0: int, 
    a#62#3#0: Seq Box, 
    a#62#4#0: Seq Box, 
    a#62#5#0: int, 
    a#62#6#0: Box, 
    a#62#7#0: Box :: 
  { #raft.Message.AppendEntriesRequest(a#62#0#0, a#62#1#0, a#62#2#0, a#62#3#0, a#62#4#0, a#62#5#0, a#62#6#0, a#62#7#0) } 
  Seq#Rank(a#62#4#0)
     < DtRank(#raft.Message.AppendEntriesRequest(a#62#0#0, a#62#1#0, a#62#2#0, a#62#3#0, a#62#4#0, a#62#5#0, a#62#6#0, a#62#7#0)));

function _2_raft.Message.commitIndex(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#63#0#0: int, 
    a#63#1#0: int, 
    a#63#2#0: int, 
    a#63#3#0: Seq Box, 
    a#63#4#0: Seq Box, 
    a#63#5#0: int, 
    a#63#6#0: Box, 
    a#63#7#0: Box :: 
  { #raft.Message.AppendEntriesRequest(a#63#0#0, a#63#1#0, a#63#2#0, a#63#3#0, a#63#4#0, a#63#5#0, a#63#6#0, a#63#7#0) } 
  _2_raft.Message.commitIndex(#raft.Message.AppendEntriesRequest(a#63#0#0, a#63#1#0, a#63#2#0, a#63#3#0, a#63#4#0, a#63#5#0, a#63#6#0, a#63#7#0))
     == a#63#5#0);

// Constructor injectivity
axiom (forall a#64#0#0: int, 
    a#64#1#0: int, 
    a#64#2#0: int, 
    a#64#3#0: Seq Box, 
    a#64#4#0: Seq Box, 
    a#64#5#0: int, 
    a#64#6#0: Box, 
    a#64#7#0: Box :: 
  { #raft.Message.AppendEntriesRequest(a#64#0#0, a#64#1#0, a#64#2#0, a#64#3#0, a#64#4#0, a#64#5#0, a#64#6#0, a#64#7#0) } 
  _2_raft.Message.source(#raft.Message.AppendEntriesRequest(a#64#0#0, a#64#1#0, a#64#2#0, a#64#3#0, a#64#4#0, a#64#5#0, a#64#6#0, a#64#7#0))
     == a#64#6#0);

// Inductive rank
axiom (forall a#65#0#0: int, 
    a#65#1#0: int, 
    a#65#2#0: int, 
    a#65#3#0: Seq Box, 
    a#65#4#0: Seq Box, 
    a#65#5#0: int, 
    a#65#6#0: Box, 
    a#65#7#0: Box :: 
  { #raft.Message.AppendEntriesRequest(a#65#0#0, a#65#1#0, a#65#2#0, a#65#3#0, a#65#4#0, a#65#5#0, a#65#6#0, a#65#7#0) } 
  BoxRank(a#65#6#0)
     < DtRank(#raft.Message.AppendEntriesRequest(a#65#0#0, a#65#1#0, a#65#2#0, a#65#3#0, a#65#4#0, a#65#5#0, a#65#6#0, a#65#7#0)));

// Constructor injectivity
axiom (forall a#66#0#0: int, 
    a#66#1#0: int, 
    a#66#2#0: int, 
    a#66#3#0: Seq Box, 
    a#66#4#0: Seq Box, 
    a#66#5#0: int, 
    a#66#6#0: Box, 
    a#66#7#0: Box :: 
  { #raft.Message.AppendEntriesRequest(a#66#0#0, a#66#1#0, a#66#2#0, a#66#3#0, a#66#4#0, a#66#5#0, a#66#6#0, a#66#7#0) } 
  _2_raft.Message.dest(#raft.Message.AppendEntriesRequest(a#66#0#0, a#66#1#0, a#66#2#0, a#66#3#0, a#66#4#0, a#66#5#0, a#66#6#0, a#66#7#0))
     == a#66#7#0);

// Inductive rank
axiom (forall a#67#0#0: int, 
    a#67#1#0: int, 
    a#67#2#0: int, 
    a#67#3#0: Seq Box, 
    a#67#4#0: Seq Box, 
    a#67#5#0: int, 
    a#67#6#0: Box, 
    a#67#7#0: Box :: 
  { #raft.Message.AppendEntriesRequest(a#67#0#0, a#67#1#0, a#67#2#0, a#67#3#0, a#67#4#0, a#67#5#0, a#67#6#0, a#67#7#0) } 
  BoxRank(a#67#7#0)
     < DtRank(#raft.Message.AppendEntriesRequest(a#67#0#0, a#67#1#0, a#67#2#0, a#67#3#0, a#67#4#0, a#67#5#0, a#67#6#0, a#67#7#0)));

// Constructor function declaration
function #raft.Message.AppendEntriesResponse(int, bool, int, Box, Box) : DatatypeType;

const unique ##raft.Message.AppendEntriesResponse: DtCtorId;

// Constructor identifier
axiom (forall a#68#0#0: int, a#68#1#0: bool, a#68#2#0: int, a#68#3#0: Box, a#68#4#0: Box :: 
  { #raft.Message.AppendEntriesResponse(a#68#0#0, a#68#1#0, a#68#2#0, a#68#3#0, a#68#4#0) } 
  DatatypeCtorId(#raft.Message.AppendEntriesResponse(a#68#0#0, a#68#1#0, a#68#2#0, a#68#3#0, a#68#4#0))
     == ##raft.Message.AppendEntriesResponse);

function _2_raft.Message.AppendEntriesResponse_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.Message.AppendEntriesResponse_q(d) } 
  _2_raft.Message.AppendEntriesResponse_q(d)
     <==> DatatypeCtorId(d) == ##raft.Message.AppendEntriesResponse);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.Message.AppendEntriesResponse_q(d) } 
  _2_raft.Message.AppendEntriesResponse_q(d)
     ==> (exists a#69#0#0: int, a#69#1#0: bool, a#69#2#0: int, a#69#3#0: Box, a#69#4#0: Box :: 
      d
         == #raft.Message.AppendEntriesResponse(a#69#0#0, a#69#1#0, a#69#2#0, a#69#3#0, a#69#4#0)));

// Constructor $Is
axiom (forall a#70#0#0: int, a#70#1#0: bool, a#70#2#0: int, a#70#3#0: Box, a#70#4#0: Box :: 
  { $Is(#raft.Message.AppendEntriesResponse(a#70#0#0, a#70#1#0, a#70#2#0, a#70#3#0, a#70#4#0), 
      Tclass._2_raft.Message()) } 
  $Is(#raft.Message.AppendEntriesResponse(a#70#0#0, a#70#1#0, a#70#2#0, a#70#3#0, a#70#4#0), 
      Tclass._2_raft.Message())
     <==> $Is(a#70#0#0, TInt)
       && $Is(a#70#1#0, TBool)
       && $Is(a#70#2#0, TInt)
       && $IsBox(a#70#3#0, #$ServerID)
       && $IsBox(a#70#4#0, #$ServerID));

// Constructor $IsAlloc
axiom (forall a#71#0#0: int, 
    a#71#1#0: bool, 
    a#71#2#0: int, 
    a#71#3#0: Box, 
    a#71#4#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#raft.Message.AppendEntriesResponse(a#71#0#0, a#71#1#0, a#71#2#0, a#71#3#0, a#71#4#0), 
      Tclass._2_raft.Message(), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.Message.AppendEntriesResponse(a#71#0#0, a#71#1#0, a#71#2#0, a#71#3#0, a#71#4#0), 
        Tclass._2_raft.Message(), 
        $h)
       <==> $IsAlloc(a#71#0#0, TInt, $h)
         && $IsAlloc(a#71#1#0, TBool, $h)
         && $IsAlloc(a#71#2#0, TInt, $h)
         && $IsAllocBox(a#71#3#0, #$ServerID, $h)
         && $IsAllocBox(a#71#4#0, #$ServerID, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Message.term(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.AppendEntriesResponse_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAlloc(_2_raft.Message.term(d), TInt, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Message.success(d), TBool, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.AppendEntriesResponse_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAlloc(_2_raft.Message.success(d), TBool, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Message.matchIndex(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.AppendEntriesResponse_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAlloc(_2_raft.Message.matchIndex(d), TInt, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Message.source(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.AppendEntriesResponse_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAllocBox(_2_raft.Message.source(d), #$ServerID, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Message.dest(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Message.AppendEntriesResponse_q(d)
       && $IsAlloc(d, Tclass._2_raft.Message(), $h)
     ==> $IsAllocBox(_2_raft.Message.dest(d), #$ServerID, $h));

// Constructor literal
axiom (forall a#72#0#0: int, a#72#1#0: bool, a#72#2#0: int, a#72#3#0: Box, a#72#4#0: Box :: 
  { #raft.Message.AppendEntriesResponse(LitInt(a#72#0#0), Lit(a#72#1#0), LitInt(a#72#2#0), Lit(a#72#3#0), Lit(a#72#4#0)) } 
  #raft.Message.AppendEntriesResponse(LitInt(a#72#0#0), Lit(a#72#1#0), LitInt(a#72#2#0), Lit(a#72#3#0), Lit(a#72#4#0))
     == Lit(#raft.Message.AppendEntriesResponse(a#72#0#0, a#72#1#0, a#72#2#0, a#72#3#0, a#72#4#0)));

// Constructor injectivity
axiom (forall a#73#0#0: int, a#73#1#0: bool, a#73#2#0: int, a#73#3#0: Box, a#73#4#0: Box :: 
  { #raft.Message.AppendEntriesResponse(a#73#0#0, a#73#1#0, a#73#2#0, a#73#3#0, a#73#4#0) } 
  _2_raft.Message.term(#raft.Message.AppendEntriesResponse(a#73#0#0, a#73#1#0, a#73#2#0, a#73#3#0, a#73#4#0))
     == a#73#0#0);

function _2_raft.Message.success(DatatypeType) : bool;

// Constructor injectivity
axiom (forall a#74#0#0: int, a#74#1#0: bool, a#74#2#0: int, a#74#3#0: Box, a#74#4#0: Box :: 
  { #raft.Message.AppendEntriesResponse(a#74#0#0, a#74#1#0, a#74#2#0, a#74#3#0, a#74#4#0) } 
  _2_raft.Message.success(#raft.Message.AppendEntriesResponse(a#74#0#0, a#74#1#0, a#74#2#0, a#74#3#0, a#74#4#0))
     == a#74#1#0);

function _2_raft.Message.matchIndex(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#75#0#0: int, a#75#1#0: bool, a#75#2#0: int, a#75#3#0: Box, a#75#4#0: Box :: 
  { #raft.Message.AppendEntriesResponse(a#75#0#0, a#75#1#0, a#75#2#0, a#75#3#0, a#75#4#0) } 
  _2_raft.Message.matchIndex(#raft.Message.AppendEntriesResponse(a#75#0#0, a#75#1#0, a#75#2#0, a#75#3#0, a#75#4#0))
     == a#75#2#0);

// Constructor injectivity
axiom (forall a#76#0#0: int, a#76#1#0: bool, a#76#2#0: int, a#76#3#0: Box, a#76#4#0: Box :: 
  { #raft.Message.AppendEntriesResponse(a#76#0#0, a#76#1#0, a#76#2#0, a#76#3#0, a#76#4#0) } 
  _2_raft.Message.source(#raft.Message.AppendEntriesResponse(a#76#0#0, a#76#1#0, a#76#2#0, a#76#3#0, a#76#4#0))
     == a#76#3#0);

// Inductive rank
axiom (forall a#77#0#0: int, a#77#1#0: bool, a#77#2#0: int, a#77#3#0: Box, a#77#4#0: Box :: 
  { #raft.Message.AppendEntriesResponse(a#77#0#0, a#77#1#0, a#77#2#0, a#77#3#0, a#77#4#0) } 
  BoxRank(a#77#3#0)
     < DtRank(#raft.Message.AppendEntriesResponse(a#77#0#0, a#77#1#0, a#77#2#0, a#77#3#0, a#77#4#0)));

// Constructor injectivity
axiom (forall a#78#0#0: int, a#78#1#0: bool, a#78#2#0: int, a#78#3#0: Box, a#78#4#0: Box :: 
  { #raft.Message.AppendEntriesResponse(a#78#0#0, a#78#1#0, a#78#2#0, a#78#3#0, a#78#4#0) } 
  _2_raft.Message.dest(#raft.Message.AppendEntriesResponse(a#78#0#0, a#78#1#0, a#78#2#0, a#78#3#0, a#78#4#0))
     == a#78#4#0);

// Inductive rank
axiom (forall a#79#0#0: int, a#79#1#0: bool, a#79#2#0: int, a#79#3#0: Box, a#79#4#0: Box :: 
  { #raft.Message.AppendEntriesResponse(a#79#0#0, a#79#1#0, a#79#2#0, a#79#3#0, a#79#4#0) } 
  BoxRank(a#79#4#0)
     < DtRank(#raft.Message.AppendEntriesResponse(a#79#0#0, a#79#1#0, a#79#2#0, a#79#3#0, a#79#4#0)));

// One-depth case-split function
function $IsA#_2_raft.Message(DatatypeType) : bool;

// One-depth case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_2_raft.Message(d) } 
  $IsA#_2_raft.Message(d)
     ==> _2_raft.Message.RequestVoteRequest_q(d)
       || _2_raft.Message.RequestVoteResponse_q(d)
       || _2_raft.Message.AppendEntriesRequest_q(d)
       || _2_raft.Message.AppendEntriesResponse_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _2_raft.Message.AppendEntriesResponse_q(d), $Is(d, Tclass._2_raft.Message()) } 
    { _2_raft.Message.AppendEntriesRequest_q(d), $Is(d, Tclass._2_raft.Message()) } 
    { _2_raft.Message.RequestVoteResponse_q(d), $Is(d, Tclass._2_raft.Message()) } 
    { _2_raft.Message.RequestVoteRequest_q(d), $Is(d, Tclass._2_raft.Message()) } 
  $Is(d, Tclass._2_raft.Message())
     ==> _2_raft.Message.RequestVoteRequest_q(d)
       || _2_raft.Message.RequestVoteResponse_q(d)
       || _2_raft.Message.AppendEntriesRequest_q(d)
       || _2_raft.Message.AppendEntriesResponse_q(d));

const unique class._2_raft.ElectionRecord: ClassName;

// Constructor function declaration
function #raft.ElectionRecord.ElectionRecord(int, Box, Seq Box, Set Box, Map Box Box) : DatatypeType;

const unique ##raft.ElectionRecord.ElectionRecord: DtCtorId;

// Constructor identifier
axiom (forall a#80#0#0: int, 
    a#80#1#0: Box, 
    a#80#2#0: Seq Box, 
    a#80#3#0: Set Box, 
    a#80#4#0: Map Box Box :: 
  { #raft.ElectionRecord.ElectionRecord(a#80#0#0, a#80#1#0, a#80#2#0, a#80#3#0, a#80#4#0) } 
  DatatypeCtorId(#raft.ElectionRecord.ElectionRecord(a#80#0#0, a#80#1#0, a#80#2#0, a#80#3#0, a#80#4#0))
     == ##raft.ElectionRecord.ElectionRecord);

function _2_raft.ElectionRecord.ElectionRecord_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.ElectionRecord.ElectionRecord_q(d) } 
  _2_raft.ElectionRecord.ElectionRecord_q(d)
     <==> DatatypeCtorId(d) == ##raft.ElectionRecord.ElectionRecord);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.ElectionRecord.ElectionRecord_q(d) } 
  _2_raft.ElectionRecord.ElectionRecord_q(d)
     ==> (exists a#81#0#0: int, 
        a#81#1#0: Box, 
        a#81#2#0: Seq Box, 
        a#81#3#0: Set Box, 
        a#81#4#0: Map Box Box :: 
      d
         == #raft.ElectionRecord.ElectionRecord(a#81#0#0, a#81#1#0, a#81#2#0, a#81#3#0, a#81#4#0)));

// Constructor $Is
axiom (forall a#82#0#0: int, 
    a#82#1#0: Box, 
    a#82#2#0: Seq Box, 
    a#82#3#0: Set Box, 
    a#82#4#0: Map Box Box :: 
  { $Is(#raft.ElectionRecord.ElectionRecord(a#82#0#0, a#82#1#0, a#82#2#0, a#82#3#0, a#82#4#0), 
      Tclass._2_raft.ElectionRecord()) } 
  $Is(#raft.ElectionRecord.ElectionRecord(a#82#0#0, a#82#1#0, a#82#2#0, a#82#3#0, a#82#4#0), 
      Tclass._2_raft.ElectionRecord())
     <==> $Is(a#82#0#0, TInt)
       && $IsBox(a#82#1#0, #$ServerID)
       && $Is(a#82#2#0, TSeq(Tclass._2_raft.LogEntry()))
       && $Is(a#82#3#0, TSet(#$ServerID))
       && $Is(a#82#4#0, TMap(#$ServerID, TSeq(Tclass._2_raft.LogEntry()))));

// Constructor $IsAlloc
axiom (forall a#83#0#0: int, 
    a#83#1#0: Box, 
    a#83#2#0: Seq Box, 
    a#83#3#0: Set Box, 
    a#83#4#0: Map Box Box, 
    $h: Heap :: 
  { $IsAlloc(#raft.ElectionRecord.ElectionRecord(a#83#0#0, a#83#1#0, a#83#2#0, a#83#3#0, a#83#4#0), 
      Tclass._2_raft.ElectionRecord(), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.ElectionRecord.ElectionRecord(a#83#0#0, a#83#1#0, a#83#2#0, a#83#3#0, a#83#4#0), 
        Tclass._2_raft.ElectionRecord(), 
        $h)
       <==> $IsAlloc(a#83#0#0, TInt, $h)
         && $IsAllocBox(a#83#1#0, #$ServerID, $h)
         && $IsAlloc(a#83#2#0, TSeq(Tclass._2_raft.LogEntry()), $h)
         && $IsAlloc(a#83#3#0, TSet(#$ServerID), $h)
         && $IsAlloc(a#83#4#0, TMap(#$ServerID, TSeq(Tclass._2_raft.LogEntry())), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.ElectionRecord.term(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.ElectionRecord.ElectionRecord_q(d)
       && $IsAlloc(d, Tclass._2_raft.ElectionRecord(), $h)
     ==> $IsAlloc(_2_raft.ElectionRecord.term(d), TInt, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.ElectionRecord.leader(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.ElectionRecord.ElectionRecord_q(d)
       && $IsAlloc(d, Tclass._2_raft.ElectionRecord(), $h)
     ==> $IsAllocBox(_2_raft.ElectionRecord.leader(d), #$ServerID, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.ElectionRecord.log(d), TSeq(Tclass._2_raft.LogEntry()), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.ElectionRecord.ElectionRecord_q(d)
       && $IsAlloc(d, Tclass._2_raft.ElectionRecord(), $h)
     ==> $IsAlloc(_2_raft.ElectionRecord.log(d), TSeq(Tclass._2_raft.LogEntry()), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.ElectionRecord.votes(d), TSet(#$ServerID), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.ElectionRecord.ElectionRecord_q(d)
       && $IsAlloc(d, Tclass._2_raft.ElectionRecord(), $h)
     ==> $IsAlloc(_2_raft.ElectionRecord.votes(d), TSet(#$ServerID), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.ElectionRecord.voterLog(d), 
      TMap(#$ServerID, TSeq(Tclass._2_raft.LogEntry())), 
      $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.ElectionRecord.ElectionRecord_q(d)
       && $IsAlloc(d, Tclass._2_raft.ElectionRecord(), $h)
     ==> $IsAlloc(_2_raft.ElectionRecord.voterLog(d), 
      TMap(#$ServerID, TSeq(Tclass._2_raft.LogEntry())), 
      $h));

// Constructor literal
axiom (forall a#84#0#0: int, 
    a#84#1#0: Box, 
    a#84#2#0: Seq Box, 
    a#84#3#0: Set Box, 
    a#84#4#0: Map Box Box :: 
  { #raft.ElectionRecord.ElectionRecord(LitInt(a#84#0#0), Lit(a#84#1#0), Lit(a#84#2#0), Lit(a#84#3#0), Lit(a#84#4#0)) } 
  #raft.ElectionRecord.ElectionRecord(LitInt(a#84#0#0), Lit(a#84#1#0), Lit(a#84#2#0), Lit(a#84#3#0), Lit(a#84#4#0))
     == Lit(#raft.ElectionRecord.ElectionRecord(a#84#0#0, a#84#1#0, a#84#2#0, a#84#3#0, a#84#4#0)));

function _2_raft.ElectionRecord.term(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#85#0#0: int, 
    a#85#1#0: Box, 
    a#85#2#0: Seq Box, 
    a#85#3#0: Set Box, 
    a#85#4#0: Map Box Box :: 
  { #raft.ElectionRecord.ElectionRecord(a#85#0#0, a#85#1#0, a#85#2#0, a#85#3#0, a#85#4#0) } 
  _2_raft.ElectionRecord.term(#raft.ElectionRecord.ElectionRecord(a#85#0#0, a#85#1#0, a#85#2#0, a#85#3#0, a#85#4#0))
     == a#85#0#0);

function _2_raft.ElectionRecord.leader(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#86#0#0: int, 
    a#86#1#0: Box, 
    a#86#2#0: Seq Box, 
    a#86#3#0: Set Box, 
    a#86#4#0: Map Box Box :: 
  { #raft.ElectionRecord.ElectionRecord(a#86#0#0, a#86#1#0, a#86#2#0, a#86#3#0, a#86#4#0) } 
  _2_raft.ElectionRecord.leader(#raft.ElectionRecord.ElectionRecord(a#86#0#0, a#86#1#0, a#86#2#0, a#86#3#0, a#86#4#0))
     == a#86#1#0);

// Inductive rank
axiom (forall a#87#0#0: int, 
    a#87#1#0: Box, 
    a#87#2#0: Seq Box, 
    a#87#3#0: Set Box, 
    a#87#4#0: Map Box Box :: 
  { #raft.ElectionRecord.ElectionRecord(a#87#0#0, a#87#1#0, a#87#2#0, a#87#3#0, a#87#4#0) } 
  BoxRank(a#87#1#0)
     < DtRank(#raft.ElectionRecord.ElectionRecord(a#87#0#0, a#87#1#0, a#87#2#0, a#87#3#0, a#87#4#0)));

function _2_raft.ElectionRecord.log(DatatypeType) : Seq Box;

// Constructor injectivity
axiom (forall a#88#0#0: int, 
    a#88#1#0: Box, 
    a#88#2#0: Seq Box, 
    a#88#3#0: Set Box, 
    a#88#4#0: Map Box Box :: 
  { #raft.ElectionRecord.ElectionRecord(a#88#0#0, a#88#1#0, a#88#2#0, a#88#3#0, a#88#4#0) } 
  _2_raft.ElectionRecord.log(#raft.ElectionRecord.ElectionRecord(a#88#0#0, a#88#1#0, a#88#2#0, a#88#3#0, a#88#4#0))
     == a#88#2#0);

// Inductive seq element rank
axiom (forall a#89#0#0: int, 
    a#89#1#0: Box, 
    a#89#2#0: Seq Box, 
    a#89#3#0: Set Box, 
    a#89#4#0: Map Box Box, 
    i: int :: 
  { Seq#Index(a#89#2#0, i), #raft.ElectionRecord.ElectionRecord(a#89#0#0, a#89#1#0, a#89#2#0, a#89#3#0, a#89#4#0) } 
  0 <= i && i < Seq#Length(a#89#2#0)
     ==> DtRank($Unbox(Seq#Index(a#89#2#0, i)): DatatypeType)
       < DtRank(#raft.ElectionRecord.ElectionRecord(a#89#0#0, a#89#1#0, a#89#2#0, a#89#3#0, a#89#4#0)));

// Inductive seq rank
axiom (forall a#90#0#0: int, 
    a#90#1#0: Box, 
    a#90#2#0: Seq Box, 
    a#90#3#0: Set Box, 
    a#90#4#0: Map Box Box :: 
  { #raft.ElectionRecord.ElectionRecord(a#90#0#0, a#90#1#0, a#90#2#0, a#90#3#0, a#90#4#0) } 
  Seq#Rank(a#90#2#0)
     < DtRank(#raft.ElectionRecord.ElectionRecord(a#90#0#0, a#90#1#0, a#90#2#0, a#90#3#0, a#90#4#0)));

function _2_raft.ElectionRecord.votes(DatatypeType) : Set Box;

// Constructor injectivity
axiom (forall a#91#0#0: int, 
    a#91#1#0: Box, 
    a#91#2#0: Seq Box, 
    a#91#3#0: Set Box, 
    a#91#4#0: Map Box Box :: 
  { #raft.ElectionRecord.ElectionRecord(a#91#0#0, a#91#1#0, a#91#2#0, a#91#3#0, a#91#4#0) } 
  _2_raft.ElectionRecord.votes(#raft.ElectionRecord.ElectionRecord(a#91#0#0, a#91#1#0, a#91#2#0, a#91#3#0, a#91#4#0))
     == a#91#3#0);

// Inductive set element rank
axiom (forall a#92#0#0: int, 
    a#92#1#0: Box, 
    a#92#2#0: Seq Box, 
    a#92#3#0: Set Box, 
    a#92#4#0: Map Box Box, 
    d: DatatypeType :: 
  { a#92#3#0[$Box(d)], #raft.ElectionRecord.ElectionRecord(a#92#0#0, a#92#1#0, a#92#2#0, a#92#3#0, a#92#4#0) } 
  a#92#3#0[$Box(d)]
     ==> DtRank(d)
       < DtRank(#raft.ElectionRecord.ElectionRecord(a#92#0#0, a#92#1#0, a#92#2#0, a#92#3#0, a#92#4#0)));

function _2_raft.ElectionRecord.voterLog(DatatypeType) : Map Box Box;

// Constructor injectivity
axiom (forall a#93#0#0: int, 
    a#93#1#0: Box, 
    a#93#2#0: Seq Box, 
    a#93#3#0: Set Box, 
    a#93#4#0: Map Box Box :: 
  { #raft.ElectionRecord.ElectionRecord(a#93#0#0, a#93#1#0, a#93#2#0, a#93#3#0, a#93#4#0) } 
  _2_raft.ElectionRecord.voterLog(#raft.ElectionRecord.ElectionRecord(a#93#0#0, a#93#1#0, a#93#2#0, a#93#3#0, a#93#4#0))
     == a#93#4#0);

// Inductive map key rank
axiom (forall a#94#0#0: int, 
    a#94#1#0: Box, 
    a#94#2#0: Seq Box, 
    a#94#3#0: Set Box, 
    a#94#4#0: Map Box Box, 
    d: DatatypeType :: 
  { Map#Domain(a#94#4#0)[$Box(d)], #raft.ElectionRecord.ElectionRecord(a#94#0#0, a#94#1#0, a#94#2#0, a#94#3#0, a#94#4#0) } 
  Map#Domain(a#94#4#0)[$Box(d)]
     ==> DtRank(d)
       < DtRank(#raft.ElectionRecord.ElectionRecord(a#94#0#0, a#94#1#0, a#94#2#0, a#94#3#0, a#94#4#0)));

// Inductive map value rank
axiom (forall a#95#0#0: int, 
    a#95#1#0: Box, 
    a#95#2#0: Seq Box, 
    a#95#3#0: Set Box, 
    a#95#4#0: Map Box Box, 
    bx: Box :: 
  { Map#Domain(a#95#4#0)[bx], #raft.ElectionRecord.ElectionRecord(a#95#0#0, a#95#1#0, a#95#2#0, a#95#3#0, a#95#4#0) } 
  Map#Domain(a#95#4#0)[bx]
     ==> DtRank($Unbox(Map#Elements(a#95#4#0)[bx]): DatatypeType)
       < DtRank(#raft.ElectionRecord.ElectionRecord(a#95#0#0, a#95#1#0, a#95#2#0, a#95#3#0, a#95#4#0)));

// One-depth case-split function
function $IsA#_2_raft.ElectionRecord(DatatypeType) : bool;

// One-depth case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_2_raft.ElectionRecord(d) } 
  $IsA#_2_raft.ElectionRecord(d) ==> _2_raft.ElectionRecord.ElectionRecord_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _2_raft.ElectionRecord.ElectionRecord_q(d), $Is(d, Tclass._2_raft.ElectionRecord()) } 
  $Is(d, Tclass._2_raft.ElectionRecord())
     ==> _2_raft.ElectionRecord.ElectionRecord_q(d));

const unique class._2_raft.GlobalVars: ClassName;

// Constructor function declaration
function #raft.GlobalVars.GlobalVars(MultiSet Box, Set Box, Set Box) : DatatypeType;

const unique ##raft.GlobalVars.GlobalVars: DtCtorId;

// Constructor identifier
axiom (forall a#96#0#0: MultiSet Box, a#96#1#0: Set Box, a#96#2#0: Set Box :: 
  { #raft.GlobalVars.GlobalVars(a#96#0#0, a#96#1#0, a#96#2#0) } 
  DatatypeCtorId(#raft.GlobalVars.GlobalVars(a#96#0#0, a#96#1#0, a#96#2#0))
     == ##raft.GlobalVars.GlobalVars);

function _2_raft.GlobalVars.GlobalVars_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.GlobalVars.GlobalVars_q(d) } 
  _2_raft.GlobalVars.GlobalVars_q(d)
     <==> DatatypeCtorId(d) == ##raft.GlobalVars.GlobalVars);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.GlobalVars.GlobalVars_q(d) } 
  _2_raft.GlobalVars.GlobalVars_q(d)
     ==> (exists a#97#0#0: MultiSet Box, a#97#1#0: Set Box, a#97#2#0: Set Box :: 
      d == #raft.GlobalVars.GlobalVars(a#97#0#0, a#97#1#0, a#97#2#0)));

function Tclass._2_raft.GlobalVars() : Ty;

// Tclass._2_raft.GlobalVars Tag
axiom Tag(Tclass._2_raft.GlobalVars()) == Tagclass._2_raft.GlobalVars;

const unique Tagclass._2_raft.GlobalVars: TyTag;

// Box/unbox axiom for Tclass._2_raft.GlobalVars
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._2_raft.GlobalVars()) } 
  $IsBox(bx, Tclass._2_raft.GlobalVars())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._2_raft.GlobalVars()));

// Constructor $Is
axiom (forall a#98#0#0: MultiSet Box, a#98#1#0: Set Box, a#98#2#0: Set Box :: 
  { $Is(#raft.GlobalVars.GlobalVars(a#98#0#0, a#98#1#0, a#98#2#0), 
      Tclass._2_raft.GlobalVars()) } 
  $Is(#raft.GlobalVars.GlobalVars(a#98#0#0, a#98#1#0, a#98#2#0), 
      Tclass._2_raft.GlobalVars())
     <==> $Is(a#98#0#0, TMultiSet(Tclass._2_raft.Message()))
       && $Is(a#98#1#0, TSet(Tclass._2_raft.ElectionRecord()))
       && $Is(a#98#2#0, TSet(TSeq(Tclass._2_raft.LogEntry()))));

// Constructor $IsAlloc
axiom (forall a#99#0#0: MultiSet Box, a#99#1#0: Set Box, a#99#2#0: Set Box, $h: Heap :: 
  { $IsAlloc(#raft.GlobalVars.GlobalVars(a#99#0#0, a#99#1#0, a#99#2#0), 
      Tclass._2_raft.GlobalVars(), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.GlobalVars.GlobalVars(a#99#0#0, a#99#1#0, a#99#2#0), 
        Tclass._2_raft.GlobalVars(), 
        $h)
       <==> $IsAlloc(a#99#0#0, TMultiSet(Tclass._2_raft.Message()), $h)
         && $IsAlloc(a#99#1#0, TSet(Tclass._2_raft.ElectionRecord()), $h)
         && $IsAlloc(a#99#2#0, TSet(TSeq(Tclass._2_raft.LogEntry())), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.GlobalVars.messages(d), TMultiSet(Tclass._2_raft.Message()), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.GlobalVars.GlobalVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.GlobalVars(), $h)
     ==> $IsAlloc(_2_raft.GlobalVars.messages(d), TMultiSet(Tclass._2_raft.Message()), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.GlobalVars.elections(d), TSet(Tclass._2_raft.ElectionRecord()), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.GlobalVars.GlobalVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.GlobalVars(), $h)
     ==> $IsAlloc(_2_raft.GlobalVars.elections(d), TSet(Tclass._2_raft.ElectionRecord()), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.GlobalVars.allLogs(d), TSet(TSeq(Tclass._2_raft.LogEntry())), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.GlobalVars.GlobalVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.GlobalVars(), $h)
     ==> $IsAlloc(_2_raft.GlobalVars.allLogs(d), TSet(TSeq(Tclass._2_raft.LogEntry())), $h));

// Constructor literal
axiom (forall a#100#0#0: MultiSet Box, a#100#1#0: Set Box, a#100#2#0: Set Box :: 
  { #raft.GlobalVars.GlobalVars(Lit(a#100#0#0), Lit(a#100#1#0), Lit(a#100#2#0)) } 
  #raft.GlobalVars.GlobalVars(Lit(a#100#0#0), Lit(a#100#1#0), Lit(a#100#2#0))
     == Lit(#raft.GlobalVars.GlobalVars(a#100#0#0, a#100#1#0, a#100#2#0)));

function _2_raft.GlobalVars.messages(DatatypeType) : MultiSet Box;

// Constructor injectivity
axiom (forall a#101#0#0: MultiSet Box, a#101#1#0: Set Box, a#101#2#0: Set Box :: 
  { #raft.GlobalVars.GlobalVars(a#101#0#0, a#101#1#0, a#101#2#0) } 
  _2_raft.GlobalVars.messages(#raft.GlobalVars.GlobalVars(a#101#0#0, a#101#1#0, a#101#2#0))
     == a#101#0#0);

// Inductive multiset element rank
axiom (forall a#102#0#0: MultiSet Box, a#102#1#0: Set Box, a#102#2#0: Set Box, d: DatatypeType :: 
  { a#102#0#0[$Box(d)], #raft.GlobalVars.GlobalVars(a#102#0#0, a#102#1#0, a#102#2#0) } 
  a#102#0#0[$Box(d)] > 0
     ==> DtRank(d) < DtRank(#raft.GlobalVars.GlobalVars(a#102#0#0, a#102#1#0, a#102#2#0)));

function _2_raft.GlobalVars.elections(DatatypeType) : Set Box;

// Constructor injectivity
axiom (forall a#103#0#0: MultiSet Box, a#103#1#0: Set Box, a#103#2#0: Set Box :: 
  { #raft.GlobalVars.GlobalVars(a#103#0#0, a#103#1#0, a#103#2#0) } 
  _2_raft.GlobalVars.elections(#raft.GlobalVars.GlobalVars(a#103#0#0, a#103#1#0, a#103#2#0))
     == a#103#1#0);

// Inductive set element rank
axiom (forall a#104#0#0: MultiSet Box, a#104#1#0: Set Box, a#104#2#0: Set Box, d: DatatypeType :: 
  { a#104#1#0[$Box(d)], #raft.GlobalVars.GlobalVars(a#104#0#0, a#104#1#0, a#104#2#0) } 
  a#104#1#0[$Box(d)]
     ==> DtRank(d) < DtRank(#raft.GlobalVars.GlobalVars(a#104#0#0, a#104#1#0, a#104#2#0)));

function _2_raft.GlobalVars.allLogs(DatatypeType) : Set Box;

// Constructor injectivity
axiom (forall a#105#0#0: MultiSet Box, a#105#1#0: Set Box, a#105#2#0: Set Box :: 
  { #raft.GlobalVars.GlobalVars(a#105#0#0, a#105#1#0, a#105#2#0) } 
  _2_raft.GlobalVars.allLogs(#raft.GlobalVars.GlobalVars(a#105#0#0, a#105#1#0, a#105#2#0))
     == a#105#2#0);

// Inductive set element rank
axiom (forall a#106#0#0: MultiSet Box, a#106#1#0: Set Box, a#106#2#0: Set Box, d: DatatypeType :: 
  { a#106#2#0[$Box(d)], #raft.GlobalVars.GlobalVars(a#106#0#0, a#106#1#0, a#106#2#0) } 
  a#106#2#0[$Box(d)]
     ==> DtRank(d) < DtRank(#raft.GlobalVars.GlobalVars(a#106#0#0, a#106#1#0, a#106#2#0)));

// One-depth case-split function
function $IsA#_2_raft.GlobalVars(DatatypeType) : bool;

// One-depth case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_2_raft.GlobalVars(d) } 
  $IsA#_2_raft.GlobalVars(d) ==> _2_raft.GlobalVars.GlobalVars_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _2_raft.GlobalVars.GlobalVars_q(d), $Is(d, Tclass._2_raft.GlobalVars()) } 
  $Is(d, Tclass._2_raft.GlobalVars()) ==> _2_raft.GlobalVars.GlobalVars_q(d));

const unique class._2_raft.ServerVars: ClassName;

// Constructor function declaration
function #raft.ServerVars.ServerVars(int, DatatypeType, DatatypeType) : DatatypeType;

const unique ##raft.ServerVars.ServerVars: DtCtorId;

// Constructor identifier
axiom (forall a#107#0#0: int, a#107#1#0: DatatypeType, a#107#2#0: DatatypeType :: 
  { #raft.ServerVars.ServerVars(a#107#0#0, a#107#1#0, a#107#2#0) } 
  DatatypeCtorId(#raft.ServerVars.ServerVars(a#107#0#0, a#107#1#0, a#107#2#0))
     == ##raft.ServerVars.ServerVars);

function _2_raft.ServerVars.ServerVars_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.ServerVars.ServerVars_q(d) } 
  _2_raft.ServerVars.ServerVars_q(d)
     <==> DatatypeCtorId(d) == ##raft.ServerVars.ServerVars);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.ServerVars.ServerVars_q(d) } 
  _2_raft.ServerVars.ServerVars_q(d)
     ==> (exists a#108#0#0: int, a#108#1#0: DatatypeType, a#108#2#0: DatatypeType :: 
      d == #raft.ServerVars.ServerVars(a#108#0#0, a#108#1#0, a#108#2#0)));

function Tclass._2_raft.ServerVars() : Ty;

// Tclass._2_raft.ServerVars Tag
axiom Tag(Tclass._2_raft.ServerVars()) == Tagclass._2_raft.ServerVars;

const unique Tagclass._2_raft.ServerVars: TyTag;

// Box/unbox axiom for Tclass._2_raft.ServerVars
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._2_raft.ServerVars()) } 
  $IsBox(bx, Tclass._2_raft.ServerVars())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._2_raft.ServerVars()));

// Constructor $Is
axiom (forall a#109#0#0: int, a#109#1#0: DatatypeType, a#109#2#0: DatatypeType :: 
  { $Is(#raft.ServerVars.ServerVars(a#109#0#0, a#109#1#0, a#109#2#0), 
      Tclass._2_raft.ServerVars()) } 
  $Is(#raft.ServerVars.ServerVars(a#109#0#0, a#109#1#0, a#109#2#0), 
      Tclass._2_raft.ServerVars())
     <==> $Is(a#109#0#0, TInt)
       && $Is(a#109#1#0, Tclass._2_raft.ServerState())
       && $Is(a#109#2#0, Tclass._0_MissingLibrary.Option(#$ServerID)));

// Constructor $IsAlloc
axiom (forall a#110#0#0: int, a#110#1#0: DatatypeType, a#110#2#0: DatatypeType, $h: Heap :: 
  { $IsAlloc(#raft.ServerVars.ServerVars(a#110#0#0, a#110#1#0, a#110#2#0), 
      Tclass._2_raft.ServerVars(), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.ServerVars.ServerVars(a#110#0#0, a#110#1#0, a#110#2#0), 
        Tclass._2_raft.ServerVars(), 
        $h)
       <==> $IsAlloc(a#110#0#0, TInt, $h)
         && $IsAlloc(a#110#1#0, Tclass._2_raft.ServerState(), $h)
         && $IsAlloc(a#110#2#0, Tclass._0_MissingLibrary.Option(#$ServerID), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.ServerVars.currentTerm(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.ServerVars.ServerVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.ServerVars(), $h)
     ==> $IsAlloc(_2_raft.ServerVars.currentTerm(d), TInt, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.ServerVars.state(d), Tclass._2_raft.ServerState(), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.ServerVars.ServerVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.ServerVars(), $h)
     ==> $IsAlloc(_2_raft.ServerVars.state(d), Tclass._2_raft.ServerState(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.ServerVars.votedFor(d), Tclass._0_MissingLibrary.Option(#$ServerID), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.ServerVars.ServerVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.ServerVars(), $h)
     ==> $IsAlloc(_2_raft.ServerVars.votedFor(d), Tclass._0_MissingLibrary.Option(#$ServerID), $h));

// Constructor literal
axiom (forall a#111#0#0: int, a#111#1#0: DatatypeType, a#111#2#0: DatatypeType :: 
  { #raft.ServerVars.ServerVars(LitInt(a#111#0#0), Lit(a#111#1#0), Lit(a#111#2#0)) } 
  #raft.ServerVars.ServerVars(LitInt(a#111#0#0), Lit(a#111#1#0), Lit(a#111#2#0))
     == Lit(#raft.ServerVars.ServerVars(a#111#0#0, a#111#1#0, a#111#2#0)));

function _2_raft.ServerVars.currentTerm(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#112#0#0: int, a#112#1#0: DatatypeType, a#112#2#0: DatatypeType :: 
  { #raft.ServerVars.ServerVars(a#112#0#0, a#112#1#0, a#112#2#0) } 
  _2_raft.ServerVars.currentTerm(#raft.ServerVars.ServerVars(a#112#0#0, a#112#1#0, a#112#2#0))
     == a#112#0#0);

function _2_raft.ServerVars.state(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#113#0#0: int, a#113#1#0: DatatypeType, a#113#2#0: DatatypeType :: 
  { #raft.ServerVars.ServerVars(a#113#0#0, a#113#1#0, a#113#2#0) } 
  _2_raft.ServerVars.state(#raft.ServerVars.ServerVars(a#113#0#0, a#113#1#0, a#113#2#0))
     == a#113#1#0);

// Inductive rank
axiom (forall a#114#0#0: int, a#114#1#0: DatatypeType, a#114#2#0: DatatypeType :: 
  { #raft.ServerVars.ServerVars(a#114#0#0, a#114#1#0, a#114#2#0) } 
  DtRank(a#114#1#0)
     < DtRank(#raft.ServerVars.ServerVars(a#114#0#0, a#114#1#0, a#114#2#0)));

function _2_raft.ServerVars.votedFor(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#115#0#0: int, a#115#1#0: DatatypeType, a#115#2#0: DatatypeType :: 
  { #raft.ServerVars.ServerVars(a#115#0#0, a#115#1#0, a#115#2#0) } 
  _2_raft.ServerVars.votedFor(#raft.ServerVars.ServerVars(a#115#0#0, a#115#1#0, a#115#2#0))
     == a#115#2#0);

// Inductive rank
axiom (forall a#116#0#0: int, a#116#1#0: DatatypeType, a#116#2#0: DatatypeType :: 
  { #raft.ServerVars.ServerVars(a#116#0#0, a#116#1#0, a#116#2#0) } 
  DtRank(a#116#2#0)
     < DtRank(#raft.ServerVars.ServerVars(a#116#0#0, a#116#1#0, a#116#2#0)));

// One-depth case-split function
function $IsA#_2_raft.ServerVars(DatatypeType) : bool;

// One-depth case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_2_raft.ServerVars(d) } 
  $IsA#_2_raft.ServerVars(d) ==> _2_raft.ServerVars.ServerVars_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _2_raft.ServerVars.ServerVars_q(d), $Is(d, Tclass._2_raft.ServerVars()) } 
  $Is(d, Tclass._2_raft.ServerVars()) ==> _2_raft.ServerVars.ServerVars_q(d));

const unique class._2_raft.LogVars: ClassName;

// Constructor function declaration
function #raft.LogVars.LogVars(Seq Box, int) : DatatypeType;

const unique ##raft.LogVars.LogVars: DtCtorId;

// Constructor identifier
axiom (forall a#117#0#0: Seq Box, a#117#1#0: int :: 
  { #raft.LogVars.LogVars(a#117#0#0, a#117#1#0) } 
  DatatypeCtorId(#raft.LogVars.LogVars(a#117#0#0, a#117#1#0))
     == ##raft.LogVars.LogVars);

function _2_raft.LogVars.LogVars_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.LogVars.LogVars_q(d) } 
  _2_raft.LogVars.LogVars_q(d) <==> DatatypeCtorId(d) == ##raft.LogVars.LogVars);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.LogVars.LogVars_q(d) } 
  _2_raft.LogVars.LogVars_q(d)
     ==> (exists a#118#0#0: Seq Box, a#118#1#0: int :: 
      d == #raft.LogVars.LogVars(a#118#0#0, a#118#1#0)));

function Tclass._2_raft.LogVars() : Ty;

// Tclass._2_raft.LogVars Tag
axiom Tag(Tclass._2_raft.LogVars()) == Tagclass._2_raft.LogVars;

const unique Tagclass._2_raft.LogVars: TyTag;

// Box/unbox axiom for Tclass._2_raft.LogVars
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._2_raft.LogVars()) } 
  $IsBox(bx, Tclass._2_raft.LogVars())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._2_raft.LogVars()));

// Constructor $Is
axiom (forall a#119#0#0: Seq Box, a#119#1#0: int :: 
  { $Is(#raft.LogVars.LogVars(a#119#0#0, a#119#1#0), Tclass._2_raft.LogVars()) } 
  $Is(#raft.LogVars.LogVars(a#119#0#0, a#119#1#0), Tclass._2_raft.LogVars())
     <==> $Is(a#119#0#0, TSeq(Tclass._2_raft.LogEntry())) && $Is(a#119#1#0, TInt));

// Constructor $IsAlloc
axiom (forall a#120#0#0: Seq Box, a#120#1#0: int, $h: Heap :: 
  { $IsAlloc(#raft.LogVars.LogVars(a#120#0#0, a#120#1#0), Tclass._2_raft.LogVars(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.LogVars.LogVars(a#120#0#0, a#120#1#0), Tclass._2_raft.LogVars(), $h)
       <==> $IsAlloc(a#120#0#0, TSeq(Tclass._2_raft.LogEntry()), $h)
         && $IsAlloc(a#120#1#0, TInt, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.LogVars.log(d), TSeq(Tclass._2_raft.LogEntry()), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.LogVars.LogVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.LogVars(), $h)
     ==> $IsAlloc(_2_raft.LogVars.log(d), TSeq(Tclass._2_raft.LogEntry()), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.LogVars.commitIndex(d), TInt, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.LogVars.LogVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.LogVars(), $h)
     ==> $IsAlloc(_2_raft.LogVars.commitIndex(d), TInt, $h));

// Constructor literal
axiom (forall a#121#0#0: Seq Box, a#121#1#0: int :: 
  { #raft.LogVars.LogVars(Lit(a#121#0#0), LitInt(a#121#1#0)) } 
  #raft.LogVars.LogVars(Lit(a#121#0#0), LitInt(a#121#1#0))
     == Lit(#raft.LogVars.LogVars(a#121#0#0, a#121#1#0)));

function _2_raft.LogVars.log(DatatypeType) : Seq Box;

// Constructor injectivity
axiom (forall a#122#0#0: Seq Box, a#122#1#0: int :: 
  { #raft.LogVars.LogVars(a#122#0#0, a#122#1#0) } 
  _2_raft.LogVars.log(#raft.LogVars.LogVars(a#122#0#0, a#122#1#0)) == a#122#0#0);

// Inductive seq element rank
axiom (forall a#123#0#0: Seq Box, a#123#1#0: int, i: int :: 
  { Seq#Index(a#123#0#0, i), #raft.LogVars.LogVars(a#123#0#0, a#123#1#0) } 
  0 <= i && i < Seq#Length(a#123#0#0)
     ==> DtRank($Unbox(Seq#Index(a#123#0#0, i)): DatatypeType)
       < DtRank(#raft.LogVars.LogVars(a#123#0#0, a#123#1#0)));

// Inductive seq rank
axiom (forall a#124#0#0: Seq Box, a#124#1#0: int :: 
  { #raft.LogVars.LogVars(a#124#0#0, a#124#1#0) } 
  Seq#Rank(a#124#0#0) < DtRank(#raft.LogVars.LogVars(a#124#0#0, a#124#1#0)));

function _2_raft.LogVars.commitIndex(DatatypeType) : int;

// Constructor injectivity
axiom (forall a#125#0#0: Seq Box, a#125#1#0: int :: 
  { #raft.LogVars.LogVars(a#125#0#0, a#125#1#0) } 
  _2_raft.LogVars.commitIndex(#raft.LogVars.LogVars(a#125#0#0, a#125#1#0))
     == a#125#1#0);

// One-depth case-split function
function $IsA#_2_raft.LogVars(DatatypeType) : bool;

// One-depth case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_2_raft.LogVars(d) } 
  $IsA#_2_raft.LogVars(d) ==> _2_raft.LogVars.LogVars_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _2_raft.LogVars.LogVars_q(d), $Is(d, Tclass._2_raft.LogVars()) } 
  $Is(d, Tclass._2_raft.LogVars()) ==> _2_raft.LogVars.LogVars_q(d));

const unique class._2_raft.CandidateVars: ClassName;

// Constructor function declaration
function #raft.CandidateVars.CandidateVars(Set Box, Set Box, Map Box Box) : DatatypeType;

const unique ##raft.CandidateVars.CandidateVars: DtCtorId;

// Constructor identifier
axiom (forall a#126#0#0: Set Box, a#126#1#0: Set Box, a#126#2#0: Map Box Box :: 
  { #raft.CandidateVars.CandidateVars(a#126#0#0, a#126#1#0, a#126#2#0) } 
  DatatypeCtorId(#raft.CandidateVars.CandidateVars(a#126#0#0, a#126#1#0, a#126#2#0))
     == ##raft.CandidateVars.CandidateVars);

function _2_raft.CandidateVars.CandidateVars_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.CandidateVars.CandidateVars_q(d) } 
  _2_raft.CandidateVars.CandidateVars_q(d)
     <==> DatatypeCtorId(d) == ##raft.CandidateVars.CandidateVars);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.CandidateVars.CandidateVars_q(d) } 
  _2_raft.CandidateVars.CandidateVars_q(d)
     ==> (exists a#127#0#0: Set Box, a#127#1#0: Set Box, a#127#2#0: Map Box Box :: 
      d == #raft.CandidateVars.CandidateVars(a#127#0#0, a#127#1#0, a#127#2#0)));

function Tclass._2_raft.CandidateVars() : Ty;

// Tclass._2_raft.CandidateVars Tag
axiom Tag(Tclass._2_raft.CandidateVars()) == Tagclass._2_raft.CandidateVars;

const unique Tagclass._2_raft.CandidateVars: TyTag;

// Box/unbox axiom for Tclass._2_raft.CandidateVars
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._2_raft.CandidateVars()) } 
  $IsBox(bx, Tclass._2_raft.CandidateVars())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._2_raft.CandidateVars()));

// Constructor $Is
axiom (forall a#128#0#0: Set Box, a#128#1#0: Set Box, a#128#2#0: Map Box Box :: 
  { $Is(#raft.CandidateVars.CandidateVars(a#128#0#0, a#128#1#0, a#128#2#0), 
      Tclass._2_raft.CandidateVars()) } 
  $Is(#raft.CandidateVars.CandidateVars(a#128#0#0, a#128#1#0, a#128#2#0), 
      Tclass._2_raft.CandidateVars())
     <==> $Is(a#128#0#0, TSet(#$ServerID))
       && $Is(a#128#1#0, TSet(#$ServerID))
       && $Is(a#128#2#0, TMap(#$ServerID, TSeq(Tclass._2_raft.LogEntry()))));

// Constructor $IsAlloc
axiom (forall a#129#0#0: Set Box, a#129#1#0: Set Box, a#129#2#0: Map Box Box, $h: Heap :: 
  { $IsAlloc(#raft.CandidateVars.CandidateVars(a#129#0#0, a#129#1#0, a#129#2#0), 
      Tclass._2_raft.CandidateVars(), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.CandidateVars.CandidateVars(a#129#0#0, a#129#1#0, a#129#2#0), 
        Tclass._2_raft.CandidateVars(), 
        $h)
       <==> $IsAlloc(a#129#0#0, TSet(#$ServerID), $h)
         && $IsAlloc(a#129#1#0, TSet(#$ServerID), $h)
         && $IsAlloc(a#129#2#0, TMap(#$ServerID, TSeq(Tclass._2_raft.LogEntry())), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.CandidateVars.votesResponded(d), TSet(#$ServerID), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.CandidateVars.CandidateVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.CandidateVars(), $h)
     ==> $IsAlloc(_2_raft.CandidateVars.votesResponded(d), TSet(#$ServerID), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.CandidateVars.votesGranted(d), TSet(#$ServerID), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.CandidateVars.CandidateVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.CandidateVars(), $h)
     ==> $IsAlloc(_2_raft.CandidateVars.votesGranted(d), TSet(#$ServerID), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.CandidateVars.voterLog(d), 
      TMap(#$ServerID, TSeq(Tclass._2_raft.LogEntry())), 
      $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.CandidateVars.CandidateVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.CandidateVars(), $h)
     ==> $IsAlloc(_2_raft.CandidateVars.voterLog(d), 
      TMap(#$ServerID, TSeq(Tclass._2_raft.LogEntry())), 
      $h));

// Constructor literal
axiom (forall a#130#0#0: Set Box, a#130#1#0: Set Box, a#130#2#0: Map Box Box :: 
  { #raft.CandidateVars.CandidateVars(Lit(a#130#0#0), Lit(a#130#1#0), Lit(a#130#2#0)) } 
  #raft.CandidateVars.CandidateVars(Lit(a#130#0#0), Lit(a#130#1#0), Lit(a#130#2#0))
     == Lit(#raft.CandidateVars.CandidateVars(a#130#0#0, a#130#1#0, a#130#2#0)));

function _2_raft.CandidateVars.votesResponded(DatatypeType) : Set Box;

// Constructor injectivity
axiom (forall a#131#0#0: Set Box, a#131#1#0: Set Box, a#131#2#0: Map Box Box :: 
  { #raft.CandidateVars.CandidateVars(a#131#0#0, a#131#1#0, a#131#2#0) } 
  _2_raft.CandidateVars.votesResponded(#raft.CandidateVars.CandidateVars(a#131#0#0, a#131#1#0, a#131#2#0))
     == a#131#0#0);

// Inductive set element rank
axiom (forall a#132#0#0: Set Box, a#132#1#0: Set Box, a#132#2#0: Map Box Box, d: DatatypeType :: 
  { a#132#0#0[$Box(d)], #raft.CandidateVars.CandidateVars(a#132#0#0, a#132#1#0, a#132#2#0) } 
  a#132#0#0[$Box(d)]
     ==> DtRank(d)
       < DtRank(#raft.CandidateVars.CandidateVars(a#132#0#0, a#132#1#0, a#132#2#0)));

function _2_raft.CandidateVars.votesGranted(DatatypeType) : Set Box;

// Constructor injectivity
axiom (forall a#133#0#0: Set Box, a#133#1#0: Set Box, a#133#2#0: Map Box Box :: 
  { #raft.CandidateVars.CandidateVars(a#133#0#0, a#133#1#0, a#133#2#0) } 
  _2_raft.CandidateVars.votesGranted(#raft.CandidateVars.CandidateVars(a#133#0#0, a#133#1#0, a#133#2#0))
     == a#133#1#0);

// Inductive set element rank
axiom (forall a#134#0#0: Set Box, a#134#1#0: Set Box, a#134#2#0: Map Box Box, d: DatatypeType :: 
  { a#134#1#0[$Box(d)], #raft.CandidateVars.CandidateVars(a#134#0#0, a#134#1#0, a#134#2#0) } 
  a#134#1#0[$Box(d)]
     ==> DtRank(d)
       < DtRank(#raft.CandidateVars.CandidateVars(a#134#0#0, a#134#1#0, a#134#2#0)));

function _2_raft.CandidateVars.voterLog(DatatypeType) : Map Box Box;

// Constructor injectivity
axiom (forall a#135#0#0: Set Box, a#135#1#0: Set Box, a#135#2#0: Map Box Box :: 
  { #raft.CandidateVars.CandidateVars(a#135#0#0, a#135#1#0, a#135#2#0) } 
  _2_raft.CandidateVars.voterLog(#raft.CandidateVars.CandidateVars(a#135#0#0, a#135#1#0, a#135#2#0))
     == a#135#2#0);

// Inductive map key rank
axiom (forall a#136#0#0: Set Box, a#136#1#0: Set Box, a#136#2#0: Map Box Box, d: DatatypeType :: 
  { Map#Domain(a#136#2#0)[$Box(d)], #raft.CandidateVars.CandidateVars(a#136#0#0, a#136#1#0, a#136#2#0) } 
  Map#Domain(a#136#2#0)[$Box(d)]
     ==> DtRank(d)
       < DtRank(#raft.CandidateVars.CandidateVars(a#136#0#0, a#136#1#0, a#136#2#0)));

// Inductive map value rank
axiom (forall a#137#0#0: Set Box, a#137#1#0: Set Box, a#137#2#0: Map Box Box, bx: Box :: 
  { Map#Domain(a#137#2#0)[bx], #raft.CandidateVars.CandidateVars(a#137#0#0, a#137#1#0, a#137#2#0) } 
  Map#Domain(a#137#2#0)[bx]
     ==> DtRank($Unbox(Map#Elements(a#137#2#0)[bx]): DatatypeType)
       < DtRank(#raft.CandidateVars.CandidateVars(a#137#0#0, a#137#1#0, a#137#2#0)));

// One-depth case-split function
function $IsA#_2_raft.CandidateVars(DatatypeType) : bool;

// One-depth case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_2_raft.CandidateVars(d) } 
  $IsA#_2_raft.CandidateVars(d) ==> _2_raft.CandidateVars.CandidateVars_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _2_raft.CandidateVars.CandidateVars_q(d), $Is(d, Tclass._2_raft.CandidateVars()) } 
  $Is(d, Tclass._2_raft.CandidateVars())
     ==> _2_raft.CandidateVars.CandidateVars_q(d));

const unique class._2_raft.LeaderVars: ClassName;

// Constructor function declaration
function #raft.LeaderVars.LeaderVars(Map Box Box, Map Box Box) : DatatypeType;

const unique ##raft.LeaderVars.LeaderVars: DtCtorId;

// Constructor identifier
axiom (forall a#138#0#0: Map Box Box, a#138#1#0: Map Box Box :: 
  { #raft.LeaderVars.LeaderVars(a#138#0#0, a#138#1#0) } 
  DatatypeCtorId(#raft.LeaderVars.LeaderVars(a#138#0#0, a#138#1#0))
     == ##raft.LeaderVars.LeaderVars);

function _2_raft.LeaderVars.LeaderVars_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.LeaderVars.LeaderVars_q(d) } 
  _2_raft.LeaderVars.LeaderVars_q(d)
     <==> DatatypeCtorId(d) == ##raft.LeaderVars.LeaderVars);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.LeaderVars.LeaderVars_q(d) } 
  _2_raft.LeaderVars.LeaderVars_q(d)
     ==> (exists a#139#0#0: Map Box Box, a#139#1#0: Map Box Box :: 
      d == #raft.LeaderVars.LeaderVars(a#139#0#0, a#139#1#0)));

function Tclass._2_raft.LeaderVars() : Ty;

// Tclass._2_raft.LeaderVars Tag
axiom Tag(Tclass._2_raft.LeaderVars()) == Tagclass._2_raft.LeaderVars;

const unique Tagclass._2_raft.LeaderVars: TyTag;

// Box/unbox axiom for Tclass._2_raft.LeaderVars
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._2_raft.LeaderVars()) } 
  $IsBox(bx, Tclass._2_raft.LeaderVars())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._2_raft.LeaderVars()));

// Constructor $Is
axiom (forall a#140#0#0: Map Box Box, a#140#1#0: Map Box Box :: 
  { $Is(#raft.LeaderVars.LeaderVars(a#140#0#0, a#140#1#0), Tclass._2_raft.LeaderVars()) } 
  $Is(#raft.LeaderVars.LeaderVars(a#140#0#0, a#140#1#0), Tclass._2_raft.LeaderVars())
     <==> $Is(a#140#0#0, TMap(#$ServerID, TInt)) && $Is(a#140#1#0, TMap(#$ServerID, TInt)));

// Constructor $IsAlloc
axiom (forall a#141#0#0: Map Box Box, a#141#1#0: Map Box Box, $h: Heap :: 
  { $IsAlloc(#raft.LeaderVars.LeaderVars(a#141#0#0, a#141#1#0), 
      Tclass._2_raft.LeaderVars(), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.LeaderVars.LeaderVars(a#141#0#0, a#141#1#0), 
        Tclass._2_raft.LeaderVars(), 
        $h)
       <==> $IsAlloc(a#141#0#0, TMap(#$ServerID, TInt), $h)
         && $IsAlloc(a#141#1#0, TMap(#$ServerID, TInt), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.LeaderVars.nextIndex(d), TMap(#$ServerID, TInt), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.LeaderVars.LeaderVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.LeaderVars(), $h)
     ==> $IsAlloc(_2_raft.LeaderVars.nextIndex(d), TMap(#$ServerID, TInt), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.LeaderVars.matchIndex(d), TMap(#$ServerID, TInt), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.LeaderVars.LeaderVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.LeaderVars(), $h)
     ==> $IsAlloc(_2_raft.LeaderVars.matchIndex(d), TMap(#$ServerID, TInt), $h));

// Constructor literal
axiom (forall a#142#0#0: Map Box Box, a#142#1#0: Map Box Box :: 
  { #raft.LeaderVars.LeaderVars(Lit(a#142#0#0), Lit(a#142#1#0)) } 
  #raft.LeaderVars.LeaderVars(Lit(a#142#0#0), Lit(a#142#1#0))
     == Lit(#raft.LeaderVars.LeaderVars(a#142#0#0, a#142#1#0)));

function _2_raft.LeaderVars.nextIndex(DatatypeType) : Map Box Box;

// Constructor injectivity
axiom (forall a#143#0#0: Map Box Box, a#143#1#0: Map Box Box :: 
  { #raft.LeaderVars.LeaderVars(a#143#0#0, a#143#1#0) } 
  _2_raft.LeaderVars.nextIndex(#raft.LeaderVars.LeaderVars(a#143#0#0, a#143#1#0))
     == a#143#0#0);

// Inductive map key rank
axiom (forall a#144#0#0: Map Box Box, a#144#1#0: Map Box Box, d: DatatypeType :: 
  { Map#Domain(a#144#0#0)[$Box(d)], #raft.LeaderVars.LeaderVars(a#144#0#0, a#144#1#0) } 
  Map#Domain(a#144#0#0)[$Box(d)]
     ==> DtRank(d) < DtRank(#raft.LeaderVars.LeaderVars(a#144#0#0, a#144#1#0)));

// Inductive map value rank
axiom (forall a#145#0#0: Map Box Box, a#145#1#0: Map Box Box, bx: Box :: 
  { Map#Domain(a#145#0#0)[bx], #raft.LeaderVars.LeaderVars(a#145#0#0, a#145#1#0) } 
  Map#Domain(a#145#0#0)[bx]
     ==> DtRank($Unbox(Map#Elements(a#145#0#0)[bx]): DatatypeType)
       < DtRank(#raft.LeaderVars.LeaderVars(a#145#0#0, a#145#1#0)));

function _2_raft.LeaderVars.matchIndex(DatatypeType) : Map Box Box;

// Constructor injectivity
axiom (forall a#146#0#0: Map Box Box, a#146#1#0: Map Box Box :: 
  { #raft.LeaderVars.LeaderVars(a#146#0#0, a#146#1#0) } 
  _2_raft.LeaderVars.matchIndex(#raft.LeaderVars.LeaderVars(a#146#0#0, a#146#1#0))
     == a#146#1#0);

// Inductive map key rank
axiom (forall a#147#0#0: Map Box Box, a#147#1#0: Map Box Box, d: DatatypeType :: 
  { Map#Domain(a#147#1#0)[$Box(d)], #raft.LeaderVars.LeaderVars(a#147#0#0, a#147#1#0) } 
  Map#Domain(a#147#1#0)[$Box(d)]
     ==> DtRank(d) < DtRank(#raft.LeaderVars.LeaderVars(a#147#0#0, a#147#1#0)));

// Inductive map value rank
axiom (forall a#148#0#0: Map Box Box, a#148#1#0: Map Box Box, bx: Box :: 
  { Map#Domain(a#148#1#0)[bx], #raft.LeaderVars.LeaderVars(a#148#0#0, a#148#1#0) } 
  Map#Domain(a#148#1#0)[bx]
     ==> DtRank($Unbox(Map#Elements(a#148#1#0)[bx]): DatatypeType)
       < DtRank(#raft.LeaderVars.LeaderVars(a#148#0#0, a#148#1#0)));

// One-depth case-split function
function $IsA#_2_raft.LeaderVars(DatatypeType) : bool;

// One-depth case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_2_raft.LeaderVars(d) } 
  $IsA#_2_raft.LeaderVars(d) ==> _2_raft.LeaderVars.LeaderVars_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _2_raft.LeaderVars.LeaderVars_q(d), $Is(d, Tclass._2_raft.LeaderVars()) } 
  $Is(d, Tclass._2_raft.LeaderVars()) ==> _2_raft.LeaderVars.LeaderVars_q(d));

const unique class._2_raft.HostVars: ClassName;

// Constructor function declaration
function #raft.HostVars.HostVars(DatatypeType, DatatypeType, DatatypeType, DatatypeType) : DatatypeType;

const unique ##raft.HostVars.HostVars: DtCtorId;

// Constructor identifier
axiom (forall a#149#0#0: DatatypeType, 
    a#149#1#0: DatatypeType, 
    a#149#2#0: DatatypeType, 
    a#149#3#0: DatatypeType :: 
  { #raft.HostVars.HostVars(a#149#0#0, a#149#1#0, a#149#2#0, a#149#3#0) } 
  DatatypeCtorId(#raft.HostVars.HostVars(a#149#0#0, a#149#1#0, a#149#2#0, a#149#3#0))
     == ##raft.HostVars.HostVars);

function _2_raft.HostVars.HostVars_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.HostVars.HostVars_q(d) } 
  _2_raft.HostVars.HostVars_q(d)
     <==> DatatypeCtorId(d) == ##raft.HostVars.HostVars);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.HostVars.HostVars_q(d) } 
  _2_raft.HostVars.HostVars_q(d)
     ==> (exists a#150#0#0: DatatypeType, 
        a#150#1#0: DatatypeType, 
        a#150#2#0: DatatypeType, 
        a#150#3#0: DatatypeType :: 
      d == #raft.HostVars.HostVars(a#150#0#0, a#150#1#0, a#150#2#0, a#150#3#0)));

function Tclass._2_raft.HostVars() : Ty;

// Tclass._2_raft.HostVars Tag
axiom Tag(Tclass._2_raft.HostVars()) == Tagclass._2_raft.HostVars;

const unique Tagclass._2_raft.HostVars: TyTag;

// Box/unbox axiom for Tclass._2_raft.HostVars
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._2_raft.HostVars()) } 
  $IsBox(bx, Tclass._2_raft.HostVars())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._2_raft.HostVars()));

// Constructor $Is
axiom (forall a#151#0#0: DatatypeType, 
    a#151#1#0: DatatypeType, 
    a#151#2#0: DatatypeType, 
    a#151#3#0: DatatypeType :: 
  { $Is(#raft.HostVars.HostVars(a#151#0#0, a#151#1#0, a#151#2#0, a#151#3#0), 
      Tclass._2_raft.HostVars()) } 
  $Is(#raft.HostVars.HostVars(a#151#0#0, a#151#1#0, a#151#2#0, a#151#3#0), 
      Tclass._2_raft.HostVars())
     <==> $Is(a#151#0#0, Tclass._2_raft.ServerVars())
       && $Is(a#151#1#0, Tclass._2_raft.LogVars())
       && $Is(a#151#2#0, Tclass._2_raft.CandidateVars())
       && $Is(a#151#3#0, Tclass._2_raft.LeaderVars()));

// Constructor $IsAlloc
axiom (forall a#152#0#0: DatatypeType, 
    a#152#1#0: DatatypeType, 
    a#152#2#0: DatatypeType, 
    a#152#3#0: DatatypeType, 
    $h: Heap :: 
  { $IsAlloc(#raft.HostVars.HostVars(a#152#0#0, a#152#1#0, a#152#2#0, a#152#3#0), 
      Tclass._2_raft.HostVars(), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.HostVars.HostVars(a#152#0#0, a#152#1#0, a#152#2#0, a#152#3#0), 
        Tclass._2_raft.HostVars(), 
        $h)
       <==> $IsAlloc(a#152#0#0, Tclass._2_raft.ServerVars(), $h)
         && $IsAlloc(a#152#1#0, Tclass._2_raft.LogVars(), $h)
         && $IsAlloc(a#152#2#0, Tclass._2_raft.CandidateVars(), $h)
         && $IsAlloc(a#152#3#0, Tclass._2_raft.LeaderVars(), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.HostVars.server(d), Tclass._2_raft.ServerVars(), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.HostVars.HostVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.HostVars(), $h)
     ==> $IsAlloc(_2_raft.HostVars.server(d), Tclass._2_raft.ServerVars(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.HostVars.log(d), Tclass._2_raft.LogVars(), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.HostVars.HostVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.HostVars(), $h)
     ==> $IsAlloc(_2_raft.HostVars.log(d), Tclass._2_raft.LogVars(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.HostVars.candidate(d), Tclass._2_raft.CandidateVars(), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.HostVars.HostVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.HostVars(), $h)
     ==> $IsAlloc(_2_raft.HostVars.candidate(d), Tclass._2_raft.CandidateVars(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.HostVars.leader(d), Tclass._2_raft.LeaderVars(), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.HostVars.HostVars_q(d)
       && $IsAlloc(d, Tclass._2_raft.HostVars(), $h)
     ==> $IsAlloc(_2_raft.HostVars.leader(d), Tclass._2_raft.LeaderVars(), $h));

// Constructor literal
axiom (forall a#153#0#0: DatatypeType, 
    a#153#1#0: DatatypeType, 
    a#153#2#0: DatatypeType, 
    a#153#3#0: DatatypeType :: 
  { #raft.HostVars.HostVars(Lit(a#153#0#0), Lit(a#153#1#0), Lit(a#153#2#0), Lit(a#153#3#0)) } 
  #raft.HostVars.HostVars(Lit(a#153#0#0), Lit(a#153#1#0), Lit(a#153#2#0), Lit(a#153#3#0))
     == Lit(#raft.HostVars.HostVars(a#153#0#0, a#153#1#0, a#153#2#0, a#153#3#0)));

function _2_raft.HostVars.server(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#154#0#0: DatatypeType, 
    a#154#1#0: DatatypeType, 
    a#154#2#0: DatatypeType, 
    a#154#3#0: DatatypeType :: 
  { #raft.HostVars.HostVars(a#154#0#0, a#154#1#0, a#154#2#0, a#154#3#0) } 
  _2_raft.HostVars.server(#raft.HostVars.HostVars(a#154#0#0, a#154#1#0, a#154#2#0, a#154#3#0))
     == a#154#0#0);

// Inductive rank
axiom (forall a#155#0#0: DatatypeType, 
    a#155#1#0: DatatypeType, 
    a#155#2#0: DatatypeType, 
    a#155#3#0: DatatypeType :: 
  { #raft.HostVars.HostVars(a#155#0#0, a#155#1#0, a#155#2#0, a#155#3#0) } 
  DtRank(a#155#0#0)
     < DtRank(#raft.HostVars.HostVars(a#155#0#0, a#155#1#0, a#155#2#0, a#155#3#0)));

function _2_raft.HostVars.log(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#156#0#0: DatatypeType, 
    a#156#1#0: DatatypeType, 
    a#156#2#0: DatatypeType, 
    a#156#3#0: DatatypeType :: 
  { #raft.HostVars.HostVars(a#156#0#0, a#156#1#0, a#156#2#0, a#156#3#0) } 
  _2_raft.HostVars.log(#raft.HostVars.HostVars(a#156#0#0, a#156#1#0, a#156#2#0, a#156#3#0))
     == a#156#1#0);

// Inductive rank
axiom (forall a#157#0#0: DatatypeType, 
    a#157#1#0: DatatypeType, 
    a#157#2#0: DatatypeType, 
    a#157#3#0: DatatypeType :: 
  { #raft.HostVars.HostVars(a#157#0#0, a#157#1#0, a#157#2#0, a#157#3#0) } 
  DtRank(a#157#1#0)
     < DtRank(#raft.HostVars.HostVars(a#157#0#0, a#157#1#0, a#157#2#0, a#157#3#0)));

function _2_raft.HostVars.candidate(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#158#0#0: DatatypeType, 
    a#158#1#0: DatatypeType, 
    a#158#2#0: DatatypeType, 
    a#158#3#0: DatatypeType :: 
  { #raft.HostVars.HostVars(a#158#0#0, a#158#1#0, a#158#2#0, a#158#3#0) } 
  _2_raft.HostVars.candidate(#raft.HostVars.HostVars(a#158#0#0, a#158#1#0, a#158#2#0, a#158#3#0))
     == a#158#2#0);

// Inductive rank
axiom (forall a#159#0#0: DatatypeType, 
    a#159#1#0: DatatypeType, 
    a#159#2#0: DatatypeType, 
    a#159#3#0: DatatypeType :: 
  { #raft.HostVars.HostVars(a#159#0#0, a#159#1#0, a#159#2#0, a#159#3#0) } 
  DtRank(a#159#2#0)
     < DtRank(#raft.HostVars.HostVars(a#159#0#0, a#159#1#0, a#159#2#0, a#159#3#0)));

function _2_raft.HostVars.leader(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#160#0#0: DatatypeType, 
    a#160#1#0: DatatypeType, 
    a#160#2#0: DatatypeType, 
    a#160#3#0: DatatypeType :: 
  { #raft.HostVars.HostVars(a#160#0#0, a#160#1#0, a#160#2#0, a#160#3#0) } 
  _2_raft.HostVars.leader(#raft.HostVars.HostVars(a#160#0#0, a#160#1#0, a#160#2#0, a#160#3#0))
     == a#160#3#0);

// Inductive rank
axiom (forall a#161#0#0: DatatypeType, 
    a#161#1#0: DatatypeType, 
    a#161#2#0: DatatypeType, 
    a#161#3#0: DatatypeType :: 
  { #raft.HostVars.HostVars(a#161#0#0, a#161#1#0, a#161#2#0, a#161#3#0) } 
  DtRank(a#161#3#0)
     < DtRank(#raft.HostVars.HostVars(a#161#0#0, a#161#1#0, a#161#2#0, a#161#3#0)));

// One-depth case-split function
function $IsA#_2_raft.HostVars(DatatypeType) : bool;

// One-depth case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_2_raft.HostVars(d) } 
  $IsA#_2_raft.HostVars(d) ==> _2_raft.HostVars.HostVars_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _2_raft.HostVars.HostVars_q(d), $Is(d, Tclass._2_raft.HostVars()) } 
  $Is(d, Tclass._2_raft.HostVars()) ==> _2_raft.HostVars.HostVars_q(d));

const unique class._2_raft.Variables: ClassName;

// Constructor function declaration
function #raft.Variables.Variables(Map Box Box, DatatypeType) : DatatypeType;

const unique ##raft.Variables.Variables: DtCtorId;

// Constructor identifier
axiom (forall a#162#0#0: Map Box Box, a#162#1#0: DatatypeType :: 
  { #raft.Variables.Variables(a#162#0#0, a#162#1#0) } 
  DatatypeCtorId(#raft.Variables.Variables(a#162#0#0, a#162#1#0))
     == ##raft.Variables.Variables);

function _2_raft.Variables.Variables_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.Variables.Variables_q(d) } 
  _2_raft.Variables.Variables_q(d)
     <==> DatatypeCtorId(d) == ##raft.Variables.Variables);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.Variables.Variables_q(d) } 
  _2_raft.Variables.Variables_q(d)
     ==> (exists a#163#0#0: Map Box Box, a#163#1#0: DatatypeType :: 
      d == #raft.Variables.Variables(a#163#0#0, a#163#1#0)));

// Constructor $Is
axiom (forall a#164#0#0: Map Box Box, a#164#1#0: DatatypeType :: 
  { $Is(#raft.Variables.Variables(a#164#0#0, a#164#1#0), Tclass._2_raft.Variables()) } 
  $Is(#raft.Variables.Variables(a#164#0#0, a#164#1#0), Tclass._2_raft.Variables())
     <==> $Is(a#164#0#0, TMap(#$ServerID, Tclass._2_raft.HostVars()))
       && $Is(a#164#1#0, Tclass._2_raft.GlobalVars()));

// Constructor $IsAlloc
axiom (forall a#165#0#0: Map Box Box, a#165#1#0: DatatypeType, $h: Heap :: 
  { $IsAlloc(#raft.Variables.Variables(a#165#0#0, a#165#1#0), Tclass._2_raft.Variables(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.Variables.Variables(a#165#0#0, a#165#1#0), Tclass._2_raft.Variables(), $h)
       <==> $IsAlloc(a#165#0#0, TMap(#$ServerID, Tclass._2_raft.HostVars()), $h)
         && $IsAlloc(a#165#1#0, Tclass._2_raft.GlobalVars(), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Variables.host(d), TMap(#$ServerID, Tclass._2_raft.HostVars()), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Variables.Variables_q(d)
       && $IsAlloc(d, Tclass._2_raft.Variables(), $h)
     ==> $IsAlloc(_2_raft.Variables.host(d), TMap(#$ServerID, Tclass._2_raft.HostVars()), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Variables.global(d), Tclass._2_raft.GlobalVars(), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Variables.Variables_q(d)
       && $IsAlloc(d, Tclass._2_raft.Variables(), $h)
     ==> $IsAlloc(_2_raft.Variables.global(d), Tclass._2_raft.GlobalVars(), $h));

// Constructor literal
axiom (forall a#166#0#0: Map Box Box, a#166#1#0: DatatypeType :: 
  { #raft.Variables.Variables(Lit(a#166#0#0), Lit(a#166#1#0)) } 
  #raft.Variables.Variables(Lit(a#166#0#0), Lit(a#166#1#0))
     == Lit(#raft.Variables.Variables(a#166#0#0, a#166#1#0)));

function _2_raft.Variables.host(DatatypeType) : Map Box Box;

// Constructor injectivity
axiom (forall a#167#0#0: Map Box Box, a#167#1#0: DatatypeType :: 
  { #raft.Variables.Variables(a#167#0#0, a#167#1#0) } 
  _2_raft.Variables.host(#raft.Variables.Variables(a#167#0#0, a#167#1#0))
     == a#167#0#0);

// Inductive map key rank
axiom (forall a#168#0#0: Map Box Box, a#168#1#0: DatatypeType, d: DatatypeType :: 
  { Map#Domain(a#168#0#0)[$Box(d)], #raft.Variables.Variables(a#168#0#0, a#168#1#0) } 
  Map#Domain(a#168#0#0)[$Box(d)]
     ==> DtRank(d) < DtRank(#raft.Variables.Variables(a#168#0#0, a#168#1#0)));

// Inductive map value rank
axiom (forall a#169#0#0: Map Box Box, a#169#1#0: DatatypeType, bx: Box :: 
  { Map#Domain(a#169#0#0)[bx], #raft.Variables.Variables(a#169#0#0, a#169#1#0) } 
  Map#Domain(a#169#0#0)[bx]
     ==> DtRank($Unbox(Map#Elements(a#169#0#0)[bx]): DatatypeType)
       < DtRank(#raft.Variables.Variables(a#169#0#0, a#169#1#0)));

function _2_raft.Variables.global(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#170#0#0: Map Box Box, a#170#1#0: DatatypeType :: 
  { #raft.Variables.Variables(a#170#0#0, a#170#1#0) } 
  _2_raft.Variables.global(#raft.Variables.Variables(a#170#0#0, a#170#1#0))
     == a#170#1#0);

// Inductive rank
axiom (forall a#171#0#0: Map Box Box, a#171#1#0: DatatypeType :: 
  { #raft.Variables.Variables(a#171#0#0, a#171#1#0) } 
  DtRank(a#171#1#0) < DtRank(#raft.Variables.Variables(a#171#0#0, a#171#1#0)));

// One-depth case-split function
function $IsA#_2_raft.Variables(DatatypeType) : bool;

// One-depth case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_2_raft.Variables(d) } 
  $IsA#_2_raft.Variables(d) ==> _2_raft.Variables.Variables_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _2_raft.Variables.Variables_q(d), $Is(d, Tclass._2_raft.Variables()) } 
  $Is(d, Tclass._2_raft.Variables()) ==> _2_raft.Variables.Variables_q(d));

const unique class._2_raft.Step: ClassName;

// Constructor function declaration
function #raft.Step.RestartStep(Box) : DatatypeType;

const unique ##raft.Step.RestartStep: DtCtorId;

// Constructor identifier
axiom (forall a#172#0#0: Box :: 
  { #raft.Step.RestartStep(a#172#0#0) } 
  DatatypeCtorId(#raft.Step.RestartStep(a#172#0#0)) == ##raft.Step.RestartStep);

function _2_raft.Step.RestartStep_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.RestartStep_q(d) } 
  _2_raft.Step.RestartStep_q(d) <==> DatatypeCtorId(d) == ##raft.Step.RestartStep);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.RestartStep_q(d) } 
  _2_raft.Step.RestartStep_q(d)
     ==> (exists a#173#0#0: Box :: d == #raft.Step.RestartStep(a#173#0#0)));

// Constructor $Is
axiom (forall a#174#0#0: Box :: 
  { $Is(#raft.Step.RestartStep(a#174#0#0), Tclass._2_raft.Step()) } 
  $Is(#raft.Step.RestartStep(a#174#0#0), Tclass._2_raft.Step())
     <==> $IsBox(a#174#0#0, #$ServerID));

// Constructor $IsAlloc
axiom (forall a#175#0#0: Box, $h: Heap :: 
  { $IsAlloc(#raft.Step.RestartStep(a#175#0#0), Tclass._2_raft.Step(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.Step.RestartStep(a#175#0#0), Tclass._2_raft.Step(), $h)
       <==> $IsAllocBox(a#175#0#0, #$ServerID, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Step.i(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Step.RestartStep_q(d)
       && $IsAlloc(d, Tclass._2_raft.Step(), $h)
     ==> $IsAllocBox(_2_raft.Step.i(d), #$ServerID, $h));

// Constructor literal
axiom (forall a#176#0#0: Box :: 
  { #raft.Step.RestartStep(Lit(a#176#0#0)) } 
  #raft.Step.RestartStep(Lit(a#176#0#0)) == Lit(#raft.Step.RestartStep(a#176#0#0)));

function _2_raft.Step.i(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#177#0#0: Box :: 
  { #raft.Step.RestartStep(a#177#0#0) } 
  _2_raft.Step.i(#raft.Step.RestartStep(a#177#0#0)) == a#177#0#0);

// Inductive rank
axiom (forall a#178#0#0: Box :: 
  { #raft.Step.RestartStep(a#178#0#0) } 
  BoxRank(a#178#0#0) < DtRank(#raft.Step.RestartStep(a#178#0#0)));

// Constructor function declaration
function #raft.Step.TimeoutStep(Box) : DatatypeType;

const unique ##raft.Step.TimeoutStep: DtCtorId;

// Constructor identifier
axiom (forall a#179#0#0: Box :: 
  { #raft.Step.TimeoutStep(a#179#0#0) } 
  DatatypeCtorId(#raft.Step.TimeoutStep(a#179#0#0)) == ##raft.Step.TimeoutStep);

function _2_raft.Step.TimeoutStep_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.TimeoutStep_q(d) } 
  _2_raft.Step.TimeoutStep_q(d) <==> DatatypeCtorId(d) == ##raft.Step.TimeoutStep);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.TimeoutStep_q(d) } 
  _2_raft.Step.TimeoutStep_q(d)
     ==> (exists a#180#0#0: Box :: d == #raft.Step.TimeoutStep(a#180#0#0)));

// Constructor $Is
axiom (forall a#181#0#0: Box :: 
  { $Is(#raft.Step.TimeoutStep(a#181#0#0), Tclass._2_raft.Step()) } 
  $Is(#raft.Step.TimeoutStep(a#181#0#0), Tclass._2_raft.Step())
     <==> $IsBox(a#181#0#0, #$ServerID));

// Constructor $IsAlloc
axiom (forall a#182#0#0: Box, $h: Heap :: 
  { $IsAlloc(#raft.Step.TimeoutStep(a#182#0#0), Tclass._2_raft.Step(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.Step.TimeoutStep(a#182#0#0), Tclass._2_raft.Step(), $h)
       <==> $IsAllocBox(a#182#0#0, #$ServerID, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Step.i(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Step.TimeoutStep_q(d)
       && $IsAlloc(d, Tclass._2_raft.Step(), $h)
     ==> $IsAllocBox(_2_raft.Step.i(d), #$ServerID, $h));

// Constructor literal
axiom (forall a#183#0#0: Box :: 
  { #raft.Step.TimeoutStep(Lit(a#183#0#0)) } 
  #raft.Step.TimeoutStep(Lit(a#183#0#0)) == Lit(#raft.Step.TimeoutStep(a#183#0#0)));

// Constructor injectivity
axiom (forall a#184#0#0: Box :: 
  { #raft.Step.TimeoutStep(a#184#0#0) } 
  _2_raft.Step.i(#raft.Step.TimeoutStep(a#184#0#0)) == a#184#0#0);

// Inductive rank
axiom (forall a#185#0#0: Box :: 
  { #raft.Step.TimeoutStep(a#185#0#0) } 
  BoxRank(a#185#0#0) < DtRank(#raft.Step.TimeoutStep(a#185#0#0)));

// Constructor function declaration
function #raft.Step.RequestVoteStep(Box, Box) : DatatypeType;

const unique ##raft.Step.RequestVoteStep: DtCtorId;

// Constructor identifier
axiom (forall a#186#0#0: Box, a#186#1#0: Box :: 
  { #raft.Step.RequestVoteStep(a#186#0#0, a#186#1#0) } 
  DatatypeCtorId(#raft.Step.RequestVoteStep(a#186#0#0, a#186#1#0))
     == ##raft.Step.RequestVoteStep);

function _2_raft.Step.RequestVoteStep_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.RequestVoteStep_q(d) } 
  _2_raft.Step.RequestVoteStep_q(d)
     <==> DatatypeCtorId(d) == ##raft.Step.RequestVoteStep);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.RequestVoteStep_q(d) } 
  _2_raft.Step.RequestVoteStep_q(d)
     ==> (exists a#187#0#0: Box, a#187#1#0: Box :: 
      d == #raft.Step.RequestVoteStep(a#187#0#0, a#187#1#0)));

// Constructor $Is
axiom (forall a#188#0#0: Box, a#188#1#0: Box :: 
  { $Is(#raft.Step.RequestVoteStep(a#188#0#0, a#188#1#0), Tclass._2_raft.Step()) } 
  $Is(#raft.Step.RequestVoteStep(a#188#0#0, a#188#1#0), Tclass._2_raft.Step())
     <==> $IsBox(a#188#0#0, #$ServerID) && $IsBox(a#188#1#0, #$ServerID));

// Constructor $IsAlloc
axiom (forall a#189#0#0: Box, a#189#1#0: Box, $h: Heap :: 
  { $IsAlloc(#raft.Step.RequestVoteStep(a#189#0#0, a#189#1#0), Tclass._2_raft.Step(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.Step.RequestVoteStep(a#189#0#0, a#189#1#0), Tclass._2_raft.Step(), $h)
       <==> $IsAllocBox(a#189#0#0, #$ServerID, $h) && $IsAllocBox(a#189#1#0, #$ServerID, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Step.i(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Step.RequestVoteStep_q(d)
       && $IsAlloc(d, Tclass._2_raft.Step(), $h)
     ==> $IsAllocBox(_2_raft.Step.i(d), #$ServerID, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Step.j(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Step.RequestVoteStep_q(d)
       && $IsAlloc(d, Tclass._2_raft.Step(), $h)
     ==> $IsAllocBox(_2_raft.Step.j(d), #$ServerID, $h));

// Constructor literal
axiom (forall a#190#0#0: Box, a#190#1#0: Box :: 
  { #raft.Step.RequestVoteStep(Lit(a#190#0#0), Lit(a#190#1#0)) } 
  #raft.Step.RequestVoteStep(Lit(a#190#0#0), Lit(a#190#1#0))
     == Lit(#raft.Step.RequestVoteStep(a#190#0#0, a#190#1#0)));

// Constructor injectivity
axiom (forall a#191#0#0: Box, a#191#1#0: Box :: 
  { #raft.Step.RequestVoteStep(a#191#0#0, a#191#1#0) } 
  _2_raft.Step.i(#raft.Step.RequestVoteStep(a#191#0#0, a#191#1#0)) == a#191#0#0);

// Inductive rank
axiom (forall a#192#0#0: Box, a#192#1#0: Box :: 
  { #raft.Step.RequestVoteStep(a#192#0#0, a#192#1#0) } 
  BoxRank(a#192#0#0) < DtRank(#raft.Step.RequestVoteStep(a#192#0#0, a#192#1#0)));

function _2_raft.Step.j(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#193#0#0: Box, a#193#1#0: Box :: 
  { #raft.Step.RequestVoteStep(a#193#0#0, a#193#1#0) } 
  _2_raft.Step.j(#raft.Step.RequestVoteStep(a#193#0#0, a#193#1#0)) == a#193#1#0);

// Inductive rank
axiom (forall a#194#0#0: Box, a#194#1#0: Box :: 
  { #raft.Step.RequestVoteStep(a#194#0#0, a#194#1#0) } 
  BoxRank(a#194#1#0) < DtRank(#raft.Step.RequestVoteStep(a#194#0#0, a#194#1#0)));

// Constructor function declaration
function #raft.Step.BecomeLeaderStep(Box) : DatatypeType;

const unique ##raft.Step.BecomeLeaderStep: DtCtorId;

// Constructor identifier
axiom (forall a#195#0#0: Box :: 
  { #raft.Step.BecomeLeaderStep(a#195#0#0) } 
  DatatypeCtorId(#raft.Step.BecomeLeaderStep(a#195#0#0))
     == ##raft.Step.BecomeLeaderStep);

function _2_raft.Step.BecomeLeaderStep_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.BecomeLeaderStep_q(d) } 
  _2_raft.Step.BecomeLeaderStep_q(d)
     <==> DatatypeCtorId(d) == ##raft.Step.BecomeLeaderStep);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.BecomeLeaderStep_q(d) } 
  _2_raft.Step.BecomeLeaderStep_q(d)
     ==> (exists a#196#0#0: Box :: d == #raft.Step.BecomeLeaderStep(a#196#0#0)));

// Constructor $Is
axiom (forall a#197#0#0: Box :: 
  { $Is(#raft.Step.BecomeLeaderStep(a#197#0#0), Tclass._2_raft.Step()) } 
  $Is(#raft.Step.BecomeLeaderStep(a#197#0#0), Tclass._2_raft.Step())
     <==> $IsBox(a#197#0#0, #$ServerID));

// Constructor $IsAlloc
axiom (forall a#198#0#0: Box, $h: Heap :: 
  { $IsAlloc(#raft.Step.BecomeLeaderStep(a#198#0#0), Tclass._2_raft.Step(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.Step.BecomeLeaderStep(a#198#0#0), Tclass._2_raft.Step(), $h)
       <==> $IsAllocBox(a#198#0#0, #$ServerID, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Step.i(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Step.BecomeLeaderStep_q(d)
       && $IsAlloc(d, Tclass._2_raft.Step(), $h)
     ==> $IsAllocBox(_2_raft.Step.i(d), #$ServerID, $h));

// Constructor literal
axiom (forall a#199#0#0: Box :: 
  { #raft.Step.BecomeLeaderStep(Lit(a#199#0#0)) } 
  #raft.Step.BecomeLeaderStep(Lit(a#199#0#0))
     == Lit(#raft.Step.BecomeLeaderStep(a#199#0#0)));

// Constructor injectivity
axiom (forall a#200#0#0: Box :: 
  { #raft.Step.BecomeLeaderStep(a#200#0#0) } 
  _2_raft.Step.i(#raft.Step.BecomeLeaderStep(a#200#0#0)) == a#200#0#0);

// Inductive rank
axiom (forall a#201#0#0: Box :: 
  { #raft.Step.BecomeLeaderStep(a#201#0#0) } 
  BoxRank(a#201#0#0) < DtRank(#raft.Step.BecomeLeaderStep(a#201#0#0)));

// Constructor function declaration
function #raft.Step.ClientRequestStep(Box, Box) : DatatypeType;

const unique ##raft.Step.ClientRequestStep: DtCtorId;

// Constructor identifier
axiom (forall a#202#0#0: Box, a#202#1#0: Box :: 
  { #raft.Step.ClientRequestStep(a#202#0#0, a#202#1#0) } 
  DatatypeCtorId(#raft.Step.ClientRequestStep(a#202#0#0, a#202#1#0))
     == ##raft.Step.ClientRequestStep);

function _2_raft.Step.ClientRequestStep_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.ClientRequestStep_q(d) } 
  _2_raft.Step.ClientRequestStep_q(d)
     <==> DatatypeCtorId(d) == ##raft.Step.ClientRequestStep);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.ClientRequestStep_q(d) } 
  _2_raft.Step.ClientRequestStep_q(d)
     ==> (exists a#203#0#0: Box, a#203#1#0: Box :: 
      d == #raft.Step.ClientRequestStep(a#203#0#0, a#203#1#0)));

// Constructor $Is
axiom (forall a#204#0#0: Box, a#204#1#0: Box :: 
  { $Is(#raft.Step.ClientRequestStep(a#204#0#0, a#204#1#0), Tclass._2_raft.Step()) } 
  $Is(#raft.Step.ClientRequestStep(a#204#0#0, a#204#1#0), Tclass._2_raft.Step())
     <==> $IsBox(a#204#0#0, #$ServerID) && $IsBox(a#204#1#0, #$Value));

// Constructor $IsAlloc
axiom (forall a#205#0#0: Box, a#205#1#0: Box, $h: Heap :: 
  { $IsAlloc(#raft.Step.ClientRequestStep(a#205#0#0, a#205#1#0), Tclass._2_raft.Step(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.Step.ClientRequestStep(a#205#0#0, a#205#1#0), Tclass._2_raft.Step(), $h)
       <==> $IsAllocBox(a#205#0#0, #$ServerID, $h) && $IsAllocBox(a#205#1#0, #$Value, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Step.i(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Step.ClientRequestStep_q(d)
       && $IsAlloc(d, Tclass._2_raft.Step(), $h)
     ==> $IsAllocBox(_2_raft.Step.i(d), #$ServerID, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Step.v(d), #$Value, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Step.ClientRequestStep_q(d)
       && $IsAlloc(d, Tclass._2_raft.Step(), $h)
     ==> $IsAllocBox(_2_raft.Step.v(d), #$Value, $h));

// Constructor literal
axiom (forall a#206#0#0: Box, a#206#1#0: Box :: 
  { #raft.Step.ClientRequestStep(Lit(a#206#0#0), Lit(a#206#1#0)) } 
  #raft.Step.ClientRequestStep(Lit(a#206#0#0), Lit(a#206#1#0))
     == Lit(#raft.Step.ClientRequestStep(a#206#0#0, a#206#1#0)));

// Constructor injectivity
axiom (forall a#207#0#0: Box, a#207#1#0: Box :: 
  { #raft.Step.ClientRequestStep(a#207#0#0, a#207#1#0) } 
  _2_raft.Step.i(#raft.Step.ClientRequestStep(a#207#0#0, a#207#1#0)) == a#207#0#0);

// Inductive rank
axiom (forall a#208#0#0: Box, a#208#1#0: Box :: 
  { #raft.Step.ClientRequestStep(a#208#0#0, a#208#1#0) } 
  BoxRank(a#208#0#0) < DtRank(#raft.Step.ClientRequestStep(a#208#0#0, a#208#1#0)));

function _2_raft.Step.v(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#209#0#0: Box, a#209#1#0: Box :: 
  { #raft.Step.ClientRequestStep(a#209#0#0, a#209#1#0) } 
  _2_raft.Step.v(#raft.Step.ClientRequestStep(a#209#0#0, a#209#1#0)) == a#209#1#0);

// Inductive rank
axiom (forall a#210#0#0: Box, a#210#1#0: Box :: 
  { #raft.Step.ClientRequestStep(a#210#0#0, a#210#1#0) } 
  BoxRank(a#210#1#0) < DtRank(#raft.Step.ClientRequestStep(a#210#0#0, a#210#1#0)));

// Constructor function declaration
function #raft.Step.AdvanceCommitIndexStep(Box) : DatatypeType;

const unique ##raft.Step.AdvanceCommitIndexStep: DtCtorId;

// Constructor identifier
axiom (forall a#211#0#0: Box :: 
  { #raft.Step.AdvanceCommitIndexStep(a#211#0#0) } 
  DatatypeCtorId(#raft.Step.AdvanceCommitIndexStep(a#211#0#0))
     == ##raft.Step.AdvanceCommitIndexStep);

function _2_raft.Step.AdvanceCommitIndexStep_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.AdvanceCommitIndexStep_q(d) } 
  _2_raft.Step.AdvanceCommitIndexStep_q(d)
     <==> DatatypeCtorId(d) == ##raft.Step.AdvanceCommitIndexStep);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.AdvanceCommitIndexStep_q(d) } 
  _2_raft.Step.AdvanceCommitIndexStep_q(d)
     ==> (exists a#212#0#0: Box :: d == #raft.Step.AdvanceCommitIndexStep(a#212#0#0)));

// Constructor $Is
axiom (forall a#213#0#0: Box :: 
  { $Is(#raft.Step.AdvanceCommitIndexStep(a#213#0#0), Tclass._2_raft.Step()) } 
  $Is(#raft.Step.AdvanceCommitIndexStep(a#213#0#0), Tclass._2_raft.Step())
     <==> $IsBox(a#213#0#0, #$ServerID));

// Constructor $IsAlloc
axiom (forall a#214#0#0: Box, $h: Heap :: 
  { $IsAlloc(#raft.Step.AdvanceCommitIndexStep(a#214#0#0), Tclass._2_raft.Step(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.Step.AdvanceCommitIndexStep(a#214#0#0), Tclass._2_raft.Step(), $h)
       <==> $IsAllocBox(a#214#0#0, #$ServerID, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Step.i(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Step.AdvanceCommitIndexStep_q(d)
       && $IsAlloc(d, Tclass._2_raft.Step(), $h)
     ==> $IsAllocBox(_2_raft.Step.i(d), #$ServerID, $h));

// Constructor literal
axiom (forall a#215#0#0: Box :: 
  { #raft.Step.AdvanceCommitIndexStep(Lit(a#215#0#0)) } 
  #raft.Step.AdvanceCommitIndexStep(Lit(a#215#0#0))
     == Lit(#raft.Step.AdvanceCommitIndexStep(a#215#0#0)));

// Constructor injectivity
axiom (forall a#216#0#0: Box :: 
  { #raft.Step.AdvanceCommitIndexStep(a#216#0#0) } 
  _2_raft.Step.i(#raft.Step.AdvanceCommitIndexStep(a#216#0#0)) == a#216#0#0);

// Inductive rank
axiom (forall a#217#0#0: Box :: 
  { #raft.Step.AdvanceCommitIndexStep(a#217#0#0) } 
  BoxRank(a#217#0#0) < DtRank(#raft.Step.AdvanceCommitIndexStep(a#217#0#0)));

// Constructor function declaration
function #raft.Step.AppendEntriesStep(Box, Box) : DatatypeType;

const unique ##raft.Step.AppendEntriesStep: DtCtorId;

// Constructor identifier
axiom (forall a#218#0#0: Box, a#218#1#0: Box :: 
  { #raft.Step.AppendEntriesStep(a#218#0#0, a#218#1#0) } 
  DatatypeCtorId(#raft.Step.AppendEntriesStep(a#218#0#0, a#218#1#0))
     == ##raft.Step.AppendEntriesStep);

function _2_raft.Step.AppendEntriesStep_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.AppendEntriesStep_q(d) } 
  _2_raft.Step.AppendEntriesStep_q(d)
     <==> DatatypeCtorId(d) == ##raft.Step.AppendEntriesStep);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.AppendEntriesStep_q(d) } 
  _2_raft.Step.AppendEntriesStep_q(d)
     ==> (exists a#219#0#0: Box, a#219#1#0: Box :: 
      d == #raft.Step.AppendEntriesStep(a#219#0#0, a#219#1#0)));

// Constructor $Is
axiom (forall a#220#0#0: Box, a#220#1#0: Box :: 
  { $Is(#raft.Step.AppendEntriesStep(a#220#0#0, a#220#1#0), Tclass._2_raft.Step()) } 
  $Is(#raft.Step.AppendEntriesStep(a#220#0#0, a#220#1#0), Tclass._2_raft.Step())
     <==> $IsBox(a#220#0#0, #$ServerID) && $IsBox(a#220#1#0, #$ServerID));

// Constructor $IsAlloc
axiom (forall a#221#0#0: Box, a#221#1#0: Box, $h: Heap :: 
  { $IsAlloc(#raft.Step.AppendEntriesStep(a#221#0#0, a#221#1#0), Tclass._2_raft.Step(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.Step.AppendEntriesStep(a#221#0#0, a#221#1#0), Tclass._2_raft.Step(), $h)
       <==> $IsAllocBox(a#221#0#0, #$ServerID, $h) && $IsAllocBox(a#221#1#0, #$ServerID, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Step.i(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Step.AppendEntriesStep_q(d)
       && $IsAlloc(d, Tclass._2_raft.Step(), $h)
     ==> $IsAllocBox(_2_raft.Step.i(d), #$ServerID, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAllocBox(_2_raft.Step.j(d), #$ServerID, $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Step.AppendEntriesStep_q(d)
       && $IsAlloc(d, Tclass._2_raft.Step(), $h)
     ==> $IsAllocBox(_2_raft.Step.j(d), #$ServerID, $h));

// Constructor literal
axiom (forall a#222#0#0: Box, a#222#1#0: Box :: 
  { #raft.Step.AppendEntriesStep(Lit(a#222#0#0), Lit(a#222#1#0)) } 
  #raft.Step.AppendEntriesStep(Lit(a#222#0#0), Lit(a#222#1#0))
     == Lit(#raft.Step.AppendEntriesStep(a#222#0#0, a#222#1#0)));

// Constructor injectivity
axiom (forall a#223#0#0: Box, a#223#1#0: Box :: 
  { #raft.Step.AppendEntriesStep(a#223#0#0, a#223#1#0) } 
  _2_raft.Step.i(#raft.Step.AppendEntriesStep(a#223#0#0, a#223#1#0)) == a#223#0#0);

// Inductive rank
axiom (forall a#224#0#0: Box, a#224#1#0: Box :: 
  { #raft.Step.AppendEntriesStep(a#224#0#0, a#224#1#0) } 
  BoxRank(a#224#0#0) < DtRank(#raft.Step.AppendEntriesStep(a#224#0#0, a#224#1#0)));

// Constructor injectivity
axiom (forall a#225#0#0: Box, a#225#1#0: Box :: 
  { #raft.Step.AppendEntriesStep(a#225#0#0, a#225#1#0) } 
  _2_raft.Step.j(#raft.Step.AppendEntriesStep(a#225#0#0, a#225#1#0)) == a#225#1#0);

// Inductive rank
axiom (forall a#226#0#0: Box, a#226#1#0: Box :: 
  { #raft.Step.AppendEntriesStep(a#226#0#0, a#226#1#0) } 
  BoxRank(a#226#1#0) < DtRank(#raft.Step.AppendEntriesStep(a#226#0#0, a#226#1#0)));

// Constructor function declaration
function #raft.Step.ReceiveStep(DatatypeType, DatatypeType) : DatatypeType;

const unique ##raft.Step.ReceiveStep: DtCtorId;

// Constructor identifier
axiom (forall a#227#0#0: DatatypeType, a#227#1#0: DatatypeType :: 
  { #raft.Step.ReceiveStep(a#227#0#0, a#227#1#0) } 
  DatatypeCtorId(#raft.Step.ReceiveStep(a#227#0#0, a#227#1#0))
     == ##raft.Step.ReceiveStep);

function _2_raft.Step.ReceiveStep_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.ReceiveStep_q(d) } 
  _2_raft.Step.ReceiveStep_q(d) <==> DatatypeCtorId(d) == ##raft.Step.ReceiveStep);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.ReceiveStep_q(d) } 
  _2_raft.Step.ReceiveStep_q(d)
     ==> (exists a#228#0#0: DatatypeType, a#228#1#0: DatatypeType :: 
      d == #raft.Step.ReceiveStep(a#228#0#0, a#228#1#0)));

// Constructor $Is
axiom (forall a#229#0#0: DatatypeType, a#229#1#0: DatatypeType :: 
  { $Is(#raft.Step.ReceiveStep(a#229#0#0, a#229#1#0), Tclass._2_raft.Step()) } 
  $Is(#raft.Step.ReceiveStep(a#229#0#0, a#229#1#0), Tclass._2_raft.Step())
     <==> $Is(a#229#0#0, Tclass._2_raft.Message())
       && $Is(a#229#1#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message())));

// Constructor $IsAlloc
axiom (forall a#230#0#0: DatatypeType, a#230#1#0: DatatypeType, $h: Heap :: 
  { $IsAlloc(#raft.Step.ReceiveStep(a#230#0#0, a#230#1#0), Tclass._2_raft.Step(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.Step.ReceiveStep(a#230#0#0, a#230#1#0), Tclass._2_raft.Step(), $h)
       <==> $IsAlloc(a#230#0#0, Tclass._2_raft.Message(), $h)
         && $IsAlloc(a#230#1#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Step.m(d), Tclass._2_raft.Message(), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Step.ReceiveStep_q(d)
       && $IsAlloc(d, Tclass._2_raft.Step(), $h)
     ==> $IsAlloc(_2_raft.Step.m(d), Tclass._2_raft.Message(), $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Step.reply(d), 
      Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()), 
      $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Step.ReceiveStep_q(d)
       && $IsAlloc(d, Tclass._2_raft.Step(), $h)
     ==> $IsAlloc(_2_raft.Step.reply(d), 
      Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()), 
      $h));

// Constructor literal
axiom (forall a#231#0#0: DatatypeType, a#231#1#0: DatatypeType :: 
  { #raft.Step.ReceiveStep(Lit(a#231#0#0), Lit(a#231#1#0)) } 
  #raft.Step.ReceiveStep(Lit(a#231#0#0), Lit(a#231#1#0))
     == Lit(#raft.Step.ReceiveStep(a#231#0#0, a#231#1#0)));

function _2_raft.Step.m(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#232#0#0: DatatypeType, a#232#1#0: DatatypeType :: 
  { #raft.Step.ReceiveStep(a#232#0#0, a#232#1#0) } 
  _2_raft.Step.m(#raft.Step.ReceiveStep(a#232#0#0, a#232#1#0)) == a#232#0#0);

// Inductive rank
axiom (forall a#233#0#0: DatatypeType, a#233#1#0: DatatypeType :: 
  { #raft.Step.ReceiveStep(a#233#0#0, a#233#1#0) } 
  DtRank(a#233#0#0) < DtRank(#raft.Step.ReceiveStep(a#233#0#0, a#233#1#0)));

function _2_raft.Step.reply(DatatypeType) : DatatypeType;

// Constructor injectivity
axiom (forall a#234#0#0: DatatypeType, a#234#1#0: DatatypeType :: 
  { #raft.Step.ReceiveStep(a#234#0#0, a#234#1#0) } 
  _2_raft.Step.reply(#raft.Step.ReceiveStep(a#234#0#0, a#234#1#0)) == a#234#1#0);

// Inductive rank
axiom (forall a#235#0#0: DatatypeType, a#235#1#0: DatatypeType :: 
  { #raft.Step.ReceiveStep(a#235#0#0, a#235#1#0) } 
  DtRank(a#235#1#0) < DtRank(#raft.Step.ReceiveStep(a#235#0#0, a#235#1#0)));

// Constructor function declaration
function #raft.Step.DuplicateMessageStep(DatatypeType) : DatatypeType;

const unique ##raft.Step.DuplicateMessageStep: DtCtorId;

// Constructor identifier
axiom (forall a#236#0#0: DatatypeType :: 
  { #raft.Step.DuplicateMessageStep(a#236#0#0) } 
  DatatypeCtorId(#raft.Step.DuplicateMessageStep(a#236#0#0))
     == ##raft.Step.DuplicateMessageStep);

function _2_raft.Step.DuplicateMessageStep_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.DuplicateMessageStep_q(d) } 
  _2_raft.Step.DuplicateMessageStep_q(d)
     <==> DatatypeCtorId(d) == ##raft.Step.DuplicateMessageStep);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.DuplicateMessageStep_q(d) } 
  _2_raft.Step.DuplicateMessageStep_q(d)
     ==> (exists a#237#0#0: DatatypeType :: 
      d == #raft.Step.DuplicateMessageStep(a#237#0#0)));

// Constructor $Is
axiom (forall a#238#0#0: DatatypeType :: 
  { $Is(#raft.Step.DuplicateMessageStep(a#238#0#0), Tclass._2_raft.Step()) } 
  $Is(#raft.Step.DuplicateMessageStep(a#238#0#0), Tclass._2_raft.Step())
     <==> $Is(a#238#0#0, Tclass._2_raft.Message()));

// Constructor $IsAlloc
axiom (forall a#239#0#0: DatatypeType, $h: Heap :: 
  { $IsAlloc(#raft.Step.DuplicateMessageStep(a#239#0#0), Tclass._2_raft.Step(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.Step.DuplicateMessageStep(a#239#0#0), Tclass._2_raft.Step(), $h)
       <==> $IsAlloc(a#239#0#0, Tclass._2_raft.Message(), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Step.m(d), Tclass._2_raft.Message(), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Step.DuplicateMessageStep_q(d)
       && $IsAlloc(d, Tclass._2_raft.Step(), $h)
     ==> $IsAlloc(_2_raft.Step.m(d), Tclass._2_raft.Message(), $h));

// Constructor literal
axiom (forall a#240#0#0: DatatypeType :: 
  { #raft.Step.DuplicateMessageStep(Lit(a#240#0#0)) } 
  #raft.Step.DuplicateMessageStep(Lit(a#240#0#0))
     == Lit(#raft.Step.DuplicateMessageStep(a#240#0#0)));

// Constructor injectivity
axiom (forall a#241#0#0: DatatypeType :: 
  { #raft.Step.DuplicateMessageStep(a#241#0#0) } 
  _2_raft.Step.m(#raft.Step.DuplicateMessageStep(a#241#0#0)) == a#241#0#0);

// Inductive rank
axiom (forall a#242#0#0: DatatypeType :: 
  { #raft.Step.DuplicateMessageStep(a#242#0#0) } 
  DtRank(a#242#0#0) < DtRank(#raft.Step.DuplicateMessageStep(a#242#0#0)));

// Constructor function declaration
function #raft.Step.DropMessageStep(DatatypeType) : DatatypeType;

const unique ##raft.Step.DropMessageStep: DtCtorId;

// Constructor identifier
axiom (forall a#243#0#0: DatatypeType :: 
  { #raft.Step.DropMessageStep(a#243#0#0) } 
  DatatypeCtorId(#raft.Step.DropMessageStep(a#243#0#0))
     == ##raft.Step.DropMessageStep);

function _2_raft.Step.DropMessageStep_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.DropMessageStep_q(d) } 
  _2_raft.Step.DropMessageStep_q(d)
     <==> DatatypeCtorId(d) == ##raft.Step.DropMessageStep);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.DropMessageStep_q(d) } 
  _2_raft.Step.DropMessageStep_q(d)
     ==> (exists a#244#0#0: DatatypeType :: d == #raft.Step.DropMessageStep(a#244#0#0)));

// Constructor $Is
axiom (forall a#245#0#0: DatatypeType :: 
  { $Is(#raft.Step.DropMessageStep(a#245#0#0), Tclass._2_raft.Step()) } 
  $Is(#raft.Step.DropMessageStep(a#245#0#0), Tclass._2_raft.Step())
     <==> $Is(a#245#0#0, Tclass._2_raft.Message()));

// Constructor $IsAlloc
axiom (forall a#246#0#0: DatatypeType, $h: Heap :: 
  { $IsAlloc(#raft.Step.DropMessageStep(a#246#0#0), Tclass._2_raft.Step(), $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#raft.Step.DropMessageStep(a#246#0#0), Tclass._2_raft.Step(), $h)
       <==> $IsAlloc(a#246#0#0, Tclass._2_raft.Message(), $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(_2_raft.Step.m(d), Tclass._2_raft.Message(), $h) } 
  $IsGoodHeap($h)
       && 
      _2_raft.Step.DropMessageStep_q(d)
       && $IsAlloc(d, Tclass._2_raft.Step(), $h)
     ==> $IsAlloc(_2_raft.Step.m(d), Tclass._2_raft.Message(), $h));

// Constructor literal
axiom (forall a#247#0#0: DatatypeType :: 
  { #raft.Step.DropMessageStep(Lit(a#247#0#0)) } 
  #raft.Step.DropMessageStep(Lit(a#247#0#0))
     == Lit(#raft.Step.DropMessageStep(a#247#0#0)));

// Constructor injectivity
axiom (forall a#248#0#0: DatatypeType :: 
  { #raft.Step.DropMessageStep(a#248#0#0) } 
  _2_raft.Step.m(#raft.Step.DropMessageStep(a#248#0#0)) == a#248#0#0);

// Inductive rank
axiom (forall a#249#0#0: DatatypeType :: 
  { #raft.Step.DropMessageStep(a#249#0#0) } 
  DtRank(a#249#0#0) < DtRank(#raft.Step.DropMessageStep(a#249#0#0)));

// One-depth case-split function
function $IsA#_2_raft.Step(DatatypeType) : bool;

// One-depth case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_2_raft.Step(d) } 
  $IsA#_2_raft.Step(d)
     ==> _2_raft.Step.RestartStep_q(d)
       || _2_raft.Step.TimeoutStep_q(d)
       || _2_raft.Step.RequestVoteStep_q(d)
       || _2_raft.Step.BecomeLeaderStep_q(d)
       || _2_raft.Step.ClientRequestStep_q(d)
       || _2_raft.Step.AdvanceCommitIndexStep_q(d)
       || _2_raft.Step.AppendEntriesStep_q(d)
       || _2_raft.Step.ReceiveStep_q(d)
       || _2_raft.Step.DuplicateMessageStep_q(d)
       || _2_raft.Step.DropMessageStep_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _2_raft.Step.DropMessageStep_q(d), $Is(d, Tclass._2_raft.Step()) } 
    { _2_raft.Step.DuplicateMessageStep_q(d), $Is(d, Tclass._2_raft.Step()) } 
    { _2_raft.Step.ReceiveStep_q(d), $Is(d, Tclass._2_raft.Step()) } 
    { _2_raft.Step.AppendEntriesStep_q(d), $Is(d, Tclass._2_raft.Step()) } 
    { _2_raft.Step.AdvanceCommitIndexStep_q(d), $Is(d, Tclass._2_raft.Step()) } 
    { _2_raft.Step.ClientRequestStep_q(d), $Is(d, Tclass._2_raft.Step()) } 
    { _2_raft.Step.BecomeLeaderStep_q(d), $Is(d, Tclass._2_raft.Step()) } 
    { _2_raft.Step.RequestVoteStep_q(d), $Is(d, Tclass._2_raft.Step()) } 
    { _2_raft.Step.TimeoutStep_q(d), $Is(d, Tclass._2_raft.Step()) } 
    { _2_raft.Step.RestartStep_q(d), $Is(d, Tclass._2_raft.Step()) } 
  $Is(d, Tclass._2_raft.Step())
     ==> _2_raft.Step.RestartStep_q(d)
       || _2_raft.Step.TimeoutStep_q(d)
       || _2_raft.Step.RequestVoteStep_q(d)
       || _2_raft.Step.BecomeLeaderStep_q(d)
       || _2_raft.Step.ClientRequestStep_q(d)
       || _2_raft.Step.AdvanceCommitIndexStep_q(d)
       || _2_raft.Step.AppendEntriesStep_q(d)
       || _2_raft.Step.ReceiveStep_q(d)
       || _2_raft.Step.DuplicateMessageStep_q(d)
       || _2_raft.Step.DropMessageStep_q(d));

const unique class._2_raft.__default: ClassName;

function Tclass._2_raft.__default() : Ty;

// Tclass._2_raft.__default Tag
axiom Tag(Tclass._2_raft.__default()) == Tagclass._2_raft.__default;

const unique Tagclass._2_raft.__default: TyTag;

// Box/unbox axiom for Tclass._2_raft.__default
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._2_raft.__default()) } 
  $IsBox(bx, Tclass._2_raft.__default())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._2_raft.__default()));

// _default: Class $Is
axiom (forall $o: ref :: 
  { $Is($o, Tclass._2_raft.__default()) } 
  $Is($o, Tclass._2_raft.__default())
     <==> $o == null || dtype($o) == Tclass._2_raft.__default());

// _default: Class $IsAlloc
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._2_raft.__default(), $h) } 
  $IsAlloc($o, Tclass._2_raft.__default(), $h)
     <==> $o == null || read($h, $o, alloc));

// function declaration for raft._default.ServerIDs
function _2_raft.__default.ServerIDs() : Set Box;

function _2_raft.__default.ServerIDs#canCall() : bool;

// consequence axiom for _2_raft.__default.ServerIDs
axiom true ==> true ==> $Is(_2_raft.__default.ServerIDs(), TSet(#$ServerID));

function _2_raft.__default.ServerIDs#requires() : bool;

// #requires axiom for _2_raft.__default.ServerIDs
axiom _2_raft.__default.ServerIDs#requires() == true;

// function declaration for raft._default.WFMessage
function _2_raft.__default.WFMessage(m#0: DatatypeType) : bool;

function _2_raft.__default.WFMessage#canCall(m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.WFMessage
axiom true
   ==> (forall m#0: DatatypeType :: 
    { _2_raft.__default.WFMessage(m#0) } 
    _2_raft.__default.WFMessage#canCall(m#0) || $Is(m#0, Tclass._2_raft.Message())
       ==> true);

function _2_raft.__default.WFMessage#requires(DatatypeType) : bool;

// #requires axiom for _2_raft.__default.WFMessage
axiom (forall m#0: DatatypeType :: 
  { _2_raft.__default.WFMessage#requires(m#0) } 
  $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.WFMessage#requires(m#0) == true);

// definition axiom for _2_raft.__default.WFMessage(revealed)
axiom true
   ==> (forall m#0: DatatypeType :: 
    { _2_raft.__default.WFMessage(m#0) } 
    _2_raft.__default.WFMessage#canCall(m#0) || $Is(m#0, Tclass._2_raft.Message())
       ==> (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[_2_raft.Message.source(m#0)]
           ==> (
              _2_raft.Message.RequestVoteRequest_q(m#0)
               || _2_raft.Message.RequestVoteResponse_q(m#0)
               || _2_raft.Message.AppendEntriesRequest_q(m#0)
               || _2_raft.Message.AppendEntriesResponse_q(m#0))
             && _2_raft.__default.ServerIDs#canCall())
         && _2_raft.__default.WFMessage(m#0)
           == (_2_raft.__default.ServerIDs()[_2_raft.Message.source(m#0)]
             && _2_raft.__default.ServerIDs()[_2_raft.Message.dest(m#0)]));

// definition axiom for _2_raft.__default.WFMessage for all literals(revealed)
axiom true
   ==> (forall m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.WFMessage(Lit(m#0)) } 
    _2_raft.__default.WFMessage#canCall(Lit(m#0))
         || $Is(m#0, Tclass._2_raft.Message())
       ==> (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[Lit(_2_raft.Message.source(Lit(m#0)))]
           ==> (
              _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
               || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
               || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
               || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
             && _2_raft.__default.ServerIDs#canCall())
         && _2_raft.__default.WFMessage(Lit(m#0))
           == (_2_raft.__default.ServerIDs()[Lit(_2_raft.Message.source(Lit(m#0)))]
             && _2_raft.__default.ServerIDs()[Lit(_2_raft.Message.dest(Lit(m#0)))]));

// function declaration for raft._default.WFLeaderVars
function _2_raft.__default.WFLeaderVars(l#0: DatatypeType) : bool;

function _2_raft.__default.WFLeaderVars#canCall(l#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.WFLeaderVars
axiom true
   ==> (forall l#0: DatatypeType :: 
    { _2_raft.__default.WFLeaderVars(l#0) } 
    _2_raft.__default.WFLeaderVars#canCall(l#0)
         || $Is(l#0, Tclass._2_raft.LeaderVars())
       ==> true);

function _2_raft.__default.WFLeaderVars#requires(DatatypeType) : bool;

// #requires axiom for _2_raft.__default.WFLeaderVars
axiom (forall l#0: DatatypeType :: 
  { _2_raft.__default.WFLeaderVars#requires(l#0) } 
  $Is(l#0, Tclass._2_raft.LeaderVars())
     ==> _2_raft.__default.WFLeaderVars#requires(l#0) == true);

// definition axiom for _2_raft.__default.WFLeaderVars(revealed)
axiom true
   ==> (forall l#0: DatatypeType :: 
    { _2_raft.__default.WFLeaderVars(l#0) } 
    _2_raft.__default.WFLeaderVars#canCall(l#0)
         || $Is(l#0, Tclass._2_raft.LeaderVars())
       ==> _2_raft.LeaderVars.LeaderVars_q(l#0)
         && _2_raft.__default.ServerIDs#canCall()
         && (Set#Equal(Map#Domain(_2_raft.LeaderVars.nextIndex(l#0)), _2_raft.__default.ServerIDs())
           ==> _2_raft.LeaderVars.LeaderVars_q(l#0) && _2_raft.__default.ServerIDs#canCall())
         && _2_raft.__default.WFLeaderVars(l#0)
           == (Set#Equal(Map#Domain(_2_raft.LeaderVars.nextIndex(l#0)), _2_raft.__default.ServerIDs())
             && Set#Equal(Map#Domain(_2_raft.LeaderVars.matchIndex(l#0)), _2_raft.__default.ServerIDs())));

// definition axiom for _2_raft.__default.WFLeaderVars for all literals(revealed)
axiom true
   ==> (forall l#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.WFLeaderVars(Lit(l#0)) } 
    _2_raft.__default.WFLeaderVars#canCall(Lit(l#0))
         || $Is(l#0, Tclass._2_raft.LeaderVars())
       ==> _2_raft.LeaderVars.LeaderVars_q(Lit(l#0))
         && _2_raft.__default.ServerIDs#canCall()
         && (Set#Equal(Map#Domain(Lit(_2_raft.LeaderVars.nextIndex(Lit(l#0)))), 
            _2_raft.__default.ServerIDs())
           ==> _2_raft.LeaderVars.LeaderVars_q(Lit(l#0))
             && _2_raft.__default.ServerIDs#canCall())
         && _2_raft.__default.WFLeaderVars(Lit(l#0))
           == (Set#Equal(Map#Domain(Lit(_2_raft.LeaderVars.nextIndex(Lit(l#0)))), 
              _2_raft.__default.ServerIDs())
             && Set#Equal(Map#Domain(Lit(_2_raft.LeaderVars.matchIndex(Lit(l#0)))), 
              _2_raft.__default.ServerIDs())));

// function declaration for raft._default.IsQuorum
function _2_raft.__default.IsQuorum(servers#0: Set Box) : bool;

function _2_raft.__default.IsQuorum#canCall(servers#0: Set Box) : bool;

// consequence axiom for _2_raft.__default.IsQuorum
axiom true
   ==> (forall servers#0: Set Box :: 
    { _2_raft.__default.IsQuorum(servers#0) } 
    _2_raft.__default.IsQuorum#canCall(servers#0)
         || $Is(servers#0, TSet(#$ServerID))
       ==> true);

function _2_raft.__default.IsQuorum#requires(Set Box) : bool;

// #requires axiom for _2_raft.__default.IsQuorum
axiom (forall servers#0: Set Box :: 
  { _2_raft.__default.IsQuorum#requires(servers#0) } 
  $Is(servers#0, TSet(#$ServerID))
     ==> _2_raft.__default.IsQuorum#requires(servers#0) == true);

// definition axiom for _2_raft.__default.IsQuorum(revealed)
axiom true
   ==> (forall servers#0: Set Box :: 
    { _2_raft.__default.IsQuorum(servers#0) } 
    _2_raft.__default.IsQuorum#canCall(servers#0)
         || $Is(servers#0, TSet(#$ServerID))
       ==> _2_raft.__default.IsQuorum(servers#0) == Lit(true));

// definition axiom for _2_raft.__default.IsQuorum for all literals(revealed)
axiom true
   ==> (forall servers#0: Set Box :: 
    {:weight 3} { _2_raft.__default.IsQuorum(Lit(servers#0)) } 
    _2_raft.__default.IsQuorum#canCall(Lit(servers#0))
         || $Is(servers#0, TSet(#$ServerID))
       ==> _2_raft.__default.IsQuorum(Lit(servers#0)) == Lit(true));

// function declaration for raft._default.LastTerm
function _2_raft.__default.LastTerm(xlog#0: Seq Box) : int;

function _2_raft.__default.LastTerm#canCall(xlog#0: Seq Box) : bool;

// consequence axiom for _2_raft.__default.LastTerm
axiom true
   ==> (forall xlog#0: Seq Box :: 
    { _2_raft.__default.LastTerm(xlog#0) } 
    _2_raft.__default.LastTerm#canCall(xlog#0)
         || $Is(xlog#0, TSeq(Tclass._2_raft.LogEntry()))
       ==> true);

function _2_raft.__default.LastTerm#requires(Seq Box) : bool;

// #requires axiom for _2_raft.__default.LastTerm
axiom (forall xlog#0: Seq Box :: 
  { _2_raft.__default.LastTerm#requires(xlog#0) } 
  $Is(xlog#0, TSeq(Tclass._2_raft.LogEntry()))
     ==> _2_raft.__default.LastTerm#requires(xlog#0) == true);

// definition axiom for _2_raft.__default.LastTerm(revealed)
axiom true
   ==> (forall xlog#0: Seq Box :: 
    { _2_raft.__default.LastTerm(xlog#0) } 
    _2_raft.__default.LastTerm#canCall(xlog#0)
         || $Is(xlog#0, TSeq(Tclass._2_raft.LogEntry()))
       ==> (Seq#Length(xlog#0) != LitInt(0)
           ==> _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(xlog#0, Seq#Length(xlog#0) - 1)): DatatypeType))
         && _2_raft.__default.LastTerm(xlog#0)
           == (if Seq#Length(xlog#0) == LitInt(0)
             then 0
             else _2_raft.LogEntry.term($Unbox(Seq#Index(xlog#0, Seq#Length(xlog#0) - 1)): DatatypeType)));

// definition axiom for _2_raft.__default.LastTerm for all literals(revealed)
axiom true
   ==> (forall xlog#0: Seq Box :: 
    {:weight 3} { _2_raft.__default.LastTerm(Lit(xlog#0)) } 
    _2_raft.__default.LastTerm#canCall(Lit(xlog#0))
         || $Is(xlog#0, TSeq(Tclass._2_raft.LogEntry()))
       ==> (Seq#Length(Lit(xlog#0)) != LitInt(0)
           ==> _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(Lit(xlog#0), Seq#Length(Lit(xlog#0)) - 1)): DatatypeType))
         && _2_raft.__default.LastTerm(Lit(xlog#0))
           == (if Seq#Length(Lit(xlog#0)) == LitInt(0)
             then 0
             else _2_raft.LogEntry.term($Unbox(Seq#Index(Lit(xlog#0), Seq#Length(Lit(xlog#0)) - 1)): DatatypeType)));

// function declaration for raft._default.WithMessage
function _2_raft.__default.WithMessage(m#0: DatatypeType, msgs#0: MultiSet Box) : MultiSet Box;

function _2_raft.__default.WithMessage#canCall(m#0: DatatypeType, msgs#0: MultiSet Box) : bool;

// consequence axiom for _2_raft.__default.WithMessage
axiom true
   ==> (forall m#0: DatatypeType, msgs#0: MultiSet Box :: 
    { _2_raft.__default.WithMessage(m#0, msgs#0) } 
    _2_raft.__default.WithMessage#canCall(m#0, msgs#0)
         || ($Is(m#0, Tclass._2_raft.Message())
           && $Is(msgs#0, TMultiSet(Tclass._2_raft.Message())))
       ==> $Is(_2_raft.__default.WithMessage(m#0, msgs#0), TMultiSet(Tclass._2_raft.Message())));

function _2_raft.__default.WithMessage#requires(DatatypeType, MultiSet Box) : bool;

// #requires axiom for _2_raft.__default.WithMessage
axiom (forall m#0: DatatypeType, msgs#0: MultiSet Box :: 
  { _2_raft.__default.WithMessage#requires(m#0, msgs#0) } 
  $Is(m#0, Tclass._2_raft.Message())
       && $Is(msgs#0, TMultiSet(Tclass._2_raft.Message()))
     ==> _2_raft.__default.WithMessage#requires(m#0, msgs#0) == true);

// definition axiom for _2_raft.__default.WithMessage(revealed)
axiom true
   ==> (forall m#0: DatatypeType, msgs#0: MultiSet Box :: 
    { _2_raft.__default.WithMessage(m#0, msgs#0) } 
    _2_raft.__default.WithMessage#canCall(m#0, msgs#0)
         || ($Is(m#0, Tclass._2_raft.Message())
           && $Is(msgs#0, TMultiSet(Tclass._2_raft.Message())))
       ==> _2_raft.__default.WithMessage(m#0, msgs#0)
         == MultiSet#Union(msgs#0, MultiSet#UnionOne(MultiSet#Empty(): MultiSet Box, $Box(m#0))));

// definition axiom for _2_raft.__default.WithMessage for all literals(revealed)
axiom true
   ==> (forall m#0: DatatypeType, msgs#0: MultiSet Box :: 
    {:weight 3} { _2_raft.__default.WithMessage(Lit(m#0), Lit(msgs#0)) } 
    _2_raft.__default.WithMessage#canCall(Lit(m#0), Lit(msgs#0))
         || ($Is(m#0, Tclass._2_raft.Message())
           && $Is(msgs#0, TMultiSet(Tclass._2_raft.Message())))
       ==> _2_raft.__default.WithMessage(Lit(m#0), Lit(msgs#0))
         == MultiSet#Union(msgs#0, MultiSet#UnionOne(MultiSet#Empty(): MultiSet Box, $Box(Lit(m#0)))));

// function declaration for raft._default.WithoutMessage
function _2_raft.__default.WithoutMessage(m#0: DatatypeType, msgs#0: MultiSet Box) : MultiSet Box;

function _2_raft.__default.WithoutMessage#canCall(m#0: DatatypeType, msgs#0: MultiSet Box) : bool;

// consequence axiom for _2_raft.__default.WithoutMessage
axiom true
   ==> (forall m#0: DatatypeType, msgs#0: MultiSet Box :: 
    { _2_raft.__default.WithoutMessage(m#0, msgs#0) } 
    _2_raft.__default.WithoutMessage#canCall(m#0, msgs#0)
         || ($Is(m#0, Tclass._2_raft.Message())
           && $Is(msgs#0, TMultiSet(Tclass._2_raft.Message())))
       ==> $Is(_2_raft.__default.WithoutMessage(m#0, msgs#0), 
        TMultiSet(Tclass._2_raft.Message())));

function _2_raft.__default.WithoutMessage#requires(DatatypeType, MultiSet Box) : bool;

// #requires axiom for _2_raft.__default.WithoutMessage
axiom (forall m#0: DatatypeType, msgs#0: MultiSet Box :: 
  { _2_raft.__default.WithoutMessage#requires(m#0, msgs#0) } 
  $Is(m#0, Tclass._2_raft.Message())
       && $Is(msgs#0, TMultiSet(Tclass._2_raft.Message()))
     ==> _2_raft.__default.WithoutMessage#requires(m#0, msgs#0) == true);

// definition axiom for _2_raft.__default.WithoutMessage(revealed)
axiom true
   ==> (forall m#0: DatatypeType, msgs#0: MultiSet Box :: 
    { _2_raft.__default.WithoutMessage(m#0, msgs#0) } 
    _2_raft.__default.WithoutMessage#canCall(m#0, msgs#0)
         || ($Is(m#0, Tclass._2_raft.Message())
           && $Is(msgs#0, TMultiSet(Tclass._2_raft.Message())))
       ==> _2_raft.__default.WithoutMessage(m#0, msgs#0)
         == MultiSet#Difference(msgs#0, MultiSet#UnionOne(MultiSet#Empty(): MultiSet Box, $Box(m#0))));

// definition axiom for _2_raft.__default.WithoutMessage for all literals(revealed)
axiom true
   ==> (forall m#0: DatatypeType, msgs#0: MultiSet Box :: 
    {:weight 3} { _2_raft.__default.WithoutMessage(Lit(m#0), Lit(msgs#0)) } 
    _2_raft.__default.WithoutMessage#canCall(Lit(m#0), Lit(msgs#0))
         || ($Is(m#0, Tclass._2_raft.Message())
           && $Is(msgs#0, TMultiSet(Tclass._2_raft.Message())))
       ==> _2_raft.__default.WithoutMessage(Lit(m#0), Lit(msgs#0))
         == MultiSet#Difference(msgs#0, MultiSet#UnionOne(MultiSet#Empty(): MultiSet Box, $Box(Lit(m#0)))));

// function declaration for raft._default.Send
function _2_raft.__default.Send(messages#0: MultiSet Box, messages'#0: MultiSet Box, m#0: DatatypeType) : bool;

function _2_raft.__default.Send#canCall(messages#0: MultiSet Box, messages'#0: MultiSet Box, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.Send
axiom true
   ==> (forall messages#0: MultiSet Box, messages'#0: MultiSet Box, m#0: DatatypeType :: 
    { _2_raft.__default.Send(messages#0, messages'#0, m#0) } 
    _2_raft.__default.Send#canCall(messages#0, messages'#0, m#0)
         || (
          $Is(messages#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(messages'#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(m#0, Tclass._2_raft.Message()))
       ==> true);

function _2_raft.__default.Send#requires(MultiSet Box, MultiSet Box, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.Send
axiom (forall messages#0: MultiSet Box, messages'#0: MultiSet Box, m#0: DatatypeType :: 
  { _2_raft.__default.Send#requires(messages#0, messages'#0, m#0) } 
  $Is(messages#0, TMultiSet(Tclass._2_raft.Message()))
       && $Is(messages'#0, TMultiSet(Tclass._2_raft.Message()))
       && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.Send#requires(messages#0, messages'#0, m#0) == true);

// definition axiom for _2_raft.__default.Send(revealed)
axiom true
   ==> (forall messages#0: MultiSet Box, messages'#0: MultiSet Box, m#0: DatatypeType :: 
    { _2_raft.__default.Send(messages#0, messages'#0, m#0) } 
    _2_raft.__default.Send#canCall(messages#0, messages'#0, m#0)
         || (
          $Is(messages#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(messages'#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(m#0, Tclass._2_raft.Message()))
       ==> _2_raft.__default.WithMessage#canCall(m#0, messages#0)
         && _2_raft.__default.Send(messages#0, messages'#0, m#0)
           == MultiSet#Equal(messages'#0, _2_raft.__default.WithMessage(m#0, messages#0)));

// definition axiom for _2_raft.__default.Send for all literals(revealed)
axiom true
   ==> (forall messages#0: MultiSet Box, messages'#0: MultiSet Box, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.Send(Lit(messages#0), Lit(messages'#0), Lit(m#0)) } 
    _2_raft.__default.Send#canCall(Lit(messages#0), Lit(messages'#0), Lit(m#0))
         || (
          $Is(messages#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(messages'#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(m#0, Tclass._2_raft.Message()))
       ==> _2_raft.__default.WithMessage#canCall(Lit(m#0), Lit(messages#0))
         && _2_raft.__default.Send(Lit(messages#0), Lit(messages'#0), Lit(m#0))
           == MultiSet#Equal(messages'#0, _2_raft.__default.WithMessage(Lit(m#0), Lit(messages#0))));

// function declaration for raft._default.Discard
function _2_raft.__default.Discard(messages#0: MultiSet Box, messages'#0: MultiSet Box, m#0: DatatypeType) : bool;

function _2_raft.__default.Discard#canCall(messages#0: MultiSet Box, messages'#0: MultiSet Box, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.Discard
axiom true
   ==> (forall messages#0: MultiSet Box, messages'#0: MultiSet Box, m#0: DatatypeType :: 
    { _2_raft.__default.Discard(messages#0, messages'#0, m#0) } 
    _2_raft.__default.Discard#canCall(messages#0, messages'#0, m#0)
         || (
          $Is(messages#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(messages'#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(m#0, Tclass._2_raft.Message()))
       ==> true);

function _2_raft.__default.Discard#requires(MultiSet Box, MultiSet Box, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.Discard
axiom (forall messages#0: MultiSet Box, messages'#0: MultiSet Box, m#0: DatatypeType :: 
  { _2_raft.__default.Discard#requires(messages#0, messages'#0, m#0) } 
  $Is(messages#0, TMultiSet(Tclass._2_raft.Message()))
       && $Is(messages'#0, TMultiSet(Tclass._2_raft.Message()))
       && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.Discard#requires(messages#0, messages'#0, m#0) == true);

// definition axiom for _2_raft.__default.Discard(revealed)
axiom true
   ==> (forall messages#0: MultiSet Box, messages'#0: MultiSet Box, m#0: DatatypeType :: 
    { _2_raft.__default.Discard(messages#0, messages'#0, m#0) } 
    _2_raft.__default.Discard#canCall(messages#0, messages'#0, m#0)
         || (
          $Is(messages#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(messages'#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(m#0, Tclass._2_raft.Message()))
       ==> _2_raft.__default.WithoutMessage#canCall(m#0, messages#0)
         && _2_raft.__default.Discard(messages#0, messages'#0, m#0)
           == MultiSet#Equal(messages'#0, _2_raft.__default.WithoutMessage(m#0, messages#0)));

// definition axiom for _2_raft.__default.Discard for all literals(revealed)
axiom true
   ==> (forall messages#0: MultiSet Box, messages'#0: MultiSet Box, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.Discard(Lit(messages#0), Lit(messages'#0), Lit(m#0)) } 
    _2_raft.__default.Discard#canCall(Lit(messages#0), Lit(messages'#0), Lit(m#0))
         || (
          $Is(messages#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(messages'#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(m#0, Tclass._2_raft.Message()))
       ==> _2_raft.__default.WithoutMessage#canCall(Lit(m#0), Lit(messages#0))
         && _2_raft.__default.Discard(Lit(messages#0), Lit(messages'#0), Lit(m#0))
           == MultiSet#Equal(messages'#0, _2_raft.__default.WithoutMessage(Lit(m#0), Lit(messages#0))));

// function declaration for raft._default.Reply
function _2_raft.__default.Reply(messages#0: MultiSet Box, 
    messages'#0: MultiSet Box, 
    response#0: DatatypeType, 
    request#0: DatatypeType)
   : bool;

function _2_raft.__default.Reply#canCall(messages#0: MultiSet Box, 
    messages'#0: MultiSet Box, 
    response#0: DatatypeType, 
    request#0: DatatypeType)
   : bool;

// consequence axiom for _2_raft.__default.Reply
axiom true
   ==> (forall messages#0: MultiSet Box, 
      messages'#0: MultiSet Box, 
      response#0: DatatypeType, 
      request#0: DatatypeType :: 
    { _2_raft.__default.Reply(messages#0, messages'#0, response#0, request#0) } 
    _2_raft.__default.Reply#canCall(messages#0, messages'#0, response#0, request#0)
         || (
          $Is(messages#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(messages'#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(response#0, Tclass._2_raft.Message())
           && $Is(request#0, Tclass._2_raft.Message()))
       ==> true);

function _2_raft.__default.Reply#requires(MultiSet Box, MultiSet Box, DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.Reply
axiom (forall messages#0: MultiSet Box, 
    messages'#0: MultiSet Box, 
    response#0: DatatypeType, 
    request#0: DatatypeType :: 
  { _2_raft.__default.Reply#requires(messages#0, messages'#0, response#0, request#0) } 
  $Is(messages#0, TMultiSet(Tclass._2_raft.Message()))
       && $Is(messages'#0, TMultiSet(Tclass._2_raft.Message()))
       && $Is(response#0, Tclass._2_raft.Message())
       && $Is(request#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.Reply#requires(messages#0, messages'#0, response#0, request#0)
       == true);

// definition axiom for _2_raft.__default.Reply(revealed)
axiom true
   ==> (forall messages#0: MultiSet Box, 
      messages'#0: MultiSet Box, 
      response#0: DatatypeType, 
      request#0: DatatypeType :: 
    { _2_raft.__default.Reply(messages#0, messages'#0, response#0, request#0) } 
    _2_raft.__default.Reply#canCall(messages#0, messages'#0, response#0, request#0)
         || (
          $Is(messages#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(messages'#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(response#0, Tclass._2_raft.Message())
           && $Is(request#0, Tclass._2_raft.Message()))
       ==> _2_raft.__default.WithMessage#canCall(response#0, messages#0)
         && _2_raft.__default.WithoutMessage#canCall(request#0, _2_raft.__default.WithMessage(response#0, messages#0))
         && _2_raft.__default.Reply(messages#0, messages'#0, response#0, request#0)
           == MultiSet#Equal(messages'#0, 
            _2_raft.__default.WithoutMessage(request#0, _2_raft.__default.WithMessage(response#0, messages#0))));

// definition axiom for _2_raft.__default.Reply for all literals(revealed)
axiom true
   ==> (forall messages#0: MultiSet Box, 
      messages'#0: MultiSet Box, 
      response#0: DatatypeType, 
      request#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.Reply(Lit(messages#0), Lit(messages'#0), Lit(response#0), Lit(request#0)) } 
    _2_raft.__default.Reply#canCall(Lit(messages#0), Lit(messages'#0), Lit(response#0), Lit(request#0))
         || (
          $Is(messages#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(messages'#0, TMultiSet(Tclass._2_raft.Message()))
           && $Is(response#0, Tclass._2_raft.Message())
           && $Is(request#0, Tclass._2_raft.Message()))
       ==> _2_raft.__default.WithMessage#canCall(Lit(response#0), Lit(messages#0))
         && _2_raft.__default.WithoutMessage#canCall(Lit(request#0), 
          Lit(_2_raft.__default.WithMessage(Lit(response#0), Lit(messages#0))))
         && _2_raft.__default.Reply(Lit(messages#0), Lit(messages'#0), Lit(response#0), Lit(request#0))
           == MultiSet#Equal(messages'#0, 
            _2_raft.__default.WithoutMessage(Lit(request#0), 
              Lit(_2_raft.__default.WithMessage(Lit(response#0), Lit(messages#0))))));

// function declaration for raft._default.EmptyVoterLog
function _2_raft.__default.EmptyVoterLog() : Map Box Box;

function _2_raft.__default.EmptyVoterLog#canCall() : bool;

// consequence axiom for _2_raft.__default.EmptyVoterLog
axiom true
   ==> 
  true
   ==> $Is(_2_raft.__default.EmptyVoterLog(), 
    TMap(#$ServerID, TSeq(Tclass._2_raft.LogEntry())));

function _2_raft.__default.EmptyVoterLog#requires() : bool;

// #requires axiom for _2_raft.__default.EmptyVoterLog
axiom _2_raft.__default.EmptyVoterLog#requires() == true;

// definition axiom for _2_raft.__default.EmptyVoterLog(revealed)
axiom true
   ==> 
  true
   ==> _0_MissingLibrary.__default.EmptyMap#canCall(#$ServerID, TSeq(Tclass._2_raft.LogEntry()))
     && _2_raft.__default.EmptyVoterLog()
       == _0_MissingLibrary.__default.EmptyMap(#$ServerID, 
        TSeq(Tclass._2_raft.LogEntry()), 
        StartFuel_MissingLibrary._default.EmptyMap);

// definition axiom for _2_raft.__default.EmptyVoterLog for all literals(revealed)
axiom true
   ==> 
  true
   ==> _0_MissingLibrary.__default.EmptyMap#canCall(#$ServerID, TSeq(Tclass._2_raft.LogEntry()))
     && _2_raft.__default.EmptyVoterLog()
       == _0_MissingLibrary.__default.EmptyMap(#$ServerID, 
        TSeq(Tclass._2_raft.LogEntry()), 
        StartFuel_MissingLibrary._default.EmptyMap);

// function declaration for raft._default.Min
function _2_raft.__default.Min(a#0: int, b#0: int) : int;

function _2_raft.__default.Min#canCall(a#0: int, b#0: int) : bool;

// consequence axiom for _2_raft.__default.Min
axiom true
   ==> (forall a#0: int, b#0: int :: { _2_raft.__default.Min(a#0, b#0) } true ==> true);

function _2_raft.__default.Min#requires(int, int) : bool;

// #requires axiom for _2_raft.__default.Min
axiom (forall a#0: int, b#0: int :: 
  { _2_raft.__default.Min#requires(a#0, b#0) } 
  _2_raft.__default.Min#requires(a#0, b#0) == true);

// definition axiom for _2_raft.__default.Min(revealed)
axiom true
   ==> (forall a#0: int, b#0: int :: 
    { _2_raft.__default.Min(a#0, b#0) } 
    true ==> _2_raft.__default.Min(a#0, b#0) == (if a#0 < b#0 then a#0 else b#0));

// definition axiom for _2_raft.__default.Min for all literals(revealed)
axiom true
   ==> (forall a#0: int, b#0: int :: 
    {:weight 3} { _2_raft.__default.Min(LitInt(a#0), LitInt(b#0)) } 
    true
       ==> _2_raft.__default.Min(LitInt(a#0), LitInt(b#0))
         == (if a#0 < b#0 then a#0 else b#0));

// function declaration for raft._default.Max
function _2_raft.__default.Max(a#0: int, b#0: int) : int;

function _2_raft.__default.Max#canCall(a#0: int, b#0: int) : bool;

// consequence axiom for _2_raft.__default.Max
axiom true
   ==> (forall a#0: int, b#0: int :: { _2_raft.__default.Max(a#0, b#0) } true ==> true);

function _2_raft.__default.Max#requires(int, int) : bool;

// #requires axiom for _2_raft.__default.Max
axiom (forall a#0: int, b#0: int :: 
  { _2_raft.__default.Max#requires(a#0, b#0) } 
  _2_raft.__default.Max#requires(a#0, b#0) == true);

// definition axiom for _2_raft.__default.Max(revealed)
axiom true
   ==> (forall a#0: int, b#0: int :: 
    { _2_raft.__default.Max(a#0, b#0) } 
    true ==> _2_raft.__default.Max(a#0, b#0) == (if a#0 > b#0 then a#0 else b#0));

// definition axiom for _2_raft.__default.Max for all literals(revealed)
axiom true
   ==> (forall a#0: int, b#0: int :: 
    {:weight 3} { _2_raft.__default.Max(LitInt(a#0), LitInt(b#0)) } 
    true
       ==> _2_raft.__default.Max(LitInt(a#0), LitInt(b#0))
         == (if a#0 > b#0 then a#0 else b#0));

// function declaration for raft._default.WFVars
function _2_raft.__default.WFVars(v#0: DatatypeType) : bool;

function _2_raft.__default.WFVars#canCall(v#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.WFVars
axiom true
   ==> (forall v#0: DatatypeType :: 
    { _2_raft.__default.WFVars(v#0) } 
    _2_raft.__default.WFVars#canCall(v#0) || $Is(v#0, Tclass._2_raft.Variables())
       ==> true);

function _2_raft.__default.WFVars#requires(DatatypeType) : bool;

// #requires axiom for _2_raft.__default.WFVars
axiom (forall v#0: DatatypeType :: 
  { _2_raft.__default.WFVars#requires(v#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
     ==> _2_raft.__default.WFVars#requires(v#0) == true);

// definition axiom for _2_raft.__default.WFVars(revealed)
axiom true
   ==> (forall v#0: DatatypeType :: 
    { _2_raft.__default.WFVars(v#0) } 
    _2_raft.__default.WFVars#canCall(v#0) || $Is(v#0, Tclass._2_raft.Variables())
       ==> _2_raft.Variables.Variables_q(v#0)
         && _2_raft.__default.ServerIDs#canCall()
         && (Set#Equal(Map#Domain(_2_raft.Variables.host(v#0)), _2_raft.__default.ServerIDs())
           ==> (forall s#4: Box :: 
            { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#4]): DatatypeType } 
              { Map#Domain(_2_raft.Variables.host(v#0))[s#4] } 
            $IsBox(s#4, #$ServerID)
               ==> _2_raft.Variables.Variables_q(v#0)
                 && (Map#Domain(_2_raft.Variables.host(v#0))[s#4]
                   ==> _2_raft.Variables.Variables_q(v#0)
                     && _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#4]): DatatypeType)
                     && _2_raft.__default.WFLeaderVars#canCall(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#4]): DatatypeType)))))
         && _2_raft.__default.WFVars(v#0)
           == (Set#Equal(Map#Domain(_2_raft.Variables.host(v#0)), _2_raft.__default.ServerIDs())
             && (forall s#4: Box :: 
              { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#4]): DatatypeType } 
                { Map#Domain(_2_raft.Variables.host(v#0))[s#4] } 
              $IsBox(s#4, #$ServerID)
                 ==> 
                Map#Domain(_2_raft.Variables.host(v#0))[s#4]
                 ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#4]): DatatypeType)))));

// definition axiom for _2_raft.__default.WFVars for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.WFVars(Lit(v#0)) } 
    _2_raft.__default.WFVars#canCall(Lit(v#0))
         || $Is(v#0, Tclass._2_raft.Variables())
       ==> _2_raft.Variables.Variables_q(Lit(v#0))
         && _2_raft.__default.ServerIDs#canCall()
         && (Set#Equal(Map#Domain(Lit(_2_raft.Variables.host(Lit(v#0)))), _2_raft.__default.ServerIDs())
           ==> (forall s#5: Box :: 
            { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#5]): DatatypeType } 
              { Map#Domain(_2_raft.Variables.host(v#0))[s#5] } 
            $IsBox(s#5, #$ServerID)
               ==> _2_raft.Variables.Variables_q(Lit(v#0))
                 && (Map#Domain(_2_raft.Variables.host(Lit(v#0)))[s#5]
                   ==> _2_raft.Variables.Variables_q(Lit(v#0))
                     && _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#5]): DatatypeType)
                     && _2_raft.__default.WFLeaderVars#canCall(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#5]): DatatypeType)))))
         && _2_raft.__default.WFVars(Lit(v#0))
           == (Set#Equal(Map#Domain(Lit(_2_raft.Variables.host(Lit(v#0)))), _2_raft.__default.ServerIDs())
             && (forall s#5: Box :: 
              { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#5]): DatatypeType } 
                { Map#Domain(_2_raft.Variables.host(v#0))[s#5] } 
              $IsBox(s#5, #$ServerID)
                 ==> 
                Map#Domain(_2_raft.Variables.host(Lit(v#0)))[s#5]
                 ==> _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#5]): DatatypeType)))));

// function declaration for raft._default.InitHistoryVars
function _2_raft.__default.InitHistoryVars(v#0: DatatypeType) : bool;

function _2_raft.__default.InitHistoryVars#canCall(v#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.InitHistoryVars
axiom true
   ==> (forall v#0: DatatypeType :: 
    { _2_raft.__default.InitHistoryVars(v#0) } 
    _2_raft.__default.InitHistoryVars#canCall(v#0)
         || $Is(v#0, Tclass._2_raft.Variables())
       ==> true);

function _2_raft.__default.InitHistoryVars#requires(DatatypeType) : bool;

// #requires axiom for _2_raft.__default.InitHistoryVars
axiom (forall v#0: DatatypeType :: 
  { _2_raft.__default.InitHistoryVars#requires(v#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
     ==> _2_raft.__default.InitHistoryVars#requires(v#0) == true);

// definition axiom for _2_raft.__default.InitHistoryVars(revealed)
axiom true
   ==> (forall v#0: DatatypeType :: 
    { _2_raft.__default.InitHistoryVars(v#0) } 
    _2_raft.__default.InitHistoryVars#canCall(v#0)
         || $Is(v#0, Tclass._2_raft.Variables())
       ==> _2_raft.Variables.Variables_q(v#0)
         && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
         && (Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)), 
            Set#Empty(): Set Box)
           ==> _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0)))
         && (_2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && Set#Equal(_2_raft.GlobalVars.allLogs(_2_raft.Variables.global(v#0)), Set#Empty(): Set Box)
           ==> _2_raft.__default.WFVars#canCall(v#0))
         && (_2_raft.__default.WFVars#canCall(v#0) && _2_raft.__default.WFVars(v#0)
           ==> (forall s#4: Box :: 
            { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#4]): DatatypeType } 
              { _2_raft.__default.ServerIDs()[s#4] } 
            $IsBox(s#4, #$ServerID)
               ==> _2_raft.__default.ServerIDs#canCall()
                 && (_2_raft.__default.ServerIDs()[s#4]
                   ==> _2_raft.Variables.Variables_q(v#0)
                     && _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#4]): DatatypeType)
                     && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#4]): DatatypeType))
                     && _2_raft.__default.EmptyVoterLog#canCall())))
         && _2_raft.__default.InitHistoryVars(v#0)
           == (
            Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)), 
              Set#Empty(): Set Box)
             && Set#Equal(_2_raft.GlobalVars.allLogs(_2_raft.Variables.global(v#0)), Set#Empty(): Set Box)
             && _2_raft.__default.WFVars(v#0)
             && (forall s#4: Box :: 
              { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#4]): DatatypeType } 
                { _2_raft.__default.ServerIDs()[s#4] } 
              $IsBox(s#4, #$ServerID)
                 ==> 
                _2_raft.__default.ServerIDs()[s#4]
                 ==> Map#Equal(_2_raft.CandidateVars.voterLog(_2_raft.HostVars.candidate($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#4]): DatatypeType)), 
                  _2_raft.__default.EmptyVoterLog()))));

// definition axiom for _2_raft.__default.InitHistoryVars for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.InitHistoryVars(Lit(v#0)) } 
    _2_raft.__default.InitHistoryVars#canCall(Lit(v#0))
         || $Is(v#0, Tclass._2_raft.Variables())
       ==> _2_raft.Variables.Variables_q(Lit(v#0))
         && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
         && (Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))), 
            Set#Empty(): Set Box)
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0)))))
         && (_2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && Set#Equal(_2_raft.GlobalVars.allLogs(Lit(_2_raft.Variables.global(Lit(v#0)))), 
              Set#Empty(): Set Box)
           ==> _2_raft.__default.WFVars#canCall(Lit(v#0)))
         && (_2_raft.__default.WFVars#canCall(Lit(v#0))
             && Lit(_2_raft.__default.WFVars(Lit(v#0)))
           ==> (forall s#5: Box :: 
            { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#5]): DatatypeType } 
              { _2_raft.__default.ServerIDs()[s#5] } 
            $IsBox(s#5, #$ServerID)
               ==> _2_raft.__default.ServerIDs#canCall()
                 && (_2_raft.__default.ServerIDs()[s#5]
                   ==> _2_raft.Variables.Variables_q(Lit(v#0))
                     && _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#5]): DatatypeType)
                     && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#5]): DatatypeType))
                     && _2_raft.__default.EmptyVoterLog#canCall())))
         && _2_raft.__default.InitHistoryVars(Lit(v#0))
           == (
            Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))), 
              Set#Empty(): Set Box)
             && Set#Equal(_2_raft.GlobalVars.allLogs(Lit(_2_raft.Variables.global(Lit(v#0)))), 
              Set#Empty(): Set Box)
             && _2_raft.__default.WFVars(Lit(v#0))
             && (forall s#5: Box :: 
              { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#5]): DatatypeType } 
                { _2_raft.__default.ServerIDs()[s#5] } 
              $IsBox(s#5, #$ServerID)
                 ==> 
                _2_raft.__default.ServerIDs()[s#5]
                 ==> Map#Equal(_2_raft.CandidateVars.voterLog(_2_raft.HostVars.candidate($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#5]): DatatypeType)), 
                  _2_raft.__default.EmptyVoterLog()))));

// function declaration for raft._default.InitServerVars
function _2_raft.__default.InitServerVars(server#0: DatatypeType) : bool;

function _2_raft.__default.InitServerVars#canCall(server#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.InitServerVars
axiom true
   ==> (forall server#0: DatatypeType :: 
    { _2_raft.__default.InitServerVars(server#0) } 
    _2_raft.__default.InitServerVars#canCall(server#0)
         || $Is(server#0, Tclass._2_raft.ServerVars())
       ==> true);

function _2_raft.__default.InitServerVars#requires(DatatypeType) : bool;

// #requires axiom for _2_raft.__default.InitServerVars
axiom (forall server#0: DatatypeType :: 
  { _2_raft.__default.InitServerVars#requires(server#0) } 
  $Is(server#0, Tclass._2_raft.ServerVars())
     ==> _2_raft.__default.InitServerVars#requires(server#0) == true);

// definition axiom for _2_raft.__default.InitServerVars(revealed)
axiom true
   ==> (forall server#0: DatatypeType :: 
    { _2_raft.__default.InitServerVars(server#0) } 
    _2_raft.__default.InitServerVars#canCall(server#0)
         || $Is(server#0, Tclass._2_raft.ServerVars())
       ==> _2_raft.ServerVars.ServerVars_q(server#0)
         && (_2_raft.ServerVars.currentTerm(server#0) == LitInt(1)
           ==> $IsA#_2_raft.ServerState(_2_raft.ServerVars.state(server#0))
             && _2_raft.ServerVars.ServerVars_q(server#0))
         && ($IsA#_2_raft.ServerState(_2_raft.ServerVars.state(server#0))
             && _2_raft.ServerVars.ServerVars_q(server#0)
             && _2_raft.ServerVars.state(server#0) == Lit(#raft.ServerState.Follower())
           ==> $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(server#0))
             && _2_raft.ServerVars.ServerVars_q(server#0))
         && _2_raft.__default.InitServerVars(server#0)
           == (
            _2_raft.ServerVars.currentTerm(server#0) == LitInt(1)
             && _2_raft.ServerVars.state(server#0) == Lit(#raft.ServerState.Follower())
             && _2_raft.ServerVars.votedFor(server#0) == Lit(#MissingLibrary.Option.None())));

// definition axiom for _2_raft.__default.InitServerVars for all literals(revealed)
axiom true
   ==> (forall server#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.InitServerVars(Lit(server#0)) } 
    _2_raft.__default.InitServerVars#canCall(Lit(server#0))
         || $Is(server#0, Tclass._2_raft.ServerVars())
       ==> _2_raft.ServerVars.ServerVars_q(Lit(server#0))
         && (LitInt(_2_raft.ServerVars.currentTerm(Lit(server#0))) == LitInt(1)
           ==> $IsA#_2_raft.ServerState(Lit(_2_raft.ServerVars.state(Lit(server#0))))
             && _2_raft.ServerVars.ServerVars_q(Lit(server#0)))
         && ($IsA#_2_raft.ServerState(Lit(_2_raft.ServerVars.state(Lit(server#0))))
             && _2_raft.ServerVars.ServerVars_q(Lit(server#0))
             && Lit(_2_raft.ServerVars.state(Lit(server#0)))
               == Lit(#raft.ServerState.Follower())
           ==> $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(server#0))))
             && _2_raft.ServerVars.ServerVars_q(Lit(server#0)))
         && _2_raft.__default.InitServerVars(Lit(server#0))
           == (
            LitInt(_2_raft.ServerVars.currentTerm(Lit(server#0))) == LitInt(1)
             && Lit(_2_raft.ServerVars.state(Lit(server#0)))
               == Lit(#raft.ServerState.Follower())
             && Lit(_2_raft.ServerVars.votedFor(Lit(server#0)))
               == Lit(#MissingLibrary.Option.None())));

// function declaration for raft._default.InitCandidateVars
function _2_raft.__default.InitCandidateVars(c#0: DatatypeType) : bool;

function _2_raft.__default.InitCandidateVars#canCall(c#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.InitCandidateVars
axiom true
   ==> (forall c#0: DatatypeType :: 
    { _2_raft.__default.InitCandidateVars(c#0) } 
    _2_raft.__default.InitCandidateVars#canCall(c#0)
         || $Is(c#0, Tclass._2_raft.CandidateVars())
       ==> true);

function _2_raft.__default.InitCandidateVars#requires(DatatypeType) : bool;

// #requires axiom for _2_raft.__default.InitCandidateVars
axiom (forall c#0: DatatypeType :: 
  { _2_raft.__default.InitCandidateVars#requires(c#0) } 
  $Is(c#0, Tclass._2_raft.CandidateVars())
     ==> _2_raft.__default.InitCandidateVars#requires(c#0) == true);

// definition axiom for _2_raft.__default.InitCandidateVars(revealed)
axiom true
   ==> (forall c#0: DatatypeType :: 
    { _2_raft.__default.InitCandidateVars(c#0) } 
    _2_raft.__default.InitCandidateVars#canCall(c#0)
         || $Is(c#0, Tclass._2_raft.CandidateVars())
       ==> _2_raft.CandidateVars.CandidateVars_q(c#0)
         && (Set#Equal(_2_raft.CandidateVars.votesResponded(c#0), Set#Empty(): Set Box)
           ==> _2_raft.CandidateVars.CandidateVars_q(c#0))
         && _2_raft.__default.InitCandidateVars(c#0)
           == (Set#Equal(_2_raft.CandidateVars.votesResponded(c#0), Set#Empty(): Set Box)
             && Set#Equal(_2_raft.CandidateVars.votesGranted(c#0), Set#Empty(): Set Box)));

// definition axiom for _2_raft.__default.InitCandidateVars for all literals(revealed)
axiom true
   ==> (forall c#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.InitCandidateVars(Lit(c#0)) } 
    _2_raft.__default.InitCandidateVars#canCall(Lit(c#0))
         || $Is(c#0, Tclass._2_raft.CandidateVars())
       ==> _2_raft.CandidateVars.CandidateVars_q(Lit(c#0))
         && (Set#Equal(_2_raft.CandidateVars.votesResponded(Lit(c#0)), Set#Empty(): Set Box)
           ==> _2_raft.CandidateVars.CandidateVars_q(Lit(c#0)))
         && _2_raft.__default.InitCandidateVars(Lit(c#0))
           == (Set#Equal(_2_raft.CandidateVars.votesResponded(Lit(c#0)), Set#Empty(): Set Box)
             && Set#Equal(_2_raft.CandidateVars.votesGranted(Lit(c#0)), Set#Empty(): Set Box)));

// function declaration for raft._default.MapAll
function _2_raft.__default.MapAll($ly: LayerType, i#0: int) : Map Box Box;

function _2_raft.__default.MapAll#canCall(i#0: int) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, i#0: int :: 
  { _2_raft.__default.MapAll($LS($ly), i#0) } 
  _2_raft.__default.MapAll($LS($ly), i#0) == _2_raft.__default.MapAll($ly, i#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, i#0: int :: 
  { _2_raft.__default.MapAll(AsFuelBottom($ly), i#0) } 
  _2_raft.__default.MapAll($ly, i#0) == _2_raft.__default.MapAll($LZ, i#0));

// consequence axiom for _2_raft.__default.MapAll
axiom true
   ==> (forall $ly: LayerType, i#0: int :: 
    { _2_raft.__default.MapAll($ly, i#0) } 
    true
       ==> Set#Equal(Map#Domain(_2_raft.__default.MapAll($ly, i#0)), _2_raft.__default.ServerIDs())
         && (forall s#5: Box :: 
          { $Unbox(Map#Elements(_2_raft.__default.MapAll($ly, i#0))[s#5]): int } 
            { Map#Domain(_2_raft.__default.MapAll($ly, i#0))[s#5] } 
          $IsBox(s#5, #$ServerID)
             ==> 
            Map#Domain(_2_raft.__default.MapAll($ly, i#0))[s#5]
             ==> $Unbox(Map#Elements(_2_raft.__default.MapAll($ly, i#0))[s#5]): int == i#0)
         && $Is(_2_raft.__default.MapAll($ly, i#0), TMap(#$ServerID, TInt)));

function _2_raft.__default.MapAll#requires(LayerType, int) : bool;

// #requires axiom for _2_raft.__default.MapAll
axiom (forall $ly: LayerType, i#0: int :: 
  { _2_raft.__default.MapAll#requires($ly, i#0) } 
  _2_raft.__default.MapAll#requires($ly, i#0) == true);

// definition axiom for _2_raft.__default.MapAll(revealed)
axiom true
   ==> (forall $ly: LayerType, i#0: int :: 
    { _2_raft.__default.MapAll($LS($ly), i#0) } 
    true
       ==> (forall s#1: Box :: 
          { _2_raft.__default.ServerIDs()[s#1] } 
          $IsBox(s#1, #$ServerID) ==> _2_raft.__default.ServerIDs#canCall())
         && _2_raft.__default.MapAll($LS($ly), i#0)
           == Map#Glue((lambda $w#3: Box :: 
              $IsBox($w#3, #$ServerID) && _2_raft.__default.ServerIDs()[$w#3]), 
            (lambda $w#3: Box :: $Box(i#0)), 
            TMap(#$ServerID, TInt)));

// definition axiom for _2_raft.__default.MapAll for all literals(revealed)
axiom true
   ==> (forall $ly: LayerType, i#0: int :: 
    {:weight 3} { _2_raft.__default.MapAll($LS($ly), LitInt(i#0)) } 
    true
       ==> (forall s#1: Box :: 
          { _2_raft.__default.ServerIDs()[s#1] } 
          $IsBox(s#1, #$ServerID) ==> _2_raft.__default.ServerIDs#canCall())
         && _2_raft.__default.MapAll($LS($ly), LitInt(i#0))
           == Map#Glue((lambda $w#4: Box :: 
              $IsBox($w#4, #$ServerID) && _2_raft.__default.ServerIDs()[$w#4]), 
            (lambda $w#4: Box :: $Box(LitInt(i#0))), 
            TMap(#$ServerID, TInt)));

// function declaration for raft._default.InitLeaderVars
function _2_raft.__default.InitLeaderVars(l#0: DatatypeType) : bool;

function _2_raft.__default.InitLeaderVars#canCall(l#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.InitLeaderVars
axiom true
   ==> (forall l#0: DatatypeType :: 
    { _2_raft.__default.InitLeaderVars(l#0) } 
    _2_raft.__default.InitLeaderVars#canCall(l#0)
         || $Is(l#0, Tclass._2_raft.LeaderVars())
       ==> true);

function _2_raft.__default.InitLeaderVars#requires(DatatypeType) : bool;

// #requires axiom for _2_raft.__default.InitLeaderVars
axiom (forall l#0: DatatypeType :: 
  { _2_raft.__default.InitLeaderVars#requires(l#0) } 
  $Is(l#0, Tclass._2_raft.LeaderVars())
     ==> _2_raft.__default.InitLeaderVars#requires(l#0) == true);

// definition axiom for _2_raft.__default.InitLeaderVars(revealed)
axiom true
   ==> (forall l#0: DatatypeType :: 
    { _2_raft.__default.InitLeaderVars(l#0) } 
    _2_raft.__default.InitLeaderVars#canCall(l#0)
         || $Is(l#0, Tclass._2_raft.LeaderVars())
       ==> _2_raft.LeaderVars.LeaderVars_q(l#0)
         && _2_raft.__default.MapAll#canCall(LitInt(1))
         && (Map#Equal(_2_raft.LeaderVars.nextIndex(l#0), 
            _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, LitInt(1)))
           ==> _2_raft.LeaderVars.LeaderVars_q(l#0)
             && _2_raft.__default.MapAll#canCall(LitInt(0)))
         && _2_raft.__default.InitLeaderVars(l#0)
           == (Map#Equal(_2_raft.LeaderVars.nextIndex(l#0), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, LitInt(1)))
             && Map#Equal(_2_raft.LeaderVars.matchIndex(l#0), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, LitInt(0)))));

// definition axiom for _2_raft.__default.InitLeaderVars for all literals(revealed)
axiom true
   ==> (forall l#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.InitLeaderVars(Lit(l#0)) } 
    _2_raft.__default.InitLeaderVars#canCall(Lit(l#0))
         || $Is(l#0, Tclass._2_raft.LeaderVars())
       ==> _2_raft.LeaderVars.LeaderVars_q(Lit(l#0))
         && _2_raft.__default.MapAll#canCall(LitInt(1))
         && (Map#Equal(_2_raft.LeaderVars.nextIndex(Lit(l#0)), 
            _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, LitInt(1)))
           ==> _2_raft.LeaderVars.LeaderVars_q(Lit(l#0))
             && _2_raft.__default.MapAll#canCall(LitInt(0)))
         && _2_raft.__default.InitLeaderVars(Lit(l#0))
           == (Map#Equal(_2_raft.LeaderVars.nextIndex(Lit(l#0)), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, LitInt(1)))
             && Map#Equal(_2_raft.LeaderVars.matchIndex(Lit(l#0)), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, LitInt(0)))));

// function declaration for raft._default.InitLogVars
function _2_raft.__default.InitLogVars(l#0: DatatypeType) : bool;

function _2_raft.__default.InitLogVars#canCall(l#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.InitLogVars
axiom true
   ==> (forall l#0: DatatypeType :: 
    { _2_raft.__default.InitLogVars(l#0) } 
    _2_raft.__default.InitLogVars#canCall(l#0) || $Is(l#0, Tclass._2_raft.LogVars())
       ==> true);

function _2_raft.__default.InitLogVars#requires(DatatypeType) : bool;

// #requires axiom for _2_raft.__default.InitLogVars
axiom (forall l#0: DatatypeType :: 
  { _2_raft.__default.InitLogVars#requires(l#0) } 
  $Is(l#0, Tclass._2_raft.LogVars())
     ==> _2_raft.__default.InitLogVars#requires(l#0) == true);

// definition axiom for _2_raft.__default.InitLogVars(revealed)
axiom true
   ==> (forall l#0: DatatypeType :: 
    { _2_raft.__default.InitLogVars(l#0) } 
    _2_raft.__default.InitLogVars#canCall(l#0) || $Is(l#0, Tclass._2_raft.LogVars())
       ==> _2_raft.LogVars.LogVars_q(l#0)
         && (Seq#Equal(_2_raft.LogVars.log(l#0), Seq#Empty(): Seq Box)
           ==> _2_raft.LogVars.LogVars_q(l#0))
         && _2_raft.__default.InitLogVars(l#0)
           == (Seq#Equal(_2_raft.LogVars.log(l#0), Seq#Empty(): Seq Box)
             && _2_raft.LogVars.commitIndex(l#0) == LitInt(0)));

// definition axiom for _2_raft.__default.InitLogVars for all literals(revealed)
axiom true
   ==> (forall l#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.InitLogVars(Lit(l#0)) } 
    _2_raft.__default.InitLogVars#canCall(Lit(l#0))
         || $Is(l#0, Tclass._2_raft.LogVars())
       ==> _2_raft.LogVars.LogVars_q(Lit(l#0))
         && (Seq#Equal(_2_raft.LogVars.log(Lit(l#0)), Seq#Empty(): Seq Box)
           ==> _2_raft.LogVars.LogVars_q(Lit(l#0)))
         && _2_raft.__default.InitLogVars(Lit(l#0))
           == (Seq#Equal(_2_raft.LogVars.log(Lit(l#0)), Seq#Empty(): Seq Box)
             && LitInt(_2_raft.LogVars.commitIndex(Lit(l#0))) == LitInt(0)));

// function declaration for raft._default.InitHostVars
function _2_raft.__default.InitHostVars(h#0: DatatypeType) : bool;

function _2_raft.__default.InitHostVars#canCall(h#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.InitHostVars
axiom true
   ==> (forall h#0: DatatypeType :: 
    { _2_raft.__default.InitHostVars(h#0) } 
    _2_raft.__default.InitHostVars#canCall(h#0)
         || $Is(h#0, Tclass._2_raft.HostVars())
       ==> true);

function _2_raft.__default.InitHostVars#requires(DatatypeType) : bool;

// #requires axiom for _2_raft.__default.InitHostVars
axiom (forall h#0: DatatypeType :: 
  { _2_raft.__default.InitHostVars#requires(h#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
     ==> _2_raft.__default.InitHostVars#requires(h#0) == true);

// definition axiom for _2_raft.__default.InitHostVars(revealed)
axiom true
   ==> (forall h#0: DatatypeType :: 
    { _2_raft.__default.InitHostVars(h#0) } 
    _2_raft.__default.InitHostVars#canCall(h#0)
         || $Is(h#0, Tclass._2_raft.HostVars())
       ==> _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.__default.InitServerVars#canCall(_2_raft.HostVars.server(h#0))
         && (_2_raft.__default.InitServerVars(_2_raft.HostVars.server(h#0))
           ==> _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.__default.InitLogVars#canCall(_2_raft.HostVars.log(h#0)))
         && (_2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.__default.InitLogVars#canCall(_2_raft.HostVars.log(h#0))
             && _2_raft.__default.InitLogVars(_2_raft.HostVars.log(h#0))
           ==> _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.__default.InitCandidateVars#canCall(_2_raft.HostVars.candidate(h#0)))
         && (_2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.__default.InitCandidateVars#canCall(_2_raft.HostVars.candidate(h#0))
             && _2_raft.__default.InitCandidateVars(_2_raft.HostVars.candidate(h#0))
           ==> _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.__default.InitLeaderVars#canCall(_2_raft.HostVars.leader(h#0)))
         && _2_raft.__default.InitHostVars(h#0)
           == (
            _2_raft.__default.InitServerVars(_2_raft.HostVars.server(h#0))
             && _2_raft.__default.InitLogVars(_2_raft.HostVars.log(h#0))
             && _2_raft.__default.InitCandidateVars(_2_raft.HostVars.candidate(h#0))
             && _2_raft.__default.InitLeaderVars(_2_raft.HostVars.leader(h#0))));

// definition axiom for _2_raft.__default.InitHostVars for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.InitHostVars(Lit(h#0)) } 
    _2_raft.__default.InitHostVars#canCall(Lit(h#0))
         || $Is(h#0, Tclass._2_raft.HostVars())
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.__default.InitServerVars#canCall(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && (Lit(_2_raft.__default.InitServerVars(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.__default.InitLogVars#canCall(Lit(_2_raft.HostVars.log(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.__default.InitLogVars#canCall(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && Lit(_2_raft.__default.InitLogVars(Lit(_2_raft.HostVars.log(Lit(h#0)))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.__default.InitCandidateVars#canCall(Lit(_2_raft.HostVars.candidate(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.__default.InitCandidateVars#canCall(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && Lit(_2_raft.__default.InitCandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0)))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.__default.InitLeaderVars#canCall(Lit(_2_raft.HostVars.leader(Lit(h#0)))))
         && _2_raft.__default.InitHostVars(Lit(h#0))
           == Lit(_2_raft.__default.InitServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
               && _2_raft.__default.InitLogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
               && _2_raft.__default.InitCandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
               && _2_raft.__default.InitLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))));

// function declaration for raft._default.InitGlobalVars
function _2_raft.__default.InitGlobalVars(g#0: DatatypeType) : bool;

function _2_raft.__default.InitGlobalVars#canCall(g#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.InitGlobalVars
axiom true
   ==> (forall g#0: DatatypeType :: 
    { _2_raft.__default.InitGlobalVars(g#0) } 
    _2_raft.__default.InitGlobalVars#canCall(g#0)
         || $Is(g#0, Tclass._2_raft.GlobalVars())
       ==> true);

function _2_raft.__default.InitGlobalVars#requires(DatatypeType) : bool;

// #requires axiom for _2_raft.__default.InitGlobalVars
axiom (forall g#0: DatatypeType :: 
  { _2_raft.__default.InitGlobalVars#requires(g#0) } 
  $Is(g#0, Tclass._2_raft.GlobalVars())
     ==> _2_raft.__default.InitGlobalVars#requires(g#0) == true);

// definition axiom for _2_raft.__default.InitGlobalVars(revealed)
axiom true
   ==> (forall g#0: DatatypeType :: 
    { _2_raft.__default.InitGlobalVars(g#0) } 
    _2_raft.__default.InitGlobalVars#canCall(g#0)
         || $Is(g#0, Tclass._2_raft.GlobalVars())
       ==> (Lit(true) ==> _2_raft.GlobalVars.GlobalVars_q(g#0))
         && _2_raft.__default.InitGlobalVars(g#0)
           == (true
             && MultiSet#Equal(_2_raft.GlobalVars.messages(g#0), MultiSet#Empty(): MultiSet Box)));

// definition axiom for _2_raft.__default.InitGlobalVars for all literals(revealed)
axiom true
   ==> (forall g#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.InitGlobalVars(Lit(g#0)) } 
    _2_raft.__default.InitGlobalVars#canCall(Lit(g#0))
         || $Is(g#0, Tclass._2_raft.GlobalVars())
       ==> (Lit(true) ==> _2_raft.GlobalVars.GlobalVars_q(Lit(g#0)))
         && _2_raft.__default.InitGlobalVars(Lit(g#0))
           == (true
             && MultiSet#Equal(_2_raft.GlobalVars.messages(Lit(g#0)), MultiSet#Empty(): MultiSet Box)));

// function declaration for raft._default.Init
function _2_raft.__default.Init(v#0: DatatypeType) : bool;

function _2_raft.__default.Init#canCall(v#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.Init
axiom true
   ==> (forall v#0: DatatypeType :: 
    { _2_raft.__default.Init(v#0) } 
    _2_raft.__default.Init#canCall(v#0) || $Is(v#0, Tclass._2_raft.Variables())
       ==> true);

function _2_raft.__default.Init#requires(DatatypeType) : bool;

// #requires axiom for _2_raft.__default.Init
axiom (forall v#0: DatatypeType :: 
  { _2_raft.__default.Init#requires(v#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
     ==> _2_raft.__default.Init#requires(v#0) == true);

// definition axiom for _2_raft.__default.Init(revealed)
axiom true
   ==> (forall v#0: DatatypeType :: 
    { _2_raft.__default.Init(v#0) } 
    _2_raft.__default.Init#canCall(v#0) || $Is(v#0, Tclass._2_raft.Variables())
       ==> _2_raft.Variables.Variables_q(v#0)
         && _2_raft.__default.InitGlobalVars#canCall(_2_raft.Variables.global(v#0))
         && (_2_raft.__default.InitGlobalVars(_2_raft.Variables.global(v#0))
           ==> _2_raft.__default.InitHistoryVars#canCall(v#0))
         && (_2_raft.__default.InitHistoryVars#canCall(v#0)
             && _2_raft.__default.InitHistoryVars(v#0)
           ==> (forall s#4: Box :: 
            { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#4]): DatatypeType } 
              { _2_raft.__default.ServerIDs()[s#4] } 
            $IsBox(s#4, #$ServerID)
               ==> _2_raft.__default.ServerIDs#canCall()
                 && (_2_raft.__default.ServerIDs()[s#4]
                   ==> _2_raft.Variables.Variables_q(v#0)
                     && _2_raft.__default.InitHostVars#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#4]): DatatypeType))))
         && _2_raft.__default.Init(v#0)
           == (
            _2_raft.__default.InitGlobalVars(_2_raft.Variables.global(v#0))
             && _2_raft.__default.InitHistoryVars(v#0)
             && (forall s#4: Box :: 
              { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#4]): DatatypeType } 
                { _2_raft.__default.ServerIDs()[s#4] } 
              $IsBox(s#4, #$ServerID)
                 ==> 
                _2_raft.__default.ServerIDs()[s#4]
                 ==> _2_raft.__default.InitHostVars($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#4]): DatatypeType))));

// definition axiom for _2_raft.__default.Init for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.Init(Lit(v#0)) } 
    _2_raft.__default.Init#canCall(Lit(v#0)) || $Is(v#0, Tclass._2_raft.Variables())
       ==> _2_raft.Variables.Variables_q(Lit(v#0))
         && _2_raft.__default.InitGlobalVars#canCall(Lit(_2_raft.Variables.global(Lit(v#0))))
         && (Lit(_2_raft.__default.InitGlobalVars(Lit(_2_raft.Variables.global(Lit(v#0)))))
           ==> _2_raft.__default.InitHistoryVars#canCall(Lit(v#0)))
         && (_2_raft.__default.InitHistoryVars#canCall(Lit(v#0))
             && Lit(_2_raft.__default.InitHistoryVars(Lit(v#0)))
           ==> (forall s#5: Box :: 
            { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#5]): DatatypeType } 
              { _2_raft.__default.ServerIDs()[s#5] } 
            $IsBox(s#5, #$ServerID)
               ==> _2_raft.__default.ServerIDs#canCall()
                 && (_2_raft.__default.ServerIDs()[s#5]
                   ==> _2_raft.Variables.Variables_q(Lit(v#0))
                     && _2_raft.__default.InitHostVars#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#5]): DatatypeType))))
         && _2_raft.__default.Init(Lit(v#0))
           == (
            _2_raft.__default.InitGlobalVars(Lit(_2_raft.Variables.global(Lit(v#0))))
             && _2_raft.__default.InitHistoryVars(Lit(v#0))
             && (forall s#5: Box :: 
              { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#5]): DatatypeType } 
                { _2_raft.__default.ServerIDs()[s#5] } 
              $IsBox(s#5, #$ServerID)
                 ==> 
                _2_raft.__default.ServerIDs()[s#5]
                 ==> _2_raft.__default.InitHostVars($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#5]): DatatypeType))));

// function declaration for raft._default.RestartHost
function _2_raft.__default.RestartHost(h#0: DatatypeType, h'#0: DatatypeType) : bool;

function _2_raft.__default.RestartHost#canCall(h#0: DatatypeType, h'#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.RestartHost
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType :: 
    { _2_raft.__default.RestartHost(h#0, h'#0) } 
    _2_raft.__default.RestartHost#canCall(h#0, h'#0)
         || ($Is(h#0, Tclass._2_raft.HostVars()) && $Is(h'#0, Tclass._2_raft.HostVars()))
       ==> true);

function _2_raft.__default.RestartHost#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.RestartHost
axiom (forall h#0: DatatypeType, h'#0: DatatypeType :: 
  { _2_raft.__default.RestartHost#requires(h#0, h'#0) } 
  $Is(h#0, Tclass._2_raft.HostVars()) && $Is(h'#0, Tclass._2_raft.HostVars())
     ==> _2_raft.__default.RestartHost#requires(h#0, h'#0) == true);

// definition axiom for _2_raft.__default.RestartHost(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType :: 
    { _2_raft.__default.RestartHost(h#0, h'#0) } 
    _2_raft.__default.RestartHost#canCall(h#0, h'#0)
         || ($Is(h#0, Tclass._2_raft.HostVars()) && $Is(h'#0, Tclass._2_raft.HostVars()))
       ==> $IsA#_2_raft.ServerState(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
         && 
        _2_raft.HostVars.HostVars_q(h'#0)
         && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
         && (_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0))
             == Lit(#raft.ServerState.Follower())
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0))
             && Set#Equal(_2_raft.CandidateVars.votesResponded(_2_raft.HostVars.candidate(h'#0)), 
              Set#Empty(): Set Box)
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0))
             && Set#Equal(_2_raft.CandidateVars.votesGranted(_2_raft.HostVars.candidate(h'#0)), 
              Set#Empty(): Set Box)
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0))
             && _2_raft.__default.EmptyVoterLog#canCall())
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0))
             && _2_raft.__default.EmptyVoterLog#canCall()
             && Map#Equal(_2_raft.CandidateVars.voterLog(_2_raft.HostVars.candidate(h'#0)), 
              _2_raft.__default.EmptyVoterLog())
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
             && _2_raft.__default.MapAll#canCall(LitInt(1)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
             && _2_raft.__default.MapAll#canCall(LitInt(1))
             && Map#Equal(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h'#0)), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, LitInt(1)))
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
             && _2_raft.__default.MapAll#canCall(LitInt(0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
             && _2_raft.__default.MapAll#canCall(LitInt(0))
             && Map#Equal(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h'#0)), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, LitInt(0)))
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h'#0)) == LitInt(0)
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
             && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
               == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
           ==> $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
             && $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
         && ($IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
             && $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
             && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
               == _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0))
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0)))
         && _2_raft.__default.RestartHost(h#0, h'#0)
           == (
            _2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0))
               == Lit(#raft.ServerState.Follower())
             && Set#Equal(_2_raft.CandidateVars.votesResponded(_2_raft.HostVars.candidate(h'#0)), 
              Set#Empty(): Set Box)
             && Set#Equal(_2_raft.CandidateVars.votesGranted(_2_raft.HostVars.candidate(h'#0)), 
              Set#Empty(): Set Box)
             && Map#Equal(_2_raft.CandidateVars.voterLog(_2_raft.HostVars.candidate(h'#0)), 
              _2_raft.__default.EmptyVoterLog())
             && Map#Equal(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h'#0)), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, LitInt(1)))
             && Map#Equal(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h'#0)), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, LitInt(0)))
             && _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h'#0)) == LitInt(0)
             && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
               == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
             && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
               == _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0))
             && Seq#Equal(_2_raft.LogVars.log(_2_raft.HostVars.log(h'#0)), 
              _2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))));

// definition axiom for _2_raft.__default.RestartHost for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.RestartHost(Lit(h#0), Lit(h'#0)) } 
    _2_raft.__default.RestartHost#canCall(Lit(h#0), Lit(h'#0))
         || ($Is(h#0, Tclass._2_raft.HostVars()) && $Is(h'#0, Tclass._2_raft.HostVars()))
       ==> $IsA#_2_raft.ServerState(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h'#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
         && (Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
             == Lit(#raft.ServerState.Follower())
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && Set#Equal(_2_raft.CandidateVars.votesResponded(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              Set#Empty(): Set Box)
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && Set#Equal(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              Set#Empty(): Set Box)
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && _2_raft.__default.EmptyVoterLog#canCall())
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && _2_raft.__default.EmptyVoterLog#canCall()
             && Map#Equal(_2_raft.CandidateVars.voterLog(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              _2_raft.__default.EmptyVoterLog())
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && _2_raft.__default.MapAll#canCall(LitInt(1)))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && _2_raft.__default.MapAll#canCall(LitInt(1))
             && Map#Equal(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, LitInt(1)))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && _2_raft.__default.MapAll#canCall(LitInt(0)))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && _2_raft.__default.MapAll#canCall(LitInt(0))
             && Map#Equal(_2_raft.LeaderVars.matchIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, LitInt(0)))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h'#0)))))
               == LitInt(0)
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
         && ($IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
         && _2_raft.__default.RestartHost(Lit(h#0), Lit(h'#0))
           == (
            Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == Lit(#raft.ServerState.Follower())
             && Set#Equal(_2_raft.CandidateVars.votesResponded(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              Set#Empty(): Set Box)
             && Set#Equal(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              Set#Empty(): Set Box)
             && Map#Equal(_2_raft.CandidateVars.voterLog(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              _2_raft.__default.EmptyVoterLog())
             && Map#Equal(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, LitInt(1)))
             && Map#Equal(_2_raft.LeaderVars.matchIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, LitInt(0)))
             && LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h'#0)))))
               == LitInt(0)
             && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && Seq#Equal(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h'#0)))), 
              _2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))));

// function declaration for raft._default.UnchangedAllHosts
function _2_raft.__default.UnchangedAllHosts(v#0: DatatypeType, v'#0: DatatypeType) : bool;

function _2_raft.__default.UnchangedAllHosts#canCall(v#0: DatatypeType, v'#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.UnchangedAllHosts
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType :: 
    { _2_raft.__default.UnchangedAllHosts(v#0, v'#0) } 
    _2_raft.__default.UnchangedAllHosts#canCall(v#0, v'#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> true);

function _2_raft.__default.UnchangedAllHosts#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.UnchangedAllHosts
axiom (forall v#0: DatatypeType, v'#0: DatatypeType :: 
  { _2_raft.__default.UnchangedAllHosts#requires(v#0, v'#0) } 
  $Is(v#0, Tclass._2_raft.Variables()) && $Is(v'#0, Tclass._2_raft.Variables())
     ==> _2_raft.__default.UnchangedAllHosts#requires(v#0, v'#0)
       == (_2_raft.__default.WFVars(v#0) && _2_raft.__default.WFVars(v'#0)));

// definition axiom for _2_raft.__default.UnchangedAllHosts(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType :: 
    { _2_raft.__default.UnchangedAllHosts(v#0, v'#0) } 
    _2_raft.__default.UnchangedAllHosts#canCall(v#0, v'#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> _2_raft.Variables.Variables_q(v'#0)
         && _2_raft.Variables.Variables_q(v#0)
         && _2_raft.__default.UnchangedAllHosts(v#0, v'#0)
           == Map#Equal(_2_raft.Variables.host(v'#0), _2_raft.Variables.host(v#0)));

// definition axiom for _2_raft.__default.UnchangedAllHosts for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.UnchangedAllHosts(Lit(v#0), Lit(v'#0)) } 
    _2_raft.__default.UnchangedAllHosts#canCall(Lit(v#0), Lit(v'#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.Variables.Variables_q(Lit(v'#0))
         && _2_raft.Variables.Variables_q(Lit(v#0))
         && _2_raft.__default.UnchangedAllHosts(Lit(v#0), Lit(v'#0))
           == Map#Equal(_2_raft.Variables.host(Lit(v'#0)), _2_raft.Variables.host(Lit(v#0))));

// function declaration for raft._default.UnchangedOtherHosts
function _2_raft.__default.UnchangedOtherHosts(v#0: DatatypeType, v'#0: DatatypeType, s#0: Box) : bool;

function _2_raft.__default.UnchangedOtherHosts#canCall(v#0: DatatypeType, v'#0: DatatypeType, s#0: Box) : bool;

// consequence axiom for _2_raft.__default.UnchangedOtherHosts
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, s#0: Box :: 
    { _2_raft.__default.UnchangedOtherHosts(v#0, v'#0, s#0) } 
    _2_raft.__default.UnchangedOtherHosts#canCall(v#0, v'#0, s#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(s#0, #$ServerID)
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0)
           && _2_raft.__default.ServerIDs()[s#0])
       ==> true);

function _2_raft.__default.UnchangedOtherHosts#requires(DatatypeType, DatatypeType, Box) : bool;

// #requires axiom for _2_raft.__default.UnchangedOtherHosts
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, s#0: Box :: 
  { _2_raft.__default.UnchangedOtherHosts#requires(v#0, v'#0, s#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $IsBox(s#0, #$ServerID)
     ==> _2_raft.__default.UnchangedOtherHosts#requires(v#0, v'#0, s#0)
       == (
        _2_raft.__default.WFVars(v#0)
         && _2_raft.__default.WFVars(v'#0)
         && _2_raft.__default.ServerIDs()[s#0]));

// definition axiom for _2_raft.__default.UnchangedOtherHosts(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, s#0: Box :: 
    { _2_raft.__default.UnchangedOtherHosts(v#0, v'#0, s#0) } 
    _2_raft.__default.UnchangedOtherHosts#canCall(v#0, v'#0, s#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(s#0, #$ServerID)
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0)
           && _2_raft.__default.ServerIDs()[s#0])
       ==> (forall s2#5: Box :: 
          { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s2#5]): DatatypeType } 
            { $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s2#5]): DatatypeType } 
            { _2_raft.__default.ServerIDs()[s2#5] } 
          $IsBox(s2#5, #$ServerID)
             ==> _2_raft.__default.ServerIDs#canCall()
               && (s2#5 != s#0
                 ==> $IsA#_2_raft.HostVars($Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s2#5]): DatatypeType)
                   && $IsA#_2_raft.HostVars($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s2#5]): DatatypeType)
                   && 
                  _2_raft.Variables.Variables_q(v'#0)
                   && _2_raft.Variables.Variables_q(v#0)))
         && _2_raft.__default.UnchangedOtherHosts(v#0, v'#0, s#0)
           == (forall s2#5: Box :: 
            { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s2#5]): DatatypeType } 
              { $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s2#5]): DatatypeType } 
              { _2_raft.__default.ServerIDs()[s2#5] } 
            $IsBox(s2#5, #$ServerID)
               ==> 
              _2_raft.__default.ServerIDs()[s2#5] && s2#5 != s#0
               ==> $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s2#5]): DatatypeType
                 == $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s2#5]): DatatypeType));

// definition axiom for _2_raft.__default.UnchangedOtherHosts for decreasing-related literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, s#0: Box :: 
    {:weight 3} { _2_raft.__default.UnchangedOtherHosts(Lit(v#0), Lit(v'#0), s#0) } 
    _2_raft.__default.UnchangedOtherHosts#canCall(Lit(v#0), Lit(v'#0), s#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(s#0, #$ServerID)
           && 
          Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0)))
           && _2_raft.__default.ServerIDs()[s#0])
       ==> (forall s2#6: Box :: 
          { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s2#6]): DatatypeType } 
            { $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s2#6]): DatatypeType } 
            { _2_raft.__default.ServerIDs()[s2#6] } 
          $IsBox(s2#6, #$ServerID)
             ==> _2_raft.__default.ServerIDs#canCall()
               && (s2#6 != s#0
                 ==> $IsA#_2_raft.HostVars($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[s2#6]): DatatypeType)
                   && $IsA#_2_raft.HostVars($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s2#6]): DatatypeType)
                   && 
                  _2_raft.Variables.Variables_q(Lit(v'#0))
                   && _2_raft.Variables.Variables_q(Lit(v#0))))
         && _2_raft.__default.UnchangedOtherHosts(Lit(v#0), Lit(v'#0), s#0)
           == (forall s2#6: Box :: 
            { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s2#6]): DatatypeType } 
              { $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s2#6]): DatatypeType } 
              { _2_raft.__default.ServerIDs()[s2#6] } 
            $IsBox(s2#6, #$ServerID)
               ==> 
              _2_raft.__default.ServerIDs()[s2#6] && s2#6 != s#0
               ==> $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[s2#6]): DatatypeType
                 == $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s2#6]): DatatypeType));

// definition axiom for _2_raft.__default.UnchangedOtherHosts for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, s#0: Box :: 
    {:weight 3} { _2_raft.__default.UnchangedOtherHosts(Lit(v#0), Lit(v'#0), Lit(s#0)) } 
    _2_raft.__default.UnchangedOtherHosts#canCall(Lit(v#0), Lit(v'#0), Lit(s#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(s#0, #$ServerID)
           && 
          Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0)))
           && _2_raft.__default.ServerIDs()[Lit(s#0)])
       ==> (forall s2#7: Box :: 
          { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s2#7]): DatatypeType } 
            { $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s2#7]): DatatypeType } 
            { _2_raft.__default.ServerIDs()[s2#7] } 
          $IsBox(s2#7, #$ServerID)
             ==> _2_raft.__default.ServerIDs#canCall()
               && (s2#7 != s#0
                 ==> $IsA#_2_raft.HostVars($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[s2#7]): DatatypeType)
                   && $IsA#_2_raft.HostVars($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s2#7]): DatatypeType)
                   && 
                  _2_raft.Variables.Variables_q(Lit(v'#0))
                   && _2_raft.Variables.Variables_q(Lit(v#0))))
         && _2_raft.__default.UnchangedOtherHosts(Lit(v#0), Lit(v'#0), Lit(s#0))
           == (forall s2#7: Box :: 
            { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s2#7]): DatatypeType } 
              { $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s2#7]): DatatypeType } 
              { _2_raft.__default.ServerIDs()[s2#7] } 
            $IsBox(s2#7, #$ServerID)
               ==> 
              _2_raft.__default.ServerIDs()[s2#7] && s2#7 != s#0
               ==> $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[s2#7]): DatatypeType
                 == $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s2#7]): DatatypeType));

// function declaration for raft._default.Restart
function _2_raft.__default.Restart(v#0: DatatypeType, v'#0: DatatypeType, s#0: Box) : bool;

function _2_raft.__default.Restart#canCall(v#0: DatatypeType, v'#0: DatatypeType, s#0: Box) : bool;

// consequence axiom for _2_raft.__default.Restart
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, s#0: Box :: 
    { _2_raft.__default.Restart(v#0, v'#0, s#0) } 
    _2_raft.__default.Restart#canCall(v#0, v'#0, s#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(s#0, #$ServerID)
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> true);

function _2_raft.__default.Restart#requires(DatatypeType, DatatypeType, Box) : bool;

// #requires axiom for _2_raft.__default.Restart
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, s#0: Box :: 
  { _2_raft.__default.Restart#requires(v#0, v'#0, s#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $IsBox(s#0, #$ServerID)
     ==> _2_raft.__default.Restart#requires(v#0, v'#0, s#0)
       == (_2_raft.__default.WFVars(v#0) && _2_raft.__default.WFVars(v'#0)));

// definition axiom for _2_raft.__default.Restart(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, s#0: Box :: 
    { _2_raft.__default.Restart(v#0, v'#0, s#0) } 
    _2_raft.__default.Restart#canCall(v#0, v'#0, s#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(s#0, #$ServerID)
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[s#0]
           ==> _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.Variables.Variables_q(v#0)
             && _2_raft.__default.RestartHost#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#0]): DatatypeType))
         && (_2_raft.Variables.Variables_q(v'#0)
             && _2_raft.Variables.Variables_q(v#0)
             && _2_raft.__default.RestartHost#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#0]): DatatypeType)
             && _2_raft.__default.RestartHost($Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#0]): DatatypeType)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(v'#0, v#0, s#0))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(v'#0, v#0, s#0)
             && _2_raft.__default.UnchangedOtherHosts(v'#0, v#0, s#0)
           ==> $IsA#_2_raft.GlobalVars(_2_raft.Variables.global(v'#0))
             && $IsA#_2_raft.GlobalVars(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.Variables.Variables_q(v#0))
         && _2_raft.__default.Restart(v#0, v'#0, s#0)
           == (
            _2_raft.__default.ServerIDs()[s#0]
             && _2_raft.__default.RestartHost($Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#0]): DatatypeType)
             && _2_raft.__default.UnchangedOtherHosts(v'#0, v#0, s#0)
             && _2_raft.Variables.global(v'#0) == _2_raft.Variables.global(v#0)));

// definition axiom for _2_raft.__default.Restart for decreasing-related literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, s#0: Box :: 
    {:weight 3} { _2_raft.__default.Restart(Lit(v#0), Lit(v'#0), s#0) } 
    _2_raft.__default.Restart#canCall(Lit(v#0), Lit(v'#0), s#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(s#0, #$ServerID)
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[s#0]
           ==> _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.__default.RestartHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[s#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#0]): DatatypeType))
         && (_2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.__default.RestartHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[s#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#0]): DatatypeType)
             && _2_raft.__default.RestartHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[s#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#0]): DatatypeType)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), s#0))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), s#0)
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), s#0)
           ==> $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.Variables.Variables_q(Lit(v#0)))
         && _2_raft.__default.Restart(Lit(v#0), Lit(v'#0), s#0)
           == (
            _2_raft.__default.ServerIDs()[s#0]
             && _2_raft.__default.RestartHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[s#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#0]): DatatypeType)
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), s#0)
             && Lit(_2_raft.Variables.global(Lit(v'#0)))
               == Lit(_2_raft.Variables.global(Lit(v#0)))));

// definition axiom for _2_raft.__default.Restart for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, s#0: Box :: 
    {:weight 3} { _2_raft.__default.Restart(Lit(v#0), Lit(v'#0), Lit(s#0)) } 
    _2_raft.__default.Restart#canCall(Lit(v#0), Lit(v'#0), Lit(s#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(s#0, #$ServerID)
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[Lit(s#0)]
           ==> _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.__default.RestartHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(s#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(s#0)]): DatatypeType))
         && (_2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.__default.RestartHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(s#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(s#0)]): DatatypeType)
             && _2_raft.__default.RestartHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(s#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(s#0)]): DatatypeType)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), Lit(s#0)))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), Lit(s#0))
             && Lit(_2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), Lit(s#0)))
           ==> $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.Variables.Variables_q(Lit(v#0)))
         && _2_raft.__default.Restart(Lit(v#0), Lit(v'#0), Lit(s#0))
           == (
            _2_raft.__default.ServerIDs()[Lit(s#0)]
             && _2_raft.__default.RestartHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(s#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(s#0)]): DatatypeType)
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), Lit(s#0))
             && Lit(_2_raft.Variables.global(Lit(v'#0)))
               == Lit(_2_raft.Variables.global(Lit(v#0)))));

// function declaration for raft._default.TimeoutHost
function _2_raft.__default.TimeoutHost(h#0: DatatypeType, h'#0: DatatypeType) : bool;

function _2_raft.__default.TimeoutHost#canCall(h#0: DatatypeType, h'#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.TimeoutHost
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType :: 
    { _2_raft.__default.TimeoutHost(h#0, h'#0) } 
    _2_raft.__default.TimeoutHost#canCall(h#0, h'#0)
         || ($Is(h#0, Tclass._2_raft.HostVars()) && $Is(h'#0, Tclass._2_raft.HostVars()))
       ==> true);

function _2_raft.__default.TimeoutHost#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.TimeoutHost
axiom (forall h#0: DatatypeType, h'#0: DatatypeType :: 
  { _2_raft.__default.TimeoutHost#requires(h#0, h'#0) } 
  $Is(h#0, Tclass._2_raft.HostVars()) && $Is(h'#0, Tclass._2_raft.HostVars())
     ==> _2_raft.__default.TimeoutHost#requires(h#0, h'#0) == true);

// definition axiom for _2_raft.__default.TimeoutHost(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType :: 
    { _2_raft.__default.TimeoutHost(h#0, h'#0) } 
    _2_raft.__default.TimeoutHost#canCall(h#0, h'#0)
         || ($Is(h#0, Tclass._2_raft.HostVars()) && $Is(h'#0, Tclass._2_raft.HostVars()))
       ==> _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
         && (!_2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
           ==> _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
         && (_2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
             && _2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && _2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
             && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
               == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0)) + 1
           ==> $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0)))
         && ($IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
               == Lit(#MissingLibrary.Option.None())
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0))
             && Set#Equal(_2_raft.CandidateVars.votesResponded(_2_raft.HostVars.candidate(h'#0)), 
              Set#Empty(): Set Box)
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0))
             && Set#Equal(_2_raft.CandidateVars.votesGranted(_2_raft.HostVars.candidate(h'#0)), 
              Set#Empty(): Set Box)
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0))
             && _2_raft.__default.EmptyVoterLog#canCall())
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0))
             && _2_raft.__default.EmptyVoterLog#canCall()
             && Map#Equal(_2_raft.CandidateVars.voterLog(_2_raft.HostVars.candidate(h'#0)), 
              _2_raft.__default.EmptyVoterLog())
           ==> $IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h'#0))
             && $IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && ($IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h'#0))
             && $IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.HostVars.leader(h'#0) == _2_raft.HostVars.leader(h#0)
           ==> $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
             && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && _2_raft.__default.TimeoutHost(h#0, h'#0)
           == (
            (_2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
               || _2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0))))
             && _2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
             && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
               == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0)) + 1
             && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
               == Lit(#MissingLibrary.Option.None())
             && Set#Equal(_2_raft.CandidateVars.votesResponded(_2_raft.HostVars.candidate(h'#0)), 
              Set#Empty(): Set Box)
             && Set#Equal(_2_raft.CandidateVars.votesGranted(_2_raft.HostVars.candidate(h'#0)), 
              Set#Empty(): Set Box)
             && Map#Equal(_2_raft.CandidateVars.voterLog(_2_raft.HostVars.candidate(h'#0)), 
              _2_raft.__default.EmptyVoterLog())
             && _2_raft.HostVars.leader(h'#0) == _2_raft.HostVars.leader(h#0)
             && _2_raft.HostVars.log(h'#0) == _2_raft.HostVars.log(h#0)));

// definition axiom for _2_raft.__default.TimeoutHost for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.TimeoutHost(Lit(h#0), Lit(h'#0)) } 
    _2_raft.__default.TimeoutHost#canCall(Lit(h#0), Lit(h'#0))
         || ($Is(h#0, Tclass._2_raft.HostVars()) && $Is(h'#0, Tclass._2_raft.HostVars()))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && (!Lit(_2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && Lit(_2_raft.ServerState.Candidate_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && Lit(_2_raft.ServerState.Candidate_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0)))))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))) + 1)
           ==> $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
         && ($IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == Lit(#MissingLibrary.Option.None())
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && Set#Equal(_2_raft.CandidateVars.votesResponded(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              Set#Empty(): Set Box)
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && Set#Equal(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              Set#Empty(): Set Box)
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && _2_raft.__default.EmptyVoterLog#canCall())
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && _2_raft.__default.EmptyVoterLog#canCall()
             && Map#Equal(_2_raft.CandidateVars.voterLog(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              _2_raft.__default.EmptyVoterLog())
           ==> $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.leader(Lit(h'#0)))
               == Lit(_2_raft.HostVars.leader(Lit(h#0)))
           ==> $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && _2_raft.__default.TimeoutHost(Lit(h#0), Lit(h'#0))
           == (
            (_2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
               || _2_raft.ServerState.Candidate_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
             && _2_raft.ServerState.Candidate_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))) + 1)
             && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == Lit(#MissingLibrary.Option.None())
             && Set#Equal(_2_raft.CandidateVars.votesResponded(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              Set#Empty(): Set Box)
             && Set#Equal(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              Set#Empty(): Set Box)
             && Map#Equal(_2_raft.CandidateVars.voterLog(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              _2_raft.__default.EmptyVoterLog())
             && Lit(_2_raft.HostVars.leader(Lit(h'#0)))
               == Lit(_2_raft.HostVars.leader(Lit(h#0)))
             && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0)))));

// function declaration for raft._default.Timeout
function _2_raft.__default.Timeout(v#0: DatatypeType, v'#0: DatatypeType, s#0: Box) : bool;

function _2_raft.__default.Timeout#canCall(v#0: DatatypeType, v'#0: DatatypeType, s#0: Box) : bool;

// consequence axiom for _2_raft.__default.Timeout
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, s#0: Box :: 
    { _2_raft.__default.Timeout(v#0, v'#0, s#0) } 
    _2_raft.__default.Timeout#canCall(v#0, v'#0, s#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(s#0, #$ServerID)
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> true);

function _2_raft.__default.Timeout#requires(DatatypeType, DatatypeType, Box) : bool;

// #requires axiom for _2_raft.__default.Timeout
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, s#0: Box :: 
  { _2_raft.__default.Timeout#requires(v#0, v'#0, s#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $IsBox(s#0, #$ServerID)
     ==> _2_raft.__default.Timeout#requires(v#0, v'#0, s#0)
       == (_2_raft.__default.WFVars(v#0) && _2_raft.__default.WFVars(v'#0)));

// definition axiom for _2_raft.__default.Timeout(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, s#0: Box :: 
    { _2_raft.__default.Timeout(v#0, v'#0, s#0) } 
    _2_raft.__default.Timeout#canCall(v#0, v'#0, s#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(s#0, #$ServerID)
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[s#0]
           ==> _2_raft.Variables.Variables_q(v#0)
             && _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.__default.TimeoutHost#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s#0]): DatatypeType))
         && (_2_raft.Variables.Variables_q(v#0)
             && _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.__default.TimeoutHost#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s#0]): DatatypeType)
             && _2_raft.__default.TimeoutHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s#0]): DatatypeType)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(v'#0, v#0, s#0))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(v'#0, v#0, s#0)
             && _2_raft.__default.UnchangedOtherHosts(v'#0, v#0, s#0)
           ==> $IsA#_2_raft.GlobalVars(_2_raft.Variables.global(v'#0))
             && $IsA#_2_raft.GlobalVars(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.Variables.Variables_q(v#0))
         && _2_raft.__default.Timeout(v#0, v'#0, s#0)
           == (
            _2_raft.__default.ServerIDs()[s#0]
             && _2_raft.__default.TimeoutHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[s#0]): DatatypeType)
             && _2_raft.__default.UnchangedOtherHosts(v'#0, v#0, s#0)
             && _2_raft.Variables.global(v'#0) == _2_raft.Variables.global(v#0)));

// definition axiom for _2_raft.__default.Timeout for decreasing-related literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, s#0: Box :: 
    {:weight 3} { _2_raft.__default.Timeout(Lit(v#0), Lit(v'#0), s#0) } 
    _2_raft.__default.Timeout#canCall(Lit(v#0), Lit(v'#0), s#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(s#0, #$ServerID)
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[s#0]
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.TimeoutHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[s#0]): DatatypeType))
         && (_2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.TimeoutHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[s#0]): DatatypeType)
             && _2_raft.__default.TimeoutHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[s#0]): DatatypeType)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), s#0))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), s#0)
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), s#0)
           ==> $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.Variables.Variables_q(Lit(v#0)))
         && _2_raft.__default.Timeout(Lit(v#0), Lit(v'#0), s#0)
           == (
            _2_raft.__default.ServerIDs()[s#0]
             && _2_raft.__default.TimeoutHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[s#0]): DatatypeType)
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), s#0)
             && Lit(_2_raft.Variables.global(Lit(v'#0)))
               == Lit(_2_raft.Variables.global(Lit(v#0)))));

// definition axiom for _2_raft.__default.Timeout for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, s#0: Box :: 
    {:weight 3} { _2_raft.__default.Timeout(Lit(v#0), Lit(v'#0), Lit(s#0)) } 
    _2_raft.__default.Timeout#canCall(Lit(v#0), Lit(v'#0), Lit(s#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(s#0, #$ServerID)
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[Lit(s#0)]
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.TimeoutHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(s#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(s#0)]): DatatypeType))
         && (_2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.TimeoutHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(s#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(s#0)]): DatatypeType)
             && _2_raft.__default.TimeoutHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(s#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(s#0)]): DatatypeType)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), Lit(s#0)))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), Lit(s#0))
             && Lit(_2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), Lit(s#0)))
           ==> $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.Variables.Variables_q(Lit(v#0)))
         && _2_raft.__default.Timeout(Lit(v#0), Lit(v'#0), Lit(s#0))
           == (
            _2_raft.__default.ServerIDs()[Lit(s#0)]
             && _2_raft.__default.TimeoutHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(s#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(s#0)]): DatatypeType)
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), Lit(s#0))
             && Lit(_2_raft.Variables.global(Lit(v'#0)))
               == Lit(_2_raft.Variables.global(Lit(v#0)))));

// function declaration for raft._default.RequestVote
function _2_raft.__default.RequestVote(v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, j#0: Box) : bool;

function _2_raft.__default.RequestVote#canCall(v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, j#0: Box) : bool;

// consequence axiom for _2_raft.__default.RequestVote
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, j#0: Box :: 
    { _2_raft.__default.RequestVote(v#0, v'#0, i#0, j#0) } 
    _2_raft.__default.RequestVote#canCall(v#0, v'#0, i#0, j#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && $IsBox(j#0, #$ServerID)
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> true);

function _2_raft.__default.RequestVote#requires(DatatypeType, DatatypeType, Box, Box) : bool;

// #requires axiom for _2_raft.__default.RequestVote
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, j#0: Box :: 
  { _2_raft.__default.RequestVote#requires(v#0, v'#0, i#0, j#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $IsBox(i#0, #$ServerID)
       && $IsBox(j#0, #$ServerID)
     ==> _2_raft.__default.RequestVote#requires(v#0, v'#0, i#0, j#0)
       == (_2_raft.__default.WFVars(v#0) && _2_raft.__default.WFVars(v'#0)));

// definition axiom for _2_raft.__default.RequestVote(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, j#0: Box :: 
    { _2_raft.__default.RequestVote(v#0, v'#0, i#0, j#0) } 
    _2_raft.__default.RequestVote#canCall(v#0, v'#0, i#0, j#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && $IsBox(j#0, #$ServerID)
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[i#0] ==> _2_raft.__default.ServerIDs#canCall())
         && (_2_raft.__default.ServerIDs#canCall() && _2_raft.__default.ServerIDs()[j#0]
           ==> _2_raft.Variables.Variables_q(v#0)
             && 
            _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))
             && (_2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)))
               ==> _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
                 && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)))
             && (_2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
                 && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))
                 && !_2_raft.CandidateVars.votesResponded(_2_raft.HostVars.candidate($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))[j#0]
               ==> _2_raft.__default.UnchangedAllHosts#canCall(v'#0, v#0))
             && (_2_raft.__default.UnchangedAllHosts#canCall(v'#0, v#0)
                 && _2_raft.__default.UnchangedAllHosts(v'#0, v#0)
               ==> _2_raft.Variables.Variables_q(v'#0)
                 && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
                 && 
                _2_raft.Variables.Variables_q(v#0)
                 && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0)))
             && (_2_raft.Variables.Variables_q(v'#0)
                 && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
                 && 
                _2_raft.Variables.Variables_q(v#0)
                 && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
                 && Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0)), 
                  _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)))
               ==> _2_raft.Variables.Variables_q(v#0)
                 && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
                 && 
                _2_raft.Variables.Variables_q(v'#0)
                 && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))
                 && _2_raft.__default.LastTerm#canCall(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)))
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))
                 && _2_raft.__default.Send#canCall(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
                  _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
                  #raft.Message.RequestVoteRequest(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)), 
                    _2_raft.__default.LastTerm(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))), 
                    Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))), 
                    i#0, 
                    j#0))))
         && _2_raft.__default.RequestVote(v#0, v'#0, i#0, j#0)
           == (
            _2_raft.__default.ServerIDs()[i#0]
             && _2_raft.__default.ServerIDs()[j#0]
             && 
            _2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)))
             && !_2_raft.CandidateVars.votesResponded(_2_raft.HostVars.candidate($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))[j#0]
             && _2_raft.__default.UnchangedAllHosts(v'#0, v#0)
             && Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0)), 
              _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)))
             && _2_raft.__default.Send(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              #raft.Message.RequestVoteRequest(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)), 
                _2_raft.__default.LastTerm(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))), 
                Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))), 
                i#0, 
                j#0))));

// definition axiom for _2_raft.__default.RequestVote for decreasing-related literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, j#0: Box :: 
    {:weight 3} { _2_raft.__default.RequestVote(Lit(v#0), Lit(v'#0), i#0, j#0) } 
    _2_raft.__default.RequestVote#canCall(Lit(v#0), Lit(v'#0), i#0, j#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && $IsBox(j#0, #$ServerID)
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[i#0] ==> _2_raft.__default.ServerIDs#canCall())
         && (_2_raft.__default.ServerIDs#canCall() && _2_raft.__default.ServerIDs()[j#0]
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && 
            _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))
             && (_2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)))
               ==> _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
                 && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)))
             && (_2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
                 && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))
                 && !_2_raft.CandidateVars.votesResponded(_2_raft.HostVars.candidate($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))[j#0]
               ==> _2_raft.__default.UnchangedAllHosts#canCall(Lit(v'#0), Lit(v#0)))
             && (_2_raft.__default.UnchangedAllHosts#canCall(Lit(v'#0), Lit(v#0))
                 && Lit(_2_raft.__default.UnchangedAllHosts(Lit(v'#0), Lit(v#0)))
               ==> _2_raft.Variables.Variables_q(Lit(v'#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
                 && 
                _2_raft.Variables.Variables_q(Lit(v#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0)))))
             && (_2_raft.Variables.Variables_q(Lit(v'#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
                 && 
                _2_raft.Variables.Variables_q(Lit(v#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
                 && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
                  _2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))
               ==> _2_raft.Variables.Variables_q(Lit(v#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
                 && 
                _2_raft.Variables.Variables_q(Lit(v'#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))
                 && _2_raft.__default.LastTerm#canCall(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)))
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))
                 && _2_raft.__default.Send#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
                  Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
                  #raft.Message.RequestVoteRequest(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)), 
                    _2_raft.__default.LastTerm(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))), 
                    Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))), 
                    i#0, 
                    j#0))))
         && _2_raft.__default.RequestVote(Lit(v#0), Lit(v'#0), i#0, j#0)
           == (
            _2_raft.__default.ServerIDs()[i#0]
             && _2_raft.__default.ServerIDs()[j#0]
             && 
            _2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)))
             && !_2_raft.CandidateVars.votesResponded(_2_raft.HostVars.candidate($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))[j#0]
             && _2_raft.__default.UnchangedAllHosts(Lit(v'#0), Lit(v#0))
             && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              _2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))
             && _2_raft.__default.Send(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              #raft.Message.RequestVoteRequest(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)), 
                _2_raft.__default.LastTerm(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))), 
                Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))), 
                i#0, 
                j#0))));

// definition axiom for _2_raft.__default.RequestVote for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, j#0: Box :: 
    {:weight 3} { _2_raft.__default.RequestVote(Lit(v#0), Lit(v'#0), Lit(i#0), Lit(j#0)) } 
    _2_raft.__default.RequestVote#canCall(Lit(v#0), Lit(v'#0), Lit(i#0), Lit(j#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && $IsBox(j#0, #$ServerID)
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[Lit(i#0)]
           ==> _2_raft.__default.ServerIDs#canCall())
         && (_2_raft.__default.ServerIDs#canCall() && _2_raft.__default.ServerIDs()[Lit(j#0)]
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && 
            _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))
             && (_2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)))
               ==> _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
                 && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)))
             && (_2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
                 && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))
                 && !_2_raft.CandidateVars.votesResponded(_2_raft.HostVars.candidate($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))[Lit(j#0)]
               ==> _2_raft.__default.UnchangedAllHosts#canCall(Lit(v'#0), Lit(v#0)))
             && (_2_raft.__default.UnchangedAllHosts#canCall(Lit(v'#0), Lit(v#0))
                 && Lit(_2_raft.__default.UnchangedAllHosts(Lit(v'#0), Lit(v#0)))
               ==> _2_raft.Variables.Variables_q(Lit(v'#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
                 && 
                _2_raft.Variables.Variables_q(Lit(v#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0)))))
             && (_2_raft.Variables.Variables_q(Lit(v'#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
                 && 
                _2_raft.Variables.Variables_q(Lit(v#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
                 && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
                  _2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))
               ==> _2_raft.Variables.Variables_q(Lit(v#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
                 && 
                _2_raft.Variables.Variables_q(Lit(v'#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))
                 && _2_raft.__default.LastTerm#canCall(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)))
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))
                 && _2_raft.__default.Send#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
                  Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
                  #raft.Message.RequestVoteRequest(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)), 
                    _2_raft.__default.LastTerm(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))), 
                    Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))), 
                    Lit(i#0), 
                    Lit(j#0)))))
         && _2_raft.__default.RequestVote(Lit(v#0), Lit(v'#0), Lit(i#0), Lit(j#0))
           == (
            _2_raft.__default.ServerIDs()[Lit(i#0)]
             && _2_raft.__default.ServerIDs()[Lit(j#0)]
             && 
            _2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)))
             && !_2_raft.CandidateVars.votesResponded(_2_raft.HostVars.candidate($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))[Lit(j#0)]
             && _2_raft.__default.UnchangedAllHosts(Lit(v'#0), Lit(v#0))
             && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              _2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))
             && _2_raft.__default.Send(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              #raft.Message.RequestVoteRequest(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)), 
                _2_raft.__default.LastTerm(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))), 
                Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))), 
                Lit(i#0), 
                Lit(j#0)))));

// function declaration for raft._default.PrevLogIndex
function _2_raft.__default.PrevLogIndex(h#0: DatatypeType, j#0: Box) : int;

function _2_raft.__default.PrevLogIndex#canCall(h#0: DatatypeType, j#0: Box) : bool;

// consequence axiom for _2_raft.__default.PrevLogIndex
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box :: 
    { _2_raft.__default.PrevLogIndex(h#0, j#0) } 
    _2_raft.__default.PrevLogIndex#canCall(h#0, j#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && 
          _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
           && _2_raft.__default.ServerIDs()[j#0]
           && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0))))
       ==> true);

function _2_raft.__default.PrevLogIndex#requires(DatatypeType, Box) : bool;

// #requires axiom for _2_raft.__default.PrevLogIndex
axiom (forall h#0: DatatypeType, j#0: Box :: 
  { _2_raft.__default.PrevLogIndex#requires(h#0, j#0) } 
  $Is(h#0, Tclass._2_raft.HostVars()) && $IsBox(j#0, #$ServerID)
     ==> _2_raft.__default.PrevLogIndex#requires(h#0, j#0)
       == (
        _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
         && _2_raft.__default.ServerIDs()[j#0]
         && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))));

// definition axiom for _2_raft.__default.PrevLogIndex(revealed)
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box :: 
    { _2_raft.__default.PrevLogIndex(h#0, j#0) } 
    _2_raft.__default.PrevLogIndex#canCall(h#0, j#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && 
          _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
           && _2_raft.__default.ServerIDs()[j#0]
           && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0))))
       ==> _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))
         && _2_raft.__default.PrevLogIndex(h#0, j#0)
           == $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[j#0]): int
             - 1);

// definition axiom for _2_raft.__default.PrevLogIndex for decreasing-related literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box :: 
    {:weight 3} { _2_raft.__default.PrevLogIndex(Lit(h#0), j#0) } 
    _2_raft.__default.PrevLogIndex#canCall(Lit(h#0), j#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && 
          Lit(_2_raft.__default.WFLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0)))))
           && _2_raft.__default.ServerIDs()[j#0]
           && Lit(_2_raft.ServerState.Leader_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
         && _2_raft.__default.PrevLogIndex(Lit(h#0), j#0)
           == $Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[j#0]): int
             - 1);

// definition axiom for _2_raft.__default.PrevLogIndex for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box :: 
    {:weight 3} { _2_raft.__default.PrevLogIndex(Lit(h#0), Lit(j#0)) } 
    _2_raft.__default.PrevLogIndex#canCall(Lit(h#0), Lit(j#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && 
          Lit(_2_raft.__default.WFLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0)))))
           && _2_raft.__default.ServerIDs()[Lit(j#0)]
           && Lit(_2_raft.ServerState.Leader_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
         && _2_raft.__default.PrevLogIndex(Lit(h#0), Lit(j#0))
           == $Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[Lit(j#0)]): int
             - 1);

// function declaration for raft._default.PrevLogTerm
function _2_raft.__default.PrevLogTerm(h#0: DatatypeType, j#0: Box) : int;

function _2_raft.__default.PrevLogTerm#canCall(h#0: DatatypeType, j#0: Box) : bool;

// consequence axiom for _2_raft.__default.PrevLogTerm
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box :: 
    { _2_raft.__default.PrevLogTerm(h#0, j#0) } 
    _2_raft.__default.PrevLogTerm#canCall(h#0, j#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && 
          _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
           && _2_raft.__default.ServerIDs()[j#0]
           && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0))))
       ==> true);

function _2_raft.__default.PrevLogTerm#requires(DatatypeType, Box) : bool;

// #requires axiom for _2_raft.__default.PrevLogTerm
axiom (forall h#0: DatatypeType, j#0: Box :: 
  { _2_raft.__default.PrevLogTerm#requires(h#0, j#0) } 
  $Is(h#0, Tclass._2_raft.HostVars()) && $IsBox(j#0, #$ServerID)
     ==> _2_raft.__default.PrevLogTerm#requires(h#0, j#0)
       == (
        _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
         && _2_raft.__default.ServerIDs()[j#0]
         && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))));

// definition axiom for _2_raft.__default.PrevLogTerm(revealed)
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box :: 
    { _2_raft.__default.PrevLogTerm(h#0, j#0) } 
    _2_raft.__default.PrevLogTerm#canCall(h#0, j#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && 
          _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
           && _2_raft.__default.ServerIDs()[j#0]
           && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0))))
       ==> _2_raft.__default.PrevLogIndex#canCall(h#0, j#0)
         && (_2_raft.__default.PrevLogIndex(h#0, j#0) > 0
           ==> _2_raft.__default.PrevLogIndex#canCall(h#0, j#0)
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0)))
         && (_2_raft.__default.PrevLogIndex(h#0, j#0) > 0
             && _2_raft.__default.PrevLogIndex(h#0, j#0)
               < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
           ==> _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && _2_raft.__default.PrevLogIndex#canCall(h#0, j#0)
             && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
                  _2_raft.__default.PrevLogIndex(h#0, j#0))): DatatypeType))
         && _2_raft.__default.PrevLogTerm(h#0, j#0)
           == (if _2_raft.__default.PrevLogIndex(h#0, j#0) > 0
               && _2_raft.__default.PrevLogIndex(h#0, j#0)
                 < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
             then _2_raft.LogEntry.term($Unbox(Seq#Index(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
                  _2_raft.__default.PrevLogIndex(h#0, j#0))): DatatypeType)
             else 0));

// definition axiom for _2_raft.__default.PrevLogTerm for decreasing-related literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box :: 
    {:weight 3} { _2_raft.__default.PrevLogTerm(Lit(h#0), j#0) } 
    _2_raft.__default.PrevLogTerm#canCall(Lit(h#0), j#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && 
          Lit(_2_raft.__default.WFLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0)))))
           && _2_raft.__default.ServerIDs()[j#0]
           && Lit(_2_raft.ServerState.Leader_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))))
       ==> _2_raft.__default.PrevLogIndex#canCall(Lit(h#0), j#0)
         && (_2_raft.__default.PrevLogIndex(Lit(h#0), j#0) > 0
           ==> _2_raft.__default.PrevLogIndex#canCall(Lit(h#0), j#0)
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
         && (_2_raft.__default.PrevLogIndex(Lit(h#0), j#0) > 0
             && _2_raft.__default.PrevLogIndex(Lit(h#0), j#0)
               < Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && _2_raft.__default.PrevLogIndex#canCall(Lit(h#0), j#0)
             && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
                  _2_raft.__default.PrevLogIndex(Lit(h#0), j#0))): DatatypeType))
         && _2_raft.__default.PrevLogTerm(Lit(h#0), j#0)
           == (if _2_raft.__default.PrevLogIndex(Lit(h#0), j#0) > 0
               && _2_raft.__default.PrevLogIndex(Lit(h#0), j#0)
                 < Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
             then _2_raft.LogEntry.term($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
                  _2_raft.__default.PrevLogIndex(Lit(h#0), j#0))): DatatypeType)
             else 0));

// definition axiom for _2_raft.__default.PrevLogTerm for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box :: 
    {:weight 3} { _2_raft.__default.PrevLogTerm(Lit(h#0), Lit(j#0)) } 
    _2_raft.__default.PrevLogTerm#canCall(Lit(h#0), Lit(j#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && 
          Lit(_2_raft.__default.WFLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0)))))
           && _2_raft.__default.ServerIDs()[Lit(j#0)]
           && Lit(_2_raft.ServerState.Leader_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))))
       ==> _2_raft.__default.PrevLogIndex#canCall(Lit(h#0), Lit(j#0))
         && (Lit(_2_raft.__default.PrevLogIndex(Lit(h#0), Lit(j#0)) > 0)
           ==> _2_raft.__default.PrevLogIndex#canCall(Lit(h#0), Lit(j#0))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
         && (_2_raft.__default.PrevLogIndex(Lit(h#0), Lit(j#0)) > 0
             && _2_raft.__default.PrevLogIndex(Lit(h#0), Lit(j#0))
               < Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && _2_raft.__default.PrevLogIndex#canCall(Lit(h#0), Lit(j#0))
             && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
                  LitInt(_2_raft.__default.PrevLogIndex(Lit(h#0), Lit(j#0))))): DatatypeType))
         && _2_raft.__default.PrevLogTerm(Lit(h#0), Lit(j#0))
           == (if _2_raft.__default.PrevLogIndex(Lit(h#0), Lit(j#0)) > 0
               && _2_raft.__default.PrevLogIndex(Lit(h#0), Lit(j#0))
                 < Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
             then _2_raft.LogEntry.term($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
                  LitInt(_2_raft.__default.PrevLogIndex(Lit(h#0), Lit(j#0))))): DatatypeType)
             else 0));

// function declaration for raft._default.LastEntry
function _2_raft.__default.LastEntry(h#0: DatatypeType, j#0: Box) : int;

function _2_raft.__default.LastEntry#canCall(h#0: DatatypeType, j#0: Box) : bool;

// consequence axiom for _2_raft.__default.LastEntry
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box :: 
    { _2_raft.__default.LastEntry(h#0, j#0) } 
    _2_raft.__default.LastEntry#canCall(h#0, j#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && 
          _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
           && _2_raft.__default.ServerIDs()[j#0]
           && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0))))
       ==> true);

function _2_raft.__default.LastEntry#requires(DatatypeType, Box) : bool;

// #requires axiom for _2_raft.__default.LastEntry
axiom (forall h#0: DatatypeType, j#0: Box :: 
  { _2_raft.__default.LastEntry#requires(h#0, j#0) } 
  $Is(h#0, Tclass._2_raft.HostVars()) && $IsBox(j#0, #$ServerID)
     ==> _2_raft.__default.LastEntry#requires(h#0, j#0)
       == (
        _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
         && _2_raft.__default.ServerIDs()[j#0]
         && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))));

// definition axiom for _2_raft.__default.LastEntry(revealed)
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box :: 
    { _2_raft.__default.LastEntry(h#0, j#0) } 
    _2_raft.__default.LastEntry#canCall(h#0, j#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && 
          _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
           && _2_raft.__default.ServerIDs()[j#0]
           && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0))))
       ==> _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
         && 
        _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))
         && _2_raft.__default.Min#canCall(Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0))), 
          $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[j#0]): int)
         && _2_raft.__default.LastEntry(h#0, j#0)
           == _2_raft.__default.Min(Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0))), 
            $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[j#0]): int));

// definition axiom for _2_raft.__default.LastEntry for decreasing-related literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box :: 
    {:weight 3} { _2_raft.__default.LastEntry(Lit(h#0), j#0) } 
    _2_raft.__default.LastEntry#canCall(Lit(h#0), j#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && 
          Lit(_2_raft.__default.WFLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0)))))
           && _2_raft.__default.ServerIDs()[j#0]
           && Lit(_2_raft.ServerState.Leader_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
         && _2_raft.__default.Min#canCall(Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))), 
          $Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[j#0]): int)
         && _2_raft.__default.LastEntry(Lit(h#0), j#0)
           == _2_raft.__default.Min(Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))), 
            $Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[j#0]): int));

// definition axiom for _2_raft.__default.LastEntry for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box :: 
    {:weight 3} { _2_raft.__default.LastEntry(Lit(h#0), Lit(j#0)) } 
    _2_raft.__default.LastEntry#canCall(Lit(h#0), Lit(j#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && 
          Lit(_2_raft.__default.WFLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0)))))
           && _2_raft.__default.ServerIDs()[Lit(j#0)]
           && Lit(_2_raft.ServerState.Leader_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
         && _2_raft.__default.Min#canCall(Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))), 
          $Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[Lit(j#0)]): int)
         && _2_raft.__default.LastEntry(Lit(h#0), Lit(j#0))
           == _2_raft.__default.Min(Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))), 
            $Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[Lit(j#0)]): int));

// function declaration for raft._default.Entries
function _2_raft.__default.Entries(h#0: DatatypeType, j#0: Box) : Seq Box;

function _2_raft.__default.Entries#canCall(h#0: DatatypeType, j#0: Box) : bool;

// consequence axiom for _2_raft.__default.Entries
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box :: 
    { _2_raft.__default.Entries(h#0, j#0) } 
    _2_raft.__default.Entries#canCall(h#0, j#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && 
          _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
           && _2_raft.__default.ServerIDs()[j#0]
           && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
           && 
          LitInt(0)
             <= $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[j#0]): int
           && $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[j#0]): int
             < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0))))
       ==> $Is(_2_raft.__default.Entries(h#0, j#0), TSeq(Tclass._2_raft.LogEntry())));

function _2_raft.__default.Entries#requires(DatatypeType, Box) : bool;

// #requires axiom for _2_raft.__default.Entries
axiom (forall h#0: DatatypeType, j#0: Box :: 
  { _2_raft.__default.Entries#requires(h#0, j#0) } 
  $Is(h#0, Tclass._2_raft.HostVars()) && $IsBox(j#0, #$ServerID)
     ==> _2_raft.__default.Entries#requires(h#0, j#0)
       == (
        _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
         && _2_raft.__default.ServerIDs()[j#0]
         && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
         && 
        LitInt(0)
           <= $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[j#0]): int
         && $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[j#0]): int
           < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))));

// definition axiom for _2_raft.__default.Entries(revealed)
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box :: 
    { _2_raft.__default.Entries(h#0, j#0) } 
    _2_raft.__default.Entries#canCall(h#0, j#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && 
          _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
           && _2_raft.__default.ServerIDs()[j#0]
           && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
           && 
          LitInt(0)
             <= $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[j#0]): int
           && $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[j#0]): int
             < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0))))
       ==> _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
         && 
        _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))
         && _2_raft.__default.LastEntry#canCall(h#0, j#0)
         && _2_raft.__default.Entries(h#0, j#0)
           == Seq#Drop(Seq#Take(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
              _2_raft.__default.LastEntry(h#0, j#0)), 
            $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[j#0]): int));

// definition axiom for _2_raft.__default.Entries for decreasing-related literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box :: 
    {:weight 3} { _2_raft.__default.Entries(Lit(h#0), j#0) } 
    _2_raft.__default.Entries#canCall(Lit(h#0), j#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && 
          Lit(_2_raft.__default.WFLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0)))))
           && _2_raft.__default.ServerIDs()[j#0]
           && Lit(_2_raft.ServerState.Leader_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
           && 
          LitInt(0)
             <= $Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[j#0]): int
           && $Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[j#0]): int
             < Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
         && _2_raft.__default.LastEntry#canCall(Lit(h#0), j#0)
         && _2_raft.__default.Entries(Lit(h#0), j#0)
           == Seq#Drop(Seq#Take(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
              _2_raft.__default.LastEntry(Lit(h#0), j#0)), 
            $Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[j#0]): int));

// definition axiom for _2_raft.__default.Entries for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box :: 
    {:weight 3} { _2_raft.__default.Entries(Lit(h#0), Lit(j#0)) } 
    _2_raft.__default.Entries#canCall(Lit(h#0), Lit(j#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && 
          Lit(_2_raft.__default.WFLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0)))))
           && _2_raft.__default.ServerIDs()[Lit(j#0)]
           && Lit(_2_raft.ServerState.Leader_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
           && 
          LitInt(0)
             <= $Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[Lit(j#0)]): int
           && $Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[Lit(j#0)]): int
             < Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
         && _2_raft.__default.LastEntry#canCall(Lit(h#0), Lit(j#0))
         && _2_raft.__default.Entries(Lit(h#0), Lit(j#0))
           == Seq#Drop(Seq#Take(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
              LitInt(_2_raft.__default.LastEntry(Lit(h#0), Lit(j#0)))), 
            $Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[Lit(j#0)]): int));

// function declaration for raft._default.AppendEntries
function _2_raft.__default.AppendEntries(v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, j#0: Box) : bool;

function _2_raft.__default.AppendEntries#canCall(v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, j#0: Box) : bool;

// consequence axiom for _2_raft.__default.AppendEntries
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, j#0: Box :: 
    { _2_raft.__default.AppendEntries(v#0, v'#0, i#0, j#0) } 
    _2_raft.__default.AppendEntries#canCall(v#0, v'#0, i#0, j#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && $IsBox(j#0, #$ServerID)
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> true);

function _2_raft.__default.AppendEntries#requires(DatatypeType, DatatypeType, Box, Box) : bool;

// #requires axiom for _2_raft.__default.AppendEntries
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, j#0: Box :: 
  { _2_raft.__default.AppendEntries#requires(v#0, v'#0, i#0, j#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $IsBox(i#0, #$ServerID)
       && $IsBox(j#0, #$ServerID)
     ==> _2_raft.__default.AppendEntries#requires(v#0, v'#0, i#0, j#0)
       == (_2_raft.__default.WFVars(v#0) && _2_raft.__default.WFVars(v'#0)));

// definition axiom for _2_raft.__default.AppendEntries(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, j#0: Box :: 
    { _2_raft.__default.AppendEntries(v#0, v'#0, i#0, j#0) } 
    _2_raft.__default.AppendEntries#canCall(v#0, v'#0, i#0, j#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && $IsBox(j#0, #$ServerID)
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[i#0] ==> _2_raft.__default.ServerIDs#canCall())
         && (_2_raft.__default.ServerIDs#canCall() && _2_raft.__default.ServerIDs()[j#0]
           ==> _2_raft.Variables.Variables_q(v#0)
             && 
            (i#0 != j#0
               ==> _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)))
             && (_2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))
                 && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)))
               ==> _2_raft.__default.UnchangedAllHosts#canCall(v'#0, v#0))
             && (_2_raft.__default.UnchangedAllHosts#canCall(v'#0, v#0)
                 && _2_raft.__default.UnchangedAllHosts(v'#0, v#0)
               ==> _2_raft.Variables.Variables_q(v'#0)
                 && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
                 && 
                _2_raft.Variables.Variables_q(v#0)
                 && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0)))
             && (_2_raft.Variables.Variables_q(v'#0)
                 && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
                 && 
                _2_raft.Variables.Variables_q(v#0)
                 && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
                 && Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0)), 
                  _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)))
               ==> _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))
                 && (LitInt(0)
                     <= $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)))[j#0]): int
                   ==> _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))
                     && 
                    _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
                     && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))))
             && (_2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))
                 && (LitInt(0)
                     <= $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)))[j#0]): int
                   ==> _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))
                     && 
                    _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
                     && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)))
                 && 
                LitInt(0)
                   <= $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)))[j#0]): int
                 && $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)))[j#0]): int
                   < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)))
               ==> _2_raft.Variables.Variables_q(v#0)
                 && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
                 && 
                _2_raft.Variables.Variables_q(v'#0)
                 && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))
                 && _2_raft.__default.PrevLogIndex#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, j#0)
                 && _2_raft.__default.PrevLogTerm#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, j#0)
                 && _2_raft.__default.Entries#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, j#0)
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType))
                 && _2_raft.__default.LastEntry#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, j#0)
                 && _2_raft.__default.Min#canCall(_2_raft.LogVars.commitIndex(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)), 
                  _2_raft.__default.LastEntry($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, j#0))
                 && _2_raft.__default.Send#canCall(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
                  _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
                  #raft.Message.AppendEntriesRequest(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)), 
                    _2_raft.__default.PrevLogIndex($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, j#0), 
                    _2_raft.__default.PrevLogTerm($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, j#0), 
                    _2_raft.__default.Entries($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, j#0), 
                    _2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)), 
                    _2_raft.__default.Min(_2_raft.LogVars.commitIndex(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)), 
                      _2_raft.__default.LastEntry($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, j#0)), 
                    i#0, 
                    j#0))))
         && _2_raft.__default.AppendEntries(v#0, v'#0, i#0, j#0)
           == (
            _2_raft.__default.ServerIDs()[i#0]
             && _2_raft.__default.ServerIDs()[j#0]
             && 
            i#0 != j#0
             && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)))
             && _2_raft.__default.UnchangedAllHosts(v'#0, v#0)
             && Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0)), 
              _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)))
             && 
            LitInt(0)
               <= $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)))[j#0]): int
             && $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)))[j#0]): int
               < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)))
             && _2_raft.__default.Send(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              #raft.Message.AppendEntriesRequest(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)), 
                _2_raft.__default.PrevLogIndex($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, j#0), 
                _2_raft.__default.PrevLogTerm($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, j#0), 
                _2_raft.__default.Entries($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, j#0), 
                _2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)), 
                _2_raft.__default.Min(_2_raft.LogVars.commitIndex(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType)), 
                  _2_raft.__default.LastEntry($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, j#0)), 
                i#0, 
                j#0))));

// definition axiom for _2_raft.__default.AppendEntries for decreasing-related literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, j#0: Box :: 
    {:weight 3} { _2_raft.__default.AppendEntries(Lit(v#0), Lit(v'#0), i#0, j#0) } 
    _2_raft.__default.AppendEntries#canCall(Lit(v#0), Lit(v'#0), i#0, j#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && $IsBox(j#0, #$ServerID)
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[i#0] ==> _2_raft.__default.ServerIDs#canCall())
         && (_2_raft.__default.ServerIDs#canCall() && _2_raft.__default.ServerIDs()[j#0]
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && 
            (i#0 != j#0
               ==> _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)))
             && (_2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))
                 && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)))
               ==> _2_raft.__default.UnchangedAllHosts#canCall(Lit(v'#0), Lit(v#0)))
             && (_2_raft.__default.UnchangedAllHosts#canCall(Lit(v'#0), Lit(v#0))
                 && Lit(_2_raft.__default.UnchangedAllHosts(Lit(v'#0), Lit(v#0)))
               ==> _2_raft.Variables.Variables_q(Lit(v'#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
                 && 
                _2_raft.Variables.Variables_q(Lit(v#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0)))))
             && (_2_raft.Variables.Variables_q(Lit(v'#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
                 && 
                _2_raft.Variables.Variables_q(Lit(v#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
                 && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
                  _2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))
               ==> _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))
                 && (LitInt(0)
                     <= $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)))[j#0]): int
                   ==> _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))
                     && 
                    _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
                     && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))))
             && (_2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))
                 && (LitInt(0)
                     <= $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)))[j#0]): int
                   ==> _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))
                     && 
                    _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
                     && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)))
                 && 
                LitInt(0)
                   <= $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)))[j#0]): int
                 && $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)))[j#0]): int
                   < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)))
               ==> _2_raft.Variables.Variables_q(Lit(v#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
                 && 
                _2_raft.Variables.Variables_q(Lit(v'#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))
                 && _2_raft.__default.PrevLogIndex#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
                  j#0)
                 && _2_raft.__default.PrevLogTerm#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
                  j#0)
                 && _2_raft.__default.Entries#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
                  j#0)
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType))
                 && _2_raft.__default.LastEntry#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
                  j#0)
                 && _2_raft.__default.Min#canCall(_2_raft.LogVars.commitIndex(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)), 
                  _2_raft.__default.LastEntry($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
                    j#0))
                 && _2_raft.__default.Send#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
                  Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
                  #raft.Message.AppendEntriesRequest(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)), 
                    _2_raft.__default.PrevLogIndex($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
                      j#0), 
                    _2_raft.__default.PrevLogTerm($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
                      j#0), 
                    _2_raft.__default.Entries($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
                      j#0), 
                    _2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)), 
                    _2_raft.__default.Min(_2_raft.LogVars.commitIndex(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)), 
                      _2_raft.__default.LastEntry($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
                        j#0)), 
                    i#0, 
                    j#0))))
         && _2_raft.__default.AppendEntries(Lit(v#0), Lit(v'#0), i#0, j#0)
           == (
            _2_raft.__default.ServerIDs()[i#0]
             && _2_raft.__default.ServerIDs()[j#0]
             && 
            i#0 != j#0
             && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)))
             && _2_raft.__default.UnchangedAllHosts(Lit(v'#0), Lit(v#0))
             && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              _2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))
             && 
            LitInt(0)
               <= $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)))[j#0]): int
             && $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)))[j#0]): int
               < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)))
             && _2_raft.__default.Send(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              #raft.Message.AppendEntriesRequest(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)), 
                _2_raft.__default.PrevLogIndex($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
                  j#0), 
                _2_raft.__default.PrevLogTerm($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
                  j#0), 
                _2_raft.__default.Entries($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
                  j#0), 
                _2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)), 
                _2_raft.__default.Min(_2_raft.LogVars.commitIndex(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType)), 
                  _2_raft.__default.LastEntry($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
                    j#0)), 
                i#0, 
                j#0))));

// definition axiom for _2_raft.__default.AppendEntries for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, j#0: Box :: 
    {:weight 3} { _2_raft.__default.AppendEntries(Lit(v#0), Lit(v'#0), Lit(i#0), Lit(j#0)) } 
    _2_raft.__default.AppendEntries#canCall(Lit(v#0), Lit(v'#0), Lit(i#0), Lit(j#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && $IsBox(j#0, #$ServerID)
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[Lit(i#0)]
           ==> _2_raft.__default.ServerIDs#canCall())
         && (_2_raft.__default.ServerIDs#canCall() && _2_raft.__default.ServerIDs()[Lit(j#0)]
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && 
            (Lit(i#0 != j#0)
               ==> _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)))
             && (_2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))
                 && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)))
               ==> _2_raft.__default.UnchangedAllHosts#canCall(Lit(v'#0), Lit(v#0)))
             && (_2_raft.__default.UnchangedAllHosts#canCall(Lit(v'#0), Lit(v#0))
                 && Lit(_2_raft.__default.UnchangedAllHosts(Lit(v'#0), Lit(v#0)))
               ==> _2_raft.Variables.Variables_q(Lit(v'#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
                 && 
                _2_raft.Variables.Variables_q(Lit(v#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0)))))
             && (_2_raft.Variables.Variables_q(Lit(v'#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
                 && 
                _2_raft.Variables.Variables_q(Lit(v#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
                 && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
                  _2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))
               ==> _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))
                 && (LitInt(0)
                     <= $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)))[Lit(j#0)]): int
                   ==> _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))
                     && 
                    _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
                     && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))))
             && (_2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))
                 && (LitInt(0)
                     <= $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)))[Lit(j#0)]): int
                   ==> _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))
                     && 
                    _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
                     && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)))
                 && 
                LitInt(0)
                   <= $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)))[Lit(j#0)]): int
                 && $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)))[Lit(j#0)]): int
                   < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)))
               ==> _2_raft.Variables.Variables_q(Lit(v#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
                 && 
                _2_raft.Variables.Variables_q(Lit(v'#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))
                 && _2_raft.__default.PrevLogIndex#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
                  Lit(j#0))
                 && _2_raft.__default.PrevLogTerm#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
                  Lit(j#0))
                 && _2_raft.__default.Entries#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
                  Lit(j#0))
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))
                 && 
                _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType))
                 && _2_raft.__default.LastEntry#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
                  Lit(j#0))
                 && _2_raft.__default.Min#canCall(_2_raft.LogVars.commitIndex(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)), 
                  _2_raft.__default.LastEntry($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
                    Lit(j#0)))
                 && _2_raft.__default.Send#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
                  Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
                  #raft.Message.AppendEntriesRequest(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)), 
                    _2_raft.__default.PrevLogIndex($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
                      Lit(j#0)), 
                    _2_raft.__default.PrevLogTerm($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
                      Lit(j#0)), 
                    _2_raft.__default.Entries($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
                      Lit(j#0)), 
                    _2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)), 
                    _2_raft.__default.Min(_2_raft.LogVars.commitIndex(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)), 
                      _2_raft.__default.LastEntry($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
                        Lit(j#0))), 
                    Lit(i#0), 
                    Lit(j#0)))))
         && _2_raft.__default.AppendEntries(Lit(v#0), Lit(v'#0), Lit(i#0), Lit(j#0))
           == (
            _2_raft.__default.ServerIDs()[Lit(i#0)]
             && _2_raft.__default.ServerIDs()[Lit(j#0)]
             && 
            i#0 != j#0
             && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)))
             && _2_raft.__default.UnchangedAllHosts(Lit(v'#0), Lit(v#0))
             && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              _2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))
             && 
            LitInt(0)
               <= $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)))[Lit(j#0)]): int
             && $Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)))[Lit(j#0)]): int
               < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)))
             && _2_raft.__default.Send(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              #raft.Message.AppendEntriesRequest(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)), 
                _2_raft.__default.PrevLogIndex($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
                  Lit(j#0)), 
                _2_raft.__default.PrevLogTerm($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
                  Lit(j#0)), 
                _2_raft.__default.Entries($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
                  Lit(j#0)), 
                _2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)), 
                _2_raft.__default.Min(_2_raft.LogVars.commitIndex(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType)), 
                  _2_raft.__default.LastEntry($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
                    Lit(j#0))), 
                Lit(i#0), 
                Lit(j#0)))));

// function declaration for raft._default.BecomeLeaderHost
function _2_raft.__default.BecomeLeaderHost(h#0: DatatypeType, h'#0: DatatypeType) : bool;

function _2_raft.__default.BecomeLeaderHost#canCall(h#0: DatatypeType, h'#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.BecomeLeaderHost
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType :: 
    { _2_raft.__default.BecomeLeaderHost(h#0, h'#0) } 
    _2_raft.__default.BecomeLeaderHost#canCall(h#0, h'#0)
         || ($Is(h#0, Tclass._2_raft.HostVars()) && $Is(h'#0, Tclass._2_raft.HostVars()))
       ==> true);

function _2_raft.__default.BecomeLeaderHost#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.BecomeLeaderHost
axiom (forall h#0: DatatypeType, h'#0: DatatypeType :: 
  { _2_raft.__default.BecomeLeaderHost#requires(h#0, h'#0) } 
  $Is(h#0, Tclass._2_raft.HostVars()) && $Is(h'#0, Tclass._2_raft.HostVars())
     ==> _2_raft.__default.BecomeLeaderHost#requires(h#0, h'#0) == true);

// definition axiom for _2_raft.__default.BecomeLeaderHost(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType :: 
    { _2_raft.__default.BecomeLeaderHost(h#0, h'#0) } 
    _2_raft.__default.BecomeLeaderHost#canCall(h#0, h'#0)
         || ($Is(h#0, Tclass._2_raft.HostVars()) && $Is(h'#0, Tclass._2_raft.HostVars()))
       ==> _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
         && (_2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
           ==> _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h#0))
             && _2_raft.__default.IsQuorum#canCall(_2_raft.CandidateVars.votesGranted(_2_raft.HostVars.candidate(h#0))))
         && (_2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h#0))
             && _2_raft.__default.IsQuorum#canCall(_2_raft.CandidateVars.votesGranted(_2_raft.HostVars.candidate(h#0)))
             && _2_raft.__default.IsQuorum(_2_raft.CandidateVars.votesGranted(_2_raft.HostVars.candidate(h#0)))
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
             && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
               == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
           ==> $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
             && $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
         && ($IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
             && $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
             && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
               == _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0))
           ==> $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
             && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && ($IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
             && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.HostVars.log(h'#0) == _2_raft.HostVars.log(h#0)
           ==> $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
             && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && ($IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
             && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && _2_raft.__default.MapAll#canCall(Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0))) + 1))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && _2_raft.__default.MapAll#canCall(Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0))) + 1)
             && Map#Equal(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h'#0)), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, 
                Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0))) + 1))
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
             && _2_raft.__default.MapAll#canCall(LitInt(0)))
         && _2_raft.__default.BecomeLeaderHost(h#0, h'#0)
           == (
            _2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
             && _2_raft.__default.IsQuorum(_2_raft.CandidateVars.votesGranted(_2_raft.HostVars.candidate(h#0)))
             && _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
             && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
               == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
             && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
               == _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0))
             && _2_raft.HostVars.log(h'#0) == _2_raft.HostVars.log(h#0)
             && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
             && Map#Equal(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h'#0)), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, 
                Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0))) + 1))
             && Map#Equal(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h'#0)), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, LitInt(0)))));

// definition axiom for _2_raft.__default.BecomeLeaderHost for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.BecomeLeaderHost(Lit(h#0), Lit(h'#0)) } 
    _2_raft.__default.BecomeLeaderHost#canCall(Lit(h#0), Lit(h'#0))
         || ($Is(h#0, Tclass._2_raft.HostVars()) && $Is(h'#0, Tclass._2_raft.HostVars()))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && (Lit(_2_raft.ServerState.Candidate_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && _2_raft.__default.IsQuorum#canCall(Lit(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h#0)))))))
         && (_2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && _2_raft.__default.IsQuorum#canCall(Lit(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h#0))))))
             && Lit(_2_raft.__default.IsQuorum(Lit(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h#0)))))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && Lit(_2_raft.ServerState.Leader_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0)))))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
         && ($IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0)))
           ==> $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
               == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && _2_raft.__default.MapAll#canCall(Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))) + 1))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && _2_raft.__default.MapAll#canCall(Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))) + 1)
             && Map#Equal(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, 
                Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))) + 1))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && _2_raft.__default.MapAll#canCall(LitInt(0)))
         && _2_raft.__default.BecomeLeaderHost(Lit(h#0), Lit(h'#0))
           == (
            _2_raft.ServerState.Candidate_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
             && _2_raft.__default.IsQuorum(Lit(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h#0))))))
             && _2_raft.ServerState.Leader_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0)))
             && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
               == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
             && Map#Equal(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, 
                Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))) + 1))
             && Map#Equal(_2_raft.LeaderVars.matchIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
              _2_raft.__default.MapAll(StartFuel_raft._default.MapAll, LitInt(0)))));

// function declaration for raft._default.MakeElectionRecord
function _2_raft.__default.MakeElectionRecord(h#0: DatatypeType, i#0: Box) : DatatypeType;

function _2_raft.__default.MakeElectionRecord#canCall(h#0: DatatypeType, i#0: Box) : bool;

// consequence axiom for _2_raft.__default.MakeElectionRecord
axiom true
   ==> (forall h#0: DatatypeType, i#0: Box :: 
    { _2_raft.__default.MakeElectionRecord(h#0, i#0) } 
    _2_raft.__default.MakeElectionRecord#canCall(h#0, i#0)
         || ($Is(h#0, Tclass._2_raft.HostVars()) && $IsBox(i#0, #$ServerID))
       ==> $Is(_2_raft.__default.MakeElectionRecord(h#0, i#0), Tclass._2_raft.ElectionRecord()));

function _2_raft.__default.MakeElectionRecord#requires(DatatypeType, Box) : bool;

// #requires axiom for _2_raft.__default.MakeElectionRecord
axiom (forall h#0: DatatypeType, i#0: Box :: 
  { _2_raft.__default.MakeElectionRecord#requires(h#0, i#0) } 
  $Is(h#0, Tclass._2_raft.HostVars()) && $IsBox(i#0, #$ServerID)
     ==> _2_raft.__default.MakeElectionRecord#requires(h#0, i#0) == true);

// definition axiom for _2_raft.__default.MakeElectionRecord(revealed)
axiom true
   ==> (forall h#0: DatatypeType, i#0: Box :: 
    { _2_raft.__default.MakeElectionRecord(h#0, i#0) } 
    _2_raft.__default.MakeElectionRecord#canCall(h#0, i#0)
         || ($Is(h#0, Tclass._2_raft.HostVars()) && $IsBox(i#0, #$ServerID))
       ==> _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
         && 
        _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
         && 
        _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h#0))
         && 
        _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h#0))
         && _2_raft.__default.MakeElectionRecord(h#0, i#0)
           == #raft.ElectionRecord.ElectionRecord(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0)), 
            i#0, 
            _2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
            _2_raft.CandidateVars.votesGranted(_2_raft.HostVars.candidate(h#0)), 
            _2_raft.CandidateVars.voterLog(_2_raft.HostVars.candidate(h#0))));

// definition axiom for _2_raft.__default.MakeElectionRecord for decreasing-related literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, i#0: Box :: 
    {:weight 3} { _2_raft.__default.MakeElectionRecord(Lit(h#0), i#0) } 
    _2_raft.__default.MakeElectionRecord#canCall(Lit(h#0), i#0)
         || ($Is(h#0, Tclass._2_raft.HostVars()) && $IsBox(i#0, #$ServerID))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
         && _2_raft.__default.MakeElectionRecord(Lit(h#0), i#0)
           == #raft.ElectionRecord.ElectionRecord(LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))), 
            i#0, 
            Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
            Lit(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h#0))))), 
            Lit(_2_raft.CandidateVars.voterLog(Lit(_2_raft.HostVars.candidate(Lit(h#0)))))));

// definition axiom for _2_raft.__default.MakeElectionRecord for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, i#0: Box :: 
    {:weight 3} { _2_raft.__default.MakeElectionRecord(Lit(h#0), Lit(i#0)) } 
    _2_raft.__default.MakeElectionRecord#canCall(Lit(h#0), Lit(i#0))
         || ($Is(h#0, Tclass._2_raft.HostVars()) && $IsBox(i#0, #$ServerID))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
         && _2_raft.__default.MakeElectionRecord(Lit(h#0), Lit(i#0))
           == Lit(#raft.ElectionRecord.ElectionRecord(LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))), 
              Lit(i#0), 
              Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
              Lit(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h#0))))), 
              Lit(_2_raft.CandidateVars.voterLog(Lit(_2_raft.HostVars.candidate(Lit(h#0))))))));

// function declaration for raft._default.BecomeLeader
function _2_raft.__default.BecomeLeader(v#0: DatatypeType, v'#0: DatatypeType, i#0: Box) : bool;

function _2_raft.__default.BecomeLeader#canCall(v#0: DatatypeType, v'#0: DatatypeType, i#0: Box) : bool;

// consequence axiom for _2_raft.__default.BecomeLeader
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box :: 
    { _2_raft.__default.BecomeLeader(v#0, v'#0, i#0) } 
    _2_raft.__default.BecomeLeader#canCall(v#0, v'#0, i#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> true);

function _2_raft.__default.BecomeLeader#requires(DatatypeType, DatatypeType, Box) : bool;

// #requires axiom for _2_raft.__default.BecomeLeader
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box :: 
  { _2_raft.__default.BecomeLeader#requires(v#0, v'#0, i#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $IsBox(i#0, #$ServerID)
     ==> _2_raft.__default.BecomeLeader#requires(v#0, v'#0, i#0)
       == (_2_raft.__default.WFVars(v#0) && _2_raft.__default.WFVars(v'#0)));

// definition axiom for _2_raft.__default.BecomeLeader(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box :: 
    { _2_raft.__default.BecomeLeader(v#0, v'#0, i#0) } 
    _2_raft.__default.BecomeLeader#canCall(v#0, v'#0, i#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[i#0]
           ==> _2_raft.Variables.Variables_q(v#0)
             && _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.__default.BecomeLeaderHost#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[i#0]): DatatypeType))
         && (_2_raft.Variables.Variables_q(v#0)
             && _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.__default.BecomeLeaderHost#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[i#0]): DatatypeType)
             && _2_raft.__default.BecomeLeaderHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[i#0]): DatatypeType)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(v'#0, v#0, i#0))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(v'#0, v#0, i#0)
             && _2_raft.__default.UnchangedOtherHosts(v'#0, v#0, i#0)
           ==> _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0)))
         && (_2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && MultiSet#Equal(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)))
           ==> _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.__default.MakeElectionRecord#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, i#0))
         && _2_raft.__default.BecomeLeader(v#0, v'#0, i#0)
           == (
            _2_raft.__default.ServerIDs()[i#0]
             && _2_raft.__default.BecomeLeaderHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[i#0]): DatatypeType)
             && _2_raft.__default.UnchangedOtherHosts(v'#0, v#0, i#0)
             && MultiSet#Equal(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)))
             && Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0)), 
              Set#Union(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)), 
                Set#UnionOne(Set#Empty(): Set Box, 
                  $Box(_2_raft.__default.MakeElectionRecord($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, i#0)))))));

// definition axiom for _2_raft.__default.BecomeLeader for decreasing-related literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box :: 
    {:weight 3} { _2_raft.__default.BecomeLeader(Lit(v#0), Lit(v'#0), i#0) } 
    _2_raft.__default.BecomeLeader#canCall(Lit(v#0), Lit(v'#0), i#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[i#0]
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.BecomeLeaderHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[i#0]): DatatypeType))
         && (_2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.BecomeLeaderHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[i#0]): DatatypeType)
             && _2_raft.__default.BecomeLeaderHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[i#0]): DatatypeType)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), i#0))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), i#0)
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), i#0)
           ==> _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0)))))
         && (_2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && MultiSet#Equal(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              _2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0)))))
           ==> _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.__default.MakeElectionRecord#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
              i#0))
         && _2_raft.__default.BecomeLeader(Lit(v#0), Lit(v'#0), i#0)
           == (
            _2_raft.__default.ServerIDs()[i#0]
             && _2_raft.__default.BecomeLeaderHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[i#0]): DatatypeType)
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), i#0)
             && MultiSet#Equal(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              _2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0)))))
             && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              Set#Union(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))), 
                Set#UnionOne(Set#Empty(): Set Box, 
                  $Box(_2_raft.__default.MakeElectionRecord($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
                      i#0)))))));

// definition axiom for _2_raft.__default.BecomeLeader for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box :: 
    {:weight 3} { _2_raft.__default.BecomeLeader(Lit(v#0), Lit(v'#0), Lit(i#0)) } 
    _2_raft.__default.BecomeLeader#canCall(Lit(v#0), Lit(v'#0), Lit(i#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[Lit(i#0)]
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.BecomeLeaderHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(i#0)]): DatatypeType))
         && (_2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.BecomeLeaderHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(i#0)]): DatatypeType)
             && _2_raft.__default.BecomeLeaderHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(i#0)]): DatatypeType)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), Lit(i#0)))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), Lit(i#0))
             && Lit(_2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), Lit(i#0)))
           ==> _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0)))))
         && (_2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && MultiSet#Equal(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              _2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0)))))
           ==> _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.__default.MakeElectionRecord#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
              Lit(i#0)))
         && _2_raft.__default.BecomeLeader(Lit(v#0), Lit(v'#0), Lit(i#0))
           == (
            _2_raft.__default.ServerIDs()[Lit(i#0)]
             && _2_raft.__default.BecomeLeaderHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(i#0)]): DatatypeType)
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), Lit(i#0))
             && MultiSet#Equal(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              _2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0)))))
             && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              Set#Union(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))), 
                Set#UnionOne(Set#Empty(): Set Box, 
                  $Box(_2_raft.__default.MakeElectionRecord($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
                      Lit(i#0))))))));

// function declaration for raft._default.ClientRequestHost
function _2_raft.__default.ClientRequestHost(h#0: DatatypeType, h'#0: DatatypeType, value#0: Box) : bool;

function _2_raft.__default.ClientRequestHost#canCall(h#0: DatatypeType, h'#0: DatatypeType, value#0: Box) : bool;

// consequence axiom for _2_raft.__default.ClientRequestHost
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, value#0: Box :: 
    { _2_raft.__default.ClientRequestHost(h#0, h'#0, value#0) } 
    _2_raft.__default.ClientRequestHost#canCall(h#0, h'#0, value#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $IsBox(value#0, #$Value))
       ==> true);

function _2_raft.__default.ClientRequestHost#requires(DatatypeType, DatatypeType, Box) : bool;

// #requires axiom for _2_raft.__default.ClientRequestHost
axiom (forall h#0: DatatypeType, h'#0: DatatypeType, value#0: Box :: 
  { _2_raft.__default.ClientRequestHost#requires(h#0, h'#0, value#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
       && $Is(h'#0, Tclass._2_raft.HostVars())
       && $IsBox(value#0, #$Value)
     ==> _2_raft.__default.ClientRequestHost#requires(h#0, h'#0, value#0) == true);

// definition axiom for _2_raft.__default.ClientRequestHost(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, value#0: Box :: 
    { _2_raft.__default.ClientRequestHost(h#0, h'#0, value#0) } 
    _2_raft.__default.ClientRequestHost#canCall(h#0, h'#0, value#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $IsBox(value#0, #$Value))
       ==> _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
         && (_2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
           ==> _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && (Seq#Equal(_2_raft.LogVars.log(_2_raft.HostVars.log(h'#0)), 
                Seq#Append(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
                  Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(#raft.LogEntry.LogEntry(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0)), value#0)))))
               ==> _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0)))
             && (_2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
                 && _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h'#0))
                   == _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h#0))
               ==> $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h'#0))
                 && $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0))
             && ($IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h'#0))
                 && $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.HostVars.server(h'#0) == _2_raft.HostVars.server(h#0)
               ==> $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
                 && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0))
             && ($IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
                 && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
               ==> $IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h'#0))
                 && $IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0)))
         && _2_raft.__default.ClientRequestHost(h#0, h'#0, value#0)
           == (_2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
             && 
            Seq#Equal(_2_raft.LogVars.log(_2_raft.HostVars.log(h'#0)), 
              Seq#Append(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
                Seq#Build(Seq#Empty(): Seq Box, 
                  $Box(#raft.LogEntry.LogEntry(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0)), value#0)))))
             && _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h'#0))
               == _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h#0))
             && _2_raft.HostVars.server(h'#0) == _2_raft.HostVars.server(h#0)
             && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
             && _2_raft.HostVars.leader(h'#0) == _2_raft.HostVars.leader(h#0)));

// definition axiom for _2_raft.__default.ClientRequestHost for decreasing-related literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, value#0: Box :: 
    {:weight 3} { _2_raft.__default.ClientRequestHost(Lit(h#0), Lit(h'#0), value#0) } 
    _2_raft.__default.ClientRequestHost#canCall(Lit(h#0), Lit(h'#0), value#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $IsBox(value#0, #$Value))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && (Lit(_2_raft.ServerState.Leader_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && (Seq#Equal(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h'#0)))), 
                Seq#Append(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))), 
                  Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(#raft.LogEntry.LogEntry(LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))), 
                        value#0)))))
               ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
             && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
                 && LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h'#0)))))
                   == LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h#0)))))
               ==> $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                 && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0)))
             && ($IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                 && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && Lit(_2_raft.HostVars.server(Lit(h'#0)))
                   == Lit(_2_raft.HostVars.server(Lit(h#0)))
               ==> $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
                 && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0)))
             && ($IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
                 && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
                   == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
               ==> $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
                 && $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0))))
         && _2_raft.__default.ClientRequestHost(Lit(h#0), Lit(h'#0), value#0)
           == (_2_raft.ServerState.Leader_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
             && 
            Seq#Equal(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h'#0)))), 
              Seq#Append(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))), 
                Seq#Build(Seq#Empty(): Seq Box, 
                  $Box(#raft.LogEntry.LogEntry(LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))), 
                      value#0)))))
             && LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h'#0)))))
               == LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h#0)))))
             && Lit(_2_raft.HostVars.server(Lit(h'#0)))
               == Lit(_2_raft.HostVars.server(Lit(h#0)))
             && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
               == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
             && Lit(_2_raft.HostVars.leader(Lit(h'#0)))
               == Lit(_2_raft.HostVars.leader(Lit(h#0)))));

// definition axiom for _2_raft.__default.ClientRequestHost for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, value#0: Box :: 
    {:weight 3} { _2_raft.__default.ClientRequestHost(Lit(h#0), Lit(h'#0), Lit(value#0)) } 
    _2_raft.__default.ClientRequestHost#canCall(Lit(h#0), Lit(h'#0), Lit(value#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $IsBox(value#0, #$Value))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && (Lit(_2_raft.ServerState.Leader_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && (Seq#Equal(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h'#0)))), 
                Seq#Append(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))), 
                  Seq#Build(Seq#Empty(): Seq Box, 
                    $Box(Lit(#raft.LogEntry.LogEntry(LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))), 
                          Lit(value#0)))))))
               ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
             && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
                 && LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h'#0)))))
                   == LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h#0)))))
               ==> $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                 && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0)))
             && ($IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                 && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && Lit(_2_raft.HostVars.server(Lit(h'#0)))
                   == Lit(_2_raft.HostVars.server(Lit(h#0)))
               ==> $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
                 && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0)))
             && ($IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
                 && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
                   == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
               ==> $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
                 && $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0))))
         && _2_raft.__default.ClientRequestHost(Lit(h#0), Lit(h'#0), Lit(value#0))
           == (_2_raft.ServerState.Leader_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
             && 
            Seq#Equal(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h'#0)))), 
              Seq#Append(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))), 
                Seq#Build(Seq#Empty(): Seq Box, 
                  $Box(Lit(#raft.LogEntry.LogEntry(LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))), 
                        Lit(value#0)))))))
             && LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h'#0)))))
               == LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h#0)))))
             && Lit(_2_raft.HostVars.server(Lit(h'#0)))
               == Lit(_2_raft.HostVars.server(Lit(h#0)))
             && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
               == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
             && Lit(_2_raft.HostVars.leader(Lit(h'#0)))
               == Lit(_2_raft.HostVars.leader(Lit(h#0)))));

// function declaration for raft._default.ClientRequest
function _2_raft.__default.ClientRequest(v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, value#0: Box) : bool;

function _2_raft.__default.ClientRequest#canCall(v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, value#0: Box) : bool;

// consequence axiom for _2_raft.__default.ClientRequest
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, value#0: Box :: 
    { _2_raft.__default.ClientRequest(v#0, v'#0, i#0, value#0) } 
    _2_raft.__default.ClientRequest#canCall(v#0, v'#0, i#0, value#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && $IsBox(value#0, #$Value)
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> true);

function _2_raft.__default.ClientRequest#requires(DatatypeType, DatatypeType, Box, Box) : bool;

// #requires axiom for _2_raft.__default.ClientRequest
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, value#0: Box :: 
  { _2_raft.__default.ClientRequest#requires(v#0, v'#0, i#0, value#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $IsBox(i#0, #$ServerID)
       && $IsBox(value#0, #$Value)
     ==> _2_raft.__default.ClientRequest#requires(v#0, v'#0, i#0, value#0)
       == (_2_raft.__default.WFVars(v#0) && _2_raft.__default.WFVars(v'#0)));

// definition axiom for _2_raft.__default.ClientRequest(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, value#0: Box :: 
    { _2_raft.__default.ClientRequest(v#0, v'#0, i#0, value#0) } 
    _2_raft.__default.ClientRequest#canCall(v#0, v'#0, i#0, value#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && $IsBox(value#0, #$Value)
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[i#0]
           ==> _2_raft.Variables.Variables_q(v#0)
             && _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.__default.ClientRequestHost#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[i#0]): DatatypeType, 
              value#0))
         && (_2_raft.Variables.Variables_q(v#0)
             && _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.__default.ClientRequestHost#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[i#0]): DatatypeType, 
              value#0)
             && _2_raft.__default.ClientRequestHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[i#0]): DatatypeType, 
              value#0)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(v'#0, v#0, i#0))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(v'#0, v#0, i#0)
             && _2_raft.__default.UnchangedOtherHosts(v'#0, v#0, i#0)
           ==> $IsA#_2_raft.GlobalVars(_2_raft.Variables.global(v'#0))
             && $IsA#_2_raft.GlobalVars(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.Variables.Variables_q(v#0))
         && _2_raft.__default.ClientRequest(v#0, v'#0, i#0, value#0)
           == (
            _2_raft.__default.ServerIDs()[i#0]
             && _2_raft.__default.ClientRequestHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[i#0]): DatatypeType, 
              value#0)
             && _2_raft.__default.UnchangedOtherHosts(v'#0, v#0, i#0)
             && _2_raft.Variables.global(v'#0) == _2_raft.Variables.global(v#0)));

// definition axiom for _2_raft.__default.ClientRequest for decreasing-related literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, value#0: Box :: 
    {:weight 3} { _2_raft.__default.ClientRequest(Lit(v#0), Lit(v'#0), i#0, value#0) } 
    _2_raft.__default.ClientRequest#canCall(Lit(v#0), Lit(v'#0), i#0, value#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && $IsBox(value#0, #$Value)
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[i#0]
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.ClientRequestHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[i#0]): DatatypeType, 
              value#0))
         && (_2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.ClientRequestHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[i#0]): DatatypeType, 
              value#0)
             && _2_raft.__default.ClientRequestHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[i#0]): DatatypeType, 
              value#0)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), i#0))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), i#0)
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), i#0)
           ==> $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.Variables.Variables_q(Lit(v#0)))
         && _2_raft.__default.ClientRequest(Lit(v#0), Lit(v'#0), i#0, value#0)
           == (
            _2_raft.__default.ServerIDs()[i#0]
             && _2_raft.__default.ClientRequestHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[i#0]): DatatypeType, 
              value#0)
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), i#0)
             && Lit(_2_raft.Variables.global(Lit(v'#0)))
               == Lit(_2_raft.Variables.global(Lit(v#0)))));

// definition axiom for _2_raft.__default.ClientRequest for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box, value#0: Box :: 
    {:weight 3} { _2_raft.__default.ClientRequest(Lit(v#0), Lit(v'#0), Lit(i#0), Lit(value#0)) } 
    _2_raft.__default.ClientRequest#canCall(Lit(v#0), Lit(v'#0), Lit(i#0), Lit(value#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && $IsBox(value#0, #$Value)
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[Lit(i#0)]
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.ClientRequestHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(i#0)]): DatatypeType, 
              Lit(value#0)))
         && (_2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.ClientRequestHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(i#0)]): DatatypeType, 
              Lit(value#0))
             && _2_raft.__default.ClientRequestHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(i#0)]): DatatypeType, 
              Lit(value#0))
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), Lit(i#0)))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), Lit(i#0))
             && Lit(_2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), Lit(i#0)))
           ==> $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.Variables.Variables_q(Lit(v#0)))
         && _2_raft.__default.ClientRequest(Lit(v#0), Lit(v'#0), Lit(i#0), Lit(value#0))
           == (
            _2_raft.__default.ServerIDs()[Lit(i#0)]
             && _2_raft.__default.ClientRequestHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(i#0)]): DatatypeType, 
              Lit(value#0))
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), Lit(i#0))
             && Lit(_2_raft.Variables.global(Lit(v'#0)))
               == Lit(_2_raft.Variables.global(Lit(v#0)))));

// function declaration for raft._default.Agree
function _2_raft.__default.Agree($ly: LayerType, h#0: DatatypeType, index#0: int) : Set Box;

function _2_raft.__default.Agree#canCall(h#0: DatatypeType, index#0: int) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, h#0: DatatypeType, index#0: int :: 
  { _2_raft.__default.Agree($LS($ly), h#0, index#0) } 
  _2_raft.__default.Agree($LS($ly), h#0, index#0)
     == _2_raft.__default.Agree($ly, h#0, index#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, h#0: DatatypeType, index#0: int :: 
  { _2_raft.__default.Agree(AsFuelBottom($ly), h#0, index#0) } 
  _2_raft.__default.Agree($ly, h#0, index#0)
     == _2_raft.__default.Agree($LZ, h#0, index#0));

// consequence axiom for _2_raft.__default.Agree
axiom true
   ==> (forall $ly: LayerType, h#0: DatatypeType, index#0: int :: 
    { _2_raft.__default.Agree($ly, h#0, index#0) } 
    _2_raft.__default.Agree#canCall(h#0, index#0)
         || ($Is(h#0, Tclass._2_raft.HostVars())
           && _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)))
       ==> (forall k#10: Box :: 
          { _2_raft.__default.ServerIDs()[k#10] } 
            { _2_raft.__default.Agree($ly, h#0, index#0)[k#10] } 
          $IsBox(k#10, #$ServerID)
             ==> 
            _2_raft.__default.Agree($ly, h#0, index#0)[k#10]
             ==> _2_raft.__default.ServerIDs()[k#10])
         && (forall k#11: Box :: 
          { $Unbox(Map#Elements(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h#0)))[k#11]): int } 
            { _2_raft.__default.Agree($ly, h#0, index#0)[k#11] } 
          $IsBox(k#11, #$ServerID)
             ==> 
            _2_raft.__default.Agree($ly, h#0, index#0)[k#11]
             ==> $Unbox(Map#Elements(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h#0)))[k#11]): int
               >= index#0)
         && $Is(_2_raft.__default.Agree($ly, h#0, index#0), TSet(#$ServerID)));

function _2_raft.__default.Agree#requires(LayerType, DatatypeType, int) : bool;

// #requires axiom for _2_raft.__default.Agree
axiom (forall $ly: LayerType, h#0: DatatypeType, index#0: int :: 
  { _2_raft.__default.Agree#requires($ly, h#0, index#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
     ==> _2_raft.__default.Agree#requires($ly, h#0, index#0)
       == _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)));

// definition axiom for _2_raft.__default.Agree(revealed)
axiom true
   ==> (forall $ly: LayerType, h#0: DatatypeType, index#0: int :: 
    { _2_raft.__default.Agree($LS($ly), h#0, index#0) } 
    _2_raft.__default.Agree#canCall(h#0, index#0)
         || ($Is(h#0, Tclass._2_raft.HostVars())
           && _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)))
       ==> (forall k#12: Box :: 
          { $Unbox(Map#Elements(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h#0)))[k#12]): int } 
            { _2_raft.__default.ServerIDs()[k#12] } 
          $IsBox(k#12, #$ServerID)
             ==> _2_raft.__default.ServerIDs#canCall()
               && (_2_raft.__default.ServerIDs()[k#12]
                 ==> _2_raft.HostVars.HostVars_q(h#0)
                   && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))))
         && _2_raft.__default.Agree($LS($ly), h#0, index#0)
           == (lambda $y#3: Box :: 
            $IsBox($y#3, #$ServerID)
               && 
              _2_raft.__default.ServerIDs()[$y#3]
               && $Unbox(Map#Elements(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h#0)))[$y#3]): int
                 >= index#0));

// definition axiom for _2_raft.__default.Agree for all literals(revealed)
axiom true
   ==> (forall $ly: LayerType, h#0: DatatypeType, index#0: int :: 
    {:weight 3} { _2_raft.__default.Agree($LS($ly), Lit(h#0), LitInt(index#0)) } 
    _2_raft.__default.Agree#canCall(Lit(h#0), LitInt(index#0))
         || ($Is(h#0, Tclass._2_raft.HostVars())
           && Lit(_2_raft.__default.WFLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))))
       ==> (forall k#13: Box :: 
          { $Unbox(Map#Elements(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h#0)))[k#13]): int } 
            { _2_raft.__default.ServerIDs()[k#13] } 
          $IsBox(k#13, #$ServerID)
             ==> _2_raft.__default.ServerIDs#canCall()
               && (_2_raft.__default.ServerIDs()[k#13]
                 ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                   && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))))
         && _2_raft.__default.Agree($LS($ly), Lit(h#0), LitInt(index#0))
           == (lambda $y#4: Box :: 
            $IsBox($y#4, #$ServerID)
               && 
              _2_raft.__default.ServerIDs()[$y#4]
               && $Unbox(Map#Elements(Lit(_2_raft.LeaderVars.matchIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[$y#4]): int
                 >= LitInt(index#0)));

// function declaration for raft._default.QuorumAtIndex
function _2_raft.__default.QuorumAtIndex(h#0: DatatypeType, index#0: int) : bool;

function _2_raft.__default.QuorumAtIndex#canCall(h#0: DatatypeType, index#0: int) : bool;

// consequence axiom for _2_raft.__default.QuorumAtIndex
axiom true
   ==> (forall h#0: DatatypeType, index#0: int :: 
    { _2_raft.__default.QuorumAtIndex(h#0, index#0) } 
    _2_raft.__default.QuorumAtIndex#canCall(h#0, index#0)
         || ($Is(h#0, Tclass._2_raft.HostVars())
           && _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)))
       ==> true);

function _2_raft.__default.QuorumAtIndex#requires(DatatypeType, int) : bool;

// #requires axiom for _2_raft.__default.QuorumAtIndex
axiom (forall h#0: DatatypeType, index#0: int :: 
  { _2_raft.__default.QuorumAtIndex#requires(h#0, index#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
     ==> _2_raft.__default.QuorumAtIndex#requires(h#0, index#0)
       == _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)));

// definition axiom for _2_raft.__default.QuorumAtIndex(revealed)
axiom true
   ==> (forall h#0: DatatypeType, index#0: int :: 
    { _2_raft.__default.QuorumAtIndex(h#0, index#0) } 
    _2_raft.__default.QuorumAtIndex#canCall(h#0, index#0)
         || ($Is(h#0, Tclass._2_raft.HostVars())
           && _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)))
       ==> _2_raft.__default.Agree#canCall(h#0, index#0)
         && _2_raft.__default.IsQuorum#canCall(_2_raft.__default.Agree(StartFuel_raft._default.Agree, h#0, index#0))
         && _2_raft.__default.QuorumAtIndex(h#0, index#0)
           == _2_raft.__default.IsQuorum(_2_raft.__default.Agree(StartFuel_raft._default.Agree, h#0, index#0)));

// definition axiom for _2_raft.__default.QuorumAtIndex for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, index#0: int :: 
    {:weight 3} { _2_raft.__default.QuorumAtIndex(Lit(h#0), LitInt(index#0)) } 
    _2_raft.__default.QuorumAtIndex#canCall(Lit(h#0), LitInt(index#0))
         || ($Is(h#0, Tclass._2_raft.HostVars())
           && Lit(_2_raft.__default.WFLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))))
       ==> _2_raft.__default.Agree#canCall(Lit(h#0), LitInt(index#0))
         && _2_raft.__default.IsQuorum#canCall(_2_raft.__default.Agree(StartFuel_raft._default.Agree, Lit(h#0), LitInt(index#0)))
         && _2_raft.__default.QuorumAtIndex(Lit(h#0), LitInt(index#0))
           == _2_raft.__default.IsQuorum(_2_raft.__default.Agree(StartFuel_raft._default.Agree, Lit(h#0), LitInt(index#0))));

// function declaration for raft._default.AgreeIndexesDef
function _2_raft.__default.AgreeIndexesDef($ly: LayerType, h#0: DatatypeType, limit#0: int) : Seq Box;

function _2_raft.__default.AgreeIndexesDef#canCall(h#0: DatatypeType, limit#0: int) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, h#0: DatatypeType, limit#0: int :: 
  { _2_raft.__default.AgreeIndexesDef($LS($ly), h#0, limit#0) } 
  _2_raft.__default.AgreeIndexesDef($LS($ly), h#0, limit#0)
     == _2_raft.__default.AgreeIndexesDef($ly, h#0, limit#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, h#0: DatatypeType, limit#0: int :: 
  { _2_raft.__default.AgreeIndexesDef(AsFuelBottom($ly), h#0, limit#0) } 
  _2_raft.__default.AgreeIndexesDef($ly, h#0, limit#0)
     == _2_raft.__default.AgreeIndexesDef($LZ, h#0, limit#0));

// consequence axiom for _2_raft.__default.AgreeIndexesDef
axiom true
   ==> (forall $ly: LayerType, h#0: DatatypeType, limit#0: int :: 
    { _2_raft.__default.AgreeIndexesDef($ly, h#0, limit#0) } 
    _2_raft.__default.AgreeIndexesDef#canCall(h#0, limit#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && LitInt(0) <= limit#0
           && _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)))
       ==> (forall index#6: int :: 
          { Seq#Contains(_2_raft.__default.AgreeIndexesDef($ly, h#0, limit#0), $Box(index#6)) } 
          true
             ==> (Seq#Contains(_2_raft.__default.AgreeIndexesDef($ly, h#0, limit#0), $Box(index#6))
                 ==> LitInt(0) <= index#6)
               && (Seq#Contains(_2_raft.__default.AgreeIndexesDef($ly, h#0, limit#0), $Box(index#6))
                 ==> index#6 < limit#0))
         && (forall index#7: int :: 
          { _2_raft.__default.QuorumAtIndex(h#0, index#7) } 
            { Seq#Contains(_2_raft.__default.AgreeIndexesDef($ly, h#0, limit#0), $Box(index#7)) } 
          true
             ==> 
            Seq#Contains(_2_raft.__default.AgreeIndexesDef($ly, h#0, limit#0), $Box(index#7))
             ==> _2_raft.__default.QuorumAtIndex(h#0, index#7))
         && $Is(_2_raft.__default.AgreeIndexesDef($ly, h#0, limit#0), TSeq(TInt)));

function _2_raft.__default.AgreeIndexesDef#requires(LayerType, DatatypeType, int) : bool;

// #requires axiom for _2_raft.__default.AgreeIndexesDef
axiom (forall $ly: LayerType, h#0: DatatypeType, limit#0: int :: 
  { _2_raft.__default.AgreeIndexesDef#requires($ly, h#0, limit#0) } 
  $Is(h#0, Tclass._2_raft.HostVars()) && LitInt(0) <= limit#0
     ==> _2_raft.__default.AgreeIndexesDef#requires($ly, h#0, limit#0)
       == _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)));

// definition axiom for _2_raft.__default.AgreeIndexesDef(revealed)
axiom true
   ==> (forall $ly: LayerType, h#0: DatatypeType, limit#0: int :: 
    { _2_raft.__default.AgreeIndexesDef($LS($ly), h#0, limit#0) } 
    _2_raft.__default.AgreeIndexesDef#canCall(h#0, limit#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && LitInt(0) <= limit#0
           && _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)))
       ==> (limit#0 != LitInt(0)
           ==> _2_raft.__default.AgreeIndexesDef#canCall(h#0, limit#0 - 1)
             && _2_raft.__default.QuorumAtIndex#canCall(h#0, limit#0 - 1))
         && _2_raft.__default.AgreeIndexesDef($LS($ly), h#0, limit#0)
           == (if limit#0 == LitInt(0)
             then Seq#Empty(): Seq Box
             else Seq#Append(_2_raft.__default.AgreeIndexesDef($ly, h#0, limit#0 - 1), 
              (if _2_raft.__default.QuorumAtIndex(h#0, limit#0 - 1)
                 then Seq#Build(Seq#Empty(): Seq Box, $Box(limit#0 - 1))
                 else Seq#Empty(): Seq Box))));

// definition axiom for _2_raft.__default.AgreeIndexesDef for decreasing-related literals(revealed)
axiom true
   ==> (forall $ly: LayerType, h#0: DatatypeType, limit#0: int :: 
    {:weight 3} { _2_raft.__default.AgreeIndexesDef($LS($ly), h#0, LitInt(limit#0)) } 
    _2_raft.__default.AgreeIndexesDef#canCall(h#0, LitInt(limit#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && LitInt(0) <= limit#0
           && _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)))
       ==> (LitInt(limit#0) != LitInt(0)
           ==> _2_raft.__default.AgreeIndexesDef#canCall(h#0, LitInt(limit#0 - 1))
             && _2_raft.__default.QuorumAtIndex#canCall(h#0, LitInt(limit#0 - 1)))
         && _2_raft.__default.AgreeIndexesDef($LS($ly), h#0, LitInt(limit#0))
           == (if LitInt(limit#0) == LitInt(0)
             then Seq#Empty(): Seq Box
             else Seq#Append(_2_raft.__default.AgreeIndexesDef($LS($ly), h#0, LitInt(limit#0 - 1)), 
              (if _2_raft.__default.QuorumAtIndex(h#0, LitInt(limit#0 - 1))
                 then Seq#Build(Seq#Empty(): Seq Box, $Box(LitInt(limit#0 - 1)))
                 else Seq#Empty(): Seq Box))));

// definition axiom for _2_raft.__default.AgreeIndexesDef for all literals(revealed)
axiom true
   ==> (forall $ly: LayerType, h#0: DatatypeType, limit#0: int :: 
    {:weight 3} { _2_raft.__default.AgreeIndexesDef($LS($ly), Lit(h#0), LitInt(limit#0)) } 
    _2_raft.__default.AgreeIndexesDef#canCall(Lit(h#0), LitInt(limit#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && LitInt(0) <= limit#0
           && Lit(_2_raft.__default.WFLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))))
       ==> (LitInt(limit#0) != LitInt(0)
           ==> _2_raft.__default.AgreeIndexesDef#canCall(Lit(h#0), LitInt(limit#0 - 1))
             && _2_raft.__default.QuorumAtIndex#canCall(Lit(h#0), LitInt(limit#0 - 1)))
         && _2_raft.__default.AgreeIndexesDef($LS($ly), Lit(h#0), LitInt(limit#0))
           == (if LitInt(limit#0) == LitInt(0)
             then Seq#Empty(): Seq Box
             else Seq#Append(_2_raft.__default.AgreeIndexesDef($LS($ly), Lit(h#0), LitInt(limit#0 - 1)), 
              (if _2_raft.__default.QuorumAtIndex(Lit(h#0), LitInt(limit#0 - 1))
                 then Seq#Build(Seq#Empty(): Seq Box, $Box(LitInt(limit#0 - 1)))
                 else Seq#Empty(): Seq Box))));

// function declaration for raft._default.AgreeIndexes
function _2_raft.__default.AgreeIndexes(h#0: DatatypeType) : Seq Box;

function _2_raft.__default.AgreeIndexes#canCall(h#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.AgreeIndexes
axiom true
   ==> (forall h#0: DatatypeType :: 
    { _2_raft.__default.AgreeIndexes(h#0) } 
    _2_raft.__default.AgreeIndexes#canCall(h#0)
         || ($Is(h#0, Tclass._2_raft.HostVars())
           && _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)))
       ==> $Is(_2_raft.__default.AgreeIndexes(h#0), TSeq(TInt)));

function _2_raft.__default.AgreeIndexes#requires(DatatypeType) : bool;

// #requires axiom for _2_raft.__default.AgreeIndexes
axiom (forall h#0: DatatypeType :: 
  { _2_raft.__default.AgreeIndexes#requires(h#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
     ==> _2_raft.__default.AgreeIndexes#requires(h#0)
       == _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)));

// definition axiom for _2_raft.__default.AgreeIndexes(revealed)
axiom true
   ==> (forall h#0: DatatypeType :: 
    { _2_raft.__default.AgreeIndexes(h#0) } 
    _2_raft.__default.AgreeIndexes#canCall(h#0)
         || ($Is(h#0, Tclass._2_raft.HostVars())
           && _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)))
       ==> _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
         && _2_raft.__default.AgreeIndexesDef#canCall(h#0, Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0))))
         && _2_raft.__default.AgreeIndexes(h#0)
           == _2_raft.__default.AgreeIndexesDef(StartFuel_raft._default.AgreeIndexesDef, 
            h#0, 
            Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))));

// definition axiom for _2_raft.__default.AgreeIndexes for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.AgreeIndexes(Lit(h#0)) } 
    _2_raft.__default.AgreeIndexes#canCall(Lit(h#0))
         || ($Is(h#0, Tclass._2_raft.HostVars())
           && Lit(_2_raft.__default.WFLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
         && _2_raft.__default.AgreeIndexesDef#canCall(Lit(h#0), 
          Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))))
         && _2_raft.__default.AgreeIndexes(Lit(h#0))
           == _2_raft.__default.AgreeIndexesDef(StartFuel_raft._default.AgreeIndexesDef, 
            Lit(h#0), 
            Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))));

// function declaration for raft._default.SeqMax
function _2_raft.__default.SeqMax($ly: LayerType, q#0: Seq Box) : int;

function _2_raft.__default.SeqMax#canCall(q#0: Seq Box) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, q#0: Seq Box :: 
  { _2_raft.__default.SeqMax($LS($ly), q#0) } 
  _2_raft.__default.SeqMax($LS($ly), q#0) == _2_raft.__default.SeqMax($ly, q#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, q#0: Seq Box :: 
  { _2_raft.__default.SeqMax(AsFuelBottom($ly), q#0) } 
  _2_raft.__default.SeqMax($ly, q#0) == _2_raft.__default.SeqMax($LZ, q#0));

// consequence axiom for _2_raft.__default.SeqMax
axiom true
   ==> (forall $ly: LayerType, q#0: Seq Box :: 
    { _2_raft.__default.SeqMax($ly, q#0) } 
    _2_raft.__default.SeqMax#canCall(q#0)
         || ($Is(q#0, TSeq(TInt)) && 0 < Seq#Length(q#0))
       ==> (forall i#3: int :: 
          { $Unbox(Seq#Index(q#0, i#3)): int } 
          true
             ==> 
            LitInt(0) <= i#3 && i#3 < Seq#Length(q#0)
             ==> _2_raft.__default.SeqMax($ly, q#0) >= $Unbox(Seq#Index(q#0, i#3)): int)
         && Seq#Contains(q#0, $Box(_2_raft.__default.SeqMax($ly, q#0))));

function _2_raft.__default.SeqMax#requires(LayerType, Seq Box) : bool;

// #requires axiom for _2_raft.__default.SeqMax
axiom (forall $ly: LayerType, q#0: Seq Box :: 
  { _2_raft.__default.SeqMax#requires($ly, q#0) } 
  $Is(q#0, TSeq(TInt))
     ==> _2_raft.__default.SeqMax#requires($ly, q#0) == (0 < Seq#Length(q#0)));

// definition axiom for _2_raft.__default.SeqMax(revealed)
axiom true
   ==> (forall $ly: LayerType, q#0: Seq Box :: 
    { _2_raft.__default.SeqMax($LS($ly), q#0) } 
    _2_raft.__default.SeqMax#canCall(q#0)
         || ($Is(q#0, TSeq(TInt)) && 0 < Seq#Length(q#0))
       ==> (Seq#Length(q#0) != LitInt(1)
           ==> _2_raft.__default.SeqMax#canCall(Seq#Take(q#0, Seq#Length(q#0) - 1))
             && _2_raft.__default.Max#canCall(_2_raft.__default.SeqMax($ly, Seq#Take(q#0, Seq#Length(q#0) - 1)), 
              $Unbox(Seq#Index(q#0, Seq#Length(q#0) - 1)): int))
         && _2_raft.__default.SeqMax($LS($ly), q#0)
           == (if Seq#Length(q#0) == LitInt(1)
             then $Unbox(Seq#Index(q#0, LitInt(0))): int
             else _2_raft.__default.Max(_2_raft.__default.SeqMax($ly, Seq#Take(q#0, Seq#Length(q#0) - 1)), 
              $Unbox(Seq#Index(q#0, Seq#Length(q#0) - 1)): int)));

// definition axiom for _2_raft.__default.SeqMax for all literals(revealed)
axiom true
   ==> (forall $ly: LayerType, q#0: Seq Box :: 
    {:weight 3} { _2_raft.__default.SeqMax($LS($ly), Lit(q#0)) } 
    _2_raft.__default.SeqMax#canCall(Lit(q#0))
         || ($Is(q#0, TSeq(TInt)) && 0 < Seq#Length(Lit(q#0)))
       ==> (Seq#Length(Lit(q#0)) != LitInt(1)
           ==> _2_raft.__default.SeqMax#canCall(Seq#Take(Lit(q#0), Seq#Length(Lit(q#0)) - 1))
             && _2_raft.__default.Max#canCall(_2_raft.__default.SeqMax($LS($ly), Seq#Take(Lit(q#0), Seq#Length(Lit(q#0)) - 1)), 
              $Unbox(Seq#Index(Lit(q#0), Seq#Length(Lit(q#0)) - 1)): int))
         && _2_raft.__default.SeqMax($LS($ly), Lit(q#0))
           == (if Seq#Length(Lit(q#0)) == LitInt(1)
             then $Unbox(Seq#Index(Lit(q#0), LitInt(0))): int
             else _2_raft.__default.Max(_2_raft.__default.SeqMax($LS($ly), Seq#Take(Lit(q#0), Seq#Length(Lit(q#0)) - 1)), 
              $Unbox(Seq#Index(Lit(q#0), Seq#Length(Lit(q#0)) - 1)): int)));

// function declaration for raft._default.MaxAgreeIndex
function _2_raft.__default.MaxAgreeIndex(h#0: DatatypeType) : int;

function _2_raft.__default.MaxAgreeIndex#canCall(h#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.MaxAgreeIndex
axiom true
   ==> (forall h#0: DatatypeType :: 
    { _2_raft.__default.MaxAgreeIndex(h#0) } 
    _2_raft.__default.MaxAgreeIndex#canCall(h#0)
         || ($Is(h#0, Tclass._2_raft.HostVars())
           && 
          _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
           && !Seq#Equal(_2_raft.__default.AgreeIndexes(h#0), Seq#Empty(): Seq Box))
       ==> Seq#Contains(_2_raft.__default.AgreeIndexes(h#0), $Box(_2_raft.__default.MaxAgreeIndex(h#0)))
         && (forall i2#3: int :: 
          { Seq#Contains(_2_raft.__default.AgreeIndexes(h#0), $Box(i2#3)) } 
          true
             ==> 
            Seq#Contains(_2_raft.__default.AgreeIndexes(h#0), $Box(i2#3))
             ==> i2#3 <= _2_raft.__default.MaxAgreeIndex(h#0)));

function _2_raft.__default.MaxAgreeIndex#requires(DatatypeType) : bool;

// #requires axiom for _2_raft.__default.MaxAgreeIndex
axiom (forall h#0: DatatypeType :: 
  { _2_raft.__default.MaxAgreeIndex#requires(h#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
     ==> _2_raft.__default.MaxAgreeIndex#requires(h#0)
       == (_2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
         && !Seq#Equal(_2_raft.__default.AgreeIndexes(h#0), Seq#Empty(): Seq Box)));

// definition axiom for _2_raft.__default.MaxAgreeIndex(revealed)
axiom true
   ==> (forall h#0: DatatypeType :: 
    { _2_raft.__default.MaxAgreeIndex(h#0) } 
    _2_raft.__default.MaxAgreeIndex#canCall(h#0)
         || ($Is(h#0, Tclass._2_raft.HostVars())
           && 
          _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
           && !Seq#Equal(_2_raft.__default.AgreeIndexes(h#0), Seq#Empty(): Seq Box))
       ==> _2_raft.__default.AgreeIndexes#canCall(h#0)
         && _2_raft.__default.SeqMax#canCall(_2_raft.__default.AgreeIndexes(h#0))
         && _2_raft.__default.MaxAgreeIndex(h#0)
           == _2_raft.__default.SeqMax(StartFuel_raft._default.SeqMax, _2_raft.__default.AgreeIndexes(h#0)));

// definition axiom for _2_raft.__default.MaxAgreeIndex for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.MaxAgreeIndex(Lit(h#0)) } 
    _2_raft.__default.MaxAgreeIndex#canCall(Lit(h#0))
         || ($Is(h#0, Tclass._2_raft.HostVars())
           && 
          Lit(_2_raft.__default.WFLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0)))))
           && !Seq#Equal(_2_raft.__default.AgreeIndexes(Lit(h#0)), Seq#Empty(): Seq Box))
       ==> _2_raft.__default.AgreeIndexes#canCall(Lit(h#0))
         && _2_raft.__default.SeqMax#canCall(Lit(_2_raft.__default.AgreeIndexes(Lit(h#0))))
         && _2_raft.__default.MaxAgreeIndex(Lit(h#0))
           == _2_raft.__default.SeqMax(StartFuel_raft._default.SeqMax, Lit(_2_raft.__default.AgreeIndexes(Lit(h#0)))));

// function declaration for raft._default.NewCommitIndex
function _2_raft.__default.NewCommitIndex(h#0: DatatypeType) : int;

function _2_raft.__default.NewCommitIndex#canCall(h#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.NewCommitIndex
axiom true
   ==> (forall h#0: DatatypeType :: 
    { _2_raft.__default.NewCommitIndex(h#0) } 
    _2_raft.__default.NewCommitIndex#canCall(h#0)
         || ($Is(h#0, Tclass._2_raft.HostVars())
           && _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)))
       ==> true);

function _2_raft.__default.NewCommitIndex#requires(DatatypeType) : bool;

// #requires axiom for _2_raft.__default.NewCommitIndex
axiom (forall h#0: DatatypeType :: 
  { _2_raft.__default.NewCommitIndex#requires(h#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
     ==> _2_raft.__default.NewCommitIndex#requires(h#0)
       == _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)));

// definition axiom for _2_raft.__default.NewCommitIndex(revealed)
axiom true
   ==> (forall h#0: DatatypeType :: 
    { _2_raft.__default.NewCommitIndex(h#0) } 
    _2_raft.__default.NewCommitIndex#canCall(h#0)
         || ($Is(h#0, Tclass._2_raft.HostVars())
           && _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)))
       ==> _2_raft.__default.AgreeIndexes#canCall(h#0)
         && (Seq#Length(_2_raft.__default.AgreeIndexes(h#0)) == LitInt(0)
           ==> _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0)))
         && (Seq#Length(_2_raft.__default.AgreeIndexes(h#0)) != LitInt(0)
           ==> _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && _2_raft.__default.MaxAgreeIndex#canCall(h#0)
             && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
                  _2_raft.__default.MaxAgreeIndex(h#0))): DatatypeType)
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
             && (_2_raft.LogEntry.term($Unbox(Seq#Index(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
                      _2_raft.__default.MaxAgreeIndex(h#0))): DatatypeType)
                 != _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
               ==> _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0)))
             && (_2_raft.LogEntry.term($Unbox(Seq#Index(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
                      _2_raft.__default.MaxAgreeIndex(h#0))): DatatypeType)
                 == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
               ==> _2_raft.__default.MaxAgreeIndex#canCall(h#0)))
         && _2_raft.__default.NewCommitIndex(h#0)
           == (if Seq#Length(_2_raft.__default.AgreeIndexes(h#0)) == LitInt(0)
             then _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h#0))
             else (if _2_raft.LogEntry.term($Unbox(Seq#Index(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
                      _2_raft.__default.MaxAgreeIndex(h#0))): DatatypeType)
                 != _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
               then _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h#0))
               else _2_raft.__default.MaxAgreeIndex(h#0))));

// definition axiom for _2_raft.__default.NewCommitIndex for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.NewCommitIndex(Lit(h#0)) } 
    _2_raft.__default.NewCommitIndex#canCall(Lit(h#0))
         || ($Is(h#0, Tclass._2_raft.HostVars())
           && Lit(_2_raft.__default.WFLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))))
       ==> _2_raft.__default.AgreeIndexes#canCall(Lit(h#0))
         && (Seq#Length(Lit(_2_raft.__default.AgreeIndexes(Lit(h#0)))) == LitInt(0)
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
         && (Seq#Length(Lit(_2_raft.__default.AgreeIndexes(Lit(h#0)))) != LitInt(0)
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && _2_raft.__default.MaxAgreeIndex#canCall(Lit(h#0))
             && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
                  LitInt(_2_raft.__default.MaxAgreeIndex(Lit(h#0))))): DatatypeType)
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && (_2_raft.LogEntry.term($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
                      LitInt(_2_raft.__default.MaxAgreeIndex(Lit(h#0))))): DatatypeType)
                 != _2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))
               ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
             && (_2_raft.LogEntry.term($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
                      LitInt(_2_raft.__default.MaxAgreeIndex(Lit(h#0))))): DatatypeType)
                 == _2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))
               ==> _2_raft.__default.MaxAgreeIndex#canCall(Lit(h#0))))
         && _2_raft.__default.NewCommitIndex(Lit(h#0))
           == (if Seq#Length(Lit(_2_raft.__default.AgreeIndexes(Lit(h#0)))) == LitInt(0)
             then _2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h#0))))
             else (if _2_raft.LogEntry.term($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
                      LitInt(_2_raft.__default.MaxAgreeIndex(Lit(h#0))))): DatatypeType)
                 != _2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))
               then _2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h#0))))
               else _2_raft.__default.MaxAgreeIndex(Lit(h#0)))));

// function declaration for raft._default.AdvanceCommitIndexHost
function _2_raft.__default.AdvanceCommitIndexHost(h#0: DatatypeType, h'#0: DatatypeType) : bool;

function _2_raft.__default.AdvanceCommitIndexHost#canCall(h#0: DatatypeType, h'#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.AdvanceCommitIndexHost
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType :: 
    { _2_raft.__default.AdvanceCommitIndexHost(h#0, h'#0) } 
    _2_raft.__default.AdvanceCommitIndexHost#canCall(h#0, h'#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)))
       ==> true);

function _2_raft.__default.AdvanceCommitIndexHost#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.AdvanceCommitIndexHost
axiom (forall h#0: DatatypeType, h'#0: DatatypeType :: 
  { _2_raft.__default.AdvanceCommitIndexHost#requires(h#0, h'#0) } 
  $Is(h#0, Tclass._2_raft.HostVars()) && $Is(h'#0, Tclass._2_raft.HostVars())
     ==> _2_raft.__default.AdvanceCommitIndexHost#requires(h#0, h'#0)
       == _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)));

// definition axiom for _2_raft.__default.AdvanceCommitIndexHost(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType :: 
    { _2_raft.__default.AdvanceCommitIndexHost(h#0, h'#0) } 
    _2_raft.__default.AdvanceCommitIndexHost#canCall(h#0, h'#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0)))
       ==> _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
         && (_2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && _2_raft.__default.NewCommitIndex#canCall(h#0))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && _2_raft.__default.NewCommitIndex#canCall(h#0)
             && _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h'#0))
               == _2_raft.__default.NewCommitIndex(h#0)
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && Seq#Equal(_2_raft.LogVars.log(_2_raft.HostVars.log(h'#0)), 
              _2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
           ==> $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h'#0))
             && $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && ($IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h'#0))
             && $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.HostVars.server(h'#0) == _2_raft.HostVars.server(h#0)
           ==> $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
             && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && ($IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
             && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
           ==> $IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h'#0))
             && $IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && _2_raft.__default.AdvanceCommitIndexHost(h#0, h'#0)
           == (
            _2_raft.ServerState.Leader_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
             && _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h'#0))
               == _2_raft.__default.NewCommitIndex(h#0)
             && Seq#Equal(_2_raft.LogVars.log(_2_raft.HostVars.log(h'#0)), 
              _2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
             && _2_raft.HostVars.server(h'#0) == _2_raft.HostVars.server(h#0)
             && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
             && _2_raft.HostVars.leader(h'#0) == _2_raft.HostVars.leader(h#0)));

// definition axiom for _2_raft.__default.AdvanceCommitIndexHost for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.AdvanceCommitIndexHost(Lit(h#0), Lit(h'#0)) } 
    _2_raft.__default.AdvanceCommitIndexHost#canCall(Lit(h#0), Lit(h'#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && Lit(_2_raft.__default.WFLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && (Lit(_2_raft.ServerState.Leader_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && _2_raft.__default.NewCommitIndex#canCall(Lit(h#0)))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && _2_raft.__default.NewCommitIndex#canCall(Lit(h#0))
             && LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h'#0)))))
               == LitInt(_2_raft.__default.NewCommitIndex(Lit(h#0)))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && Seq#Equal(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h'#0)))), 
              _2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))
           ==> $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.server(Lit(h'#0)))
               == Lit(_2_raft.HostVars.server(Lit(h#0)))
           ==> $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
               == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
           ==> $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && _2_raft.__default.AdvanceCommitIndexHost(Lit(h#0), Lit(h'#0))
           == (
            _2_raft.ServerState.Leader_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
             && LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h'#0)))))
               == LitInt(_2_raft.__default.NewCommitIndex(Lit(h#0)))
             && Seq#Equal(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h'#0)))), 
              _2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))
             && Lit(_2_raft.HostVars.server(Lit(h'#0)))
               == Lit(_2_raft.HostVars.server(Lit(h#0)))
             && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
               == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
             && Lit(_2_raft.HostVars.leader(Lit(h'#0)))
               == Lit(_2_raft.HostVars.leader(Lit(h#0)))));

// function declaration for raft._default.AdvanceCommitIndex
function _2_raft.__default.AdvanceCommitIndex(v#0: DatatypeType, v'#0: DatatypeType, i#0: Box) : bool;

function _2_raft.__default.AdvanceCommitIndex#canCall(v#0: DatatypeType, v'#0: DatatypeType, i#0: Box) : bool;

// consequence axiom for _2_raft.__default.AdvanceCommitIndex
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box :: 
    { _2_raft.__default.AdvanceCommitIndex(v#0, v'#0, i#0) } 
    _2_raft.__default.AdvanceCommitIndex#canCall(v#0, v'#0, i#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> true);

function _2_raft.__default.AdvanceCommitIndex#requires(DatatypeType, DatatypeType, Box) : bool;

// #requires axiom for _2_raft.__default.AdvanceCommitIndex
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box :: 
  { _2_raft.__default.AdvanceCommitIndex#requires(v#0, v'#0, i#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $IsBox(i#0, #$ServerID)
     ==> _2_raft.__default.AdvanceCommitIndex#requires(v#0, v'#0, i#0)
       == (_2_raft.__default.WFVars(v#0) && _2_raft.__default.WFVars(v'#0)));

// definition axiom for _2_raft.__default.AdvanceCommitIndex(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box :: 
    { _2_raft.__default.AdvanceCommitIndex(v#0, v'#0, i#0) } 
    _2_raft.__default.AdvanceCommitIndex#canCall(v#0, v'#0, i#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[i#0]
           ==> _2_raft.Variables.Variables_q(v#0)
             && _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.__default.AdvanceCommitIndexHost#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[i#0]): DatatypeType))
         && (_2_raft.Variables.Variables_q(v#0)
             && _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.__default.AdvanceCommitIndexHost#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[i#0]): DatatypeType)
             && _2_raft.__default.AdvanceCommitIndexHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[i#0]): DatatypeType)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(v'#0, v#0, i#0))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(v'#0, v#0, i#0)
             && _2_raft.__default.UnchangedOtherHosts(v'#0, v#0, i#0)
           ==> $IsA#_2_raft.GlobalVars(_2_raft.Variables.global(v'#0))
             && $IsA#_2_raft.GlobalVars(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.Variables.Variables_q(v#0))
         && _2_raft.__default.AdvanceCommitIndex(v#0, v'#0, i#0)
           == (
            _2_raft.__default.ServerIDs()[i#0]
             && _2_raft.__default.AdvanceCommitIndexHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[i#0]): DatatypeType)
             && _2_raft.__default.UnchangedOtherHosts(v'#0, v#0, i#0)
             && _2_raft.Variables.global(v'#0) == _2_raft.Variables.global(v#0)));

// definition axiom for _2_raft.__default.AdvanceCommitIndex for decreasing-related literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box :: 
    {:weight 3} { _2_raft.__default.AdvanceCommitIndex(Lit(v#0), Lit(v'#0), i#0) } 
    _2_raft.__default.AdvanceCommitIndex#canCall(Lit(v#0), Lit(v'#0), i#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[i#0]
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.AdvanceCommitIndexHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[i#0]): DatatypeType))
         && (_2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.AdvanceCommitIndexHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[i#0]): DatatypeType)
             && _2_raft.__default.AdvanceCommitIndexHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[i#0]): DatatypeType)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), i#0))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), i#0)
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), i#0)
           ==> $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.Variables.Variables_q(Lit(v#0)))
         && _2_raft.__default.AdvanceCommitIndex(Lit(v#0), Lit(v'#0), i#0)
           == (
            _2_raft.__default.ServerIDs()[i#0]
             && _2_raft.__default.AdvanceCommitIndexHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[i#0]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[i#0]): DatatypeType)
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), i#0)
             && Lit(_2_raft.Variables.global(Lit(v'#0)))
               == Lit(_2_raft.Variables.global(Lit(v#0)))));

// definition axiom for _2_raft.__default.AdvanceCommitIndex for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, i#0: Box :: 
    {:weight 3} { _2_raft.__default.AdvanceCommitIndex(Lit(v#0), Lit(v'#0), Lit(i#0)) } 
    _2_raft.__default.AdvanceCommitIndex#canCall(Lit(v#0), Lit(v'#0), Lit(i#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $IsBox(i#0, #$ServerID)
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.ServerIDs#canCall()
         && (_2_raft.__default.ServerIDs()[Lit(i#0)]
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.AdvanceCommitIndexHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(i#0)]): DatatypeType))
         && (_2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.AdvanceCommitIndexHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(i#0)]): DatatypeType)
             && _2_raft.__default.AdvanceCommitIndexHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(i#0)]): DatatypeType)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), Lit(i#0)))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), Lit(i#0))
             && Lit(_2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), Lit(i#0)))
           ==> $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.Variables.Variables_q(Lit(v#0)))
         && _2_raft.__default.AdvanceCommitIndex(Lit(v#0), Lit(v'#0), Lit(i#0))
           == (
            _2_raft.__default.ServerIDs()[Lit(i#0)]
             && _2_raft.__default.AdvanceCommitIndexHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(i#0)]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(i#0)]): DatatypeType)
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), Lit(i#0))
             && Lit(_2_raft.Variables.global(Lit(v'#0)))
               == Lit(_2_raft.Variables.global(Lit(v#0)))));

// function declaration for raft._default.VoteLogOk
function _2_raft.__default.VoteLogOk(h#0: DatatypeType, m#0: DatatypeType) : bool;

function _2_raft.__default.VoteLogOk#canCall(h#0: DatatypeType, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.VoteLogOk
axiom true
   ==> (forall h#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.VoteLogOk(h#0, m#0) } 
    _2_raft.__default.VoteLogOk#canCall(h#0, m#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && _2_raft.Message.RequestVoteRequest_q(m#0))
       ==> true);

function _2_raft.__default.VoteLogOk#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.VoteLogOk
axiom (forall h#0: DatatypeType, m#0: DatatypeType :: 
  { _2_raft.__default.VoteLogOk#requires(h#0, m#0) } 
  $Is(h#0, Tclass._2_raft.HostVars()) && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.VoteLogOk#requires(h#0, m#0)
       == _2_raft.Message.RequestVoteRequest_q(m#0));

// definition axiom for _2_raft.__default.VoteLogOk(revealed)
axiom true
   ==> (forall h#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.VoteLogOk(h#0, m#0) } 
    _2_raft.__default.VoteLogOk#canCall(h#0, m#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && _2_raft.Message.RequestVoteRequest_q(m#0))
       ==> _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
         && _2_raft.__default.LastTerm#canCall(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
         && (_2_raft.__default.LastTerm(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
             >= _2_raft.Message.lastLogTerm(m#0)
           ==> _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && _2_raft.__default.LastTerm#canCall(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
             && (_2_raft.Message.lastLogTerm(m#0)
                 == _2_raft.__default.LastTerm(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
               ==> _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))))
         && _2_raft.__default.VoteLogOk(h#0, m#0)
           == (_2_raft.Message.lastLogTerm(m#0)
               > _2_raft.__default.LastTerm(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
             || (_2_raft.Message.lastLogTerm(m#0)
                 == _2_raft.__default.LastTerm(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
               && _2_raft.Message.lastLogIndex(m#0)
                 >= Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0))))));

// definition axiom for _2_raft.__default.VoteLogOk for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.VoteLogOk(Lit(h#0), Lit(m#0)) } 
    _2_raft.__default.VoteLogOk#canCall(Lit(h#0), Lit(m#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && Lit(_2_raft.Message.RequestVoteRequest_q(Lit(m#0))))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
         && _2_raft.__default.LastTerm#canCall(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
         && (!Lit(_2_raft.Message.lastLogTerm(Lit(m#0))
               > _2_raft.__default.LastTerm(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && _2_raft.__default.LastTerm#canCall(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
             && (LitInt(_2_raft.Message.lastLogTerm(Lit(m#0)))
                 == LitInt(_2_raft.__default.LastTerm(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))))
               ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))))
         && _2_raft.__default.VoteLogOk(Lit(h#0), Lit(m#0))
           == (_2_raft.Message.lastLogTerm(Lit(m#0))
               > _2_raft.__default.LastTerm(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
             || (LitInt(_2_raft.Message.lastLogTerm(Lit(m#0)))
                 == LitInt(_2_raft.__default.LastTerm(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))))
               && LitInt(_2_raft.Message.lastLogIndex(Lit(m#0)))
                 >= Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))))));

// function declaration for raft._default.Grant
function _2_raft.__default.Grant(h#0: DatatypeType, j#0: Box, m#0: DatatypeType) : bool;

function _2_raft.__default.Grant#canCall(h#0: DatatypeType, j#0: Box, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.Grant
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box, m#0: DatatypeType :: 
    { _2_raft.__default.Grant(h#0, j#0, m#0) } 
    _2_raft.__default.Grant#canCall(h#0, j#0, m#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.ServerIDs()[j#0]
           && _2_raft.Message.RequestVoteRequest_q(m#0))
       ==> true);

function _2_raft.__default.Grant#requires(DatatypeType, Box, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.Grant
axiom (forall h#0: DatatypeType, j#0: Box, m#0: DatatypeType :: 
  { _2_raft.__default.Grant#requires(h#0, j#0, m#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
       && $IsBox(j#0, #$ServerID)
       && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.Grant#requires(h#0, j#0, m#0)
       == (_2_raft.__default.ServerIDs()[j#0]
         && _2_raft.Message.RequestVoteRequest_q(m#0)));

// definition axiom for _2_raft.__default.Grant(revealed)
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box, m#0: DatatypeType :: 
    { _2_raft.__default.Grant(h#0, j#0, m#0) } 
    _2_raft.__default.Grant#canCall(h#0, j#0, m#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.ServerIDs()[j#0]
           && _2_raft.Message.RequestVoteRequest_q(m#0))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
         && (_2_raft.Message.term(m#0)
             == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
           ==> _2_raft.__default.VoteLogOk#canCall(h#0, m#0))
         && (_2_raft.__default.VoteLogOk#canCall(h#0, m#0)
             && _2_raft.__default.VoteLogOk(h#0, m#0)
           ==> _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
             && (!_0_MissingLibrary.Option.None_q(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
               ==> $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))))
         && _2_raft.__default.Grant(h#0, j#0, m#0)
           == (
            _2_raft.Message.term(m#0)
               == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
             && _2_raft.__default.VoteLogOk(h#0, m#0)
             && (_0_MissingLibrary.Option.None_q(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
               || _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0))
                 == #MissingLibrary.Option.Some(j#0))));

// definition axiom for _2_raft.__default.Grant for decreasing-related literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.Grant(Lit(h#0), j#0, Lit(m#0)) } 
    _2_raft.__default.Grant#canCall(Lit(h#0), j#0, Lit(m#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.ServerIDs()[j#0]
           && Lit(_2_raft.Message.RequestVoteRequest_q(Lit(m#0))))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && (LitInt(_2_raft.Message.term(Lit(m#0)))
             == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> _2_raft.__default.VoteLogOk#canCall(Lit(h#0), Lit(m#0)))
         && (_2_raft.__default.VoteLogOk#canCall(Lit(h#0), Lit(m#0))
             && Lit(_2_raft.__default.VoteLogOk(Lit(h#0), Lit(m#0)))
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && (!Lit(_0_MissingLibrary.Option.None_q(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
               ==> $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))))
         && _2_raft.__default.Grant(Lit(h#0), j#0, Lit(m#0))
           == (
            LitInt(_2_raft.Message.term(Lit(m#0)))
               == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && _2_raft.__default.VoteLogOk(Lit(h#0), Lit(m#0))
             && (_0_MissingLibrary.Option.None_q(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
               || Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 == #MissingLibrary.Option.Some(j#0))));

// definition axiom for _2_raft.__default.Grant for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, j#0: Box, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.Grant(Lit(h#0), Lit(j#0), Lit(m#0)) } 
    _2_raft.__default.Grant#canCall(Lit(h#0), Lit(j#0), Lit(m#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.ServerIDs()[Lit(j#0)]
           && Lit(_2_raft.Message.RequestVoteRequest_q(Lit(m#0))))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && (LitInt(_2_raft.Message.term(Lit(m#0)))
             == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> _2_raft.__default.VoteLogOk#canCall(Lit(h#0), Lit(m#0)))
         && (_2_raft.__default.VoteLogOk#canCall(Lit(h#0), Lit(m#0))
             && Lit(_2_raft.__default.VoteLogOk(Lit(h#0), Lit(m#0)))
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && (!Lit(_0_MissingLibrary.Option.None_q(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
               ==> $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))))
         && _2_raft.__default.Grant(Lit(h#0), Lit(j#0), Lit(m#0))
           == (
            LitInt(_2_raft.Message.term(Lit(m#0)))
               == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && _2_raft.__default.VoteLogOk(Lit(h#0), Lit(m#0))
             && (_0_MissingLibrary.Option.None_q(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
               || Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 == Lit(#MissingLibrary.Option.Some(Lit(j#0))))));

// function declaration for raft._default.HandleRequestVoteRequestHost
function _2_raft.__default.HandleRequestVoteRequestHost(h#0: DatatypeType, h'#0: DatatypeType, j#0: Box, m#0: DatatypeType) : bool;

function _2_raft.__default.HandleRequestVoteRequestHost#canCall(h#0: DatatypeType, h'#0: DatatypeType, j#0: Box, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.HandleRequestVoteRequestHost
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, j#0: Box, m#0: DatatypeType :: 
    { _2_raft.__default.HandleRequestVoteRequestHost(h#0, h'#0, j#0, m#0) } 
    _2_raft.__default.HandleRequestVoteRequestHost#canCall(h#0, h'#0, j#0, m#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.ServerIDs()[j#0]
           && _2_raft.Message.RequestVoteRequest_q(m#0))
       ==> true);

function _2_raft.__default.HandleRequestVoteRequestHost#requires(DatatypeType, DatatypeType, Box, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.HandleRequestVoteRequestHost
axiom (forall h#0: DatatypeType, h'#0: DatatypeType, j#0: Box, m#0: DatatypeType :: 
  { _2_raft.__default.HandleRequestVoteRequestHost#requires(h#0, h'#0, j#0, m#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
       && $Is(h'#0, Tclass._2_raft.HostVars())
       && $IsBox(j#0, #$ServerID)
       && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.HandleRequestVoteRequestHost#requires(h#0, h'#0, j#0, m#0)
       == (_2_raft.__default.ServerIDs()[j#0]
         && _2_raft.Message.RequestVoteRequest_q(m#0)));

// definition axiom for _2_raft.__default.HandleRequestVoteRequestHost(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, j#0: Box, m#0: DatatypeType :: 
    { _2_raft.__default.HandleRequestVoteRequestHost(h#0, h'#0, j#0, m#0) } 
    _2_raft.__default.HandleRequestVoteRequestHost#canCall(h#0, h'#0, j#0, m#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.ServerIDs()[j#0]
           && _2_raft.Message.RequestVoteRequest_q(m#0))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
         && (_2_raft.Message.term(m#0)
             <= _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
           ==> $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
             && $IsA#_0_MissingLibrary.Option((if _2_raft.__default.Grant(h#0, j#0, m#0)
                 then #MissingLibrary.Option.Some(j#0)
                 else _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && 
            _2_raft.__default.Grant#canCall(h#0, j#0, m#0)
             && (!_2_raft.__default.Grant(h#0, j#0, m#0)
               ==> _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))))
         && ($IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
             && $IsA#_0_MissingLibrary.Option((if _2_raft.__default.Grant(h#0, j#0, m#0)
                 then #MissingLibrary.Option.Some(j#0)
                 else _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && 
            _2_raft.__default.Grant#canCall(h#0, j#0, m#0)
             && (!_2_raft.__default.Grant(h#0, j#0, m#0)
               ==> _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
             && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
               == (if _2_raft.__default.Grant(h#0, j#0, m#0)
                 then #MissingLibrary.Option.Some(j#0)
                 else _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
           ==> $IsA#_2_raft.ServerState(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
             && $IsA#_2_raft.ServerState(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
         && ($IsA#_2_raft.ServerState(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
             && $IsA#_2_raft.ServerState(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
             && _2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0))
               == _2_raft.ServerVars.state(_2_raft.HostVars.server(h#0))
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
             && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
               == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
           ==> $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
             && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && ($IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
             && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
           ==> $IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h'#0))
             && $IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && ($IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h'#0))
             && $IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.HostVars.leader(h'#0) == _2_raft.HostVars.leader(h#0)
           ==> $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
             && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && _2_raft.__default.HandleRequestVoteRequestHost(h#0, h'#0, j#0, m#0)
           == (
            _2_raft.Message.term(m#0)
               <= _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
             && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
               == (if _2_raft.__default.Grant(h#0, j#0, m#0)
                 then #MissingLibrary.Option.Some(j#0)
                 else _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
             && _2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0))
               == _2_raft.ServerVars.state(_2_raft.HostVars.server(h#0))
             && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
               == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
             && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
             && _2_raft.HostVars.leader(h'#0) == _2_raft.HostVars.leader(h#0)
             && _2_raft.HostVars.log(h'#0) == _2_raft.HostVars.log(h#0)));

// definition axiom for _2_raft.__default.HandleRequestVoteRequestHost for decreasing-related literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, j#0: Box, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.HandleRequestVoteRequestHost(Lit(h#0), Lit(h'#0), j#0, Lit(m#0)) } 
    _2_raft.__default.HandleRequestVoteRequestHost#canCall(Lit(h#0), Lit(h'#0), j#0, Lit(m#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.ServerIDs()[j#0]
           && Lit(_2_raft.Message.RequestVoteRequest_q(Lit(m#0))))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && (LitInt(_2_raft.Message.term(Lit(m#0)))
             <= LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && $IsA#_0_MissingLibrary.Option((if _2_raft.__default.Grant(Lit(h#0), j#0, Lit(m#0))
                 then #MissingLibrary.Option.Some(j#0)
                 else _2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.__default.Grant#canCall(Lit(h#0), j#0, Lit(m#0))
             && (!_2_raft.__default.Grant(Lit(h#0), j#0, Lit(m#0))
               ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))))
         && ($IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && $IsA#_0_MissingLibrary.Option((if _2_raft.__default.Grant(Lit(h#0), j#0, Lit(m#0))
                 then #MissingLibrary.Option.Some(j#0)
                 else _2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.__default.Grant#canCall(Lit(h#0), j#0, Lit(m#0))
             && (!_2_raft.__default.Grant(Lit(h#0), j#0, Lit(m#0))
               ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == (if _2_raft.__default.Grant(Lit(h#0), j#0, Lit(m#0))
                 then #MissingLibrary.Option.Some(j#0)
                 else _2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> $IsA#_2_raft.ServerState(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && $IsA#_2_raft.ServerState(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
         && ($IsA#_2_raft.ServerState(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && $IsA#_2_raft.ServerState(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
               == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
           ==> $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.leader(Lit(h'#0)))
               == Lit(_2_raft.HostVars.leader(Lit(h#0)))
           ==> $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && _2_raft.__default.HandleRequestVoteRequestHost(Lit(h#0), Lit(h'#0), j#0, Lit(m#0))
           == (
            LitInt(_2_raft.Message.term(Lit(m#0)))
               <= LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == (if _2_raft.__default.Grant(Lit(h#0), j#0, Lit(m#0))
                 then #MissingLibrary.Option.Some(j#0)
                 else _2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
               == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
             && Lit(_2_raft.HostVars.leader(Lit(h'#0)))
               == Lit(_2_raft.HostVars.leader(Lit(h#0)))
             && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0)))));

// definition axiom for _2_raft.__default.HandleRequestVoteRequestHost for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, j#0: Box, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.HandleRequestVoteRequestHost(Lit(h#0), Lit(h'#0), Lit(j#0), Lit(m#0)) } 
    _2_raft.__default.HandleRequestVoteRequestHost#canCall(Lit(h#0), Lit(h'#0), Lit(j#0), Lit(m#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.ServerIDs()[Lit(j#0)]
           && Lit(_2_raft.Message.RequestVoteRequest_q(Lit(m#0))))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && (LitInt(_2_raft.Message.term(Lit(m#0)))
             <= LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && $IsA#_0_MissingLibrary.Option((if _2_raft.__default.Grant(Lit(h#0), Lit(j#0), Lit(m#0))
                 then #MissingLibrary.Option.Some(Lit(j#0))
                 else _2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.__default.Grant#canCall(Lit(h#0), Lit(j#0), Lit(m#0))
             && (!Lit(_2_raft.__default.Grant(Lit(h#0), Lit(j#0), Lit(m#0)))
               ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))))
         && ($IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && $IsA#_0_MissingLibrary.Option((if _2_raft.__default.Grant(Lit(h#0), Lit(j#0), Lit(m#0))
                 then #MissingLibrary.Option.Some(Lit(j#0))
                 else _2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.__default.Grant#canCall(Lit(h#0), Lit(j#0), Lit(m#0))
             && (!Lit(_2_raft.__default.Grant(Lit(h#0), Lit(j#0), Lit(m#0)))
               ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == (if _2_raft.__default.Grant(Lit(h#0), Lit(j#0), Lit(m#0))
                 then #MissingLibrary.Option.Some(Lit(j#0))
                 else _2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> $IsA#_2_raft.ServerState(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && $IsA#_2_raft.ServerState(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
         && ($IsA#_2_raft.ServerState(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && $IsA#_2_raft.ServerState(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
               == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
           ==> $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.leader(Lit(h'#0)))
               == Lit(_2_raft.HostVars.leader(Lit(h#0)))
           ==> $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && _2_raft.__default.HandleRequestVoteRequestHost(Lit(h#0), Lit(h'#0), Lit(j#0), Lit(m#0))
           == (
            LitInt(_2_raft.Message.term(Lit(m#0)))
               <= LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == (if _2_raft.__default.Grant(Lit(h#0), Lit(j#0), Lit(m#0))
                 then #MissingLibrary.Option.Some(Lit(j#0))
                 else _2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
               == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
             && Lit(_2_raft.HostVars.leader(Lit(h'#0)))
               == Lit(_2_raft.HostVars.leader(Lit(h#0)))
             && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0)))));

// function declaration for raft._default.MakeRequestVoteResponse
function _2_raft.__default.MakeRequestVoteResponse(h#0: DatatypeType, i#0: Box, j#0: Box, m#0: DatatypeType) : DatatypeType;

function _2_raft.__default.MakeRequestVoteResponse#canCall(h#0: DatatypeType, i#0: Box, j#0: Box, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.MakeRequestVoteResponse
axiom true
   ==> (forall h#0: DatatypeType, i#0: Box, j#0: Box, m#0: DatatypeType :: 
    { _2_raft.__default.MakeRequestVoteResponse(h#0, i#0, j#0, m#0) } 
    _2_raft.__default.MakeRequestVoteResponse#canCall(h#0, i#0, j#0, m#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(i#0, #$ServerID)
           && $IsBox(j#0, #$ServerID)
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.ServerIDs()[i#0]
           && _2_raft.__default.ServerIDs()[j#0]
           && _2_raft.Message.RequestVoteRequest_q(m#0))
       ==> $Is(_2_raft.__default.MakeRequestVoteResponse(h#0, i#0, j#0, m#0), 
        Tclass._2_raft.Message()));

function _2_raft.__default.MakeRequestVoteResponse#requires(DatatypeType, Box, Box, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.MakeRequestVoteResponse
axiom (forall h#0: DatatypeType, i#0: Box, j#0: Box, m#0: DatatypeType :: 
  { _2_raft.__default.MakeRequestVoteResponse#requires(h#0, i#0, j#0, m#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
       && $IsBox(i#0, #$ServerID)
       && $IsBox(j#0, #$ServerID)
       && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.MakeRequestVoteResponse#requires(h#0, i#0, j#0, m#0)
       == (
        _2_raft.__default.ServerIDs()[i#0]
         && _2_raft.__default.ServerIDs()[j#0]
         && _2_raft.Message.RequestVoteRequest_q(m#0)));

// definition axiom for _2_raft.__default.MakeRequestVoteResponse(revealed)
axiom true
   ==> (forall h#0: DatatypeType, i#0: Box, j#0: Box, m#0: DatatypeType :: 
    { _2_raft.__default.MakeRequestVoteResponse(h#0, i#0, j#0, m#0) } 
    _2_raft.__default.MakeRequestVoteResponse#canCall(h#0, i#0, j#0, m#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(i#0, #$ServerID)
           && $IsBox(j#0, #$ServerID)
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.ServerIDs()[i#0]
           && _2_raft.__default.ServerIDs()[j#0]
           && _2_raft.Message.RequestVoteRequest_q(m#0))
       ==> _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
         && _2_raft.__default.Grant#canCall(h#0, j#0, m#0)
         && 
        _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
         && _2_raft.__default.MakeRequestVoteResponse(h#0, i#0, j#0, m#0)
           == #raft.Message.RequestVoteResponse(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0)), 
            _2_raft.__default.Grant(h#0, j#0, m#0), 
            _2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
            i#0, 
            j#0));

// definition axiom for _2_raft.__default.MakeRequestVoteResponse for decreasing-related literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, i#0: Box, j#0: Box, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.MakeRequestVoteResponse(Lit(h#0), i#0, j#0, Lit(m#0)) } 
    _2_raft.__default.MakeRequestVoteResponse#canCall(Lit(h#0), i#0, j#0, Lit(m#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(i#0, #$ServerID)
           && $IsBox(j#0, #$ServerID)
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.ServerIDs()[i#0]
           && _2_raft.__default.ServerIDs()[j#0]
           && Lit(_2_raft.Message.RequestVoteRequest_q(Lit(m#0))))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && _2_raft.__default.Grant#canCall(Lit(h#0), j#0, Lit(m#0))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
         && _2_raft.__default.MakeRequestVoteResponse(Lit(h#0), i#0, j#0, Lit(m#0))
           == #raft.Message.RequestVoteResponse(LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))), 
            _2_raft.__default.Grant(Lit(h#0), j#0, Lit(m#0)), 
            Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
            i#0, 
            j#0));

// definition axiom for _2_raft.__default.MakeRequestVoteResponse for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, i#0: Box, j#0: Box, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.MakeRequestVoteResponse(Lit(h#0), Lit(i#0), Lit(j#0), Lit(m#0)) } 
    _2_raft.__default.MakeRequestVoteResponse#canCall(Lit(h#0), Lit(i#0), Lit(j#0), Lit(m#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $IsBox(i#0, #$ServerID)
           && $IsBox(j#0, #$ServerID)
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.ServerIDs()[Lit(i#0)]
           && _2_raft.__default.ServerIDs()[Lit(j#0)]
           && Lit(_2_raft.Message.RequestVoteRequest_q(Lit(m#0))))
       ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && _2_raft.__default.Grant#canCall(Lit(h#0), Lit(j#0), Lit(m#0))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
         && _2_raft.__default.MakeRequestVoteResponse(Lit(h#0), Lit(i#0), Lit(j#0), Lit(m#0))
           == Lit(#raft.Message.RequestVoteResponse(LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))), 
              Lit(_2_raft.__default.Grant(Lit(h#0), Lit(j#0), Lit(m#0))), 
              Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
              Lit(i#0), 
              Lit(j#0))));

// function declaration for raft._default.HandleRequestVoteRequest
function _2_raft.__default.HandleRequestVoteRequest(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType) : bool;

function _2_raft.__default.HandleRequestVoteRequest#canCall(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.HandleRequestVoteRequest
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.HandleRequestVoteRequest(v#0, v'#0, m#0) } 
    _2_raft.__default.HandleRequestVoteRequest#canCall(v#0, v'#0, m#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0)
           && _2_raft.__default.WFMessage(m#0))
       ==> true);

function _2_raft.__default.HandleRequestVoteRequest#requires(DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.HandleRequestVoteRequest
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
  { _2_raft.__default.HandleRequestVoteRequest#requires(v#0, v'#0, m#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.HandleRequestVoteRequest#requires(v#0, v'#0, m#0)
       == (
        _2_raft.__default.WFVars(v#0)
         && _2_raft.__default.WFVars(v'#0)
         && _2_raft.__default.WFMessage(m#0)));

// definition axiom for _2_raft.__default.HandleRequestVoteRequest(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.HandleRequestVoteRequest(v#0, v'#0, m#0) } 
    _2_raft.__default.HandleRequestVoteRequest#canCall(v#0, v'#0, m#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0)
           && _2_raft.__default.WFMessage(m#0))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        (_2_raft.Message.RequestVoteRequest_q(m#0)
           ==> _2_raft.Variables.Variables_q(v#0)
             && _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.__default.HandleRequestVoteRequestHost#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              _2_raft.Message.source(m#0), 
              m#0))
         && (_2_raft.Variables.Variables_q(v#0)
             && _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.__default.HandleRequestVoteRequestHost#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              _2_raft.Message.source(m#0), 
              m#0)
             && _2_raft.__default.HandleRequestVoteRequestHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              _2_raft.Message.source(m#0), 
              m#0)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(v'#0, v#0, _2_raft.Message.dest(m#0)))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(v'#0, v#0, _2_raft.Message.dest(m#0))
             && _2_raft.__default.UnchangedOtherHosts(v'#0, v#0, _2_raft.Message.dest(m#0))
           ==> _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.__default.MakeRequestVoteResponse#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              _2_raft.Message.dest(m#0), 
              _2_raft.Message.source(m#0), 
              m#0)
             && _2_raft.__default.Reply#canCall(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              _2_raft.__default.MakeRequestVoteResponse($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
                _2_raft.Message.dest(m#0), 
                _2_raft.Message.source(m#0), 
                m#0), 
              m#0))
         && (_2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.__default.MakeRequestVoteResponse#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              _2_raft.Message.dest(m#0), 
              _2_raft.Message.source(m#0), 
              m#0)
             && _2_raft.__default.Reply#canCall(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              _2_raft.__default.MakeRequestVoteResponse($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
                _2_raft.Message.dest(m#0), 
                _2_raft.Message.source(m#0), 
                m#0), 
              m#0)
             && _2_raft.__default.Reply(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              _2_raft.__default.MakeRequestVoteResponse($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
                _2_raft.Message.dest(m#0), 
                _2_raft.Message.source(m#0), 
                m#0), 
              m#0)
           ==> _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0)))
         && _2_raft.__default.HandleRequestVoteRequest(v#0, v'#0, m#0)
           == (
            _2_raft.Message.RequestVoteRequest_q(m#0)
             && _2_raft.__default.HandleRequestVoteRequestHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              _2_raft.Message.source(m#0), 
              m#0)
             && _2_raft.__default.UnchangedOtherHosts(v'#0, v#0, _2_raft.Message.dest(m#0))
             && _2_raft.__default.Reply(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              _2_raft.__default.MakeRequestVoteResponse($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
                _2_raft.Message.dest(m#0), 
                _2_raft.Message.source(m#0), 
                m#0), 
              m#0)
             && Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0)), 
              _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)))));

// definition axiom for _2_raft.__default.HandleRequestVoteRequest for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.HandleRequestVoteRequest(Lit(v#0), Lit(v'#0), Lit(m#0)) } 
    _2_raft.__default.HandleRequestVoteRequest#canCall(Lit(v#0), Lit(v'#0), Lit(m#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0)))
           && Lit(_2_raft.__default.WFMessage(Lit(m#0))))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        (Lit(_2_raft.Message.RequestVoteRequest_q(Lit(m#0)))
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.HandleRequestVoteRequestHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              Lit(_2_raft.Message.source(Lit(m#0))), 
              Lit(m#0)))
         && (_2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.__default.HandleRequestVoteRequestHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              Lit(_2_raft.Message.source(Lit(m#0))), 
              Lit(m#0))
             && _2_raft.__default.HandleRequestVoteRequestHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              Lit(_2_raft.Message.source(Lit(m#0))), 
              Lit(m#0))
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), Lit(_2_raft.Message.dest(Lit(m#0)))))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), Lit(_2_raft.Message.dest(Lit(m#0))))
             && Lit(_2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), Lit(_2_raft.Message.dest(Lit(m#0)))))
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.__default.MakeRequestVoteResponse#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              Lit(_2_raft.Message.dest(Lit(m#0))), 
              Lit(_2_raft.Message.source(Lit(m#0))), 
              Lit(m#0))
             && _2_raft.__default.Reply#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              _2_raft.__default.MakeRequestVoteResponse($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
                Lit(_2_raft.Message.dest(Lit(m#0))), 
                Lit(_2_raft.Message.source(Lit(m#0))), 
                Lit(m#0)), 
              Lit(m#0)))
         && (_2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.__default.MakeRequestVoteResponse#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              Lit(_2_raft.Message.dest(Lit(m#0))), 
              Lit(_2_raft.Message.source(Lit(m#0))), 
              Lit(m#0))
             && _2_raft.__default.Reply#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              _2_raft.__default.MakeRequestVoteResponse($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
                Lit(_2_raft.Message.dest(Lit(m#0))), 
                Lit(_2_raft.Message.source(Lit(m#0))), 
                Lit(m#0)), 
              Lit(m#0))
             && _2_raft.__default.Reply(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              _2_raft.__default.MakeRequestVoteResponse($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
                Lit(_2_raft.Message.dest(Lit(m#0))), 
                Lit(_2_raft.Message.source(Lit(m#0))), 
                Lit(m#0)), 
              Lit(m#0))
           ==> _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0)))))
         && _2_raft.__default.HandleRequestVoteRequest(Lit(v#0), Lit(v'#0), Lit(m#0))
           == (
            _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
             && _2_raft.__default.HandleRequestVoteRequestHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              Lit(_2_raft.Message.source(Lit(m#0))), 
              Lit(m#0))
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), Lit(_2_raft.Message.dest(Lit(m#0))))
             && _2_raft.__default.Reply(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              _2_raft.__default.MakeRequestVoteResponse($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
                Lit(_2_raft.Message.dest(Lit(m#0))), 
                Lit(_2_raft.Message.source(Lit(m#0))), 
                Lit(m#0)), 
              Lit(m#0))
             && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              _2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))));

// function declaration for raft._default.HandleRequestVoteResponseHost
function _2_raft.__default.HandleRequestVoteResponseHost(h#0: DatatypeType, h'#0: DatatypeType, j#0: Box, m#0: DatatypeType) : bool;

function _2_raft.__default.HandleRequestVoteResponseHost#canCall(h#0: DatatypeType, h'#0: DatatypeType, j#0: Box, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.HandleRequestVoteResponseHost
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, j#0: Box, m#0: DatatypeType :: 
    { _2_raft.__default.HandleRequestVoteResponseHost(h#0, h'#0, j#0, m#0) } 
    _2_raft.__default.HandleRequestVoteResponseHost#canCall(h#0, h'#0, j#0, m#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.Message.RequestVoteResponse_q(m#0)
           && _2_raft.__default.ServerIDs()[j#0])
       ==> true);

function _2_raft.__default.HandleRequestVoteResponseHost#requires(DatatypeType, DatatypeType, Box, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.HandleRequestVoteResponseHost
axiom (forall h#0: DatatypeType, h'#0: DatatypeType, j#0: Box, m#0: DatatypeType :: 
  { _2_raft.__default.HandleRequestVoteResponseHost#requires(h#0, h'#0, j#0, m#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
       && $Is(h'#0, Tclass._2_raft.HostVars())
       && $IsBox(j#0, #$ServerID)
       && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.HandleRequestVoteResponseHost#requires(h#0, h'#0, j#0, m#0)
       == (_2_raft.Message.RequestVoteResponse_q(m#0)
         && _2_raft.__default.ServerIDs()[j#0]));

// definition axiom for _2_raft.__default.HandleRequestVoteResponseHost(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, j#0: Box, m#0: DatatypeType :: 
    { _2_raft.__default.HandleRequestVoteResponseHost(h#0, h'#0, j#0, m#0) } 
    _2_raft.__default.HandleRequestVoteResponseHost#canCall(h#0, h'#0, j#0, m#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.Message.RequestVoteResponse_q(m#0)
           && _2_raft.__default.ServerIDs()[j#0])
       ==> (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
         && (_2_raft.Message.term(m#0)
             == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h#0))
             && Set#Equal(_2_raft.CandidateVars.votesResponded(_2_raft.HostVars.candidate(h'#0)), 
              Set#Union(_2_raft.CandidateVars.votesResponded(_2_raft.HostVars.candidate(h#0)), 
                Set#UnionOne(Set#Empty(): Set Box, j#0)))
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h#0))
             && Set#Equal(_2_raft.CandidateVars.votesGranted(_2_raft.HostVars.candidate(h'#0)), 
              Set#Union(_2_raft.CandidateVars.votesGranted(_2_raft.HostVars.candidate(h#0)), 
                (if _2_raft.Message.voteGranted(m#0)
                   then Set#UnionOne(Set#Empty(): Set Box, j#0)
                   else Set#Empty(): Set Box)))
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h'#0))
             && 
            (_2_raft.Message.voteGranted(m#0)
               ==> _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h#0)))
             && (!_2_raft.Message.voteGranted(m#0)
               ==> _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.CandidateVars.CandidateVars_q(_2_raft.HostVars.candidate(h#0))))
         && _2_raft.__default.HandleRequestVoteResponseHost(h#0, h'#0, j#0, m#0)
           == (
            _2_raft.Message.term(m#0)
               == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
             && Set#Equal(_2_raft.CandidateVars.votesResponded(_2_raft.HostVars.candidate(h'#0)), 
              Set#Union(_2_raft.CandidateVars.votesResponded(_2_raft.HostVars.candidate(h#0)), 
                Set#UnionOne(Set#Empty(): Set Box, j#0)))
             && Set#Equal(_2_raft.CandidateVars.votesGranted(_2_raft.HostVars.candidate(h'#0)), 
              Set#Union(_2_raft.CandidateVars.votesGranted(_2_raft.HostVars.candidate(h#0)), 
                (if _2_raft.Message.voteGranted(m#0)
                   then Set#UnionOne(Set#Empty(): Set Box, j#0)
                   else Set#Empty(): Set Box)))
             && Map#Equal(_2_raft.CandidateVars.voterLog(_2_raft.HostVars.candidate(h'#0)), 
              (if _2_raft.Message.voteGranted(m#0)
                 then Map#Build(_2_raft.CandidateVars.voterLog(_2_raft.HostVars.candidate(h#0)), 
                  j#0, 
                  $Box(_2_raft.Message.logGhost(m#0)))
                 else _2_raft.CandidateVars.voterLog(_2_raft.HostVars.candidate(h#0))))));

// definition axiom for _2_raft.__default.HandleRequestVoteResponseHost for decreasing-related literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, j#0: Box, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.HandleRequestVoteResponseHost(Lit(h#0), Lit(h'#0), j#0, Lit(m#0)) } 
    _2_raft.__default.HandleRequestVoteResponseHost#canCall(Lit(h#0), Lit(h'#0), j#0, Lit(m#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          Lit(_2_raft.Message.RequestVoteResponse_q(Lit(m#0)))
           && _2_raft.__default.ServerIDs()[j#0])
       ==> (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && (LitInt(_2_raft.Message.term(Lit(m#0)))
             == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && Set#Equal(_2_raft.CandidateVars.votesResponded(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              Set#Union(_2_raft.CandidateVars.votesResponded(Lit(_2_raft.HostVars.candidate(Lit(h#0)))), 
                Set#UnionOne(Set#Empty(): Set Box, j#0)))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && Set#Equal(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              Set#Union(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h#0)))), 
                (if _2_raft.Message.voteGranted(Lit(m#0))
                   then Set#UnionOne(Set#Empty(): Set Box, j#0)
                   else Set#Empty(): Set Box)))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && 
            (Lit(_2_raft.Message.voteGranted(Lit(m#0)))
               ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0)))))
             && (!Lit(_2_raft.Message.voteGranted(Lit(m#0)))
               ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0))))))
         && _2_raft.__default.HandleRequestVoteResponseHost(Lit(h#0), Lit(h'#0), j#0, Lit(m#0))
           == (
            LitInt(_2_raft.Message.term(Lit(m#0)))
               == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && Set#Equal(_2_raft.CandidateVars.votesResponded(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              Set#Union(_2_raft.CandidateVars.votesResponded(Lit(_2_raft.HostVars.candidate(Lit(h#0)))), 
                Set#UnionOne(Set#Empty(): Set Box, j#0)))
             && Set#Equal(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              Set#Union(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h#0)))), 
                (if _2_raft.Message.voteGranted(Lit(m#0))
                   then Set#UnionOne(Set#Empty(): Set Box, j#0)
                   else Set#Empty(): Set Box)))
             && Map#Equal(_2_raft.CandidateVars.voterLog(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              (if _2_raft.Message.voteGranted(Lit(m#0))
                 then Map#Build(Lit(_2_raft.CandidateVars.voterLog(Lit(_2_raft.HostVars.candidate(Lit(h#0))))), 
                  j#0, 
                  $Box(Lit(_2_raft.Message.logGhost(Lit(m#0)))))
                 else _2_raft.CandidateVars.voterLog(Lit(_2_raft.HostVars.candidate(Lit(h#0))))))));

// definition axiom for _2_raft.__default.HandleRequestVoteResponseHost for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, j#0: Box, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.HandleRequestVoteResponseHost(Lit(h#0), Lit(h'#0), Lit(j#0), Lit(m#0)) } 
    _2_raft.__default.HandleRequestVoteResponseHost#canCall(Lit(h#0), Lit(h'#0), Lit(j#0), Lit(m#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $IsBox(j#0, #$ServerID)
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          Lit(_2_raft.Message.RequestVoteResponse_q(Lit(m#0)))
           && _2_raft.__default.ServerIDs()[Lit(j#0)])
       ==> (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && (LitInt(_2_raft.Message.term(Lit(m#0)))
             == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && Set#Equal(_2_raft.CandidateVars.votesResponded(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              Set#Union(_2_raft.CandidateVars.votesResponded(Lit(_2_raft.HostVars.candidate(Lit(h#0)))), 
                Set#UnionOne(Set#Empty(): Set Box, Lit(j#0))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && Set#Equal(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              Set#Union(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h#0)))), 
                (if _2_raft.Message.voteGranted(Lit(m#0))
                   then Set#UnionOne(Set#Empty(): Set Box, Lit(j#0))
                   else Set#Empty(): Set Box)))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && 
            (Lit(_2_raft.Message.voteGranted(Lit(m#0)))
               ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0)))))
             && (!Lit(_2_raft.Message.voteGranted(Lit(m#0)))
               ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.CandidateVars.CandidateVars_q(Lit(_2_raft.HostVars.candidate(Lit(h#0))))))
         && _2_raft.__default.HandleRequestVoteResponseHost(Lit(h#0), Lit(h'#0), Lit(j#0), Lit(m#0))
           == (
            LitInt(_2_raft.Message.term(Lit(m#0)))
               == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && Set#Equal(_2_raft.CandidateVars.votesResponded(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              Set#Union(_2_raft.CandidateVars.votesResponded(Lit(_2_raft.HostVars.candidate(Lit(h#0)))), 
                Set#UnionOne(Set#Empty(): Set Box, Lit(j#0))))
             && Set#Equal(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              Set#Union(_2_raft.CandidateVars.votesGranted(Lit(_2_raft.HostVars.candidate(Lit(h#0)))), 
                (if _2_raft.Message.voteGranted(Lit(m#0))
                   then Set#UnionOne(Set#Empty(): Set Box, Lit(j#0))
                   else Set#Empty(): Set Box)))
             && Map#Equal(_2_raft.CandidateVars.voterLog(Lit(_2_raft.HostVars.candidate(Lit(h'#0)))), 
              (if _2_raft.Message.voteGranted(Lit(m#0))
                 then Map#Build(Lit(_2_raft.CandidateVars.voterLog(Lit(_2_raft.HostVars.candidate(Lit(h#0))))), 
                  Lit(j#0), 
                  $Box(Lit(_2_raft.Message.logGhost(Lit(m#0)))))
                 else _2_raft.CandidateVars.voterLog(Lit(_2_raft.HostVars.candidate(Lit(h#0))))))));

// function declaration for raft._default.HandleRequestVoteResponse
function _2_raft.__default.HandleRequestVoteResponse(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType) : bool;

function _2_raft.__default.HandleRequestVoteResponse#canCall(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.HandleRequestVoteResponse
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.HandleRequestVoteResponse(v#0, v'#0, m#0) } 
    _2_raft.__default.HandleRequestVoteResponse#canCall(v#0, v'#0, m#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0)
           && _2_raft.__default.WFMessage(m#0)
           && _2_raft.Message.RequestVoteResponse_q(m#0))
       ==> true);

function _2_raft.__default.HandleRequestVoteResponse#requires(DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.HandleRequestVoteResponse
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
  { _2_raft.__default.HandleRequestVoteResponse#requires(v#0, v'#0, m#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.HandleRequestVoteResponse#requires(v#0, v'#0, m#0)
       == (
        _2_raft.__default.WFVars(v#0)
         && _2_raft.__default.WFVars(v'#0)
         && _2_raft.__default.WFMessage(m#0)
         && _2_raft.Message.RequestVoteResponse_q(m#0)));

// definition axiom for _2_raft.__default.HandleRequestVoteResponse(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.HandleRequestVoteResponse(v#0, v'#0, m#0) } 
    _2_raft.__default.HandleRequestVoteResponse#canCall(v#0, v'#0, m#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0)
           && _2_raft.__default.WFMessage(m#0)
           && _2_raft.Message.RequestVoteResponse_q(m#0))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        _2_raft.Variables.Variables_q(v#0)
         && _2_raft.Variables.Variables_q(v'#0)
         && _2_raft.__default.HandleRequestVoteResponseHost#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
          $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
          _2_raft.Message.source(m#0), 
          m#0)
         && (_2_raft.__default.HandleRequestVoteResponseHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
            $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
            _2_raft.Message.source(m#0), 
            m#0)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(v'#0, v#0, _2_raft.Message.dest(m#0)))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(v'#0, v#0, _2_raft.Message.dest(m#0))
             && _2_raft.__default.UnchangedOtherHosts(v'#0, v#0, _2_raft.Message.dest(m#0))
           ==> _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && _2_raft.__default.Discard#canCall(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0))
         && (_2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && _2_raft.__default.Discard#canCall(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0)
             && _2_raft.__default.Discard(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0)
           ==> _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.__default.MakeElectionRecord#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              _2_raft.Message.dest(m#0)))
         && _2_raft.__default.HandleRequestVoteResponse(v#0, v'#0, m#0)
           == (
            _2_raft.__default.HandleRequestVoteResponseHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              _2_raft.Message.source(m#0), 
              m#0)
             && _2_raft.__default.UnchangedOtherHosts(v'#0, v#0, _2_raft.Message.dest(m#0))
             && _2_raft.__default.Discard(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0)
             && Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0)), 
              Set#Union(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)), 
                Set#UnionOne(Set#Empty(): Set Box, 
                  $Box(_2_raft.__default.MakeElectionRecord($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
                      _2_raft.Message.dest(m#0))))))));

// definition axiom for _2_raft.__default.HandleRequestVoteResponse for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.HandleRequestVoteResponse(Lit(v#0), Lit(v'#0), Lit(m#0)) } 
    _2_raft.__default.HandleRequestVoteResponse#canCall(Lit(v#0), Lit(v'#0), Lit(m#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0)))
           && Lit(_2_raft.__default.WFMessage(Lit(m#0)))
           && Lit(_2_raft.Message.RequestVoteResponse_q(Lit(m#0))))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        _2_raft.Variables.Variables_q(Lit(v#0))
         && _2_raft.Variables.Variables_q(Lit(v'#0))
         && _2_raft.__default.HandleRequestVoteResponseHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
          $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
          Lit(_2_raft.Message.source(Lit(m#0))), 
          Lit(m#0))
         && (_2_raft.__default.HandleRequestVoteResponseHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
            $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
            Lit(_2_raft.Message.source(Lit(m#0))), 
            Lit(m#0))
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), Lit(_2_raft.Message.dest(Lit(m#0)))))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), Lit(_2_raft.Message.dest(Lit(m#0))))
             && Lit(_2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), Lit(_2_raft.Message.dest(Lit(m#0)))))
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && _2_raft.__default.Discard#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              Lit(m#0)))
         && (_2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && _2_raft.__default.Discard#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              Lit(m#0))
             && Lit(_2_raft.__default.Discard(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
                Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
                Lit(m#0)))
           ==> _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.__default.MakeElectionRecord#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              Lit(_2_raft.Message.dest(Lit(m#0)))))
         && _2_raft.__default.HandleRequestVoteResponse(Lit(v#0), Lit(v'#0), Lit(m#0))
           == (
            _2_raft.__default.HandleRequestVoteResponseHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              Lit(_2_raft.Message.source(Lit(m#0))), 
              Lit(m#0))
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), Lit(_2_raft.Message.dest(Lit(m#0))))
             && _2_raft.__default.Discard(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              Lit(m#0))
             && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              Set#Union(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))), 
                Set#UnionOne(Set#Empty(): Set Box, 
                  $Box(_2_raft.__default.MakeElectionRecord($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
                      Lit(_2_raft.Message.dest(Lit(m#0))))))))));

// function declaration for raft._default.AppendLogOk
function _2_raft.__default.AppendLogOk(h#0: DatatypeType, m#0: DatatypeType) : bool;

function _2_raft.__default.AppendLogOk#canCall(h#0: DatatypeType, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.AppendLogOk
axiom true
   ==> (forall h#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.AppendLogOk(h#0, m#0) } 
    _2_raft.__default.AppendLogOk#canCall(h#0, m#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && _2_raft.Message.AppendEntriesRequest_q(m#0))
       ==> true);

function _2_raft.__default.AppendLogOk#requires(DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.AppendLogOk
axiom (forall h#0: DatatypeType, m#0: DatatypeType :: 
  { _2_raft.__default.AppendLogOk#requires(h#0, m#0) } 
  $Is(h#0, Tclass._2_raft.HostVars()) && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.AppendLogOk#requires(h#0, m#0)
       == _2_raft.Message.AppendEntriesRequest_q(m#0));

// definition axiom for _2_raft.__default.AppendLogOk(revealed)
axiom true
   ==> (forall h#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.AppendLogOk(h#0, m#0) } 
    _2_raft.__default.AppendLogOk#canCall(h#0, m#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && _2_raft.Message.AppendEntriesRequest_q(m#0))
       ==> (_2_raft.Message.prevLogIndex(m#0) != LitInt(0 - 1)
           ==> (_2_raft.Message.prevLogIndex(m#0) >= LitInt(0)
               ==> _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0)))
             && (_2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
                 && _2_raft.Message.prevLogIndex(m#0)
                   < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
               ==> _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
                 && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
                      _2_raft.Message.prevLogIndex(m#0))): DatatypeType)))
         && _2_raft.__default.AppendLogOk(h#0, m#0)
           == (_2_raft.Message.prevLogIndex(m#0) == LitInt(0 - 1)
             || (
              _2_raft.Message.prevLogIndex(m#0) >= LitInt(0)
               && _2_raft.Message.prevLogIndex(m#0)
                 < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
               && _2_raft.Message.prevLogTerm(m#0)
                 == _2_raft.LogEntry.term($Unbox(Seq#Index(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
                      _2_raft.Message.prevLogIndex(m#0))): DatatypeType))));

// definition axiom for _2_raft.__default.AppendLogOk for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.AppendLogOk(Lit(h#0), Lit(m#0)) } 
    _2_raft.__default.AppendLogOk#canCall(Lit(h#0), Lit(m#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && Lit(_2_raft.Message.AppendEntriesRequest_q(Lit(m#0))))
       ==> (LitInt(_2_raft.Message.prevLogIndex(Lit(m#0))) != LitInt(0 - 1)
           ==> (LitInt(_2_raft.Message.prevLogIndex(Lit(m#0))) >= LitInt(0)
               ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
             && (_2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
                 && _2_raft.Message.prevLogIndex(Lit(m#0))
                   < Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
               ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
                 && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
                      LitInt(_2_raft.Message.prevLogIndex(Lit(m#0))))): DatatypeType)))
         && _2_raft.__default.AppendLogOk(Lit(h#0), Lit(m#0))
           == (LitInt(_2_raft.Message.prevLogIndex(Lit(m#0))) == LitInt(0 - 1)
             || (
              LitInt(_2_raft.Message.prevLogIndex(Lit(m#0))) >= LitInt(0)
               && _2_raft.Message.prevLogIndex(Lit(m#0))
                 < Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
               && LitInt(_2_raft.Message.prevLogTerm(Lit(m#0)))
                 == _2_raft.LogEntry.term($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
                      LitInt(_2_raft.Message.prevLogIndex(Lit(m#0))))): DatatypeType))));

// function declaration for raft._default.AlreadyDoneWithRequest
function _2_raft.__default.AlreadyDoneWithRequest(h#0: DatatypeType, 
    h'#0: DatatypeType, 
    m#0: DatatypeType, 
    index#0: int, 
    reply#0: DatatypeType)
   : bool;

function _2_raft.__default.AlreadyDoneWithRequest#canCall(h#0: DatatypeType, 
    h'#0: DatatypeType, 
    m#0: DatatypeType, 
    index#0: int, 
    reply#0: DatatypeType)
   : bool;

// consequence axiom for _2_raft.__default.AlreadyDoneWithRequest
axiom true
   ==> (forall h#0: DatatypeType, 
      h'#0: DatatypeType, 
      m#0: DatatypeType, 
      index#0: int, 
      reply#0: DatatypeType :: 
    { _2_raft.__default.AlreadyDoneWithRequest(h#0, h'#0, m#0, index#0, reply#0) } 
    _2_raft.__default.AlreadyDoneWithRequest#canCall(h#0, h'#0, m#0, index#0, reply#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && 
          _2_raft.__default.WFMessage(m#0)
           && _2_raft.Message.AppendEntriesRequest_q(m#0))
       ==> true);

function _2_raft.__default.AlreadyDoneWithRequest#requires(DatatypeType, DatatypeType, DatatypeType, int, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.AlreadyDoneWithRequest
axiom (forall h#0: DatatypeType, 
    h'#0: DatatypeType, 
    m#0: DatatypeType, 
    index#0: int, 
    reply#0: DatatypeType :: 
  { _2_raft.__default.AlreadyDoneWithRequest#requires(h#0, h'#0, m#0, index#0, reply#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
       && $Is(h'#0, Tclass._2_raft.HostVars())
       && $Is(m#0, Tclass._2_raft.Message())
       && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
     ==> _2_raft.__default.AlreadyDoneWithRequest#requires(h#0, h'#0, m#0, index#0, reply#0)
       == (_2_raft.__default.WFMessage(m#0)
         && _2_raft.Message.AppendEntriesRequest_q(m#0)));

// definition axiom for _2_raft.__default.AlreadyDoneWithRequest(revealed)
axiom true
   ==> (forall h#0: DatatypeType, 
      h'#0: DatatypeType, 
      m#0: DatatypeType, 
      index#0: int, 
      reply#0: DatatypeType :: 
    { _2_raft.__default.AlreadyDoneWithRequest(h#0, h'#0, m#0, index#0, reply#0) } 
    _2_raft.__default.AlreadyDoneWithRequest#canCall(h#0, h'#0, m#0, index#0, reply#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && 
          _2_raft.__default.WFMessage(m#0)
           && _2_raft.Message.AppendEntriesRequest_q(m#0))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        (!Seq#Equal(_2_raft.Message.entries(m#0), Seq#Empty(): Seq Box)
           ==> (LitInt(0) <= index#0
               ==> _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0)))
             && (_2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
                 && index#0 < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
               ==> _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
                 && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), index#0)): DatatypeType)
                 && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(_2_raft.Message.entries(m#0), LitInt(0))): DatatypeType)))
         && ((LitInt(0) <= index#0
               ==> _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0)))
             && (_2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
                 && index#0 < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
               ==> _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
                 && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), index#0)): DatatypeType)
                 && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(_2_raft.Message.entries(m#0), LitInt(0))): DatatypeType))
             && 
            LitInt(0) <= index#0
             && index#0 < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
             && _2_raft.LogEntry.term($Unbox(Seq#Index(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), index#0)): DatatypeType)
               == _2_raft.LogEntry.term($Unbox(Seq#Index(_2_raft.Message.entries(m#0), LitInt(0))): DatatypeType)
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h'#0))
               == _2_raft.Message.commitIndex(m#0)
           ==> $IsA#_0_MissingLibrary.Option(reply#0)
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
         && ($IsA#_0_MissingLibrary.Option(reply#0)
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
             && reply#0
               == #MissingLibrary.Option.Some($Box(#raft.Message.AppendEntriesResponse(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0)), 
                    Lit(true), 
                    _2_raft.Message.prevLogIndex(m#0) + Seq#Length(_2_raft.Message.entries(m#0)), 
                    _2_raft.Message.dest(m#0), 
                    _2_raft.Message.source(m#0))))
           ==> $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h'#0))
             && $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && ($IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h'#0))
             && $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.HostVars.server(h'#0) == _2_raft.HostVars.server(h#0)
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0)))
         && _2_raft.__default.AlreadyDoneWithRequest(h#0, h'#0, m#0, index#0, reply#0)
           == (
            (Seq#Equal(_2_raft.Message.entries(m#0), Seq#Empty(): Seq Box)
               || (
                LitInt(0) <= index#0
                 && index#0 < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
                 && _2_raft.LogEntry.term($Unbox(Seq#Index(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), index#0)): DatatypeType)
                   == _2_raft.LogEntry.term($Unbox(Seq#Index(_2_raft.Message.entries(m#0), LitInt(0))): DatatypeType)))
             && _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h'#0))
               == _2_raft.Message.commitIndex(m#0)
             && reply#0
               == #MissingLibrary.Option.Some($Box(#raft.Message.AppendEntriesResponse(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0)), 
                    Lit(true), 
                    _2_raft.Message.prevLogIndex(m#0) + Seq#Length(_2_raft.Message.entries(m#0)), 
                    _2_raft.Message.dest(m#0), 
                    _2_raft.Message.source(m#0))))
             && _2_raft.HostVars.server(h'#0) == _2_raft.HostVars.server(h#0)
             && Seq#Equal(_2_raft.LogVars.log(_2_raft.HostVars.log(h'#0)), 
              _2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))));

// definition axiom for _2_raft.__default.AlreadyDoneWithRequest for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, 
      h'#0: DatatypeType, 
      m#0: DatatypeType, 
      index#0: int, 
      reply#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.AlreadyDoneWithRequest(Lit(h#0), Lit(h'#0), Lit(m#0), LitInt(index#0), Lit(reply#0)) } 
    _2_raft.__default.AlreadyDoneWithRequest#canCall(Lit(h#0), Lit(h'#0), Lit(m#0), LitInt(index#0), Lit(reply#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && Lit(_2_raft.__default.WFMessage(Lit(m#0))
               && _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        (!Seq#Equal(_2_raft.Message.entries(Lit(m#0)), Seq#Empty(): Seq Box)
           ==> (LitInt(0) <= LitInt(index#0)
               ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
             && (_2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
                 && index#0
                   < Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
               ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
                 && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), LitInt(index#0))): DatatypeType)
                 && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(Lit(_2_raft.Message.entries(Lit(m#0))), LitInt(0))): DatatypeType)))
         && ((LitInt(0) <= LitInt(index#0)
               ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
             && (_2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
                 && index#0
                   < Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
               ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
                 && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), LitInt(index#0))): DatatypeType)
                 && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(Lit(_2_raft.Message.entries(Lit(m#0))), LitInt(0))): DatatypeType))
             && 
            LitInt(0) <= LitInt(index#0)
             && index#0
               < Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
             && _2_raft.LogEntry.term($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), LitInt(index#0))): DatatypeType)
               == _2_raft.LogEntry.term($Unbox(Seq#Index(Lit(_2_raft.Message.entries(Lit(m#0))), LitInt(0))): DatatypeType)
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h'#0)))))
               == LitInt(_2_raft.Message.commitIndex(Lit(m#0)))
           ==> $IsA#_0_MissingLibrary.Option(Lit(reply#0))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
         && ($IsA#_0_MissingLibrary.Option(Lit(reply#0))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && Lit(reply#0)
               == #MissingLibrary.Option.Some($Box(#raft.Message.AppendEntriesResponse(LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))), 
                    Lit(true), 
                    _2_raft.Message.prevLogIndex(Lit(m#0))
                       + Seq#Length(Lit(_2_raft.Message.entries(Lit(m#0)))), 
                    Lit(_2_raft.Message.dest(Lit(m#0))), 
                    Lit(_2_raft.Message.source(Lit(m#0))))))
           ==> $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.server(Lit(h'#0)))
               == Lit(_2_raft.HostVars.server(Lit(h#0)))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
         && _2_raft.__default.AlreadyDoneWithRequest(Lit(h#0), Lit(h'#0), Lit(m#0), LitInt(index#0), Lit(reply#0))
           == (
            (Seq#Equal(_2_raft.Message.entries(Lit(m#0)), Seq#Empty(): Seq Box)
               || (
                LitInt(0) <= LitInt(index#0)
                 && index#0
                   < Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
                 && _2_raft.LogEntry.term($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), LitInt(index#0))): DatatypeType)
                   == _2_raft.LogEntry.term($Unbox(Seq#Index(Lit(_2_raft.Message.entries(Lit(m#0))), LitInt(0))): DatatypeType)))
             && LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h'#0)))))
               == LitInt(_2_raft.Message.commitIndex(Lit(m#0)))
             && Lit(reply#0)
               == #MissingLibrary.Option.Some($Box(#raft.Message.AppendEntriesResponse(LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))), 
                    Lit(true), 
                    _2_raft.Message.prevLogIndex(Lit(m#0))
                       + Seq#Length(Lit(_2_raft.Message.entries(Lit(m#0)))), 
                    Lit(_2_raft.Message.dest(Lit(m#0))), 
                    Lit(_2_raft.Message.source(Lit(m#0))))))
             && Lit(_2_raft.HostVars.server(Lit(h'#0)))
               == Lit(_2_raft.HostVars.server(Lit(h#0)))
             && Seq#Equal(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h'#0)))), 
              _2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))));

// function declaration for raft._default.Conflict
function _2_raft.__default.Conflict(h#0: DatatypeType, 
    h'#0: DatatypeType, 
    m#0: DatatypeType, 
    index#0: int, 
    reply#0: DatatypeType)
   : bool;

function _2_raft.__default.Conflict#canCall(h#0: DatatypeType, 
    h'#0: DatatypeType, 
    m#0: DatatypeType, 
    index#0: int, 
    reply#0: DatatypeType)
   : bool;

// consequence axiom for _2_raft.__default.Conflict
axiom true
   ==> (forall h#0: DatatypeType, 
      h'#0: DatatypeType, 
      m#0: DatatypeType, 
      index#0: int, 
      reply#0: DatatypeType :: 
    { _2_raft.__default.Conflict(h#0, h'#0, m#0, index#0, reply#0) } 
    _2_raft.__default.Conflict#canCall(h#0, h'#0, m#0, index#0, reply#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && 
          _2_raft.__default.WFMessage(m#0)
           && _2_raft.Message.AppendEntriesRequest_q(m#0))
       ==> true);

function _2_raft.__default.Conflict#requires(DatatypeType, DatatypeType, DatatypeType, int, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.Conflict
axiom (forall h#0: DatatypeType, 
    h'#0: DatatypeType, 
    m#0: DatatypeType, 
    index#0: int, 
    reply#0: DatatypeType :: 
  { _2_raft.__default.Conflict#requires(h#0, h'#0, m#0, index#0, reply#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
       && $Is(h'#0, Tclass._2_raft.HostVars())
       && $Is(m#0, Tclass._2_raft.Message())
       && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
     ==> _2_raft.__default.Conflict#requires(h#0, h'#0, m#0, index#0, reply#0)
       == (_2_raft.__default.WFMessage(m#0)
         && _2_raft.Message.AppendEntriesRequest_q(m#0)));

// definition axiom for _2_raft.__default.Conflict(revealed)
axiom true
   ==> (forall h#0: DatatypeType, 
      h'#0: DatatypeType, 
      m#0: DatatypeType, 
      index#0: int, 
      reply#0: DatatypeType :: 
    { _2_raft.__default.Conflict(h#0, h'#0, m#0, index#0, reply#0) } 
    _2_raft.__default.Conflict#canCall(h#0, h'#0, m#0, index#0, reply#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && 
          _2_raft.__default.WFMessage(m#0)
           && _2_raft.Message.AppendEntriesRequest_q(m#0))
       ==> (LitInt(0) <= index#0
           ==> _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0)))
         && (_2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && index#0 < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
           ==> _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), index#0)): DatatypeType)
             && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(_2_raft.Message.entries(m#0), LitInt(0))): DatatypeType))
         && (_2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), index#0)): DatatypeType)
             && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(_2_raft.Message.entries(m#0), LitInt(0))): DatatypeType)
             && _2_raft.LogEntry.term($Unbox(Seq#Index(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), index#0)): DatatypeType)
               != _2_raft.LogEntry.term($Unbox(Seq#Index(_2_raft.Message.entries(m#0), LitInt(0))): DatatypeType)
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && Seq#Equal(_2_raft.LogVars.log(_2_raft.HostVars.log(h'#0)), 
              Seq#Take(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
                Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0))) - 1))
           ==> $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h'#0))
             && $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && ($IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h'#0))
             && $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.HostVars.server(h'#0) == _2_raft.HostVars.server(h#0)
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h'#0))
               == _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h#0))
           ==> $IsA#_0_MissingLibrary.Option(reply#0))
         && _2_raft.__default.Conflict(h#0, h'#0, m#0, index#0, reply#0)
           == (
            !Seq#Equal(_2_raft.Message.entries(m#0), Seq#Empty(): Seq Box)
             && LitInt(0) <= index#0
             && index#0 < Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
             && _2_raft.LogEntry.term($Unbox(Seq#Index(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), index#0)): DatatypeType)
               != _2_raft.LogEntry.term($Unbox(Seq#Index(_2_raft.Message.entries(m#0), LitInt(0))): DatatypeType)
             && Seq#Equal(_2_raft.LogVars.log(_2_raft.HostVars.log(h'#0)), 
              Seq#Take(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
                Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0))) - 1))
             && _2_raft.HostVars.server(h'#0) == _2_raft.HostVars.server(h#0)
             && _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h'#0))
               == _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h#0))
             && reply#0 == Lit(#MissingLibrary.Option.None())));

// definition axiom for _2_raft.__default.Conflict for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, 
      h'#0: DatatypeType, 
      m#0: DatatypeType, 
      index#0: int, 
      reply#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.Conflict(Lit(h#0), Lit(h'#0), Lit(m#0), LitInt(index#0), Lit(reply#0)) } 
    _2_raft.__default.Conflict#canCall(Lit(h#0), Lit(h'#0), Lit(m#0), LitInt(index#0), Lit(reply#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && Lit(_2_raft.__default.WFMessage(Lit(m#0))
               && _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))))
       ==> (LitInt(0) <= LitInt(index#0)
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && index#0
               < Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), LitInt(index#0))): DatatypeType)
             && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(Lit(_2_raft.Message.entries(Lit(m#0))), LitInt(0))): DatatypeType))
         && (_2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), LitInt(index#0))): DatatypeType)
             && _2_raft.LogEntry.LogEntry_q($Unbox(Seq#Index(Lit(_2_raft.Message.entries(Lit(m#0))), LitInt(0))): DatatypeType)
             && _2_raft.LogEntry.term($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), LitInt(index#0))): DatatypeType)
               != _2_raft.LogEntry.term($Unbox(Seq#Index(Lit(_2_raft.Message.entries(Lit(m#0))), LitInt(0))): DatatypeType)
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && Seq#Equal(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h'#0)))), 
              Seq#Take(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
                Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))) - 1))
           ==> $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.server(Lit(h'#0)))
               == Lit(_2_raft.HostVars.server(Lit(h#0)))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h'#0)))))
               == LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h#0)))))
           ==> $IsA#_0_MissingLibrary.Option(Lit(reply#0)))
         && _2_raft.__default.Conflict(Lit(h#0), Lit(h'#0), Lit(m#0), LitInt(index#0), Lit(reply#0))
           == (
            !Seq#Equal(_2_raft.Message.entries(Lit(m#0)), Seq#Empty(): Seq Box)
             && LitInt(0) <= LitInt(index#0)
             && index#0
               < Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
             && _2_raft.LogEntry.term($Unbox(Seq#Index(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), LitInt(index#0))): DatatypeType)
               != _2_raft.LogEntry.term($Unbox(Seq#Index(Lit(_2_raft.Message.entries(Lit(m#0))), LitInt(0))): DatatypeType)
             && Seq#Equal(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h'#0)))), 
              Seq#Take(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))), 
                Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))))) - 1))
             && Lit(_2_raft.HostVars.server(Lit(h'#0)))
               == Lit(_2_raft.HostVars.server(Lit(h#0)))
             && LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h'#0)))))
               == LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h#0)))))
             && Lit(reply#0) == Lit(#MissingLibrary.Option.None())));

// function declaration for raft._default.NoConflict
function _2_raft.__default.NoConflict(h#0: DatatypeType, 
    h'#0: DatatypeType, 
    m#0: DatatypeType, 
    index#0: int, 
    reply#0: DatatypeType)
   : bool;

function _2_raft.__default.NoConflict#canCall(h#0: DatatypeType, 
    h'#0: DatatypeType, 
    m#0: DatatypeType, 
    index#0: int, 
    reply#0: DatatypeType)
   : bool;

// consequence axiom for _2_raft.__default.NoConflict
axiom true
   ==> (forall h#0: DatatypeType, 
      h'#0: DatatypeType, 
      m#0: DatatypeType, 
      index#0: int, 
      reply#0: DatatypeType :: 
    { _2_raft.__default.NoConflict(h#0, h'#0, m#0, index#0, reply#0) } 
    _2_raft.__default.NoConflict#canCall(h#0, h'#0, m#0, index#0, reply#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && 
          _2_raft.__default.WFMessage(m#0)
           && _2_raft.Message.AppendEntriesRequest_q(m#0))
       ==> true);

function _2_raft.__default.NoConflict#requires(DatatypeType, DatatypeType, DatatypeType, int, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.NoConflict
axiom (forall h#0: DatatypeType, 
    h'#0: DatatypeType, 
    m#0: DatatypeType, 
    index#0: int, 
    reply#0: DatatypeType :: 
  { _2_raft.__default.NoConflict#requires(h#0, h'#0, m#0, index#0, reply#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
       && $Is(h'#0, Tclass._2_raft.HostVars())
       && $Is(m#0, Tclass._2_raft.Message())
       && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
     ==> _2_raft.__default.NoConflict#requires(h#0, h'#0, m#0, index#0, reply#0)
       == (_2_raft.__default.WFMessage(m#0)
         && _2_raft.Message.AppendEntriesRequest_q(m#0)));

// definition axiom for _2_raft.__default.NoConflict(revealed)
axiom true
   ==> (forall h#0: DatatypeType, 
      h'#0: DatatypeType, 
      m#0: DatatypeType, 
      index#0: int, 
      reply#0: DatatypeType :: 
    { _2_raft.__default.NoConflict(h#0, h'#0, m#0, index#0, reply#0) } 
    _2_raft.__default.NoConflict#canCall(h#0, h'#0, m#0, index#0, reply#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && 
          _2_raft.__default.WFMessage(m#0)
           && _2_raft.Message.AppendEntriesRequest_q(m#0))
       ==> (!Seq#Equal(_2_raft.Message.entries(m#0), Seq#Empty(): Seq Box)
           ==> _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0)))
         && (_2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
               == _2_raft.Message.prevLogIndex(m#0)
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && Seq#Equal(_2_raft.LogVars.log(_2_raft.HostVars.log(h'#0)), 
              Seq#Append(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
                Seq#Take(_2_raft.Message.entries(m#0), LitInt(1))))
           ==> $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h'#0))
             && $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && ($IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h'#0))
             && $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.HostVars.server(h'#0) == _2_raft.HostVars.server(h#0)
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h'#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log(h#0))
             && _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h'#0))
               == _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h#0))
           ==> $IsA#_0_MissingLibrary.Option(reply#0))
         && _2_raft.__default.NoConflict(h#0, h'#0, m#0, index#0, reply#0)
           == (
            !Seq#Equal(_2_raft.Message.entries(m#0), Seq#Empty(): Seq Box)
             && Seq#Length(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)))
               == _2_raft.Message.prevLogIndex(m#0)
             && Seq#Equal(_2_raft.LogVars.log(_2_raft.HostVars.log(h'#0)), 
              Seq#Append(_2_raft.LogVars.log(_2_raft.HostVars.log(h#0)), 
                Seq#Take(_2_raft.Message.entries(m#0), LitInt(1))))
             && _2_raft.HostVars.server(h'#0) == _2_raft.HostVars.server(h#0)
             && _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h'#0))
               == _2_raft.LogVars.commitIndex(_2_raft.HostVars.log(h#0))
             && reply#0 == Lit(#MissingLibrary.Option.None())));

// definition axiom for _2_raft.__default.NoConflict for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, 
      h'#0: DatatypeType, 
      m#0: DatatypeType, 
      index#0: int, 
      reply#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.NoConflict(Lit(h#0), Lit(h'#0), Lit(m#0), LitInt(index#0), Lit(reply#0)) } 
    _2_raft.__default.NoConflict#canCall(Lit(h#0), Lit(h'#0), Lit(m#0), LitInt(index#0), Lit(reply#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && Lit(_2_raft.__default.WFMessage(Lit(m#0))
               && _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))))
       ==> (!Seq#Equal(_2_raft.Message.entries(Lit(m#0)), Seq#Empty(): Seq Box)
           ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
               == LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && Seq#Equal(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h'#0)))), 
              Seq#Append(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))), 
                Seq#Take(Lit(_2_raft.Message.entries(Lit(m#0))), LitInt(1))))
           ==> $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.server(Lit(h'#0)))
               == Lit(_2_raft.HostVars.server(Lit(h#0)))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.LogVars.LogVars_q(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h'#0)))))
               == LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h#0)))))
           ==> $IsA#_0_MissingLibrary.Option(Lit(reply#0)))
         && _2_raft.__default.NoConflict(Lit(h#0), Lit(h'#0), Lit(m#0), LitInt(index#0), Lit(reply#0))
           == (
            !Seq#Equal(_2_raft.Message.entries(Lit(m#0)), Seq#Empty(): Seq Box)
             && Seq#Length(Lit(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0))))))
               == LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)))
             && Seq#Equal(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h'#0)))), 
              Seq#Append(_2_raft.LogVars.log(Lit(_2_raft.HostVars.log(Lit(h#0)))), 
                Seq#Take(Lit(_2_raft.Message.entries(Lit(m#0))), LitInt(1))))
             && Lit(_2_raft.HostVars.server(Lit(h'#0)))
               == Lit(_2_raft.HostVars.server(Lit(h#0)))
             && LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h'#0)))))
               == LitInt(_2_raft.LogVars.commitIndex(Lit(_2_raft.HostVars.log(Lit(h#0)))))
             && Lit(reply#0) == Lit(#MissingLibrary.Option.None())));

// function declaration for raft._default.HandleAppendEntriesRequestHost
function _2_raft.__default.HandleAppendEntriesRequestHost(h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType)
   : bool;

function _2_raft.__default.HandleAppendEntriesRequestHost#canCall(h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType)
   : bool;

// consequence axiom for _2_raft.__default.HandleAppendEntriesRequestHost
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType :: 
    { _2_raft.__default.HandleAppendEntriesRequestHost(h#0, h'#0, m#0, reply#0) } 
    _2_raft.__default.HandleAppendEntriesRequestHost#canCall(h#0, h'#0, m#0, reply#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && 
          _2_raft.__default.WFMessage(m#0)
           && _2_raft.Message.AppendEntriesRequest_q(m#0))
       ==> true);

function _2_raft.__default.HandleAppendEntriesRequestHost#requires(DatatypeType, DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.HandleAppendEntriesRequestHost
axiom (forall h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType :: 
  { _2_raft.__default.HandleAppendEntriesRequestHost#requires(h#0, h'#0, m#0, reply#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
       && $Is(h'#0, Tclass._2_raft.HostVars())
       && $Is(m#0, Tclass._2_raft.Message())
       && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
     ==> _2_raft.__default.HandleAppendEntriesRequestHost#requires(h#0, h'#0, m#0, reply#0)
       == (_2_raft.__default.WFMessage(m#0)
         && _2_raft.Message.AppendEntriesRequest_q(m#0)));

// definition axiom for _2_raft.__default.HandleAppendEntriesRequestHost(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType :: 
    { _2_raft.__default.HandleAppendEntriesRequestHost(h#0, h'#0, m#0, reply#0) } 
    _2_raft.__default.HandleAppendEntriesRequestHost#canCall(h#0, h'#0, m#0, reply#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && 
          _2_raft.__default.WFMessage(m#0)
           && _2_raft.Message.AppendEntriesRequest_q(m#0))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
         && (_2_raft.Message.term(m#0)
             <= _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
           ==> (
              _2_raft.Message.RequestVoteRequest_q(m#0)
               || _2_raft.Message.RequestVoteResponse_q(m#0)
               || _2_raft.Message.AppendEntriesRequest_q(m#0)
               || _2_raft.Message.AppendEntriesResponse_q(m#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
             && (_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                 <= _2_raft.Message.term(m#0)
               ==> (
                  _2_raft.Message.RequestVoteRequest_q(m#0)
                   || _2_raft.Message.RequestVoteResponse_q(m#0)
                   || _2_raft.Message.AppendEntriesRequest_q(m#0)
                   || _2_raft.Message.AppendEntriesResponse_q(m#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                 && (_2_raft.Message.term(m#0)
                     == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                   ==> _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && (_2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                   ==> _2_raft.__default.AppendLogOk#canCall(h#0, m#0)))
             && ((
                  _2_raft.Message.RequestVoteRequest_q(m#0)
                   || _2_raft.Message.RequestVoteResponse_q(m#0)
                   || _2_raft.Message.AppendEntriesRequest_q(m#0)
                   || _2_raft.Message.AppendEntriesResponse_q(m#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                 && (_2_raft.Message.term(m#0)
                     == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                   ==> _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && (_2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                   ==> _2_raft.__default.AppendLogOk#canCall(h#0, m#0))
                 && 
                _2_raft.Message.term(m#0)
                   == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                 && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                 && !_2_raft.__default.AppendLogOk(h#0, m#0)
               ==> $IsA#_0_MissingLibrary.Option(reply#0)
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
             && ($IsA#_0_MissingLibrary.Option(reply#0)
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                 && reply#0
                   == #MissingLibrary.Option.Some($Box(#raft.Message.AppendEntriesResponse(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0)), 
                        Lit(false), 
                        LitInt(0), 
                        _2_raft.Message.dest(m#0), 
                        _2_raft.Message.source(m#0))))
               ==> $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h'#0))
                 && $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0))
             && ($IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h'#0))
                 && $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.HostVars.server(h'#0) == _2_raft.HostVars.server(h#0)
               ==> $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
                 && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0))
             && ($IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
                 && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
               ==> $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
                 && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0))
             && ($IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
                 && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.HostVars.log(h'#0) != _2_raft.HostVars.log(h#0)
               ==> (
                  _2_raft.Message.RequestVoteRequest_q(m#0)
                   || _2_raft.Message.RequestVoteResponse_q(m#0)
                   || _2_raft.Message.AppendEntriesRequest_q(m#0)
                   || _2_raft.Message.AppendEntriesResponse_q(m#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                 && (_2_raft.Message.term(m#0)
                     == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                   ==> _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && (_2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                   ==> _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0)))
                 && (_2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
                   ==> _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && (_2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
                       == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                   ==> $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
                     && $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
                     && 
                    _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && ($IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
                     && $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
                     && 
                    _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
                       == _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0))
                   ==> $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
                     && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.HostVars.HostVars_q(h#0))
                 && ($IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
                     && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.HostVars.log(h'#0) == _2_raft.HostVars.log(h#0)
                   ==> $IsA#_0_MissingLibrary.Option(reply#0)))
             && ((
                  _2_raft.Message.RequestVoteRequest_q(m#0)
                   || _2_raft.Message.RequestVoteResponse_q(m#0)
                   || _2_raft.Message.AppendEntriesRequest_q(m#0)
                   || _2_raft.Message.AppendEntriesResponse_q(m#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                 && (_2_raft.Message.term(m#0)
                     == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                   ==> _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && (_2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                   ==> _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0)))
                 && (_2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
                   ==> _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && (_2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
                       == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                   ==> $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
                     && $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
                     && 
                    _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && ($IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
                     && $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
                     && 
                    _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
                       == _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0))
                   ==> $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
                     && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.HostVars.HostVars_q(h#0))
                 && ($IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
                     && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.HostVars.log(h'#0) == _2_raft.HostVars.log(h#0)
                   ==> $IsA#_0_MissingLibrary.Option(reply#0))
                 && !
                (
                _2_raft.Message.term(m#0)
                   == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                 && _2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                 && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
                 && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
                   == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                 && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
                   == _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0))
                 && _2_raft.HostVars.log(h'#0) == _2_raft.HostVars.log(h#0)
                 && reply#0 == Lit(#MissingLibrary.Option.None()))
               ==> (
                  _2_raft.Message.RequestVoteRequest_q(m#0)
                   || _2_raft.Message.RequestVoteResponse_q(m#0)
                   || _2_raft.Message.AppendEntriesRequest_q(m#0)
                   || _2_raft.Message.AppendEntriesResponse_q(m#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                 && (_2_raft.Message.term(m#0)
                     == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                   ==> _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && (_2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                   ==> _2_raft.__default.AppendLogOk#canCall(h#0, m#0))
                 && (_2_raft.__default.AppendLogOk#canCall(h#0, m#0)
                     && _2_raft.__default.AppendLogOk(h#0, m#0)
                   ==> 
                  Lit(true)
                   ==> _2_raft.__default.AlreadyDoneWithRequest#canCall(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0)
                     && (!_2_raft.__default.AlreadyDoneWithRequest(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0)
                       ==> _2_raft.__default.Conflict#canCall(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0))
                     && (_2_raft.__default.Conflict#canCall(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0)
                         && !_2_raft.__default.Conflict(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0)
                       ==> _2_raft.__default.NoConflict#canCall(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0)))))
         && ((
              _2_raft.Message.RequestVoteRequest_q(m#0)
               || _2_raft.Message.RequestVoteResponse_q(m#0)
               || _2_raft.Message.AppendEntriesRequest_q(m#0)
               || _2_raft.Message.AppendEntriesResponse_q(m#0))
             && 
            _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
             && (_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                 <= _2_raft.Message.term(m#0)
               ==> (
                  _2_raft.Message.RequestVoteRequest_q(m#0)
                   || _2_raft.Message.RequestVoteResponse_q(m#0)
                   || _2_raft.Message.AppendEntriesRequest_q(m#0)
                   || _2_raft.Message.AppendEntriesResponse_q(m#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                 && (_2_raft.Message.term(m#0)
                     == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                   ==> _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && (_2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                   ==> _2_raft.__default.AppendLogOk#canCall(h#0, m#0)))
             && ((
                  _2_raft.Message.RequestVoteRequest_q(m#0)
                   || _2_raft.Message.RequestVoteResponse_q(m#0)
                   || _2_raft.Message.AppendEntriesRequest_q(m#0)
                   || _2_raft.Message.AppendEntriesResponse_q(m#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                 && (_2_raft.Message.term(m#0)
                     == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                   ==> _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && (_2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                   ==> _2_raft.__default.AppendLogOk#canCall(h#0, m#0))
                 && 
                _2_raft.Message.term(m#0)
                   == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                 && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                 && !_2_raft.__default.AppendLogOk(h#0, m#0)
               ==> $IsA#_0_MissingLibrary.Option(reply#0)
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
             && ($IsA#_0_MissingLibrary.Option(reply#0)
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                 && reply#0
                   == #MissingLibrary.Option.Some($Box(#raft.Message.AppendEntriesResponse(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0)), 
                        Lit(false), 
                        LitInt(0), 
                        _2_raft.Message.dest(m#0), 
                        _2_raft.Message.source(m#0))))
               ==> $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h'#0))
                 && $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0))
             && ($IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h'#0))
                 && $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.HostVars.server(h'#0) == _2_raft.HostVars.server(h#0)
               ==> $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
                 && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0))
             && ($IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
                 && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
               ==> $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
                 && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0))
             && ($IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
                 && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
                 && 
                _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.HostVars.log(h'#0) != _2_raft.HostVars.log(h#0)
               ==> (
                  _2_raft.Message.RequestVoteRequest_q(m#0)
                   || _2_raft.Message.RequestVoteResponse_q(m#0)
                   || _2_raft.Message.AppendEntriesRequest_q(m#0)
                   || _2_raft.Message.AppendEntriesResponse_q(m#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                 && (_2_raft.Message.term(m#0)
                     == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                   ==> _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && (_2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                   ==> _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0)))
                 && (_2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
                   ==> _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && (_2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
                       == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                   ==> $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
                     && $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
                     && 
                    _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && ($IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
                     && $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
                     && 
                    _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
                       == _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0))
                   ==> $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
                     && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.HostVars.HostVars_q(h#0))
                 && ($IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
                     && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.HostVars.log(h'#0) == _2_raft.HostVars.log(h#0)
                   ==> $IsA#_0_MissingLibrary.Option(reply#0)))
             && ((
                  _2_raft.Message.RequestVoteRequest_q(m#0)
                   || _2_raft.Message.RequestVoteResponse_q(m#0)
                   || _2_raft.Message.AppendEntriesRequest_q(m#0)
                   || _2_raft.Message.AppendEntriesResponse_q(m#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                 && (_2_raft.Message.term(m#0)
                     == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                   ==> _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && (_2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                   ==> _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0)))
                 && (_2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
                   ==> _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && (_2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
                       == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                   ==> $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
                     && $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
                     && 
                    _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && ($IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
                     && $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0)))
                     && 
                    _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
                       == _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0))
                   ==> $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
                     && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.HostVars.HostVars_q(h#0))
                 && ($IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
                     && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.HostVars.log(h'#0) == _2_raft.HostVars.log(h#0)
                   ==> $IsA#_0_MissingLibrary.Option(reply#0))
                 && !
                (
                _2_raft.Message.term(m#0)
                   == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                 && _2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                 && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
                 && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
                   == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                 && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
                   == _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0))
                 && _2_raft.HostVars.log(h'#0) == _2_raft.HostVars.log(h#0)
                 && reply#0 == Lit(#MissingLibrary.Option.None()))
               ==> (
                  _2_raft.Message.RequestVoteRequest_q(m#0)
                   || _2_raft.Message.RequestVoteResponse_q(m#0)
                   || _2_raft.Message.AppendEntriesRequest_q(m#0)
                   || _2_raft.Message.AppendEntriesResponse_q(m#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                 && (_2_raft.Message.term(m#0)
                     == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                   ==> _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0)))
                 && (_2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                   ==> _2_raft.__default.AppendLogOk#canCall(h#0, m#0))
                 && (_2_raft.__default.AppendLogOk#canCall(h#0, m#0)
                     && _2_raft.__default.AppendLogOk(h#0, m#0)
                   ==> 
                  Lit(true)
                   ==> _2_raft.__default.AlreadyDoneWithRequest#canCall(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0)
                     && (!_2_raft.__default.AlreadyDoneWithRequest(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0)
                       ==> _2_raft.__default.Conflict#canCall(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0))
                     && (_2_raft.__default.Conflict#canCall(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0)
                         && !_2_raft.__default.Conflict(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0)
                       ==> _2_raft.__default.NoConflict#canCall(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0))))
             && (
              (
                (_2_raft.Message.term(m#0)
                     < _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                   || (
                    _2_raft.Message.term(m#0)
                       == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                     && !_2_raft.__default.AppendLogOk(h#0, m#0)))
                 && reply#0
                   == #MissingLibrary.Option.Some($Box(#raft.Message.AppendEntriesResponse(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0)), 
                        Lit(false), 
                        LitInt(0), 
                        _2_raft.Message.dest(m#0), 
                        _2_raft.Message.source(m#0))))
                 && _2_raft.HostVars.server(h'#0) == _2_raft.HostVars.server(h#0)
                 && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
                 && _2_raft.HostVars.log(h'#0) == _2_raft.HostVars.log(h#0))
               || (
                _2_raft.Message.term(m#0)
                   == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                 && _2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                 && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
                 && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
                   == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                 && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
                   == _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0))
                 && _2_raft.HostVars.log(h'#0) == _2_raft.HostVars.log(h#0)
                 && reply#0 == Lit(#MissingLibrary.Option.None()))
               || (
                _2_raft.Message.term(m#0)
                   == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                 && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                 && _2_raft.__default.AppendLogOk(h#0, m#0)
                 && 
                true
                 && (
                  _2_raft.__default.AlreadyDoneWithRequest(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0)
                   || _2_raft.__default.Conflict(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0)
                   || _2_raft.__default.NoConflict(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0))))
           ==> $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
             && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && ($IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
             && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
           ==> $IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h'#0))
             && $IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && _2_raft.__default.HandleAppendEntriesRequestHost(h#0, h'#0, m#0, reply#0)
           == (
            _2_raft.Message.term(m#0)
               <= _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
             && (
              (
                (_2_raft.Message.term(m#0)
                     < _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                   || (
                    _2_raft.Message.term(m#0)
                       == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                     && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                     && !_2_raft.__default.AppendLogOk(h#0, m#0)))
                 && reply#0
                   == #MissingLibrary.Option.Some($Box(#raft.Message.AppendEntriesResponse(_2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0)), 
                        Lit(false), 
                        LitInt(0), 
                        _2_raft.Message.dest(m#0), 
                        _2_raft.Message.source(m#0))))
                 && _2_raft.HostVars.server(h'#0) == _2_raft.HostVars.server(h#0)
                 && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
                 && _2_raft.HostVars.log(h'#0) == _2_raft.HostVars.log(h#0))
               || (
                _2_raft.Message.term(m#0)
                   == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                 && _2_raft.ServerState.Candidate_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                 && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
                 && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
                   == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                 && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
                   == _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h#0))
                 && _2_raft.HostVars.log(h'#0) == _2_raft.HostVars.log(h#0)
                 && reply#0 == Lit(#MissingLibrary.Option.None()))
               || (
                _2_raft.Message.term(m#0)
                   == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
                 && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h#0)))
                 && _2_raft.__default.AppendLogOk(h#0, m#0)
                 && 
                true
                 && (
                  _2_raft.__default.AlreadyDoneWithRequest(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0)
                   || _2_raft.__default.Conflict(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0)
                   || _2_raft.__default.NoConflict(h#0, h'#0, m#0, _2_raft.Message.prevLogIndex(m#0) + 1, reply#0))))
             && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
             && _2_raft.HostVars.leader(h'#0) == _2_raft.HostVars.leader(h#0)));

// definition axiom for _2_raft.__default.HandleAppendEntriesRequestHost for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.HandleAppendEntriesRequestHost(Lit(h#0), Lit(h'#0), Lit(m#0), Lit(reply#0)) } 
    _2_raft.__default.HandleAppendEntriesRequestHost#canCall(Lit(h#0), Lit(h'#0), Lit(m#0), Lit(reply#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && Lit(_2_raft.__default.WFMessage(Lit(m#0))
               && _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && (LitInt(_2_raft.Message.term(Lit(m#0)))
             <= LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> (
              _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
               || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
               || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
               || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && (!Lit(_2_raft.Message.term(Lit(m#0))
                   < _2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
               ==> (
                  _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
                   || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && (LitInt(_2_raft.Message.term(Lit(m#0)))
                     == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && Lit(_2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
                   ==> _2_raft.__default.AppendLogOk#canCall(Lit(h#0), Lit(m#0))))
             && ((
                  _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
                   || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && (LitInt(_2_raft.Message.term(Lit(m#0)))
                     == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && Lit(_2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
                   ==> _2_raft.__default.AppendLogOk#canCall(Lit(h#0), Lit(m#0)))
                 && 
                LitInt(_2_raft.Message.term(Lit(m#0)))
                   == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && _2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                 && !Lit(_2_raft.__default.AppendLogOk(Lit(h#0), Lit(m#0)))
               ==> $IsA#_0_MissingLibrary.Option(Lit(reply#0))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && ($IsA#_0_MissingLibrary.Option(Lit(reply#0))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && Lit(reply#0)
                   == Lit(#MissingLibrary.Option.Some($Box(Lit(#raft.Message.AppendEntriesResponse(LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))), 
                            Lit(false), 
                            LitInt(0), 
                            Lit(_2_raft.Message.dest(Lit(m#0))), 
                            Lit(_2_raft.Message.source(Lit(m#0))))))))
               ==> $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                 && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0)))
             && ($IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                 && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && Lit(_2_raft.HostVars.server(Lit(h'#0)))
                   == Lit(_2_raft.HostVars.server(Lit(h#0)))
               ==> $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
                 && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0)))
             && ($IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
                 && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
                   == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
               ==> $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
                 && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0)))
             && ($IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
                 && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && Lit(_2_raft.HostVars.log(Lit(h'#0))) != Lit(_2_raft.HostVars.log(Lit(h#0)))
               ==> (
                  _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
                   || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && (LitInt(_2_raft.Message.term(Lit(m#0)))
                     == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && Lit(_2_raft.ServerState.Candidate_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && Lit(_2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0)))))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                       == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
                     && $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && ($IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
                     && $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                       == Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
                     && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.HostVars.HostVars_q(Lit(h#0)))
                 && ($IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
                     && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0)))
                   ==> $IsA#_0_MissingLibrary.Option(Lit(reply#0))))
             && ((
                  _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
                   || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && (LitInt(_2_raft.Message.term(Lit(m#0)))
                     == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && Lit(_2_raft.ServerState.Candidate_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && Lit(_2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0)))))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                       == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
                     && $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && ($IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
                     && $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                       == Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
                     && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.HostVars.HostVars_q(Lit(h#0)))
                 && ($IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
                     && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0)))
                   ==> $IsA#_0_MissingLibrary.Option(Lit(reply#0)))
                 && !
                (
                LitInt(_2_raft.Message.term(Lit(m#0)))
                   == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && _2_raft.ServerState.Candidate_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                 && _2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
                 && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                   == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                   == Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0)))
                 && Lit(reply#0) == Lit(#MissingLibrary.Option.None()))
               ==> (
                  _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
                   || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && (LitInt(_2_raft.Message.term(Lit(m#0)))
                     == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && Lit(_2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
                   ==> _2_raft.__default.AppendLogOk#canCall(Lit(h#0), Lit(m#0)))
                 && (_2_raft.__default.AppendLogOk#canCall(Lit(h#0), Lit(m#0))
                     && Lit(_2_raft.__default.AppendLogOk(Lit(h#0), Lit(m#0)))
                   ==> 
                  Lit(true)
                   ==> _2_raft.__default.AlreadyDoneWithRequest#canCall(Lit(h#0), 
                      Lit(h'#0), 
                      Lit(m#0), 
                      LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                      Lit(reply#0))
                     && (!Lit(_2_raft.__default.AlreadyDoneWithRequest(Lit(h#0), 
                          Lit(h'#0), 
                          Lit(m#0), 
                          LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                          Lit(reply#0)))
                       ==> _2_raft.__default.Conflict#canCall(Lit(h#0), 
                        Lit(h'#0), 
                        Lit(m#0), 
                        LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                        Lit(reply#0)))
                     && (_2_raft.__default.Conflict#canCall(Lit(h#0), 
                          Lit(h'#0), 
                          Lit(m#0), 
                          LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                          Lit(reply#0))
                         && !Lit(_2_raft.__default.Conflict(Lit(h#0), 
                            Lit(h'#0), 
                            Lit(m#0), 
                            LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                            Lit(reply#0)))
                       ==> _2_raft.__default.NoConflict#canCall(Lit(h#0), 
                        Lit(h'#0), 
                        Lit(m#0), 
                        LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                        Lit(reply#0))))))
         && ((
              _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
               || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
               || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
               || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && (!Lit(_2_raft.Message.term(Lit(m#0))
                   < _2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
               ==> (
                  _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
                   || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && (LitInt(_2_raft.Message.term(Lit(m#0)))
                     == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && Lit(_2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
                   ==> _2_raft.__default.AppendLogOk#canCall(Lit(h#0), Lit(m#0))))
             && ((
                  _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
                   || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && (LitInt(_2_raft.Message.term(Lit(m#0)))
                     == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && Lit(_2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
                   ==> _2_raft.__default.AppendLogOk#canCall(Lit(h#0), Lit(m#0)))
                 && 
                LitInt(_2_raft.Message.term(Lit(m#0)))
                   == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && _2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                 && !Lit(_2_raft.__default.AppendLogOk(Lit(h#0), Lit(m#0)))
               ==> $IsA#_0_MissingLibrary.Option(Lit(reply#0))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && ($IsA#_0_MissingLibrary.Option(Lit(reply#0))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && Lit(reply#0)
                   == Lit(#MissingLibrary.Option.Some($Box(Lit(#raft.Message.AppendEntriesResponse(LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))), 
                            Lit(false), 
                            LitInt(0), 
                            Lit(_2_raft.Message.dest(Lit(m#0))), 
                            Lit(_2_raft.Message.source(Lit(m#0))))))))
               ==> $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                 && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0)))
             && ($IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                 && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && Lit(_2_raft.HostVars.server(Lit(h'#0)))
                   == Lit(_2_raft.HostVars.server(Lit(h#0)))
               ==> $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
                 && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0)))
             && ($IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
                 && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
                   == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
               ==> $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
                 && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0)))
             && ($IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
                 && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && Lit(_2_raft.HostVars.log(Lit(h'#0))) != Lit(_2_raft.HostVars.log(Lit(h#0)))
               ==> (
                  _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
                   || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && (LitInt(_2_raft.Message.term(Lit(m#0)))
                     == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && Lit(_2_raft.ServerState.Candidate_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && Lit(_2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0)))))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                       == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
                     && $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && ($IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
                     && $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                       == Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
                     && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.HostVars.HostVars_q(Lit(h#0)))
                 && ($IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
                     && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0)))
                   ==> $IsA#_0_MissingLibrary.Option(Lit(reply#0))))
             && ((
                  _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
                   || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && (LitInt(_2_raft.Message.term(Lit(m#0)))
                     == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && Lit(_2_raft.ServerState.Candidate_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && Lit(_2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0)))))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                       == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
                     && $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && ($IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
                     && $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                       == Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
                     && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.HostVars.HostVars_q(Lit(h#0)))
                 && ($IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
                     && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0)))
                   ==> $IsA#_0_MissingLibrary.Option(Lit(reply#0)))
                 && !
                (
                LitInt(_2_raft.Message.term(Lit(m#0)))
                   == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && _2_raft.ServerState.Candidate_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                 && _2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
                 && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                   == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                   == Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0)))
                 && Lit(reply#0) == Lit(#MissingLibrary.Option.None()))
               ==> (
                  _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
                   || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
                   || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                 && (LitInt(_2_raft.Message.term(Lit(m#0)))
                     == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && (_2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
                     && Lit(_2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0)))))))
                   ==> _2_raft.__default.AppendLogOk#canCall(Lit(h#0), Lit(m#0)))
                 && (_2_raft.__default.AppendLogOk#canCall(Lit(h#0), Lit(m#0))
                     && Lit(_2_raft.__default.AppendLogOk(Lit(h#0), Lit(m#0)))
                   ==> 
                  Lit(true)
                   ==> _2_raft.__default.AlreadyDoneWithRequest#canCall(Lit(h#0), 
                      Lit(h'#0), 
                      Lit(m#0), 
                      LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                      Lit(reply#0))
                     && (!Lit(_2_raft.__default.AlreadyDoneWithRequest(Lit(h#0), 
                          Lit(h'#0), 
                          Lit(m#0), 
                          LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                          Lit(reply#0)))
                       ==> _2_raft.__default.Conflict#canCall(Lit(h#0), 
                        Lit(h'#0), 
                        Lit(m#0), 
                        LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                        Lit(reply#0)))
                     && (_2_raft.__default.Conflict#canCall(Lit(h#0), 
                          Lit(h'#0), 
                          Lit(m#0), 
                          LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                          Lit(reply#0))
                         && !Lit(_2_raft.__default.Conflict(Lit(h#0), 
                            Lit(h'#0), 
                            Lit(m#0), 
                            LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                            Lit(reply#0)))
                       ==> _2_raft.__default.NoConflict#canCall(Lit(h#0), 
                        Lit(h'#0), 
                        Lit(m#0), 
                        LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                        Lit(reply#0)))))
             && (
              (
                (_2_raft.Message.term(Lit(m#0))
                     < _2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))
                   || (
                    LitInt(_2_raft.Message.term(Lit(m#0)))
                       == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                     && _2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                     && !Lit(_2_raft.__default.AppendLogOk(Lit(h#0), Lit(m#0)))))
                 && Lit(reply#0)
                   == Lit(#MissingLibrary.Option.Some($Box(Lit(#raft.Message.AppendEntriesResponse(LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))), 
                            Lit(false), 
                            LitInt(0), 
                            Lit(_2_raft.Message.dest(Lit(m#0))), 
                            Lit(_2_raft.Message.source(Lit(m#0))))))))
                 && Lit(_2_raft.HostVars.server(Lit(h'#0)))
                   == Lit(_2_raft.HostVars.server(Lit(h#0)))
                 && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
                   == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
                 && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0))))
               || (
                LitInt(_2_raft.Message.term(Lit(m#0)))
                   == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && _2_raft.ServerState.Candidate_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                 && _2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
                 && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                   == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                   == Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0)))
                 && Lit(reply#0) == Lit(#MissingLibrary.Option.None()))
               || (
                LitInt(_2_raft.Message.term(Lit(m#0)))
                   == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && _2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                 && _2_raft.__default.AppendLogOk(Lit(h#0), Lit(m#0))
                 && 
                true
                 && (
                  _2_raft.__default.AlreadyDoneWithRequest(Lit(h#0), 
                    Lit(h'#0), 
                    Lit(m#0), 
                    LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                    Lit(reply#0))
                   || _2_raft.__default.Conflict(Lit(h#0), 
                    Lit(h'#0), 
                    Lit(m#0), 
                    LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                    Lit(reply#0))
                   || _2_raft.__default.NoConflict(Lit(h#0), 
                    Lit(h'#0), 
                    Lit(m#0), 
                    LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                    Lit(reply#0)))))
           ==> $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
               == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
           ==> $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && _2_raft.__default.HandleAppendEntriesRequestHost(Lit(h#0), Lit(h'#0), Lit(m#0), Lit(reply#0))
           == (
            LitInt(_2_raft.Message.term(Lit(m#0)))
               <= LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && (
              (
                (_2_raft.Message.term(Lit(m#0))
                     < _2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))
                   || (
                    LitInt(_2_raft.Message.term(Lit(m#0)))
                       == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                     && _2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                     && !Lit(_2_raft.__default.AppendLogOk(Lit(h#0), Lit(m#0)))))
                 && Lit(reply#0)
                   == Lit(#MissingLibrary.Option.Some($Box(Lit(#raft.Message.AppendEntriesResponse(LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))), 
                            Lit(false), 
                            LitInt(0), 
                            Lit(_2_raft.Message.dest(Lit(m#0))), 
                            Lit(_2_raft.Message.source(Lit(m#0))))))))
                 && Lit(_2_raft.HostVars.server(Lit(h'#0)))
                   == Lit(_2_raft.HostVars.server(Lit(h#0)))
                 && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
                   == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
                 && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0))))
               || (
                LitInt(_2_raft.Message.term(Lit(m#0)))
                   == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && _2_raft.ServerState.Candidate_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                 && _2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
                 && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                   == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
                   == Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0)))
                 && Lit(reply#0) == Lit(#MissingLibrary.Option.None()))
               || (
                LitInt(_2_raft.Message.term(Lit(m#0)))
                   == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
                 && _2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h#0))))))
                 && _2_raft.__default.AppendLogOk(Lit(h#0), Lit(m#0))
                 && 
                true
                 && (
                  _2_raft.__default.AlreadyDoneWithRequest(Lit(h#0), 
                    Lit(h'#0), 
                    Lit(m#0), 
                    LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                    Lit(reply#0))
                   || _2_raft.__default.Conflict(Lit(h#0), 
                    Lit(h'#0), 
                    Lit(m#0), 
                    LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                    Lit(reply#0))
                   || _2_raft.__default.NoConflict(Lit(h#0), 
                    Lit(h'#0), 
                    Lit(m#0), 
                    LitInt(_2_raft.Message.prevLogIndex(Lit(m#0)) + 1), 
                    Lit(reply#0)))))
             && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
               == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
             && Lit(_2_raft.HostVars.leader(Lit(h'#0)))
               == Lit(_2_raft.HostVars.leader(Lit(h#0)))));

// function declaration for raft._default.HandleAppendEntriesRequest
function _2_raft.__default.HandleAppendEntriesRequest(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType)
   : bool;

function _2_raft.__default.HandleAppendEntriesRequest#canCall(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType)
   : bool;

// consequence axiom for _2_raft.__default.HandleAppendEntriesRequest
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType :: 
    { _2_raft.__default.HandleAppendEntriesRequest(v#0, v'#0, m#0, reply#0) } 
    _2_raft.__default.HandleAppendEntriesRequest#canCall(v#0, v'#0, m#0, reply#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0)
           && 
          _2_raft.__default.WFMessage(m#0)
           && _2_raft.Message.AppendEntriesRequest_q(m#0))
       ==> true);

function _2_raft.__default.HandleAppendEntriesRequest#requires(DatatypeType, DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.HandleAppendEntriesRequest
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType :: 
  { _2_raft.__default.HandleAppendEntriesRequest#requires(v#0, v'#0, m#0, reply#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $Is(m#0, Tclass._2_raft.Message())
       && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
     ==> _2_raft.__default.HandleAppendEntriesRequest#requires(v#0, v'#0, m#0, reply#0)
       == (
        _2_raft.__default.WFVars(v#0)
         && _2_raft.__default.WFVars(v'#0)
         && 
        _2_raft.__default.WFMessage(m#0)
         && _2_raft.Message.AppendEntriesRequest_q(m#0)));

// definition axiom for _2_raft.__default.HandleAppendEntriesRequest(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType :: 
    { _2_raft.__default.HandleAppendEntriesRequest(v#0, v'#0, m#0, reply#0) } 
    _2_raft.__default.HandleAppendEntriesRequest#canCall(v#0, v'#0, m#0, reply#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0)
           && 
          _2_raft.__default.WFMessage(m#0)
           && _2_raft.Message.AppendEntriesRequest_q(m#0))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        _2_raft.Variables.Variables_q(v#0)
         && _2_raft.Variables.Variables_q(v'#0)
         && _2_raft.__default.HandleAppendEntriesRequestHost#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
          $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
          m#0, 
          reply#0)
         && (_2_raft.__default.HandleAppendEntriesRequestHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
            $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
            m#0, 
            reply#0)
           ==> 
          _0_MissingLibrary.Option.Some_q(reply#0)
           ==> _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && _2_raft.__default.Reply#canCall(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              $Unbox(_0_MissingLibrary.Option.value(reply#0)): DatatypeType, 
              m#0))
         && ((_0_MissingLibrary.Option.Some_q(reply#0)
               ==> _2_raft.Variables.Variables_q(v#0)
                 && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
                 && 
                _2_raft.Variables.Variables_q(v'#0)
                 && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
                 && _2_raft.__default.Reply#canCall(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
                  _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
                  $Unbox(_0_MissingLibrary.Option.value(reply#0)): DatatypeType, 
                  m#0))
             && (_0_MissingLibrary.Option.Some_q(reply#0)
               ==> _2_raft.__default.Reply(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
                _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
                $Unbox(_0_MissingLibrary.Option.value(reply#0)): DatatypeType, 
                m#0))
           ==> 
          _0_MissingLibrary.Option.None_q(reply#0)
           ==> _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && _2_raft.__default.Discard#canCall(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0))
         && ((_0_MissingLibrary.Option.None_q(reply#0)
               ==> _2_raft.Variables.Variables_q(v#0)
                 && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
                 && 
                _2_raft.Variables.Variables_q(v'#0)
                 && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
                 && _2_raft.__default.Discard#canCall(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
                  _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
                  m#0))
             && (_0_MissingLibrary.Option.None_q(reply#0)
               ==> _2_raft.__default.Discard(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
                _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
                m#0))
           ==> _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0)))
         && _2_raft.__default.HandleAppendEntriesRequest(v#0, v'#0, m#0, reply#0)
           == (
            _2_raft.__default.HandleAppendEntriesRequestHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              m#0, 
              reply#0)
             && (_0_MissingLibrary.Option.Some_q(reply#0)
               ==> _2_raft.__default.Reply(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
                _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
                $Unbox(_0_MissingLibrary.Option.value(reply#0)): DatatypeType, 
                m#0))
             && (_0_MissingLibrary.Option.None_q(reply#0)
               ==> _2_raft.__default.Discard(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
                _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
                m#0))
             && Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0)), 
              _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)))));

// definition axiom for _2_raft.__default.HandleAppendEntriesRequest for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.HandleAppendEntriesRequest(Lit(v#0), Lit(v'#0), Lit(m#0), Lit(reply#0)) } 
    _2_raft.__default.HandleAppendEntriesRequest#canCall(Lit(v#0), Lit(v'#0), Lit(m#0), Lit(reply#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && 
          Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0)))
           && Lit(_2_raft.__default.WFMessage(Lit(m#0))
               && _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        _2_raft.Variables.Variables_q(Lit(v#0))
         && _2_raft.Variables.Variables_q(Lit(v'#0))
         && _2_raft.__default.HandleAppendEntriesRequestHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
          $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
          Lit(m#0), 
          Lit(reply#0))
         && (_2_raft.__default.HandleAppendEntriesRequestHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
            $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
            Lit(m#0), 
            Lit(reply#0))
           ==> 
          Lit(_0_MissingLibrary.Option.Some_q(Lit(reply#0)))
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && _2_raft.__default.Reply#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              Lit($Unbox(_0_MissingLibrary.Option.value(Lit(reply#0))): DatatypeType), 
              Lit(m#0)))
         && ((Lit(_0_MissingLibrary.Option.Some_q(Lit(reply#0)))
               ==> _2_raft.Variables.Variables_q(Lit(v#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
                 && 
                _2_raft.Variables.Variables_q(Lit(v'#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
                 && _2_raft.__default.Reply#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
                  Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
                  Lit($Unbox(_0_MissingLibrary.Option.value(Lit(reply#0))): DatatypeType), 
                  Lit(m#0)))
             && Lit(_0_MissingLibrary.Option.Some_q(Lit(reply#0))
                 ==> _2_raft.__default.Reply(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
                  Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
                  Lit($Unbox(_0_MissingLibrary.Option.value(Lit(reply#0))): DatatypeType), 
                  Lit(m#0)))
           ==> 
          Lit(_0_MissingLibrary.Option.None_q(Lit(reply#0)))
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && _2_raft.__default.Discard#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              Lit(m#0)))
         && ((Lit(_0_MissingLibrary.Option.None_q(Lit(reply#0)))
               ==> _2_raft.Variables.Variables_q(Lit(v#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
                 && 
                _2_raft.Variables.Variables_q(Lit(v'#0))
                 && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
                 && _2_raft.__default.Discard#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
                  Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
                  Lit(m#0)))
             && Lit(_0_MissingLibrary.Option.None_q(Lit(reply#0))
                 ==> _2_raft.__default.Discard(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
                  Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
                  Lit(m#0)))
           ==> _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0)))))
         && _2_raft.__default.HandleAppendEntriesRequest(Lit(v#0), Lit(v'#0), Lit(m#0), Lit(reply#0))
           == (
            _2_raft.__default.HandleAppendEntriesRequestHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              Lit(m#0), 
              Lit(reply#0))
             && (_0_MissingLibrary.Option.Some_q(Lit(reply#0))
               ==> _2_raft.__default.Reply(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
                Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
                Lit($Unbox(_0_MissingLibrary.Option.value(Lit(reply#0))): DatatypeType), 
                Lit(m#0)))
             && (_0_MissingLibrary.Option.None_q(Lit(reply#0))
               ==> _2_raft.__default.Discard(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
                Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
                Lit(m#0)))
             && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              _2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))));

// function declaration for raft._default.HandleAppendEntriesResponseHost
function _2_raft.__default.HandleAppendEntriesResponseHost(h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType) : bool;

function _2_raft.__default.HandleAppendEntriesResponseHost#canCall(h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.HandleAppendEntriesResponseHost
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.HandleAppendEntriesResponseHost(h#0, h'#0, m#0) } 
    _2_raft.__default.HandleAppendEntriesResponseHost#canCall(h#0, h'#0, m#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
           && 
          _2_raft.__default.WFMessage(m#0)
           && _2_raft.Message.AppendEntriesResponse_q(m#0))
       ==> true);

function _2_raft.__default.HandleAppendEntriesResponseHost#requires(DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.HandleAppendEntriesResponseHost
axiom (forall h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType :: 
  { _2_raft.__default.HandleAppendEntriesResponseHost#requires(h#0, h'#0, m#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
       && $Is(h'#0, Tclass._2_raft.HostVars())
       && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.HandleAppendEntriesResponseHost#requires(h#0, h'#0, m#0)
       == (_2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
         && 
        _2_raft.__default.WFMessage(m#0)
         && _2_raft.Message.AppendEntriesResponse_q(m#0)));

// definition axiom for _2_raft.__default.HandleAppendEntriesResponseHost(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.HandleAppendEntriesResponseHost(h#0, h'#0, m#0) } 
    _2_raft.__default.HandleAppendEntriesResponseHost#canCall(h#0, h'#0, m#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.WFLeaderVars(_2_raft.HostVars.leader(h#0))
           && 
          _2_raft.__default.WFMessage(m#0)
           && _2_raft.Message.AppendEntriesResponse_q(m#0))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
         && (_2_raft.Message.term(m#0)
             == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
           ==> (_2_raft.Message.success(m#0)
               ==> _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0)))
             && (_2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))
                 && Map#Equal(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h'#0)), 
                  Map#Build(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)), 
                    _2_raft.Message.source(m#0), 
                    $Box(_2_raft.Message.matchIndex(m#0) + 1)))
               ==> _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0)))
             && (_2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))
                 && !Map#Equal(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h'#0)), 
                  Map#Build(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h#0)), 
                    _2_raft.Message.source(m#0), 
                    $Box(_2_raft.Message.matchIndex(m#0))))
               ==> (!_2_raft.Message.success(m#0)
                   ==> _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))
                     && _2_raft.__default.Max#canCall($Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[_2_raft.Message.source(m#0)]): int
                         - 1, 
                      LitInt(0)))
                 && (_2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))
                     && _2_raft.__default.Max#canCall($Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[_2_raft.Message.source(m#0)]): int
                         - 1, 
                      LitInt(0))
                     && Map#Equal(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h'#0)), 
                      Map#Build(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)), 
                        _2_raft.Message.source(m#0), 
                        $Box(_2_raft.__default.Max($Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[_2_raft.Message.source(m#0)]): int
                               - 1, 
                            LitInt(0)))))
                   ==> _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0)))))
         && ((_2_raft.Message.success(m#0)
               ==> _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0)))
             && (_2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))
                 && Map#Equal(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h'#0)), 
                  Map#Build(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)), 
                    _2_raft.Message.source(m#0), 
                    $Box(_2_raft.Message.matchIndex(m#0) + 1)))
               ==> _2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0)))
             && (_2_raft.HostVars.HostVars_q(h'#0)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
                 && 
                _2_raft.HostVars.HostVars_q(h#0)
                 && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))
                 && !Map#Equal(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h'#0)), 
                  Map#Build(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h#0)), 
                    _2_raft.Message.source(m#0), 
                    $Box(_2_raft.Message.matchIndex(m#0))))
               ==> (!_2_raft.Message.success(m#0)
                   ==> _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))
                     && _2_raft.__default.Max#canCall($Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[_2_raft.Message.source(m#0)]): int
                         - 1, 
                      LitInt(0)))
                 && (_2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))
                     && _2_raft.__default.Max#canCall($Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[_2_raft.Message.source(m#0)]): int
                         - 1, 
                      LitInt(0))
                     && Map#Equal(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h'#0)), 
                      Map#Build(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)), 
                        _2_raft.Message.source(m#0), 
                        $Box(_2_raft.__default.Max($Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[_2_raft.Message.source(m#0)]): int
                               - 1, 
                            LitInt(0)))))
                   ==> _2_raft.HostVars.HostVars_q(h'#0)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h'#0))
                     && 
                    _2_raft.HostVars.HostVars_q(h#0)
                     && _2_raft.LeaderVars.LeaderVars_q(_2_raft.HostVars.leader(h#0))))
             && ((
                _2_raft.Message.success(m#0)
                 && Map#Equal(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h'#0)), 
                  Map#Build(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)), 
                    _2_raft.Message.source(m#0), 
                    $Box(_2_raft.Message.matchIndex(m#0) + 1)))
                 && Map#Equal(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h'#0)), 
                  Map#Build(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h#0)), 
                    _2_raft.Message.source(m#0), 
                    $Box(_2_raft.Message.matchIndex(m#0)))))
               || (
                !_2_raft.Message.success(m#0)
                 && Map#Equal(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h'#0)), 
                  Map#Build(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)), 
                    _2_raft.Message.source(m#0), 
                    $Box(_2_raft.__default.Max($Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[_2_raft.Message.source(m#0)]): int
                           - 1, 
                        LitInt(0)))))
                 && Map#Equal(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h'#0)), 
                  _2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h#0)))))
           ==> $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h'#0))
             && $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && ($IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h'#0))
             && $IsA#_2_raft.ServerVars(_2_raft.HostVars.server(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.HostVars.server(h'#0) == _2_raft.HostVars.server(h#0)
           ==> $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
             && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && ($IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
             && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
           ==> $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
             && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && _2_raft.__default.HandleAppendEntriesResponseHost(h#0, h'#0, m#0)
           == (
            _2_raft.Message.term(m#0)
               == _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
             && ((
                _2_raft.Message.success(m#0)
                 && Map#Equal(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h'#0)), 
                  Map#Build(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)), 
                    _2_raft.Message.source(m#0), 
                    $Box(_2_raft.Message.matchIndex(m#0) + 1)))
                 && Map#Equal(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h'#0)), 
                  Map#Build(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h#0)), 
                    _2_raft.Message.source(m#0), 
                    $Box(_2_raft.Message.matchIndex(m#0)))))
               || (
                !_2_raft.Message.success(m#0)
                 && Map#Equal(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h'#0)), 
                  Map#Build(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)), 
                    _2_raft.Message.source(m#0), 
                    $Box(_2_raft.__default.Max($Unbox(Map#Elements(_2_raft.LeaderVars.nextIndex(_2_raft.HostVars.leader(h#0)))[_2_raft.Message.source(m#0)]): int
                           - 1, 
                        LitInt(0)))))
                 && Map#Equal(_2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h'#0)), 
                  _2_raft.LeaderVars.matchIndex(_2_raft.HostVars.leader(h#0)))))
             && _2_raft.HostVars.server(h'#0) == _2_raft.HostVars.server(h#0)
             && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
             && _2_raft.HostVars.log(h'#0) == _2_raft.HostVars.log(h#0)));

// definition axiom for _2_raft.__default.HandleAppendEntriesResponseHost for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.HandleAppendEntriesResponseHost(Lit(h#0), Lit(h'#0), Lit(m#0)) } 
    _2_raft.__default.HandleAppendEntriesResponseHost#canCall(Lit(h#0), Lit(h'#0), Lit(m#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          Lit(_2_raft.__default.WFLeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0)))))
           && Lit(_2_raft.__default.WFMessage(Lit(m#0))
               && _2_raft.Message.AppendEntriesResponse_q(Lit(m#0))))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && (LitInt(_2_raft.Message.term(Lit(m#0)))
             == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> (Lit(_2_raft.Message.success(Lit(m#0)))
               ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0)))))
             && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
                 && Map#Equal(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
                  Map#Build(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))), 
                    Lit(_2_raft.Message.source(Lit(m#0))), 
                    $Box(LitInt(_2_raft.Message.matchIndex(Lit(m#0)) + 1))))
               ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0)))))
             && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
                 && !Map#Equal(_2_raft.LeaderVars.matchIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
                  Map#Build(Lit(_2_raft.LeaderVars.matchIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))), 
                    Lit(_2_raft.Message.source(Lit(m#0))), 
                    $Box(LitInt(_2_raft.Message.matchIndex(Lit(m#0))))))
               ==> (!Lit(_2_raft.Message.success(Lit(m#0)))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
                     && _2_raft.__default.Max#canCall($Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[Lit(_2_raft.Message.source(Lit(m#0)))]): int
                         - 1, 
                      LitInt(0)))
                 && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
                     && _2_raft.__default.Max#canCall($Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[Lit(_2_raft.Message.source(Lit(m#0)))]): int
                         - 1, 
                      LitInt(0))
                     && Map#Equal(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
                      Map#Build(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))), 
                        Lit(_2_raft.Message.source(Lit(m#0))), 
                        $Box(_2_raft.__default.Max($Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[Lit(_2_raft.Message.source(Lit(m#0)))]): int
                               - 1, 
                            LitInt(0)))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0)))))))
         && ((Lit(_2_raft.Message.success(Lit(m#0)))
               ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0)))))
             && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
                 && Map#Equal(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
                  Map#Build(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))), 
                    Lit(_2_raft.Message.source(Lit(m#0))), 
                    $Box(LitInt(_2_raft.Message.matchIndex(Lit(m#0)) + 1))))
               ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0)))))
             && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
                 && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
                 && 
                _2_raft.HostVars.HostVars_q(Lit(h#0))
                 && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
                 && !Map#Equal(_2_raft.LeaderVars.matchIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
                  Map#Build(Lit(_2_raft.LeaderVars.matchIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))), 
                    Lit(_2_raft.Message.source(Lit(m#0))), 
                    $Box(LitInt(_2_raft.Message.matchIndex(Lit(m#0))))))
               ==> (!Lit(_2_raft.Message.success(Lit(m#0)))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
                     && _2_raft.__default.Max#canCall($Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[Lit(_2_raft.Message.source(Lit(m#0)))]): int
                         - 1, 
                      LitInt(0)))
                 && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))
                     && _2_raft.__default.Max#canCall($Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[Lit(_2_raft.Message.source(Lit(m#0)))]): int
                         - 1, 
                      LitInt(0))
                     && Map#Equal(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
                      Map#Build(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))), 
                        Lit(_2_raft.Message.source(Lit(m#0))), 
                        $Box(_2_raft.__default.Max($Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[Lit(_2_raft.Message.source(Lit(m#0)))]): int
                               - 1, 
                            LitInt(0)))))
                   ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
                     && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
                     && 
                    _2_raft.HostVars.HostVars_q(Lit(h#0))
                     && _2_raft.LeaderVars.LeaderVars_q(Lit(_2_raft.HostVars.leader(Lit(h#0))))))
             && ((
                _2_raft.Message.success(Lit(m#0))
                 && Map#Equal(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
                  Map#Build(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))), 
                    Lit(_2_raft.Message.source(Lit(m#0))), 
                    $Box(LitInt(_2_raft.Message.matchIndex(Lit(m#0)) + 1))))
                 && Map#Equal(_2_raft.LeaderVars.matchIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
                  Map#Build(Lit(_2_raft.LeaderVars.matchIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))), 
                    Lit(_2_raft.Message.source(Lit(m#0))), 
                    $Box(LitInt(_2_raft.Message.matchIndex(Lit(m#0)))))))
               || (
                !Lit(_2_raft.Message.success(Lit(m#0)))
                 && Map#Equal(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
                  Map#Build(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))), 
                    Lit(_2_raft.Message.source(Lit(m#0))), 
                    $Box(_2_raft.__default.Max($Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[Lit(_2_raft.Message.source(Lit(m#0)))]): int
                           - 1, 
                        LitInt(0)))))
                 && Map#Equal(_2_raft.LeaderVars.matchIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
                  _2_raft.LeaderVars.matchIndex(Lit(_2_raft.HostVars.leader(Lit(h#0)))))))
           ==> $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && $IsA#_2_raft.ServerVars(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.server(Lit(h'#0)))
               == Lit(_2_raft.HostVars.server(Lit(h#0)))
           ==> $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
               == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
           ==> $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && _2_raft.__default.HandleAppendEntriesResponseHost(Lit(h#0), Lit(h'#0), Lit(m#0))
           == (
            LitInt(_2_raft.Message.term(Lit(m#0)))
               == LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
             && ((
                _2_raft.Message.success(Lit(m#0))
                 && Map#Equal(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
                  Map#Build(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))), 
                    Lit(_2_raft.Message.source(Lit(m#0))), 
                    $Box(LitInt(_2_raft.Message.matchIndex(Lit(m#0)) + 1))))
                 && Map#Equal(_2_raft.LeaderVars.matchIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
                  Map#Build(Lit(_2_raft.LeaderVars.matchIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))), 
                    Lit(_2_raft.Message.source(Lit(m#0))), 
                    $Box(LitInt(_2_raft.Message.matchIndex(Lit(m#0)))))))
               || (
                !Lit(_2_raft.Message.success(Lit(m#0)))
                 && Map#Equal(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
                  Map#Build(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))), 
                    Lit(_2_raft.Message.source(Lit(m#0))), 
                    $Box(_2_raft.__default.Max($Unbox(Map#Elements(Lit(_2_raft.LeaderVars.nextIndex(Lit(_2_raft.HostVars.leader(Lit(h#0))))))[Lit(_2_raft.Message.source(Lit(m#0)))]): int
                           - 1, 
                        LitInt(0)))))
                 && Map#Equal(_2_raft.LeaderVars.matchIndex(Lit(_2_raft.HostVars.leader(Lit(h'#0)))), 
                  _2_raft.LeaderVars.matchIndex(Lit(_2_raft.HostVars.leader(Lit(h#0)))))))
             && Lit(_2_raft.HostVars.server(Lit(h'#0)))
               == Lit(_2_raft.HostVars.server(Lit(h#0)))
             && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
               == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
             && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0)))));

// function declaration for raft._default.HandleAppendEntriesResponse
function _2_raft.__default.HandleAppendEntriesResponse(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType) : bool;

function _2_raft.__default.HandleAppendEntriesResponse#canCall(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.HandleAppendEntriesResponse
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.HandleAppendEntriesResponse(v#0, v'#0, m#0) } 
    _2_raft.__default.HandleAppendEntriesResponse#canCall(v#0, v'#0, m#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0)
           && _2_raft.Message.AppendEntriesResponse_q(m#0)
           && _2_raft.__default.WFMessage(m#0))
       ==> true);

function _2_raft.__default.HandleAppendEntriesResponse#requires(DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.HandleAppendEntriesResponse
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
  { _2_raft.__default.HandleAppendEntriesResponse#requires(v#0, v'#0, m#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.HandleAppendEntriesResponse#requires(v#0, v'#0, m#0)
       == (
        _2_raft.__default.WFVars(v#0)
         && _2_raft.__default.WFVars(v'#0)
         && _2_raft.Message.AppendEntriesResponse_q(m#0)
         && _2_raft.__default.WFMessage(m#0)));

// definition axiom for _2_raft.__default.HandleAppendEntriesResponse(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.HandleAppendEntriesResponse(v#0, v'#0, m#0) } 
    _2_raft.__default.HandleAppendEntriesResponse#canCall(v#0, v'#0, m#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0)
           && _2_raft.Message.AppendEntriesResponse_q(m#0)
           && _2_raft.__default.WFMessage(m#0))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        _2_raft.Variables.Variables_q(v#0)
         && _2_raft.Variables.Variables_q(v'#0)
         && _2_raft.__default.HandleAppendEntriesResponseHost#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
          $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
          m#0)
         && (_2_raft.__default.HandleAppendEntriesResponseHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
            $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
            m#0)
           ==> _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && _2_raft.__default.Discard#canCall(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0))
         && (_2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && _2_raft.__default.Discard#canCall(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0)
             && _2_raft.__default.Discard(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0)
           ==> _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0)))
         && _2_raft.__default.HandleAppendEntriesResponse(v#0, v'#0, m#0)
           == (
            _2_raft.__default.HandleAppendEntriesResponseHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              m#0)
             && _2_raft.__default.Discard(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0)
             && Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0)), 
              _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)))));

// definition axiom for _2_raft.__default.HandleAppendEntriesResponse for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.HandleAppendEntriesResponse(Lit(v#0), Lit(v'#0), Lit(m#0)) } 
    _2_raft.__default.HandleAppendEntriesResponse#canCall(Lit(v#0), Lit(v'#0), Lit(m#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0)))
           && Lit(_2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
           && Lit(_2_raft.__default.WFMessage(Lit(m#0))))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        _2_raft.Variables.Variables_q(Lit(v#0))
         && _2_raft.Variables.Variables_q(Lit(v'#0))
         && _2_raft.__default.HandleAppendEntriesResponseHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
          $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
          Lit(m#0))
         && (_2_raft.__default.HandleAppendEntriesResponseHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
            $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
            Lit(m#0))
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && _2_raft.__default.Discard#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              Lit(m#0)))
         && (_2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && _2_raft.__default.Discard#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              Lit(m#0))
             && Lit(_2_raft.__default.Discard(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
                Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
                Lit(m#0)))
           ==> _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0)))))
         && _2_raft.__default.HandleAppendEntriesResponse(Lit(v#0), Lit(v'#0), Lit(m#0))
           == (
            _2_raft.__default.HandleAppendEntriesResponseHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              Lit(m#0))
             && _2_raft.__default.Discard(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              Lit(m#0))
             && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              _2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))));

// function declaration for raft._default.UpdateTermHost
function _2_raft.__default.UpdateTermHost(h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType) : bool;

function _2_raft.__default.UpdateTermHost#canCall(h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.UpdateTermHost
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.UpdateTermHost(h#0, h'#0, m#0) } 
    _2_raft.__default.UpdateTermHost#canCall(h#0, h'#0, m#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message()))
       ==> true);

function _2_raft.__default.UpdateTermHost#requires(DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.UpdateTermHost
axiom (forall h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType :: 
  { _2_raft.__default.UpdateTermHost#requires(h#0, h'#0, m#0) } 
  $Is(h#0, Tclass._2_raft.HostVars())
       && $Is(h'#0, Tclass._2_raft.HostVars())
       && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.UpdateTermHost#requires(h#0, h'#0, m#0) == true);

// definition axiom for _2_raft.__default.UpdateTermHost(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.UpdateTermHost(h#0, h'#0, m#0) } 
    _2_raft.__default.UpdateTermHost#canCall(h#0, h'#0, m#0)
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message()))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        _2_raft.HostVars.HostVars_q(h#0)
         && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h#0))
         && (_2_raft.Message.term(m#0)
             > _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && (
              _2_raft.Message.RequestVoteRequest_q(m#0)
               || _2_raft.Message.RequestVoteResponse_q(m#0)
               || _2_raft.Message.AppendEntriesRequest_q(m#0)
               || _2_raft.Message.AppendEntriesResponse_q(m#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && (
              _2_raft.Message.RequestVoteRequest_q(m#0)
               || _2_raft.Message.RequestVoteResponse_q(m#0)
               || _2_raft.Message.AppendEntriesRequest_q(m#0)
               || _2_raft.Message.AppendEntriesResponse_q(m#0))
             && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
               == _2_raft.Message.term(m#0)
           ==> _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0)))
         && (_2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
           ==> $IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0)))
         && ($IsA#_0_MissingLibrary.Option(_2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0)))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server(h'#0))
             && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
               == Lit(#MissingLibrary.Option.None())
           ==> $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
             && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && ($IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h'#0))
             && $IsA#_2_raft.CandidateVars(_2_raft.HostVars.candidate(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
           ==> $IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h'#0))
             && $IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && ($IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h'#0))
             && $IsA#_2_raft.LeaderVars(_2_raft.HostVars.leader(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0)
             && _2_raft.HostVars.leader(h'#0) == _2_raft.HostVars.leader(h#0)
           ==> $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h'#0))
             && $IsA#_2_raft.LogVars(_2_raft.HostVars.log(h#0))
             && 
            _2_raft.HostVars.HostVars_q(h'#0)
             && _2_raft.HostVars.HostVars_q(h#0))
         && _2_raft.__default.UpdateTermHost(h#0, h'#0, m#0)
           == (
            _2_raft.Message.term(m#0)
               > _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h#0))
             && _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server(h'#0))
               == _2_raft.Message.term(m#0)
             && _2_raft.ServerState.Follower_q(_2_raft.ServerVars.state(_2_raft.HostVars.server(h'#0)))
             && _2_raft.ServerVars.votedFor(_2_raft.HostVars.server(h'#0))
               == Lit(#MissingLibrary.Option.None())
             && _2_raft.HostVars.candidate(h'#0) == _2_raft.HostVars.candidate(h#0)
             && _2_raft.HostVars.leader(h'#0) == _2_raft.HostVars.leader(h#0)
             && _2_raft.HostVars.log(h'#0) == _2_raft.HostVars.log(h#0)));

// definition axiom for _2_raft.__default.UpdateTermHost for all literals(revealed)
axiom true
   ==> (forall h#0: DatatypeType, h'#0: DatatypeType, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.UpdateTermHost(Lit(h#0), Lit(h'#0), Lit(m#0)) } 
    _2_raft.__default.UpdateTermHost#canCall(Lit(h#0), Lit(h'#0), Lit(m#0))
         || (
          $Is(h#0, Tclass._2_raft.HostVars())
           && $Is(h'#0, Tclass._2_raft.HostVars())
           && $Is(m#0, Tclass._2_raft.Message()))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        _2_raft.HostVars.HostVars_q(Lit(h#0))
         && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h#0))))
         && (Lit(_2_raft.Message.term(Lit(m#0))
               > _2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0)))))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && (
              _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
               || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
               || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
               || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && (
              _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
               || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
               || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
               || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
             && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == LitInt(_2_raft.Message.term(Lit(m#0)))
           ==> _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
         && (_2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && Lit(_2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0)))))))
           ==> $IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
         && ($IsA#_0_MissingLibrary.Option(Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.ServerVars.ServerVars_q(Lit(_2_raft.HostVars.server(Lit(h'#0))))
             && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == Lit(#MissingLibrary.Option.None())
           ==> $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h'#0))))
             && $IsA#_2_raft.CandidateVars(Lit(_2_raft.HostVars.candidate(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
               == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
           ==> $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && ($IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h'#0))))
             && $IsA#_2_raft.LeaderVars(Lit(_2_raft.HostVars.leader(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0))
             && Lit(_2_raft.HostVars.leader(Lit(h'#0)))
               == Lit(_2_raft.HostVars.leader(Lit(h#0)))
           ==> $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h'#0))))
             && $IsA#_2_raft.LogVars(Lit(_2_raft.HostVars.log(Lit(h#0))))
             && 
            _2_raft.HostVars.HostVars_q(Lit(h'#0))
             && _2_raft.HostVars.HostVars_q(Lit(h#0)))
         && _2_raft.__default.UpdateTermHost(Lit(h#0), Lit(h'#0), Lit(m#0))
           == (
            _2_raft.Message.term(Lit(m#0))
               > _2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h#0))))
             && LitInt(_2_raft.ServerVars.currentTerm(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == LitInt(_2_raft.Message.term(Lit(m#0)))
             && _2_raft.ServerState.Follower_q(Lit(_2_raft.ServerVars.state(Lit(_2_raft.HostVars.server(Lit(h'#0))))))
             && Lit(_2_raft.ServerVars.votedFor(Lit(_2_raft.HostVars.server(Lit(h'#0)))))
               == Lit(#MissingLibrary.Option.None())
             && Lit(_2_raft.HostVars.candidate(Lit(h'#0)))
               == Lit(_2_raft.HostVars.candidate(Lit(h#0)))
             && Lit(_2_raft.HostVars.leader(Lit(h'#0)))
               == Lit(_2_raft.HostVars.leader(Lit(h#0)))
             && Lit(_2_raft.HostVars.log(Lit(h'#0))) == Lit(_2_raft.HostVars.log(Lit(h#0)))));

// function declaration for raft._default.UpdateTerm
function _2_raft.__default.UpdateTerm(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType) : bool;

function _2_raft.__default.UpdateTerm#canCall(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.UpdateTerm
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.UpdateTerm(v#0, v'#0, m#0) } 
    _2_raft.__default.UpdateTerm#canCall(v#0, v'#0, m#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0)
           && _2_raft.__default.WFMessage(m#0))
       ==> true);

function _2_raft.__default.UpdateTerm#requires(DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.UpdateTerm
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
  { _2_raft.__default.UpdateTerm#requires(v#0, v'#0, m#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.UpdateTerm#requires(v#0, v'#0, m#0)
       == (
        _2_raft.__default.WFVars(v#0)
         && _2_raft.__default.WFVars(v'#0)
         && _2_raft.__default.WFMessage(m#0)));

// definition axiom for _2_raft.__default.UpdateTerm(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.UpdateTerm(v#0, v'#0, m#0) } 
    _2_raft.__default.UpdateTerm#canCall(v#0, v'#0, m#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0)
           && _2_raft.__default.WFMessage(m#0))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        _2_raft.Variables.Variables_q(v#0)
         && _2_raft.Variables.Variables_q(v'#0)
         && _2_raft.__default.UpdateTermHost#canCall($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
          $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
          m#0)
         && (_2_raft.__default.UpdateTermHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
            $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
            m#0)
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(v'#0, v#0, _2_raft.Message.dest(m#0)))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(v'#0, v#0, _2_raft.Message.dest(m#0))
             && _2_raft.__default.UnchangedOtherHosts(v'#0, v#0, _2_raft.Message.dest(m#0))
           ==> $IsA#_2_raft.GlobalVars(_2_raft.Variables.global(v'#0))
             && $IsA#_2_raft.GlobalVars(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.Variables.Variables_q(v#0))
         && _2_raft.__default.UpdateTerm(v#0, v'#0, m#0)
           == (
            _2_raft.__default.UpdateTermHost($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              $Unbox(Map#Elements(_2_raft.Variables.host(v'#0))[_2_raft.Message.dest(m#0)]): DatatypeType, 
              m#0)
             && _2_raft.__default.UnchangedOtherHosts(v'#0, v#0, _2_raft.Message.dest(m#0))
             && _2_raft.Variables.global(v'#0) == _2_raft.Variables.global(v#0)));

// definition axiom for _2_raft.__default.UpdateTerm for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.UpdateTerm(Lit(v#0), Lit(v'#0), Lit(m#0)) } 
    _2_raft.__default.UpdateTerm#canCall(Lit(v#0), Lit(v'#0), Lit(m#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0)))
           && Lit(_2_raft.__default.WFMessage(Lit(m#0))))
       ==> (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        _2_raft.Variables.Variables_q(Lit(v#0))
         && _2_raft.Variables.Variables_q(Lit(v'#0))
         && _2_raft.__default.UpdateTermHost#canCall($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
          $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
          Lit(m#0))
         && (_2_raft.__default.UpdateTermHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
            $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
            Lit(m#0))
           ==> _2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), Lit(_2_raft.Message.dest(Lit(m#0)))))
         && (_2_raft.__default.UnchangedOtherHosts#canCall(Lit(v'#0), Lit(v#0), Lit(_2_raft.Message.dest(Lit(m#0))))
             && Lit(_2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), Lit(_2_raft.Message.dest(Lit(m#0)))))
           ==> $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && $IsA#_2_raft.GlobalVars(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.Variables.Variables_q(Lit(v#0)))
         && _2_raft.__default.UpdateTerm(Lit(v#0), Lit(v'#0), Lit(m#0))
           == (
            _2_raft.__default.UpdateTermHost($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              $Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v'#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType, 
              Lit(m#0))
             && _2_raft.__default.UnchangedOtherHosts(Lit(v'#0), Lit(v#0), Lit(_2_raft.Message.dest(Lit(m#0))))
             && Lit(_2_raft.Variables.global(Lit(v'#0)))
               == Lit(_2_raft.Variables.global(Lit(v#0)))));

// function declaration for raft._default.DropStaleResponse
function _2_raft.__default.DropStaleResponse(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType) : bool;

function _2_raft.__default.DropStaleResponse#canCall(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.DropStaleResponse
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.DropStaleResponse(v#0, v'#0, m#0) } 
    _2_raft.__default.DropStaleResponse#canCall(v#0, v'#0, m#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0)
           && _2_raft.__default.WFMessage(m#0))
       ==> true);

function _2_raft.__default.DropStaleResponse#requires(DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.DropStaleResponse
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
  { _2_raft.__default.DropStaleResponse#requires(v#0, v'#0, m#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.DropStaleResponse#requires(v#0, v'#0, m#0)
       == (
        _2_raft.__default.WFVars(v#0)
         && _2_raft.__default.WFVars(v'#0)
         && _2_raft.__default.WFMessage(m#0)));

// definition axiom for _2_raft.__default.DropStaleResponse(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.DropStaleResponse(v#0, v'#0, m#0) } 
    _2_raft.__default.DropStaleResponse#canCall(v#0, v'#0, m#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0)
           && _2_raft.__default.WFMessage(m#0))
       ==> _2_raft.Variables.Variables_q(v#0)
         && (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(m#0)
           || _2_raft.Message.RequestVoteResponse_q(m#0)
           || _2_raft.Message.AppendEntriesRequest_q(m#0)
           || _2_raft.Message.AppendEntriesResponse_q(m#0))
         && 
        _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType)
         && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType))
         && (_2_raft.Message.term(m#0)
             < _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType))
           ==> _2_raft.__default.UnchangedAllHosts#canCall(v'#0, v#0))
         && (_2_raft.__default.UnchangedAllHosts#canCall(v'#0, v#0)
             && _2_raft.__default.UnchangedAllHosts(v'#0, v#0)
           ==> _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && _2_raft.__default.Discard#canCall(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0))
         && (_2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && _2_raft.__default.Discard#canCall(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0)
             && _2_raft.__default.Discard(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0)
           ==> _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0)))
         && _2_raft.__default.DropStaleResponse(v#0, v'#0, m#0)
           == (
            _2_raft.Message.term(m#0)
               < _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[_2_raft.Message.dest(m#0)]): DatatypeType))
             && _2_raft.__default.UnchangedAllHosts(v'#0, v#0)
             && _2_raft.__default.Discard(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0)
             && Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0)), 
              _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)))));

// definition axiom for _2_raft.__default.DropStaleResponse for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.DropStaleResponse(Lit(v#0), Lit(v'#0), Lit(m#0)) } 
    _2_raft.__default.DropStaleResponse#canCall(Lit(v#0), Lit(v'#0), Lit(m#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0)))
           && Lit(_2_raft.__default.WFMessage(Lit(m#0))))
       ==> _2_raft.Variables.Variables_q(Lit(v#0))
         && (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        (
          _2_raft.Message.RequestVoteRequest_q(Lit(m#0))
           || _2_raft.Message.RequestVoteResponse_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
           || _2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
         && 
        _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType)
         && _2_raft.ServerVars.ServerVars_q(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType))
         && (_2_raft.Message.term(Lit(m#0))
             < _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType))
           ==> _2_raft.__default.UnchangedAllHosts#canCall(Lit(v'#0), Lit(v#0)))
         && (_2_raft.__default.UnchangedAllHosts#canCall(Lit(v'#0), Lit(v#0))
             && Lit(_2_raft.__default.UnchangedAllHosts(Lit(v'#0), Lit(v#0)))
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && _2_raft.__default.Discard#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              Lit(m#0)))
         && (_2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && _2_raft.__default.Discard#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              Lit(m#0))
             && Lit(_2_raft.__default.Discard(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
                Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
                Lit(m#0)))
           ==> _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0)))))
         && _2_raft.__default.DropStaleResponse(Lit(v#0), Lit(v'#0), Lit(m#0))
           == (
            _2_raft.Message.term(Lit(m#0))
               < _2_raft.ServerVars.currentTerm(_2_raft.HostVars.server($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[Lit(_2_raft.Message.dest(Lit(m#0)))]): DatatypeType))
             && _2_raft.__default.UnchangedAllHosts(Lit(v'#0), Lit(v#0))
             && _2_raft.__default.Discard(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              Lit(m#0))
             && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              _2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))));

// function declaration for raft._default.Receive
function _2_raft.__default.Receive(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType)
   : bool;

function _2_raft.__default.Receive#canCall(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType)
   : bool;

// consequence axiom for _2_raft.__default.Receive
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType :: 
    { _2_raft.__default.Receive(v#0, v'#0, m#0, reply#0) } 
    _2_raft.__default.Receive#canCall(v#0, v'#0, m#0, reply#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> true);

function _2_raft.__default.Receive#requires(DatatypeType, DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.Receive
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType :: 
  { _2_raft.__default.Receive#requires(v#0, v'#0, m#0, reply#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $Is(m#0, Tclass._2_raft.Message())
       && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
     ==> _2_raft.__default.Receive#requires(v#0, v'#0, m#0, reply#0)
       == (_2_raft.__default.WFVars(v#0) && _2_raft.__default.WFVars(v'#0)));

// definition axiom for _2_raft.__default.Receive(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType :: 
    { _2_raft.__default.Receive(v#0, v'#0, m#0, reply#0) } 
    _2_raft.__default.Receive#canCall(v#0, v'#0, m#0, reply#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> _2_raft.__default.WFMessage#canCall(m#0)
         && (_2_raft.__default.WFMessage(m#0)
           ==> _2_raft.__default.UpdateTerm#canCall(v#0, v'#0, m#0)
             && (!_2_raft.__default.UpdateTerm(v#0, v'#0, m#0)
               ==> 
              _2_raft.Message.RequestVoteRequest_q(m#0)
               ==> _2_raft.__default.HandleRequestVoteRequest#canCall(v#0, v'#0, m#0))
             && ((_2_raft.Message.RequestVoteRequest_q(m#0)
                   ==> _2_raft.__default.HandleRequestVoteRequest#canCall(v#0, v'#0, m#0))
                 && !
                (_2_raft.Message.RequestVoteRequest_q(m#0)
                 && _2_raft.__default.HandleRequestVoteRequest(v#0, v'#0, m#0))
               ==> 
              _2_raft.Message.RequestVoteResponse_q(m#0)
               ==> _2_raft.__default.DropStaleResponse#canCall(v#0, v'#0, m#0)
                 && (!_2_raft.__default.DropStaleResponse(v#0, v'#0, m#0)
                   ==> _2_raft.__default.HandleRequestVoteResponse#canCall(v#0, v'#0, m#0)))
             && ((_2_raft.Message.RequestVoteResponse_q(m#0)
                   ==> _2_raft.__default.DropStaleResponse#canCall(v#0, v'#0, m#0)
                     && (!_2_raft.__default.DropStaleResponse(v#0, v'#0, m#0)
                       ==> _2_raft.__default.HandleRequestVoteResponse#canCall(v#0, v'#0, m#0)))
                 && !
                (_2_raft.Message.RequestVoteResponse_q(m#0)
                 && (_2_raft.__default.DropStaleResponse(v#0, v'#0, m#0)
                   || _2_raft.__default.HandleRequestVoteResponse(v#0, v'#0, m#0)))
               ==> 
              _2_raft.Message.AppendEntriesRequest_q(m#0)
               ==> _2_raft.__default.HandleAppendEntriesRequest#canCall(v#0, v'#0, m#0, reply#0))
             && ((_2_raft.Message.AppendEntriesRequest_q(m#0)
                   ==> _2_raft.__default.HandleAppendEntriesRequest#canCall(v#0, v'#0, m#0, reply#0))
                 && !
                (_2_raft.Message.AppendEntriesRequest_q(m#0)
                 && _2_raft.__default.HandleAppendEntriesRequest(v#0, v'#0, m#0, reply#0))
               ==> 
              _2_raft.Message.AppendEntriesResponse_q(m#0)
               ==> _2_raft.__default.DropStaleResponse#canCall(v#0, v'#0, m#0)
                 && (!_2_raft.__default.DropStaleResponse(v#0, v'#0, m#0)
                   ==> _2_raft.__default.HandleAppendEntriesResponse#canCall(v#0, v'#0, m#0))))
         && _2_raft.__default.Receive(v#0, v'#0, m#0, reply#0)
           == (_2_raft.__default.WFMessage(m#0)
             && (
              _2_raft.__default.UpdateTerm(v#0, v'#0, m#0)
               || (_2_raft.Message.RequestVoteRequest_q(m#0)
                 && _2_raft.__default.HandleRequestVoteRequest(v#0, v'#0, m#0))
               || (_2_raft.Message.RequestVoteResponse_q(m#0)
                 && (_2_raft.__default.DropStaleResponse(v#0, v'#0, m#0)
                   || _2_raft.__default.HandleRequestVoteResponse(v#0, v'#0, m#0)))
               || (_2_raft.Message.AppendEntriesRequest_q(m#0)
                 && _2_raft.__default.HandleAppendEntriesRequest(v#0, v'#0, m#0, reply#0))
               || (_2_raft.Message.AppendEntriesResponse_q(m#0)
                 && (_2_raft.__default.DropStaleResponse(v#0, v'#0, m#0)
                   || _2_raft.__default.HandleAppendEntriesResponse(v#0, v'#0, m#0))))));

// definition axiom for _2_raft.__default.Receive for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType, reply#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.Receive(Lit(v#0), Lit(v'#0), Lit(m#0), Lit(reply#0)) } 
    _2_raft.__default.Receive#canCall(Lit(v#0), Lit(v'#0), Lit(m#0), Lit(reply#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && $Is(reply#0, Tclass._0_MissingLibrary.Option(Tclass._2_raft.Message()))
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.WFMessage#canCall(Lit(m#0))
         && (Lit(_2_raft.__default.WFMessage(Lit(m#0)))
           ==> _2_raft.__default.UpdateTerm#canCall(Lit(v#0), Lit(v'#0), Lit(m#0))
             && (!Lit(_2_raft.__default.UpdateTerm(Lit(v#0), Lit(v'#0), Lit(m#0)))
               ==> 
              Lit(_2_raft.Message.RequestVoteRequest_q(Lit(m#0)))
               ==> _2_raft.__default.HandleRequestVoteRequest#canCall(Lit(v#0), Lit(v'#0), Lit(m#0)))
             && ((Lit(_2_raft.Message.RequestVoteRequest_q(Lit(m#0)))
                   ==> _2_raft.__default.HandleRequestVoteRequest#canCall(Lit(v#0), Lit(v'#0), Lit(m#0)))
                 && !Lit(_2_raft.Message.RequestVoteRequest_q(Lit(m#0))
                     && _2_raft.__default.HandleRequestVoteRequest(Lit(v#0), Lit(v'#0), Lit(m#0)))
               ==> 
              Lit(_2_raft.Message.RequestVoteResponse_q(Lit(m#0)))
               ==> _2_raft.__default.DropStaleResponse#canCall(Lit(v#0), Lit(v'#0), Lit(m#0))
                 && (!Lit(_2_raft.__default.DropStaleResponse(Lit(v#0), Lit(v'#0), Lit(m#0)))
                   ==> _2_raft.__default.HandleRequestVoteResponse#canCall(Lit(v#0), Lit(v'#0), Lit(m#0))))
             && ((Lit(_2_raft.Message.RequestVoteResponse_q(Lit(m#0)))
                   ==> _2_raft.__default.DropStaleResponse#canCall(Lit(v#0), Lit(v'#0), Lit(m#0))
                     && (!Lit(_2_raft.__default.DropStaleResponse(Lit(v#0), Lit(v'#0), Lit(m#0)))
                       ==> _2_raft.__default.HandleRequestVoteResponse#canCall(Lit(v#0), Lit(v'#0), Lit(m#0))))
                 && !Lit(_2_raft.Message.RequestVoteResponse_q(Lit(m#0))
                     && (_2_raft.__default.DropStaleResponse(Lit(v#0), Lit(v'#0), Lit(m#0))
                       || _2_raft.__default.HandleRequestVoteResponse(Lit(v#0), Lit(v'#0), Lit(m#0))))
               ==> 
              Lit(_2_raft.Message.AppendEntriesRequest_q(Lit(m#0)))
               ==> _2_raft.__default.HandleAppendEntriesRequest#canCall(Lit(v#0), Lit(v'#0), Lit(m#0), Lit(reply#0)))
             && ((Lit(_2_raft.Message.AppendEntriesRequest_q(Lit(m#0)))
                   ==> _2_raft.__default.HandleAppendEntriesRequest#canCall(Lit(v#0), Lit(v'#0), Lit(m#0), Lit(reply#0)))
                 && !Lit(_2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
                     && _2_raft.__default.HandleAppendEntriesRequest(Lit(v#0), Lit(v'#0), Lit(m#0), Lit(reply#0)))
               ==> 
              Lit(_2_raft.Message.AppendEntriesResponse_q(Lit(m#0)))
               ==> _2_raft.__default.DropStaleResponse#canCall(Lit(v#0), Lit(v'#0), Lit(m#0))
                 && (!Lit(_2_raft.__default.DropStaleResponse(Lit(v#0), Lit(v'#0), Lit(m#0)))
                   ==> _2_raft.__default.HandleAppendEntriesResponse#canCall(Lit(v#0), Lit(v'#0), Lit(m#0)))))
         && _2_raft.__default.Receive(Lit(v#0), Lit(v'#0), Lit(m#0), Lit(reply#0))
           == Lit(_2_raft.__default.WFMessage(Lit(m#0))
               && (
                _2_raft.__default.UpdateTerm(Lit(v#0), Lit(v'#0), Lit(m#0))
                 || (_2_raft.Message.RequestVoteRequest_q(Lit(m#0))
                   && _2_raft.__default.HandleRequestVoteRequest(Lit(v#0), Lit(v'#0), Lit(m#0)))
                 || (_2_raft.Message.RequestVoteResponse_q(Lit(m#0))
                   && (_2_raft.__default.DropStaleResponse(Lit(v#0), Lit(v'#0), Lit(m#0))
                     || _2_raft.__default.HandleRequestVoteResponse(Lit(v#0), Lit(v'#0), Lit(m#0))))
                 || (_2_raft.Message.AppendEntriesRequest_q(Lit(m#0))
                   && _2_raft.__default.HandleAppendEntriesRequest(Lit(v#0), Lit(v'#0), Lit(m#0), Lit(reply#0)))
                 || (_2_raft.Message.AppendEntriesResponse_q(Lit(m#0))
                   && (_2_raft.__default.DropStaleResponse(Lit(v#0), Lit(v'#0), Lit(m#0))
                     || _2_raft.__default.HandleAppendEntriesResponse(Lit(v#0), Lit(v'#0), Lit(m#0)))))));

// function declaration for raft._default.DuplicateMessage
function _2_raft.__default.DuplicateMessage(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType) : bool;

function _2_raft.__default.DuplicateMessage#canCall(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.DuplicateMessage
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.DuplicateMessage(v#0, v'#0, m#0) } 
    _2_raft.__default.DuplicateMessage#canCall(v#0, v'#0, m#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> true);

function _2_raft.__default.DuplicateMessage#requires(DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.DuplicateMessage
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
  { _2_raft.__default.DuplicateMessage#requires(v#0, v'#0, m#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.DuplicateMessage#requires(v#0, v'#0, m#0)
       == (_2_raft.__default.WFVars(v#0) && _2_raft.__default.WFVars(v'#0)));

// definition axiom for _2_raft.__default.DuplicateMessage(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.DuplicateMessage(v#0, v'#0, m#0) } 
    _2_raft.__default.DuplicateMessage#canCall(v#0, v'#0, m#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> _2_raft.__default.UnchangedAllHosts#canCall(v'#0, v#0)
         && (_2_raft.__default.UnchangedAllHosts(v'#0, v#0)
           ==> _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0)))
         && (_2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0)), 
              _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)))
           ==> _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0)))
         && (_2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && _2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0))[$Box(m#0)] > 0
           ==> _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && _2_raft.__default.Send#canCall(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0))
         && _2_raft.__default.DuplicateMessage(v#0, v'#0, m#0)
           == (
            _2_raft.__default.UnchangedAllHosts(v'#0, v#0)
             && Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0)), 
              _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)))
             && _2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0))[$Box(m#0)] > 0
             && _2_raft.__default.Send(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0)));

// definition axiom for _2_raft.__default.DuplicateMessage for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.DuplicateMessage(Lit(v#0), Lit(v'#0), Lit(m#0)) } 
    _2_raft.__default.DuplicateMessage#canCall(Lit(v#0), Lit(v'#0), Lit(m#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.UnchangedAllHosts#canCall(Lit(v'#0), Lit(v#0))
         && (Lit(_2_raft.__default.UnchangedAllHosts(Lit(v'#0), Lit(v#0)))
           ==> _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0)))))
         && (_2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              _2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0)))))
         && (_2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0)))))[$Box(Lit(m#0))]
               > 0
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && _2_raft.__default.Send#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              Lit(m#0)))
         && _2_raft.__default.DuplicateMessage(Lit(v#0), Lit(v'#0), Lit(m#0))
           == (
            _2_raft.__default.UnchangedAllHosts(Lit(v'#0), Lit(v#0))
             && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              _2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))
             && Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0)))))[$Box(Lit(m#0))]
               > 0
             && _2_raft.__default.Send(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              Lit(m#0))));

// function declaration for raft._default.DropMessage
function _2_raft.__default.DropMessage(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType) : bool;

function _2_raft.__default.DropMessage#canCall(v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.DropMessage
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.DropMessage(v#0, v'#0, m#0) } 
    _2_raft.__default.DropMessage#canCall(v#0, v'#0, m#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> true);

function _2_raft.__default.DropMessage#requires(DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.DropMessage
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
  { _2_raft.__default.DropMessage#requires(v#0, v'#0, m#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $Is(m#0, Tclass._2_raft.Message())
     ==> _2_raft.__default.DropMessage#requires(v#0, v'#0, m#0)
       == (_2_raft.__default.WFVars(v#0) && _2_raft.__default.WFVars(v'#0)));

// definition axiom for _2_raft.__default.DropMessage(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    { _2_raft.__default.DropMessage(v#0, v'#0, m#0) } 
    _2_raft.__default.DropMessage#canCall(v#0, v'#0, m#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> _2_raft.__default.UnchangedAllHosts#canCall(v'#0, v#0)
         && (_2_raft.__default.UnchangedAllHosts(v'#0, v#0)
           ==> _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0)))
         && (_2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0)), 
              _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)))
           ==> _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && 
            _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && _2_raft.__default.Discard#canCall(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0))
         && _2_raft.__default.DropMessage(v#0, v'#0, m#0)
           == (
            _2_raft.__default.UnchangedAllHosts(v'#0, v#0)
             && Set#Equal(_2_raft.GlobalVars.elections(_2_raft.Variables.global(v'#0)), 
              _2_raft.GlobalVars.elections(_2_raft.Variables.global(v#0)))
             && _2_raft.__default.Discard(_2_raft.GlobalVars.messages(_2_raft.Variables.global(v#0)), 
              _2_raft.GlobalVars.messages(_2_raft.Variables.global(v'#0)), 
              m#0)));

// definition axiom for _2_raft.__default.DropMessage for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, m#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.DropMessage(Lit(v#0), Lit(v'#0), Lit(m#0)) } 
    _2_raft.__default.DropMessage#canCall(Lit(v#0), Lit(v'#0), Lit(m#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(m#0, Tclass._2_raft.Message())
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> _2_raft.__default.UnchangedAllHosts#canCall(Lit(v'#0), Lit(v#0))
         && (Lit(_2_raft.__default.UnchangedAllHosts(Lit(v'#0), Lit(v#0)))
           ==> _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0)))))
         && (_2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              _2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))
           ==> _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && _2_raft.__default.Discard#canCall(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              Lit(m#0)))
         && _2_raft.__default.DropMessage(Lit(v#0), Lit(v'#0), Lit(m#0))
           == (
            _2_raft.__default.UnchangedAllHosts(Lit(v'#0), Lit(v#0))
             && Set#Equal(_2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              _2_raft.GlobalVars.elections(Lit(_2_raft.Variables.global(Lit(v#0)))))
             && _2_raft.__default.Discard(Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v#0))))), 
              Lit(_2_raft.GlobalVars.messages(Lit(_2_raft.Variables.global(Lit(v'#0))))), 
              Lit(m#0))));

// function declaration for raft._default.NextStep
function _2_raft.__default.NextStep(v#0: DatatypeType, v'#0: DatatypeType, step#0: DatatypeType) : bool;

function _2_raft.__default.NextStep#canCall(v#0: DatatypeType, v'#0: DatatypeType, step#0: DatatypeType) : bool;

// consequence axiom for _2_raft.__default.NextStep
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, step#0: DatatypeType :: 
    { _2_raft.__default.NextStep(v#0, v'#0, step#0) } 
    _2_raft.__default.NextStep#canCall(v#0, v'#0, step#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(step#0, Tclass._2_raft.Step())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> true);

function _2_raft.__default.NextStep#requires(DatatypeType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.NextStep
axiom (forall v#0: DatatypeType, v'#0: DatatypeType, step#0: DatatypeType :: 
  { _2_raft.__default.NextStep#requires(v#0, v'#0, step#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
       && $Is(v'#0, Tclass._2_raft.Variables())
       && $Is(step#0, Tclass._2_raft.Step())
     ==> _2_raft.__default.NextStep#requires(v#0, v'#0, step#0)
       == (_2_raft.__default.WFVars(v#0) && _2_raft.__default.WFVars(v'#0)));

// definition axiom for _2_raft.__default.NextStep(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, step#0: DatatypeType :: 
    { _2_raft.__default.NextStep(v#0, v'#0, step#0) } 
    _2_raft.__default.NextStep#canCall(v#0, v'#0, step#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(step#0, Tclass._2_raft.Step())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> (_2_raft.Step.RestartStep_q(step#0)
           ==> _2_raft.__default.Restart#canCall(v#0, v'#0, _2_raft.Step.i(step#0)))
         && (!_2_raft.Step.RestartStep_q(step#0)
           ==> (_2_raft.Step.TimeoutStep_q(step#0)
               ==> _2_raft.__default.Timeout#canCall(v#0, v'#0, _2_raft.Step.i(step#0)))
             && (!_2_raft.Step.TimeoutStep_q(step#0)
               ==> (_2_raft.Step.RequestVoteStep_q(step#0)
                   ==> _2_raft.__default.RequestVote#canCall(v#0, v'#0, _2_raft.Step.i(step#0), _2_raft.Step.j(step#0)))
                 && (!_2_raft.Step.RequestVoteStep_q(step#0)
                   ==> (_2_raft.Step.BecomeLeaderStep_q(step#0)
                       ==> _2_raft.__default.BecomeLeader#canCall(v#0, v'#0, _2_raft.Step.i(step#0)))
                     && (!_2_raft.Step.BecomeLeaderStep_q(step#0)
                       ==> (_2_raft.Step.ClientRequestStep_q(step#0)
                           ==> _2_raft.__default.ClientRequest#canCall(v#0, v'#0, _2_raft.Step.i(step#0), _2_raft.Step.v(step#0)))
                         && (!_2_raft.Step.ClientRequestStep_q(step#0)
                           ==> (_2_raft.Step.AdvanceCommitIndexStep_q(step#0)
                               ==> _2_raft.__default.AdvanceCommitIndex#canCall(v#0, v'#0, _2_raft.Step.i(step#0)))
                             && (!_2_raft.Step.AdvanceCommitIndexStep_q(step#0)
                               ==> (_2_raft.Step.AppendEntriesStep_q(step#0)
                                   ==> _2_raft.__default.AppendEntries#canCall(v#0, v'#0, _2_raft.Step.i(step#0), _2_raft.Step.j(step#0)))
                                 && (!_2_raft.Step.AppendEntriesStep_q(step#0)
                                   ==> (_2_raft.Step.ReceiveStep_q(step#0)
                                       ==> _2_raft.__default.Receive#canCall(v#0, v'#0, _2_raft.Step.m(step#0), _2_raft.Step.reply(step#0)))
                                     && (!_2_raft.Step.ReceiveStep_q(step#0)
                                       ==> (_2_raft.Step.DuplicateMessageStep_q(step#0)
                                           ==> _2_raft.__default.DuplicateMessage#canCall(v#0, v'#0, _2_raft.Step.m(step#0)))
                                         && (!_2_raft.Step.DuplicateMessageStep_q(step#0)
                                           ==> _2_raft.__default.DropMessage#canCall(v#0, v'#0, _2_raft.Step.m(step#0)))))))))))
         && _2_raft.__default.NextStep(v#0, v'#0, step#0)
           == (if _2_raft.Step.RestartStep_q(step#0)
             then _2_raft.__default.Restart(v#0, v'#0, _2_raft.Step.i(step#0))
             else (if _2_raft.Step.TimeoutStep_q(step#0)
               then _2_raft.__default.Timeout(v#0, v'#0, _2_raft.Step.i(step#0))
               else (if _2_raft.Step.RequestVoteStep_q(step#0)
                 then _2_raft.__default.RequestVote(v#0, v'#0, _2_raft.Step.i(step#0), _2_raft.Step.j(step#0))
                 else (if _2_raft.Step.BecomeLeaderStep_q(step#0)
                   then _2_raft.__default.BecomeLeader(v#0, v'#0, _2_raft.Step.i(step#0))
                   else (if _2_raft.Step.ClientRequestStep_q(step#0)
                     then _2_raft.__default.ClientRequest(v#0, v'#0, _2_raft.Step.i(step#0), _2_raft.Step.v(step#0))
                     else (if _2_raft.Step.AdvanceCommitIndexStep_q(step#0)
                       then _2_raft.__default.AdvanceCommitIndex(v#0, v'#0, _2_raft.Step.i(step#0))
                       else (if _2_raft.Step.AppendEntriesStep_q(step#0)
                         then _2_raft.__default.AppendEntries(v#0, v'#0, _2_raft.Step.i(step#0), _2_raft.Step.j(step#0))
                         else (if _2_raft.Step.ReceiveStep_q(step#0)
                           then _2_raft.__default.Receive(v#0, v'#0, _2_raft.Step.m(step#0), _2_raft.Step.reply(step#0))
                           else (if _2_raft.Step.DuplicateMessageStep_q(step#0)
                             then _2_raft.__default.DuplicateMessage(v#0, v'#0, _2_raft.Step.m(step#0))
                             else _2_raft.__default.DropMessage(v#0, v'#0, _2_raft.Step.m(step#0))))))))))));

// definition axiom for _2_raft.__default.NextStep for all literals(revealed)
axiom true
   ==> (forall v#0: DatatypeType, v'#0: DatatypeType, step#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.NextStep(Lit(v#0), Lit(v'#0), Lit(step#0)) } 
    _2_raft.__default.NextStep#canCall(Lit(v#0), Lit(v'#0), Lit(step#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && $Is(step#0, Tclass._2_raft.Step())
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> (Lit(_2_raft.Step.RestartStep_q(Lit(step#0)))
           ==> _2_raft.__default.Restart#canCall(Lit(v#0), Lit(v'#0), Lit(_2_raft.Step.i(Lit(step#0)))))
         && (!Lit(_2_raft.Step.RestartStep_q(Lit(step#0)))
           ==> (Lit(_2_raft.Step.TimeoutStep_q(Lit(step#0)))
               ==> _2_raft.__default.Timeout#canCall(Lit(v#0), Lit(v'#0), Lit(_2_raft.Step.i(Lit(step#0)))))
             && (!Lit(_2_raft.Step.TimeoutStep_q(Lit(step#0)))
               ==> (Lit(_2_raft.Step.RequestVoteStep_q(Lit(step#0)))
                   ==> _2_raft.__default.RequestVote#canCall(Lit(v#0), 
                    Lit(v'#0), 
                    Lit(_2_raft.Step.i(Lit(step#0))), 
                    Lit(_2_raft.Step.j(Lit(step#0)))))
                 && (!Lit(_2_raft.Step.RequestVoteStep_q(Lit(step#0)))
                   ==> (Lit(_2_raft.Step.BecomeLeaderStep_q(Lit(step#0)))
                       ==> _2_raft.__default.BecomeLeader#canCall(Lit(v#0), Lit(v'#0), Lit(_2_raft.Step.i(Lit(step#0)))))
                     && (!Lit(_2_raft.Step.BecomeLeaderStep_q(Lit(step#0)))
                       ==> (Lit(_2_raft.Step.ClientRequestStep_q(Lit(step#0)))
                           ==> _2_raft.__default.ClientRequest#canCall(Lit(v#0), 
                            Lit(v'#0), 
                            Lit(_2_raft.Step.i(Lit(step#0))), 
                            Lit(_2_raft.Step.v(Lit(step#0)))))
                         && (!Lit(_2_raft.Step.ClientRequestStep_q(Lit(step#0)))
                           ==> (Lit(_2_raft.Step.AdvanceCommitIndexStep_q(Lit(step#0)))
                               ==> _2_raft.__default.AdvanceCommitIndex#canCall(Lit(v#0), Lit(v'#0), Lit(_2_raft.Step.i(Lit(step#0)))))
                             && (!Lit(_2_raft.Step.AdvanceCommitIndexStep_q(Lit(step#0)))
                               ==> (Lit(_2_raft.Step.AppendEntriesStep_q(Lit(step#0)))
                                   ==> _2_raft.__default.AppendEntries#canCall(Lit(v#0), 
                                    Lit(v'#0), 
                                    Lit(_2_raft.Step.i(Lit(step#0))), 
                                    Lit(_2_raft.Step.j(Lit(step#0)))))
                                 && (!Lit(_2_raft.Step.AppendEntriesStep_q(Lit(step#0)))
                                   ==> (Lit(_2_raft.Step.ReceiveStep_q(Lit(step#0)))
                                       ==> _2_raft.__default.Receive#canCall(Lit(v#0), 
                                        Lit(v'#0), 
                                        Lit(_2_raft.Step.m(Lit(step#0))), 
                                        Lit(_2_raft.Step.reply(Lit(step#0)))))
                                     && (!Lit(_2_raft.Step.ReceiveStep_q(Lit(step#0)))
                                       ==> (Lit(_2_raft.Step.DuplicateMessageStep_q(Lit(step#0)))
                                           ==> _2_raft.__default.DuplicateMessage#canCall(Lit(v#0), Lit(v'#0), Lit(_2_raft.Step.m(Lit(step#0)))))
                                         && (!Lit(_2_raft.Step.DuplicateMessageStep_q(Lit(step#0)))
                                           ==> _2_raft.__default.DropMessage#canCall(Lit(v#0), Lit(v'#0), Lit(_2_raft.Step.m(Lit(step#0)))))))))))))
         && _2_raft.__default.NextStep(Lit(v#0), Lit(v'#0), Lit(step#0))
           == (if _2_raft.Step.RestartStep_q(Lit(step#0))
             then _2_raft.__default.Restart(Lit(v#0), Lit(v'#0), Lit(_2_raft.Step.i(Lit(step#0))))
             else (if _2_raft.Step.TimeoutStep_q(Lit(step#0))
               then _2_raft.__default.Timeout(Lit(v#0), Lit(v'#0), Lit(_2_raft.Step.i(Lit(step#0))))
               else (if _2_raft.Step.RequestVoteStep_q(Lit(step#0))
                 then _2_raft.__default.RequestVote(Lit(v#0), 
                  Lit(v'#0), 
                  Lit(_2_raft.Step.i(Lit(step#0))), 
                  Lit(_2_raft.Step.j(Lit(step#0))))
                 else (if _2_raft.Step.BecomeLeaderStep_q(Lit(step#0))
                   then _2_raft.__default.BecomeLeader(Lit(v#0), Lit(v'#0), Lit(_2_raft.Step.i(Lit(step#0))))
                   else (if _2_raft.Step.ClientRequestStep_q(Lit(step#0))
                     then _2_raft.__default.ClientRequest(Lit(v#0), 
                      Lit(v'#0), 
                      Lit(_2_raft.Step.i(Lit(step#0))), 
                      Lit(_2_raft.Step.v(Lit(step#0))))
                     else (if _2_raft.Step.AdvanceCommitIndexStep_q(Lit(step#0))
                       then _2_raft.__default.AdvanceCommitIndex(Lit(v#0), Lit(v'#0), Lit(_2_raft.Step.i(Lit(step#0))))
                       else (if _2_raft.Step.AppendEntriesStep_q(Lit(step#0))
                         then _2_raft.__default.AppendEntries(Lit(v#0), 
                          Lit(v'#0), 
                          Lit(_2_raft.Step.i(Lit(step#0))), 
                          Lit(_2_raft.Step.j(Lit(step#0))))
                         else (if _2_raft.Step.ReceiveStep_q(Lit(step#0))
                           then _2_raft.__default.Receive(Lit(v#0), 
                            Lit(v'#0), 
                            Lit(_2_raft.Step.m(Lit(step#0))), 
                            Lit(_2_raft.Step.reply(Lit(step#0))))
                           else (if _2_raft.Step.DuplicateMessageStep_q(Lit(step#0))
                             then _2_raft.__default.DuplicateMessage(Lit(v#0), Lit(v'#0), Lit(_2_raft.Step.m(Lit(step#0))))
                             else _2_raft.__default.DropMessage(Lit(v#0), Lit(v'#0), Lit(_2_raft.Step.m(Lit(step#0))))))))))))));

// function declaration for raft._default.EveryLogNow
function _2_raft.__default.EveryLogNow($ly: LayerType, v#0: DatatypeType) : Set Box;

function _2_raft.__default.EveryLogNow#canCall(v#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, v#0: DatatypeType :: 
  { _2_raft.__default.EveryLogNow($LS($ly), v#0) } 
  _2_raft.__default.EveryLogNow($LS($ly), v#0)
     == _2_raft.__default.EveryLogNow($ly, v#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, v#0: DatatypeType :: 
  { _2_raft.__default.EveryLogNow(AsFuelBottom($ly), v#0) } 
  _2_raft.__default.EveryLogNow($ly, v#0)
     == _2_raft.__default.EveryLogNow($LZ, v#0));

// consequence axiom for _2_raft.__default.EveryLogNow
axiom true
   ==> (forall $ly: LayerType, v#0: DatatypeType :: 
    { _2_raft.__default.EveryLogNow($ly, v#0) } 
    _2_raft.__default.EveryLogNow#canCall(v#0)
         || ($Is(v#0, Tclass._2_raft.Variables()) && _2_raft.__default.WFVars(v#0))
       ==> (forall s#7: Box :: 
          { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#7]): DatatypeType } 
            { _2_raft.__default.ServerIDs()[s#7] } 
          $IsBox(s#7, #$ServerID)
             ==> 
            _2_raft.__default.ServerIDs()[s#7]
             ==> _2_raft.__default.EveryLogNow($ly, v#0)[$Box(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#7]): DatatypeType)))])
         && $Is(_2_raft.__default.EveryLogNow($ly, v#0), TSet(TSeq(Tclass._2_raft.LogEntry()))));

function _2_raft.__default.EveryLogNow#requires(LayerType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.EveryLogNow
axiom (forall $ly: LayerType, v#0: DatatypeType :: 
  { _2_raft.__default.EveryLogNow#requires($ly, v#0) } 
  $Is(v#0, Tclass._2_raft.Variables())
     ==> _2_raft.__default.EveryLogNow#requires($ly, v#0)
       == _2_raft.__default.WFVars(v#0));

// definition axiom for _2_raft.__default.EveryLogNow(revealed)
axiom true
   ==> (forall $ly: LayerType, v#0: DatatypeType :: 
    { _2_raft.__default.EveryLogNow($LS($ly), v#0) } 
    _2_raft.__default.EveryLogNow#canCall(v#0)
         || ($Is(v#0, Tclass._2_raft.Variables()) && _2_raft.__default.WFVars(v#0))
       ==> (forall s#8: Box :: 
          { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#8]): DatatypeType } 
            { _2_raft.__default.ServerIDs()[s#8] } 
          $IsBox(s#8, #$ServerID)
             ==> _2_raft.__default.ServerIDs#canCall()
               && (_2_raft.__default.ServerIDs()[s#8]
                 ==> _2_raft.Variables.Variables_q(v#0)
                   && _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#8]): DatatypeType)
                   && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#8]): DatatypeType))))
         && _2_raft.__default.EveryLogNow($LS($ly), v#0)
           == (lambda $y#3: Box :: 
            (exists s#8: Box :: 
              { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#8]): DatatypeType } 
                { _2_raft.__default.ServerIDs()[s#8] } 
              $IsBox(s#8, #$ServerID)
                 && _2_raft.__default.ServerIDs()[s#8]
                 && $y#3
                   == $Box(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#8]): DatatypeType))))));

// definition axiom for _2_raft.__default.EveryLogNow for all literals(revealed)
axiom true
   ==> (forall $ly: LayerType, v#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.EveryLogNow($LS($ly), Lit(v#0)) } 
    _2_raft.__default.EveryLogNow#canCall(Lit(v#0))
         || ($Is(v#0, Tclass._2_raft.Variables())
           && Lit(_2_raft.__default.WFVars(Lit(v#0))))
       ==> (forall s#9: Box :: 
          { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#9]): DatatypeType } 
            { _2_raft.__default.ServerIDs()[s#9] } 
          $IsBox(s#9, #$ServerID)
             ==> _2_raft.__default.ServerIDs#canCall()
               && (_2_raft.__default.ServerIDs()[s#9]
                 ==> _2_raft.Variables.Variables_q(Lit(v#0))
                   && _2_raft.HostVars.HostVars_q($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#9]): DatatypeType)
                   && _2_raft.LogVars.LogVars_q(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#9]): DatatypeType))))
         && _2_raft.__default.EveryLogNow($LS($ly), Lit(v#0))
           == (lambda $y#4: Box :: 
            (exists s#9: Box :: 
              { $Unbox(Map#Elements(_2_raft.Variables.host(v#0))[s#9]): DatatypeType } 
                { _2_raft.__default.ServerIDs()[s#9] } 
              $IsBox(s#9, #$ServerID)
                 && _2_raft.__default.ServerIDs()[s#9]
                 && $y#4
                   == $Box(_2_raft.LogVars.log(_2_raft.HostVars.log($Unbox(Map#Elements(Lit(_2_raft.Variables.host(Lit(v#0))))[s#9]): DatatypeType))))));

// function declaration for raft._default.Next
function _2_raft.__default.Next($ly: LayerType, v#0: DatatypeType, v'#0: DatatypeType) : bool;

function _2_raft.__default.Next#canCall(v#0: DatatypeType, v'#0: DatatypeType) : bool;

// layer synonym axiom
axiom (forall $ly: LayerType, v#0: DatatypeType, v'#0: DatatypeType :: 
  { _2_raft.__default.Next($LS($ly), v#0, v'#0) } 
  _2_raft.__default.Next($LS($ly), v#0, v'#0)
     == _2_raft.__default.Next($ly, v#0, v'#0));

// fuel synonym axiom
axiom (forall $ly: LayerType, v#0: DatatypeType, v'#0: DatatypeType :: 
  { _2_raft.__default.Next(AsFuelBottom($ly), v#0, v'#0) } 
  _2_raft.__default.Next($ly, v#0, v'#0) == _2_raft.__default.Next($LZ, v#0, v'#0));

// consequence axiom for _2_raft.__default.Next
axiom true
   ==> (forall $ly: LayerType, v#0: DatatypeType, v'#0: DatatypeType :: 
    { _2_raft.__default.Next($ly, v#0, v'#0) } 
    _2_raft.__default.Next#canCall(v#0, v'#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> true);

function _2_raft.__default.Next#requires(LayerType, DatatypeType, DatatypeType) : bool;

// #requires axiom for _2_raft.__default.Next
axiom (forall $ly: LayerType, v#0: DatatypeType, v'#0: DatatypeType :: 
  { _2_raft.__default.Next#requires($ly, v#0, v'#0) } 
  $Is(v#0, Tclass._2_raft.Variables()) && $Is(v'#0, Tclass._2_raft.Variables())
     ==> _2_raft.__default.Next#requires($ly, v#0, v'#0)
       == (_2_raft.__default.WFVars(v#0) && _2_raft.__default.WFVars(v'#0)));

// definition axiom for _2_raft.__default.Next(revealed)
axiom true
   ==> (forall $ly: LayerType, v#0: DatatypeType, v'#0: DatatypeType :: 
    { _2_raft.__default.Next($LS($ly), v#0, v'#0) } 
    _2_raft.__default.Next#canCall(v#0, v'#0)
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && 
          _2_raft.__default.WFVars(v#0)
           && _2_raft.__default.WFVars(v'#0))
       ==> (forall step#4: DatatypeType :: 
          { _2_raft.__default.NextStep(v#0, v'#0, step#4) } 
          $Is(step#4, Tclass._2_raft.Step())
             ==> _2_raft.__default.NextStep#canCall(v#0, v'#0, step#4))
         && ((exists step#4: DatatypeType :: 
            { _2_raft.__default.NextStep(v#0, v'#0, step#4) } 
            $Is(step#4, Tclass._2_raft.Step())
               && _2_raft.__default.NextStep(v#0, v'#0, step#4))
           ==> _2_raft.Variables.Variables_q(v'#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v'#0))
             && 
            _2_raft.Variables.Variables_q(v#0)
             && _2_raft.GlobalVars.GlobalVars_q(_2_raft.Variables.global(v#0))
             && _2_raft.__default.EveryLogNow#canCall(v#0))
         && _2_raft.__default.Next($LS($ly), v#0, v'#0)
           == ((exists step#4: DatatypeType :: 
              { _2_raft.__default.NextStep(v#0, v'#0, step#4) } 
              $Is(step#4, Tclass._2_raft.Step())
                 && _2_raft.__default.NextStep(v#0, v'#0, step#4))
             && Set#Equal(_2_raft.GlobalVars.allLogs(_2_raft.Variables.global(v'#0)), 
              Set#Union(_2_raft.GlobalVars.allLogs(_2_raft.Variables.global(v#0)), 
                _2_raft.__default.EveryLogNow(StartFuel_raft._default.EveryLogNow, v#0)))));

// definition axiom for _2_raft.__default.Next for all literals(revealed)
axiom true
   ==> (forall $ly: LayerType, v#0: DatatypeType, v'#0: DatatypeType :: 
    {:weight 3} { _2_raft.__default.Next($LS($ly), Lit(v#0), Lit(v'#0)) } 
    _2_raft.__default.Next#canCall(Lit(v#0), Lit(v'#0))
         || (
          $Is(v#0, Tclass._2_raft.Variables())
           && $Is(v'#0, Tclass._2_raft.Variables())
           && Lit(_2_raft.__default.WFVars(Lit(v#0)) && _2_raft.__default.WFVars(Lit(v'#0))))
       ==> (forall step#5: DatatypeType :: 
          { _2_raft.__default.NextStep(v#0, v'#0, step#5) } 
          $Is(step#5, Tclass._2_raft.Step())
             ==> _2_raft.__default.NextStep#canCall(Lit(v#0), Lit(v'#0), step#5))
         && ((exists step#5: DatatypeType :: 
            { _2_raft.__default.NextStep(v#0, v'#0, step#5) } 
            $Is(step#5, Tclass._2_raft.Step())
               && _2_raft.__default.NextStep(Lit(v#0), Lit(v'#0), step#5))
           ==> _2_raft.Variables.Variables_q(Lit(v'#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v'#0))))
             && 
            _2_raft.Variables.Variables_q(Lit(v#0))
             && _2_raft.GlobalVars.GlobalVars_q(Lit(_2_raft.Variables.global(Lit(v#0))))
             && _2_raft.__default.EveryLogNow#canCall(Lit(v#0)))
         && _2_raft.__default.Next($LS($ly), Lit(v#0), Lit(v'#0))
           == ((exists step#5: DatatypeType :: 
              { _2_raft.__default.NextStep(v#0, v'#0, step#5) } 
              $Is(step#5, Tclass._2_raft.Step())
                 && _2_raft.__default.NextStep(Lit(v#0), Lit(v'#0), step#5))
             && Set#Equal(_2_raft.GlobalVars.allLogs(Lit(_2_raft.Variables.global(Lit(v'#0)))), 
              Set#Union(_2_raft.GlobalVars.allLogs(Lit(_2_raft.Variables.global(Lit(v#0)))), 
                _2_raft.__default.EveryLogNow(StartFuel_raft._default.EveryLogNow, Lit(v#0))))));

procedure {:auto_generated} {:opaque_reveal} {:verify false} CheckWellformed$$_2_raft.__default.reveal__Next();
  free requires 94 == $FunctionContextHeight;
  modifies $Heap, $Tick;



const MoreFuel_raft._default.Next3: LayerType;

procedure {:auto_generated} {:opaque_reveal} {:verify false} Call$$_2_raft.__default.reveal__Next();
  modifies $Heap, $Tick;
  // frame condition
  free ensures old($Heap) == $Heap;
  free ensures StartFuel_raft._default.Next == $LS(MoreFuel_raft._default.Next3);
  free ensures StartFuelAssert_raft._default.Next == $LS($LS(MoreFuel_raft._default.Next3));
  // Shortcut to LZ
  free ensures AsFuelBottom(MoreFuel_raft._default.Next3) == MoreFuel_raft._default.Next3;


