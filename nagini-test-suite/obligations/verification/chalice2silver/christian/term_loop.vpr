domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function A(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_A {
    extends_(A(), object()) && get_basic(A()) == A()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
  
  unique function m1_threading(): ThreadingID
  
  unique function m2_threading(): ThreadingID
  
  unique function nested1_threading(): ThreadingID
  
  unique function nested2_threading(): ThreadingID
  
  unique function nested3_threading(): ThreadingID
  
  unique function nested4_threading(): ThreadingID
  
  unique function nested5_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field A_x: Ref

field A_y: Ref

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___lt__(self: Int, other: Int): Bool 
{
  self < other
}

function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function int___sub__(self: Int, other: Int): Int 
{
  self - other
}

function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

method A___init__(_cthread_145: Ref, _caller_measures_145: Seq[Measure$], _residue_145: Perm, self: Ref, x_0: Ref, y: Ref) returns (_current_wait_level_145: Perm)
  requires _cthread_145 != null
  requires issubtype(typeof(_cthread_145), Thread_0())
  requires self != null
  requires acc(_MaySet(self, 7888705), write)
  requires acc(_MaySet(self, 7954241), write)
  requires issubtype(typeof(self), A())
  requires issubtype(typeof(x_0), A())
  requires issubtype(typeof(y), int())
  requires self != null
  requires [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_145) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_7: Ref
  var x_8: Ref
  var y_5: Ref
  var _cwl_145: Perm
  var _method_measures_145: Seq[Measure$]
  _method_measures_145 := Seq[Measure$]()
  inhale typeof(self) == A()
  _err := null
  self_7 := self
  x_8 := x_0
  y_5 := y
  if (perm(_MaySet(self_7, 7888705)) > none) {
    exhale acc(_MaySet(self_7, 7888705), write)
    inhale acc(self_7.A_x, write)
  }
  self_7.A_x := x_8
  if (perm(_MaySet(self_7, 7954241)) > none) {
    exhale acc(_MaySet(self_7, 7954241), write)
    inhale acc(self_7.A_y, write)
  }
  self_7.A_y := y_5
  goto __end
  label __end
}

method A_m1(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm, self_0: Ref) returns (_current_wait_level_146: Perm)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires issubtype(typeof(self_0), A())
  requires self_0 != null
  requires [acc(MustTerminate(_cthread_146), write), true]
  requires [true, Measure$check(_caller_measures_146, _cthread_146, 1) || perm(MustTerminate(_cthread_146)) == none && ((forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _current_wait_level_146) && ((forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures [true, (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_1: Ref
  var self_8: Ref
  var _loop_measures: Seq[Measure$]
  var _loop_check_before: Bool
  var _loop_termination_flag: Bool
  var _loop_original_must_terminate: Perm
  var _residue_153: Perm
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq(Measure$create(true, _cthread_146, 1))
  inhale typeof(self_0) == A()
  _err := null
  self_8 := self_0
  x_1 := __prim__int___box__(1)
  inhale _isDefined(3235704)
  // Save current MustTerminate amount._loop_original_must_terminate := perm(MustTerminate(_cthread_146))
  // Save loop termination promise._loop_termination_flag := false
  // We are before loop._loop_check_before := true
  while (int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5))
    invariant [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _residue_153) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _residue_153) && _residue_146 <= _residue_153), true]
    invariant true
    invariant issubtype(typeof(x_1), int())
    invariant true
    invariant [true, _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5) || perm(MustTerminate(_cthread_146)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before ==> (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures := Seq[Measure$]()
    x_1 := __prim__int___box__(int___add__(int___unbox__(x_1), 1))
    inhale _isDefined(3235704)
    label loop_end
    // We are after loop body._loop_check_before := false
    // Check if loop continues to terminate.assert _loop_termination_flag ==> !int___lt__(int___unbox__(_checkDefined(x_1, 3235704)), 5)
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_146)) > none ==> acc(MustTerminate(_cthread_146), perm(MustTerminate(_cthread_146)) - _loop_original_must_terminate)
  label post_loop
  goto __end
  label __end
}

method A_m2(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, self_1: Ref) returns (_current_wait_level_147: Perm)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires issubtype(typeof(self_1), A())
  requires self_1 != null
  requires [acc(MustTerminate(_cthread_147), write), true]
  requires [true, Measure$check(_caller_measures_147, _cthread_147, 1) || perm(MustTerminate(_cthread_147)) == none && ((forperm _r_11: Ref [MustInvokeBounded(_r_11)] :: false) && ((forperm _r_11: Ref [MustInvokeUnbounded(_r_11)] :: false) && ((forperm _r_11: Ref [_r_11.MustReleaseBounded] :: false) && (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _current_wait_level_147) && ((forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures [true, (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_2: Ref
  var self_9: Ref
  var _loop_measures_0: Seq[Measure$]
  var _loop_check_before_0: Bool
  var _loop_termination_flag_0: Bool
  var _loop_original_must_terminate_0: Perm
  var _residue_154: Perm
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq(Measure$create(true, _cthread_147, 1))
  inhale typeof(self_1) == A()
  _err := null
  self_9 := self_1
  x_2 := __prim__int___box__(1)
  inhale _isDefined(3301240)
  // Save current MustTerminate amount._loop_original_must_terminate_0 := perm(MustTerminate(_cthread_147))
  // Save loop termination promise._loop_termination_flag_0 := true
  // We are before loop._loop_check_before_0 := true
  while (int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5))
    invariant [(forperm _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <= _residue_154) && ((forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <= _residue_154) && _residue_147 <= _residue_154), true]
    invariant true
    invariant issubtype(typeof(x_2), int())
    invariant (int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240))) > 0) && [acc(MustTerminate(_cthread_147), write), true]
    invariant [true, _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5) || perm(MustTerminate(_cthread_147)) == none && ((forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_0 ==> (forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_0 := Seq(Measure$create(true, _cthread_147, int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240)))))
    x_2 := __prim__int___box__(int___add__(int___unbox__(x_2), 1))
    inhale _isDefined(3301240)
    label loop_end_0
    // We are after loop body._loop_check_before_0 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_0 ==> !int___lt__(int___unbox__(_checkDefined(x_2, 3301240)), 5) || Measure$check(_loop_measures_0, _cthread_147, int___sub__(10, int___unbox__(_checkDefined(x_2, 3301240))))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_147)) > none ==> acc(MustTerminate(_cthread_147), perm(MustTerminate(_cthread_147)) - _loop_original_must_terminate_0)
  label post_loop_0
  goto __end
  label __end
}

method A_nested1(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, self_2: Ref) returns (_current_wait_level_148: Perm)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires issubtype(typeof(self_2), A())
  requires self_2 != null
  requires [acc(MustTerminate(_cthread_148), write), true]
  requires [true, Measure$check(_caller_measures_148, _cthread_148, 1) || perm(MustTerminate(_cthread_148)) == none && ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_148) && ((forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures [true, (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_3: Ref
  var y_0: Ref
  var self_10: Ref
  var _loop_measures_1: Seq[Measure$]
  var _loop_check_before_1: Bool
  var _loop_termination_flag_1: Bool
  var _loop_original_must_terminate_1: Perm
  var _residue_155: Perm
  var _loop_measures_2: Seq[Measure$]
  var _loop_check_before_2: Bool
  var _loop_termination_flag_2: Bool
  var _loop_original_must_terminate_2: Perm
  var _residue_156: Perm
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq(Measure$create(true, _cthread_148, 1))
  inhale typeof(self_2) == A()
  _err := null
  self_10 := self_2
  x_3 := __prim__int___box__(1)
  inhale _isDefined(3366776)
  y_0 := __prim__int___box__(1)
  inhale _isDefined(3170169)
  // Save current MustTerminate amount._loop_original_must_terminate_1 := perm(MustTerminate(_cthread_148))
  // Save loop termination promise._loop_termination_flag_1 := true
  // We are before loop._loop_check_before_1 := true
  while (int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5))
    invariant [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _residue_155) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _residue_155) && _residue_148 <= _residue_155), true]
    invariant true
    invariant issubtype(typeof(x_3), int())
    invariant issubtype(typeof(y_0), int())
    invariant (int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776))) > 0) && [acc(MustTerminate(_cthread_148), write), true]
    invariant [true, _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5) || perm(MustTerminate(_cthread_148)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_1 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_1 := Seq(Measure$create(true, _cthread_148, int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776)))))
    x_3 := __prim__int___box__(int___add__(int___unbox__(x_3), 1))
    inhale _isDefined(3366776)
    // Save current MustTerminate amount._loop_original_must_terminate_2 := perm(MustTerminate(_cthread_148))
    // Save loop termination promise._loop_termination_flag_2 := false
    // We are before loop._loop_check_before_2 := true
    while (int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5))
      invariant [(forperm _r_12: Ref [_r_12.MustReleaseBounded] :: Level(_r_12) <= _residue_156) && ((forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: Level(_r_12) <= _residue_156) && _residue_155 <= _residue_156), true]
      invariant true
      invariant issubtype(typeof(y_0), int())
      invariant true
      invariant [true, _loop_check_before_2 ==> _loop_termination_flag_2 || (!int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5) || perm(MustTerminate(_cthread_148)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)))))]
      invariant [true, !_loop_check_before_2 ==> (forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)))] 
    {
      _loop_measures_2 := Seq[Measure$]()
      y_0 := __prim__int___box__(int___add__(int___unbox__(y_0), 1))
      inhale _isDefined(3170169)
      label loop_end_2
      // We are after loop body._loop_check_before_2 := false
      // Check if loop continues to terminate.assert _loop_termination_flag_2 ==> !int___lt__(int___unbox__(_checkDefined(y_0, 3170169)), 5)
    }
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_148)) > none ==> acc(MustTerminate(_cthread_148), perm(MustTerminate(_cthread_148)) - _loop_original_must_terminate_2)
    label post_loop_2
    label loop_end_1
    // We are after loop body._loop_check_before_1 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_1 ==> !int___lt__(int___unbox__(_checkDefined(x_3, 3366776)), 5) || Measure$check(_loop_measures_1, _cthread_148, int___sub__(10, int___unbox__(_checkDefined(x_3, 3366776))))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_148)) > none ==> acc(MustTerminate(_cthread_148), perm(MustTerminate(_cthread_148)) - _loop_original_must_terminate_1)
  label post_loop_1
  goto __end
  label __end
}

method A_nested2(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm, self_3: Ref) returns (_current_wait_level_149: Perm)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires issubtype(typeof(self_3), A())
  requires self_3 != null
  requires [acc(MustTerminate(_cthread_149), write), true]
  requires [true, Measure$check(_caller_measures_149, _cthread_149, 1) || perm(MustTerminate(_cthread_149)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_149) && ((forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures [true, (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_4: Ref
  var y_1: Ref
  var self_11: Ref
  var _loop_measures_3: Seq[Measure$]
  var _loop_check_before_3: Bool
  var _loop_termination_flag_3: Bool
  var _loop_original_must_terminate_3: Perm
  var _residue_157: Perm
  var _loop_measures_4: Seq[Measure$]
  var _loop_check_before_4: Bool
  var _loop_termination_flag_4: Bool
  var _loop_original_must_terminate_4: Perm
  var _residue_158: Perm
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq(Measure$create(true, _cthread_149, 1))
  inhale typeof(self_3) == A()
  _err := null
  self_11 := self_3
  x_4 := __prim__int___box__(1)
  inhale _isDefined(3432312)
  y_1 := __prim__int___box__(1)
  inhale _isDefined(3235705)
  // Save current MustTerminate amount._loop_original_must_terminate_3 := perm(MustTerminate(_cthread_149))
  // Save loop termination promise._loop_termination_flag_3 := true
  // We are before loop._loop_check_before_3 := true
  while (int___lt__(int___unbox__(_checkDefined(x_4, 3432312)), 5))
    invariant [(forperm _r_21: Ref [_r_21.MustReleaseBounded] :: Level(_r_21) <= _residue_157) && ((forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: Level(_r_21) <= _residue_157) && _residue_149 <= _residue_157), true]
    invariant true
    invariant issubtype(typeof(x_4), int())
    invariant issubtype(typeof(y_1), int())
    invariant (int___lt__(int___unbox__(_checkDefined(x_4, 3432312)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_4, 3432312))) > 0) && [acc(MustTerminate(_cthread_149), write), true]
    invariant [true, _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(x_4, 3432312)), 5) || perm(MustTerminate(_cthread_149)) == none && ((forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_3 ==> (forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_3 := Seq(Measure$create(true, _cthread_149, int___sub__(10, int___unbox__(_checkDefined(x_4, 3432312)))))
    x_4 := __prim__int___box__(int___add__(int___unbox__(x_4), 1))
    inhale _isDefined(3432312)
    // Save current MustTerminate amount._loop_original_must_terminate_4 := perm(MustTerminate(_cthread_149))
    // Save loop termination promise._loop_termination_flag_4 := true
    // We are before loop._loop_check_before_4 := true
    while (int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5))
      invariant [(forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _residue_158) && ((forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _residue_158) && _residue_157 <= _residue_158), true]
      invariant true
      invariant issubtype(typeof(y_1), int())
      invariant (int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5) ==> int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705))) > 0) && [acc(MustTerminate(_cthread_149), write), true]
      invariant [true, _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5) || perm(MustTerminate(_cthread_149)) == none && ((forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))))]
      invariant [true, !_loop_check_before_4 ==> (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))] 
    {
      _loop_measures_4 := Seq(Measure$create(true, _cthread_149, int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705)))))
      y_1 := __prim__int___box__(int___add__(int___unbox__(y_1), 1))
      inhale _isDefined(3235705)
      label loop_end_4
      // We are after loop body._loop_check_before_4 := false
      // Check if loop continues to terminate.assert _loop_termination_flag_4 ==> !int___lt__(int___unbox__(_checkDefined(y_1, 3235705)), 5) || Measure$check(_loop_measures_4, _cthread_149, int___sub__(20, int___unbox__(_checkDefined(y_1, 3235705))))
    }
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_149)) > none ==> acc(MustTerminate(_cthread_149), perm(MustTerminate(_cthread_149)) - _loop_original_must_terminate_4)
    label post_loop_4
    label loop_end_3
    // We are after loop body._loop_check_before_3 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_3 ==> !int___lt__(int___unbox__(_checkDefined(x_4, 3432312)), 5) || Measure$check(_loop_measures_3, _cthread_149, int___sub__(10, int___unbox__(_checkDefined(x_4, 3432312))))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_149)) > none ==> acc(MustTerminate(_cthread_149), perm(MustTerminate(_cthread_149)) - _loop_original_must_terminate_3)
  label post_loop_3
  goto __end
  label __end
}

method A_nested3(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm, self_4: Ref) returns (_current_wait_level_150: Perm)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires issubtype(typeof(self_4), A())
  requires self_4 != null
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_32: Ref [MustInvokeBounded(_r_32)] :: false) && ((forperm _r_32: Ref [MustInvokeUnbounded(_r_32)] :: false) && ((forperm _r_32: Ref [_r_32.MustReleaseBounded] :: false) && (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_30: Ref [_r_30.MustReleaseBounded] :: Level(_r_30) <= _current_wait_level_150) && ((forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: Level(_r_30) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures [true, (forperm _r_31: Ref [MustInvokeBounded(_r_31)] :: false) && ((forperm _r_31: Ref [MustInvokeUnbounded(_r_31)] :: false) && ((forperm _r_31: Ref [_r_31.MustReleaseBounded] :: false) && (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_5: Ref
  var y_2: Ref
  var self_12: Ref
  var _loop_measures_5: Seq[Measure$]
  var _loop_check_before_5: Bool
  var _loop_termination_flag_5: Bool
  var _loop_original_must_terminate_5: Perm
  var _residue_159: Perm
  var _loop_measures_6: Seq[Measure$]
  var _loop_check_before_6: Bool
  var _loop_termination_flag_6: Bool
  var _loop_original_must_terminate_6: Perm
  var _residue_160: Perm
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq[Measure$]()
  inhale typeof(self_4) == A()
  _err := null
  self_12 := self_4
  x_5 := __prim__int___box__(1)
  inhale _isDefined(3497848)
  y_2 := __prim__int___box__(2)
  inhale _isDefined(3301241)
  // Save current MustTerminate amount._loop_original_must_terminate_5 := perm(MustTerminate(_cthread_150))
  // Save loop termination promise._loop_termination_flag_5 := true
  // We are before loop._loop_check_before_5 := true
  while (int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5))
    invariant [(forperm _r_28: Ref [_r_28.MustReleaseBounded] :: Level(_r_28) <= _residue_159) && ((forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: Level(_r_28) <= _residue_159) && _residue_150 <= _residue_159), true]
    invariant true
    invariant issubtype(typeof(x_5), int())
    invariant issubtype(typeof(y_2), int())
    invariant (int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_5, 3497848))) > 0) && [acc(MustTerminate(_cthread_150), write), true]
    invariant [true, _loop_check_before_5 ==> _loop_termination_flag_5 || (!int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5) || perm(MustTerminate(_cthread_150)) == none && ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_5 ==> (forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_5 := Seq(Measure$create(true, _cthread_150, int___sub__(10, int___unbox__(_checkDefined(x_5, 3497848)))))
    x_5 := __prim__int___box__(int___add__(int___unbox__(x_5), 1))
    inhale _isDefined(3497848)
    // Save current MustTerminate amount._loop_original_must_terminate_6 := perm(MustTerminate(_cthread_150))
    // Save loop termination promise._loop_termination_flag_6 := false
    // We are before loop._loop_check_before_6 := true
    while (int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5))
      invariant [(forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _residue_160) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _residue_160) && _residue_159 <= _residue_160), true]
      invariant true
      invariant issubtype(typeof(y_2), int())
      invariant true
      invariant [true, _loop_check_before_6 ==> _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5) || perm(MustTerminate(_cthread_150)) == none && ((forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))))]
      invariant [true, !_loop_check_before_6 ==> (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))] 
    {
      _loop_measures_6 := Seq[Measure$]()
      y_2 := __prim__int___box__(int___add__(int___unbox__(y_2), 1))
      inhale _isDefined(3301241)
      label loop_end_6
      // We are after loop body._loop_check_before_6 := false
      // Check if loop continues to terminate.assert _loop_termination_flag_6 ==> !int___lt__(int___unbox__(_checkDefined(y_2, 3301241)), 5)
    }
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_150)) > none ==> acc(MustTerminate(_cthread_150), perm(MustTerminate(_cthread_150)) - _loop_original_must_terminate_6)
    label post_loop_6
    label loop_end_5
    // We are after loop body._loop_check_before_5 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_5 ==> !int___lt__(int___unbox__(_checkDefined(x_5, 3497848)), 5) || Measure$check(_loop_measures_5, _cthread_150, int___sub__(10, int___unbox__(_checkDefined(x_5, 3497848))))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_150)) > none ==> acc(MustTerminate(_cthread_150), perm(MustTerminate(_cthread_150)) - _loop_original_must_terminate_5)
  label post_loop_5
  goto __end
  label __end
}

method A_nested4(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_151: Perm, self_5: Ref) returns (_current_wait_level_151: Perm)
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires issubtype(typeof(self_5), A())
  requires self_5 != null
  requires [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_37: Ref [_r_37.MustReleaseBounded] :: Level(_r_37) <= _current_wait_level_151) && ((forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: Level(_r_37) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]
  ensures [true, (forperm _r_38: Ref [MustInvokeBounded(_r_38)] :: false) && ((forperm _r_38: Ref [MustInvokeUnbounded(_r_38)] :: false) && ((forperm _r_38: Ref [_r_38.MustReleaseBounded] :: false) && (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_6: Ref
  var y_3: Ref
  var self_13: Ref
  var _loop_measures_7: Seq[Measure$]
  var _loop_check_before_7: Bool
  var _loop_termination_flag_7: Bool
  var _loop_original_must_terminate_7: Perm
  var _residue_161: Perm
  var _loop_measures_8: Seq[Measure$]
  var _loop_check_before_8: Bool
  var _loop_termination_flag_8: Bool
  var _loop_original_must_terminate_8: Perm
  var _residue_162: Perm
  var _cwl_151: Perm
  var _method_measures_151: Seq[Measure$]
  _method_measures_151 := Seq[Measure$]()
  inhale typeof(self_5) == A()
  _err := null
  self_13 := self_5
  x_6 := __prim__int___box__(1)
  inhale _isDefined(3563384)
  y_3 := __prim__int___box__(2)
  inhale _isDefined(3366777)
  // Save current MustTerminate amount._loop_original_must_terminate_7 := perm(MustTerminate(_cthread_151))
  // Save loop termination promise._loop_termination_flag_7 := true
  // We are before loop._loop_check_before_7 := true
  while (int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5))
    invariant [(forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _residue_161) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _residue_161) && _residue_151 <= _residue_161), true]
    invariant true
    invariant issubtype(typeof(x_6), int())
    invariant issubtype(typeof(y_3), int())
    invariant (int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384))) > 0) && [acc(MustTerminate(_cthread_151), write), true]
    invariant [true, _loop_check_before_7 ==> _loop_termination_flag_7 || (!int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5) || perm(MustTerminate(_cthread_151)) == none && ((forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_7 ==> (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_7 := Seq(Measure$create(true, _cthread_151, int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384)))))
    x_6 := __prim__int___box__(int___add__(int___unbox__(x_6), 1))
    inhale _isDefined(3563384)
    // Save current MustTerminate amount._loop_original_must_terminate_8 := perm(MustTerminate(_cthread_151))
    // Save loop termination promise._loop_termination_flag_8 := true
    // We are before loop._loop_check_before_8 := true
    while (int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5))
      invariant [(forperm _r_33: Ref [_r_33.MustReleaseBounded] :: Level(_r_33) <= _residue_162) && ((forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: Level(_r_33) <= _residue_162) && _residue_161 <= _residue_162), true]
      invariant true
      invariant issubtype(typeof(y_3), int())
      invariant (int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(y_3, 3366777))) > 0) && [acc(MustTerminate(_cthread_151), write), true]
      invariant [true, _loop_check_before_8 ==> _loop_termination_flag_8 || (!int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5) || perm(MustTerminate(_cthread_151)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false)))))]
      invariant [true, !_loop_check_before_8 ==> (forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false)))] 
    {
      _loop_measures_8 := Seq(Measure$create(true, _cthread_151, int___sub__(10, int___unbox__(_checkDefined(y_3, 3366777)))))
      y_3 := __prim__int___box__(int___add__(int___unbox__(y_3), 1))
      inhale _isDefined(3366777)
      label loop_end_8
      // We are after loop body._loop_check_before_8 := false
      // Check if loop continues to terminate.assert _loop_termination_flag_8 ==> !int___lt__(int___unbox__(_checkDefined(y_3, 3366777)), 5) || Measure$check(_loop_measures_8, _cthread_151, int___sub__(10, int___unbox__(_checkDefined(y_3, 3366777))))
    }
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_151)) > none ==> acc(MustTerminate(_cthread_151), perm(MustTerminate(_cthread_151)) - _loop_original_must_terminate_8)
    label post_loop_8
    label loop_end_7
    // We are after loop body._loop_check_before_7 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_7 ==> !int___lt__(int___unbox__(_checkDefined(x_6, 3563384)), 5) || Measure$check(_loop_measures_7, _cthread_151, int___sub__(10, int___unbox__(_checkDefined(x_6, 3563384))))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_151)) > none ==> acc(MustTerminate(_cthread_151), perm(MustTerminate(_cthread_151)) - _loop_original_must_terminate_7)
  label post_loop_7
  goto __end
  label __end
}

method A_nested5(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm, self_6: Ref) returns (_current_wait_level_152: Perm)
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires issubtype(typeof(self_6), A())
  requires self_6 != null
  requires [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_44: Ref [_r_44.MustReleaseBounded] :: Level(_r_44) <= _current_wait_level_152) && ((forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: Level(_r_44) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures [true, (forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false) && ((forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false) && ((forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false) && (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_7: Ref
  var y_4: Ref
  var self_14: Ref
  var _loop_measures_9: Seq[Measure$]
  var _loop_check_before_9: Bool
  var _loop_termination_flag_9: Bool
  var _loop_original_must_terminate_9: Perm
  var _residue_163: Perm
  var _loop_measures_10: Seq[Measure$]
  var _loop_check_before_10: Bool
  var _loop_termination_flag_10: Bool
  var _loop_original_must_terminate_10: Perm
  var _residue_164: Perm
  var _cwl_152: Perm
  var _method_measures_152: Seq[Measure$]
  _method_measures_152 := Seq[Measure$]()
  inhale typeof(self_6) == A()
  _err := null
  self_14 := self_6
  x_7 := __prim__int___box__(1)
  inhale _isDefined(3628920)
  y_4 := __prim__int___box__(2)
  inhale _isDefined(3432313)
  // Save current MustTerminate amount._loop_original_must_terminate_9 := perm(MustTerminate(_cthread_152))
  // Save loop termination promise._loop_termination_flag_9 := false
  // We are before loop._loop_check_before_9 := true
  while (int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5))
    invariant [(forperm _r_42: Ref [_r_42.MustReleaseBounded] :: Level(_r_42) <= _residue_163) && ((forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: Level(_r_42) <= _residue_163) && _residue_152 <= _residue_163), true]
    invariant true
    invariant issubtype(typeof(x_7), int())
    invariant issubtype(typeof(y_4), int())
    invariant [true, _loop_check_before_9 ==> _loop_termination_flag_9 || (!int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5) || perm(MustTerminate(_cthread_152)) == none && ((forperm _r_43: Ref [MustInvokeBounded(_r_43)] :: false) && ((forperm _r_43: Ref [MustInvokeUnbounded(_r_43)] :: false) && ((forperm _r_43: Ref [_r_43.MustReleaseBounded] :: false) && (forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_9 ==> (forperm _r_43: Ref [MustInvokeBounded(_r_43)] :: false) && ((forperm _r_43: Ref [MustInvokeUnbounded(_r_43)] :: false) && ((forperm _r_43: Ref [_r_43.MustReleaseBounded] :: false) && (forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_9 := Seq[Measure$]()
    x_7 := __prim__int___box__(int___add__(int___unbox__(x_7), 1))
    inhale _isDefined(3628920)
    // Save current MustTerminate amount._loop_original_must_terminate_10 := perm(MustTerminate(_cthread_152))
    // Save loop termination promise._loop_termination_flag_10 := true
    // We are before loop._loop_check_before_10 := true
    while (int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5))
      invariant [(forperm _r_40: Ref [_r_40.MustReleaseBounded] :: Level(_r_40) <= _residue_164) && ((forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: Level(_r_40) <= _residue_164) && _residue_163 <= _residue_164), true]
      invariant true
      invariant issubtype(typeof(y_4), int())
      invariant (int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) ==> int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313))) > 0) && [acc(MustTerminate(_cthread_152), write), true]
      invariant [true, _loop_check_before_10 ==> _loop_termination_flag_10 || (!int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) || perm(MustTerminate(_cthread_152)) == none && ((forperm _r_41: Ref [MustInvokeBounded(_r_41)] :: false) && ((forperm _r_41: Ref [MustInvokeUnbounded(_r_41)] :: false) && ((forperm _r_41: Ref [_r_41.MustReleaseBounded] :: false) && (forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: false)))))]
      invariant [true, !_loop_check_before_10 ==> (forperm _r_41: Ref [MustInvokeBounded(_r_41)] :: false) && ((forperm _r_41: Ref [MustInvokeUnbounded(_r_41)] :: false) && ((forperm _r_41: Ref [_r_41.MustReleaseBounded] :: false) && (forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: false)))] 
    {
      _loop_measures_10 := Seq(Measure$create(true, _cthread_152, int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313)))))
      y_4 := __prim__int___box__(int___add__(int___unbox__(y_4), 1))
      inhale _isDefined(3432313)
      label loop_end_10
      // We are after loop body._loop_check_before_10 := false
      // Check if loop continues to terminate.assert _loop_termination_flag_10 ==> !int___lt__(int___unbox__(_checkDefined(y_4, 3432313)), 5) || Measure$check(_loop_measures_10, _cthread_152, int___sub__(10, int___unbox__(_checkDefined(y_4, 3432313))))
    }
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_152)) > none ==> acc(MustTerminate(_cthread_152), perm(MustTerminate(_cthread_152)) - _loop_original_must_terminate_10)
    label post_loop_10
    label loop_end_9
    // We are after loop body._loop_check_before_9 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_9 ==> !int___lt__(int___unbox__(_checkDefined(x_7, 3628920)), 5)
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_152)) > none ==> acc(MustTerminate(_cthread_152), perm(MustTerminate(_cthread_152)) - _loop_original_must_terminate_9)
  label post_loop_9
  goto __end
  label __end
}

method main(_cthread_153: Ref, _caller_measures_153: Seq[Measure$], _residue_165: Perm) returns (_current_wait_level_153: Perm)
  requires _cthread_153 != null
  requires issubtype(typeof(_cthread_153), Thread_0())
  requires [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_49: Ref [MustInvokeBounded(_r_49)] :: false) && ((forperm _r_49: Ref [MustInvokeUnbounded(_r_49)] :: false) && ((forperm _r_49: Ref [_r_49.MustReleaseBounded] :: false) && (forperm _r_49: Ref [_r_49.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_47: Ref [_r_47.MustReleaseBounded] :: Level(_r_47) <= _current_wait_level_153) && ((forperm _r_47: Ref [_r_47.MustReleaseUnbounded] :: Level(_r_47) <= _current_wait_level_153) && _residue_165 <= _current_wait_level_153), true]
  ensures [true, (forperm _r_48: Ref [MustInvokeBounded(_r_48)] :: false) && ((forperm _r_48: Ref [MustInvokeUnbounded(_r_48)] :: false) && ((forperm _r_48: Ref [_r_48.MustReleaseBounded] :: false) && (forperm _r_48: Ref [_r_48.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var _cwl_153: Perm
  var _method_measures_153: Seq[Measure$]
  _method_measures_153 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_names_0 := (module_names_0 union Set(_single(6513473)))
  module_names_0 := (module_names_0 union Set(_single(3655284702854286527)))
  module_names_0 := (module_names_0 union Set(_single(7136376649266381199951095122)))
  module_names_0 := (module_names_0 union Set(_single(4814323939045640847723228745)))
  module_names_0 := (module_names_0 union Set(_single(4659879962334230944322642242)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(12653)))
  module_names_0 := (module_names_0 union Set(_single(12909)))
  module_names_0 := (module_names_0 union Set(_single(4209483683780663954)))
  module_names_0 := (module_names_0 union Set(_single(4209765158757374610)))
  module_names_0 := (module_names_0 union Set(_single(4210046633734085266)))
  module_names_0 := (module_names_0 union Set(_single(4210328108710795922)))
  module_names_0 := (module_names_0 union Set(_single(4210609583687506578)))
  module_names_0 := (module_names_0 union Set(_single(65)))
  goto __end
  label __end
}