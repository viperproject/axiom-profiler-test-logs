domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function ObjectLock(): PyType
  
  unique function A(): PyType
  
  unique function Lock_basic(): PyType
  
  function Lock(arg0: PyType): PyType
  
  function Lock_arg(typ: PyType, index: Int): PyType
  
  unique function BaseLock(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_ObjectLock {
    extends_(ObjectLock(), Lock(A())) && get_basic(ObjectLock()) == ObjectLock()
  }
  
  axiom subtype_A {
    extends_(A(), object()) && get_basic(A()) == A()
  }
  
  axiom subtype_Lock {
    (forall T: PyType :: { Lock(T) } extends_(Lock(T), BaseLock()) && get_basic(Lock(T)) == Lock_basic())
  }
  
  axiom Lock_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Lock(arg0)) ==> Lock_arg(Z, 0) == arg0)
  }
  
  axiom subtype_BaseLock {
    extends_(BaseLock(), object()) && get_basic(BaseLock()) == BaseLock()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  unique function get_locked(): Function
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
  
  unique function d3_threading(): ThreadingID
  
  unique function d2_threading(): ThreadingID
  
  unique function d1_threading(): ThreadingID
  
  unique function dx_threading(): ThreadingID
  
  unique function fib_threading(): ThreadingID
  
  unique function quick_release_threading(): ThreadingID
  
  unique function timed_release_unbounded_threading(): ThreadingID
  
  unique function timed_release_unbounded_subzero_threading(): ThreadingID
  
  unique function timed_release_bounded_subzero_threading(): ThreadingID
  
  unique function timed_release_bounded_nodec_threading(): ThreadingID
  
  unique function timed_release_bounded_statdec_threading(): ThreadingID
  
  unique function timed_release_bounded_mutdec_threading(): ThreadingID
  
  unique function __init___threading_3(): ThreadingID
  
  unique function acquire_threading(): ThreadingID
  
  unique function release_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field A_a: Ref

field A_b: Ref

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function Lock_get_locked(self_13: Ref): Ref
  requires issubtype(typeof(self_13), Lock(Lock_arg(typeof(self_13), 0)))
  requires issubtype(Lock_arg(typeof(self_13), 0), object())
  requires self_13 != null
  ensures issubtype(typeof(result), Lock_arg(typeof(self_13), 0)) 


function __file__(): Ref 


function __name__(): Ref 


function __file___0(): Ref 


function __name___0(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function int___ge__(self: Int, other: Int): Bool 
{
  self >= other
}

function int___gt__(self: Int, other: Int): Bool 
{
  self > other
}

function int___le__(self: Int, other: Int): Bool 
{
  self <= other
}

function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function int___sub__(self: Int, other: Int): Int 
{
  self - other
}

function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate Lock_invariant(self_17: Ref) {
  true && issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0))) && ((issubtype(typeof(self_17), Lock(Lock_arg(typeof(self_17), 0))) ==> true) && (issubtype(typeof(self_17), ObjectLock()) ==> true))
}

method A___init__(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm, self_0: Ref) returns (_current_wait_level_146: Perm)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires self_0 != null
  requires acc(_MaySet(self_0, 6381377), write)
  requires acc(_MaySet(self_0, 6446913), write)
  requires issubtype(typeof(self_0), A())
  requires self_0 != null
  requires [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_146) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures acc(self_0.A_a, write) && (self_0.A_a == null || issubtype(typeof(self_0.A_a), ObjectLock())) && (acc(self_0.A_b, write) && issubtype(typeof(self_0.A_b), int()))
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_18: Ref
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq[Measure$]()
  inhale typeof(self_0) == A()
  _err := null
  self_18 := self_0
  if (perm(_MaySet(self_18, 6381377)) > none) {
    exhale acc(_MaySet(self_18, 6381377), write)
    inhale acc(self_18.A_a, write)
  }
  self_18.A_a := null
  if (perm(_MaySet(self_18, 6446913)) > none) {
    exhale acc(_MaySet(self_18, 6446913), write)
    inhale acc(self_18.A_b, write)
  }
  self_18.A_b := __prim__int___box__(0)
  goto __end
  label __end
}

method A_d3(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, self_1: Ref) returns (_current_wait_level_147: Perm)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires issubtype(typeof(self_1), A())
  requires self_1 != null
  requires [acc(MustTerminate(_cthread_147), write), true]
  requires [true, Measure$check(_caller_measures_147, _cthread_147, 3) || perm(MustTerminate(_cthread_147)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_147) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_19: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq(Measure$create(true, _cthread_147, 3))
  inhale typeof(self_1) == A()
  _err := null
  self_19 := self_1
  _cwl_147 := A_d2(_cthread_147, _method_measures_147, _residue_147, self_19)
  goto __end
  label __end
}

method A_d2(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, self_2: Ref) returns (_current_wait_level_148: Perm)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires issubtype(typeof(self_2), A())
  requires self_2 != null
  requires [acc(MustTerminate(_cthread_148), write), true]
  requires [true, Measure$check(_caller_measures_148, _cthread_148, 2) || perm(MustTerminate(_cthread_148)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_148) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_20: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq(Measure$create(true, _cthread_148, 2))
  inhale typeof(self_2) == A()
  _err := null
  self_20 := self_2
  _cwl_148 := A_d1(_cthread_148, _method_measures_148, _residue_148, self_20)
  goto __end
  label __end
}

method A_d1(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm, self_3: Ref) returns (_current_wait_level_149: Perm)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires issubtype(typeof(self_3), A())
  requires self_3 != null
  requires [acc(MustTerminate(_cthread_149), write), true]
  requires [true, Measure$check(_caller_measures_149, _cthread_149, 1) || perm(MustTerminate(_cthread_149)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_149) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures [true, (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_21: Ref
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq(Measure$create(true, _cthread_149, 1))
  inhale typeof(self_3) == A()
  _err := null
  self_21 := self_3
  goto __end
  label __end
}

method A_dx(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm, self_4: Ref) returns (_current_wait_level_150: Perm)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires issubtype(typeof(self_4), A())
  requires self_4 != null
  requires [acc(MustTerminate(_cthread_150), write), true]
  requires [true, Measure$check(_caller_measures_150, _cthread_150, 1) || perm(MustTerminate(_cthread_150)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_150) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_22: Ref
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq(Measure$create(true, _cthread_150, 1))
  inhale typeof(self_4) == A()
  _err := null
  self_22 := self_4
  _cwl_150 := A_d2(_cthread_150, _method_measures_150, _residue_150, self_22)
  goto __end
  label __end
}

method A_fib(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_151: Perm, self_5: Ref, n: Ref) returns (_current_wait_level_151: Perm, _res: Ref)
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires issubtype(typeof(self_5), A())
  requires issubtype(typeof(n), int())
  requires self_5 != null
  requires int___unbox__(n) > 0 && [acc(MustTerminate(_cthread_151), write), true]
  requires [true, Measure$check(_caller_measures_151, _cthread_151, int___unbox__(n)) || perm(MustTerminate(_cthread_151)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_151) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]
  ensures issubtype(typeof(_res), int())
  ensures [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var w: Ref
  var v: Ref
  var self_23: Ref
  var n_0: Ref
  var fib_res: Ref
  var fib_res_0: Ref
  var _cwl_151: Perm
  var _method_measures_151: Seq[Measure$]
  _method_measures_151 := Seq(Measure$create(true, _cthread_151, int___unbox__(n)))
  inhale typeof(self_5) == A()
  _res := null
  _err := null
  self_23 := self_5
  n_0 := n
  if (int___le__(int___unbox__(n_0), 1)) {
    _res := __prim__int___box__(1)
    goto __end
  } elseif (int___eq__(n_0, __prim__int___box__(2))) {
    _res := __prim__int___box__(2)
    goto __end
  } else {
    _cwl_151, fib_res := A_fib(_cthread_151, _method_measures_151, _residue_151, self_23, __prim__int___box__(int___sub__(int___unbox__(n_0), 1)))
    w := fib_res
    inhale _isDefined(119)
    _cwl_151, fib_res_0 := A_fib(_cthread_151, _method_measures_151, _residue_151, self_23, __prim__int___box__(int___sub__(int___unbox__(n_0), 2)))
    v := fib_res_0
    inhale _isDefined(118)
    _res := __prim__int___box__(int___add__(int___unbox__(_checkDefined(w, 119)), int___unbox__(_checkDefined(v, 118))))
    goto __end
  }
  goto __end
  label __end
}

method A_quick_release(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm, self_6: Ref, other: Ref) returns (_current_wait_level_152: Perm)
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires issubtype(typeof(self_6), A())
  requires issubtype(typeof(other), A())
  requires self_6 != null
  requires acc(other.A_a, write) && (other.A_a == null || issubtype(typeof(other.A_a), ObjectLock()))
  requires acc(other.A_b, write) && issubtype(typeof(other.A_b), int())
  requires int___unbox__(other.A_b) > 0 && [acc(other.A_a.MustReleaseBounded, write), (perm(other.A_a.MustReleaseBounded) > none && Measure$check(_caller_measures_152, other.A_a, int___unbox__(other.A_b)) ? acc(other.A_a.MustReleaseBounded, write) : acc(other.A_a.MustReleaseUnbounded, write))]
  requires int___ge__(int___unbox__(other.A_b), 2)
  requires [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_19: Ref [MustInvokeBounded(_r_19)] :: false) && ((forperm _r_19: Ref [MustInvokeUnbounded(_r_19)] :: false) && ((forperm _r_19: Ref [_r_19.MustReleaseBounded] :: false) && (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_152) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures [true, (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_24: Ref
  var other_3: Ref
  var _cwl_152: Perm
  var _method_measures_152: Seq[Measure$]
  _method_measures_152 := Seq(Measure$create(true, other.A_a, int___unbox__(other.A_b)))
  inhale typeof(self_6) == A()
  _err := null
  self_24 := self_6
  other_3 := other
  fold acc(Lock_invariant(other_3.A_a), write)
  _cwl_152 := Lock_release(_cthread_152, _method_measures_152, _residue_152, other_3.A_a)
  goto __end
  label __end
}

method A_timed_release_unbounded(_cthread_153: Ref, _caller_measures_153: Seq[Measure$], _residue_153: Perm, self_7: Ref) returns (_current_wait_level_153: Perm)
  requires _cthread_153 != null
  requires issubtype(typeof(_cthread_153), Thread_0())
  requires issubtype(typeof(self_7), A())
  requires self_7 != null
  requires [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_153) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]
  ensures [true, (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_0: Ref
  var self_25: Ref
  var A_res: Ref
  var ObjectLock_res: Ref
  var _cwl_153: Perm
  var _method_measures_153: Seq[Measure$]
  _method_measures_153 := Seq[Measure$]()
  inhale typeof(self_7) == A()
  _err := null
  self_25 := self_7
  A_res := new()
  inhale typeof(A_res) == A()
  inhale acc(_MaySet(A_res, 6381377), write)
  inhale acc(_MaySet(A_res, 6446913), write)
  _cwl_153 := A___init__(_cthread_153, _method_measures_153, _residue_153, A_res)
  x_0 := A_res
  inhale _isDefined(3170168)
  ObjectLock_res := new()
  inhale typeof(ObjectLock_res) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res) == _checkDefined(x_0, 3170168)
  fold acc(Lock_invariant(ObjectLock_res), write)
  _cwl_153 := Lock___init__(_cthread_153, _method_measures_153, _residue_153, ObjectLock_res, _checkDefined(x_0, 3170168), null, null)
  if (perm(_MaySet(_checkDefined(x_0, 3170168), 6381377)) > none) {
    exhale acc(_MaySet(_checkDefined(x_0, 3170168), 6381377), write)
    inhale acc(_checkDefined(x_0, 3170168).A_a, write)
  }
  _checkDefined(x_0, 3170168).A_a := ObjectLock_res
  _cwl_153 := Lock_acquire(_cthread_153, _method_measures_153, _residue_153, _checkDefined(x_0, 3170168).A_a)
  unfold acc(Lock_invariant(_checkDefined(x_0, 3170168).A_a), write)
  if (perm(_MaySet(_checkDefined(x_0, 3170168), 6446913)) > none) {
    exhale acc(_MaySet(_checkDefined(x_0, 3170168), 6446913), write)
    inhale acc(_checkDefined(x_0, 3170168).A_b, write)
  }
  _checkDefined(x_0, 3170168).A_b := __prim__int___box__(15)
  _cwl_153 := A_quick_release(_cthread_153, _method_measures_153, _residue_153, self_25, _checkDefined(x_0, 3170168))
  goto __end
  label __end
}

method A_timed_release_unbounded_subzero(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm, self_8: Ref) returns (_current_wait_level_154: Perm)
  requires _cthread_154 != null
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires issubtype(typeof(self_8), A())
  requires self_8 != null
  requires [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_154) && ((forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]
  ensures [true, (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_1: Ref
  var self_26: Ref
  var A_res_0: Ref
  var ObjectLock_res_0: Ref
  var _cwl_154: Perm
  var _method_measures_154: Seq[Measure$]
  _method_measures_154 := Seq[Measure$]()
  inhale typeof(self_8) == A()
  _err := null
  self_26 := self_8
  A_res_0 := new()
  inhale typeof(A_res_0) == A()
  inhale acc(_MaySet(A_res_0, 6381377), write)
  inhale acc(_MaySet(A_res_0, 6446913), write)
  _cwl_154 := A___init__(_cthread_154, _method_measures_154, _residue_154, A_res_0)
  x_1 := A_res_0
  inhale _isDefined(3235704)
  ObjectLock_res_0 := new()
  inhale typeof(ObjectLock_res_0) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_0) == _checkDefined(x_1, 3235704)
  fold acc(Lock_invariant(ObjectLock_res_0), write)
  _cwl_154 := Lock___init__(_cthread_154, _method_measures_154, _residue_154, ObjectLock_res_0, _checkDefined(x_1, 3235704), null, null)
  if (perm(_MaySet(_checkDefined(x_1, 3235704), 6381377)) > none) {
    exhale acc(_MaySet(_checkDefined(x_1, 3235704), 6381377), write)
    inhale acc(_checkDefined(x_1, 3235704).A_a, write)
  }
  _checkDefined(x_1, 3235704).A_a := ObjectLock_res_0
  _cwl_154 := Lock_acquire(_cthread_154, _method_measures_154, _residue_154, _checkDefined(x_1, 3235704).A_a)
  unfold acc(Lock_invariant(_checkDefined(x_1, 3235704).A_a), write)
  if (perm(_MaySet(_checkDefined(x_1, 3235704), 6446913)) > none) {
    exhale acc(_MaySet(_checkDefined(x_1, 3235704), 6446913), write)
    inhale acc(_checkDefined(x_1, 3235704).A_b, write)
  }
  _checkDefined(x_1, 3235704).A_b := __prim__int___box__(-1)
  _cwl_154 := A_quick_release(_cthread_154, _method_measures_154, _residue_154, self_26, _checkDefined(x_1, 3235704))
  goto __end
  label __end
}

method A_timed_release_bounded_subzero(_cthread_155: Ref, _caller_measures_155: Seq[Measure$], _residue_155: Perm, self_9: Ref, x_2: Ref) returns (_current_wait_level_155: Perm)
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires issubtype(typeof(self_9), A())
  requires issubtype(typeof(x_2), A())
  requires self_9 != null
  requires acc(x_2.A_a, write) && (x_2.A_a == null || issubtype(typeof(x_2.A_a), ObjectLock())) && (acc(x_2.A_b, write) && issubtype(typeof(x_2.A_b), int()))
  requires int___unbox__(x_2.A_b) > 0 && [acc(x_2.A_a.MustReleaseBounded, write), (perm(x_2.A_a.MustReleaseBounded) > none && Measure$check(_caller_measures_155, x_2.A_a, int___unbox__(x_2.A_b)) ? acc(x_2.A_a.MustReleaseBounded, write) : acc(x_2.A_a.MustReleaseUnbounded, write))]
  requires int___eq__(x_2.A_b, __prim__int___box__(-1))
  requires [true, perm(MustTerminate(_cthread_155)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_155) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_155) && _residue_155 <= _current_wait_level_155), true]
  ensures [true, (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_27: Ref
  var x_3: Ref
  var _cwl_155: Perm
  var _method_measures_155: Seq[Measure$]
  _method_measures_155 := Seq(Measure$create(true, x_2.A_a, int___unbox__(x_2.A_b)))
  inhale typeof(self_9) == A()
  _err := null
  self_27 := self_9
  x_3 := x_2
  assert false
  goto __end
  label __end
}

method A_timed_release_bounded_nodec(_cthread_156: Ref, _caller_measures_156: Seq[Measure$], _residue_156: Perm, self_10: Ref, other_0: Ref) returns (_current_wait_level_156: Perm)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires issubtype(typeof(self_10), A())
  requires issubtype(typeof(other_0), A())
  requires self_10 != null
  requires acc(other_0.A_a, write) && (other_0.A_a == null || issubtype(typeof(other_0.A_a), ObjectLock()))
  requires acc(other_0.A_b, write) && issubtype(typeof(other_0.A_b), int())
  requires int___unbox__(other_0.A_b) > 0 && [acc(other_0.A_a.MustReleaseBounded, write), (perm(other_0.A_a.MustReleaseBounded) > none && Measure$check(_caller_measures_156, other_0.A_a, int___unbox__(other_0.A_b)) ? acc(other_0.A_a.MustReleaseBounded, write) : acc(other_0.A_a.MustReleaseUnbounded, write))]
  requires [true, perm(MustTerminate(_cthread_156)) == none && ((forperm _r_31: Ref [MustInvokeBounded(_r_31)] :: false) && ((forperm _r_31: Ref [MustInvokeUnbounded(_r_31)] :: false) && ((forperm _r_31: Ref [_r_31.MustReleaseBounded] :: false) && (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_156) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]
  ensures [true, (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_28: Ref
  var other_4: Ref
  var _cwl_156: Perm
  var _method_measures_156: Seq[Measure$]
  _method_measures_156 := Seq(Measure$create(true, other_0.A_a, int___unbox__(other_0.A_b)))
  inhale typeof(self_10) == A()
  _err := null
  self_28 := self_10
  other_4 := other_0
  _cwl_156 := A_quick_release(_cthread_156, _method_measures_156, _residue_156, self_28, other_4)
  goto __end
  label __end
}

method A_timed_release_bounded_statdec(_cthread_157: Ref, _caller_measures_157: Seq[Measure$], _residue_157: Perm, self_11: Ref, other_1: Ref) returns (_current_wait_level_157: Perm)
  requires _cthread_157 != null
  requires issubtype(typeof(_cthread_157), Thread_0())
  requires issubtype(typeof(self_11), A())
  requires issubtype(typeof(other_1), A())
  requires self_11 != null
  requires acc(other_1.A_a, write) && (other_1.A_a == null || issubtype(typeof(other_1.A_a), ObjectLock())) && (acc(other_1.A_b, write) && issubtype(typeof(other_1.A_b), int()))
  requires int___gt__(int___unbox__(other_1.A_b), 5) && (int___add__(int___unbox__(other_1.A_b), 1) > 0 && [acc(other_1.A_a.MustReleaseBounded, write), (perm(other_1.A_a.MustReleaseBounded) > none && Measure$check(_caller_measures_157, other_1.A_a, int___add__(int___unbox__(other_1.A_b), 1)) ? acc(other_1.A_a.MustReleaseBounded, write) : acc(other_1.A_a.MustReleaseUnbounded, write))])
  requires [true, perm(MustTerminate(_cthread_157)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_157) && ((forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]
  ensures [true, (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_29: Ref
  var other_5: Ref
  var _cwl_157: Perm
  var _method_measures_157: Seq[Measure$]
  _method_measures_157 := Seq(Measure$create(true, other_1.A_a, int___add__(int___unbox__(other_1.A_b), 1)))
  inhale typeof(self_11) == A()
  _err := null
  self_29 := self_11
  other_5 := other_1
  _cwl_157 := A_quick_release(_cthread_157, _method_measures_157, _residue_157, self_29, other_5)
  goto __end
  label __end
}

method A_timed_release_bounded_mutdec(_cthread_158: Ref, _caller_measures_158: Seq[Measure$], _residue_158: Perm, self_12: Ref, other_2: Ref) returns (_current_wait_level_158: Perm)
  requires _cthread_158 != null
  requires issubtype(typeof(_cthread_158), Thread_0())
  requires issubtype(typeof(self_12), A())
  requires issubtype(typeof(other_2), A())
  requires self_12 != null
  requires acc(other_2.A_a, write) && (other_2.A_a == null || issubtype(typeof(other_2.A_a), ObjectLock())) && (acc(other_2.A_b, write) && issubtype(typeof(other_2.A_b), int()) && int___gt__(int___unbox__(other_2.A_b), 2))
  requires int___unbox__(other_2.A_b) > 0 && [acc(other_2.A_a.MustReleaseBounded, write), (perm(other_2.A_a.MustReleaseBounded) > none && Measure$check(_caller_measures_158, other_2.A_a, int___unbox__(other_2.A_b)) ? acc(other_2.A_a.MustReleaseBounded, write) : acc(other_2.A_a.MustReleaseUnbounded, write))]
  requires [true, perm(MustTerminate(_cthread_158)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_158) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158), true]
  ensures [true, (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_30: Ref
  var other_6: Ref
  var _cwl_158: Perm
  var _method_measures_158: Seq[Measure$]
  _method_measures_158 := Seq(Measure$create(true, other_2.A_a, int___unbox__(other_2.A_b)))
  inhale typeof(self_12) == A()
  _err := null
  self_30 := self_12
  other_6 := other_2
  if (perm(_MaySet(other_6, 6446913)) > none) {
    exhale acc(_MaySet(other_6, 6446913), write)
    inhale acc(other_6.A_b, write)
  }
  other_6.A_b := __prim__int___box__(int___sub__(int___unbox__(other_6.A_b), 1))
  _cwl_158 := A_quick_release(_cthread_158, _method_measures_158, _residue_158, self_30, other_6)
  goto __end
  label __end
}

method Lock___init__(_cthread_160: Ref, _caller_measures_160: Seq[Measure$], _residue_160: Perm, self_14: Ref, locked_object: Ref, above: Ref, below: Ref) returns (_current_wait_level_160: Perm)
  requires _cthread_160 != null
  requires issubtype(typeof(_cthread_160), Thread_0())
  requires self_14 != null
  requires issubtype(typeof(self_14), Lock(Lock_arg(typeof(self_14), 0)))
  requires issubtype(typeof(locked_object), Lock_arg(typeof(self_14), 0))
  requires above == null || issubtype(typeof(above), BaseLock())
  requires below == null || issubtype(typeof(below), BaseLock())
  requires issubtype(Lock_arg(typeof(self_14), 0), object())
  requires self_14 != null
  requires [acc(MustTerminate(_cthread_160), write), true]
  requires above == null && below != null ==> [_residue_160 < Level(below), true]
  requires above != null && below != null ==> Level(above) < Level(below)
  requires acc(Lock_invariant(self_14), write)
  requires [true, above == null && below != null ==> (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) < Level(below)) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) < Level(below)) && _residue_160 < Level(below))]
  requires [true, Measure$check(_caller_measures_160, _cthread_160, 1) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_41: Ref [MustInvokeBounded(_r_41)] :: false) && ((forperm _r_41: Ref [MustInvokeUnbounded(_r_41)] :: false) && ((forperm _r_41: Ref [_r_41.MustReleaseBounded] :: false) && (forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_40: Ref [_r_40.MustReleaseBounded] :: Level(_r_40) <= _current_wait_level_160) && ((forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: Level(_r_40) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160), true]
  ensures above == null ==> [_current_wait_level_160 < Level(self_14), true]
  ensures above != null ==> Level(above) < Level(self_14)
  ensures below != null ==> Level(self_14) < Level(below)
{
  var _cwl_160: Perm
  inhale typeof(self_14) == Lock(Lock_arg(typeof(self_14), 0))
  inhale false
}

method Lock_acquire(_cthread_161: Ref, _caller_measures_161: Seq[Measure$], _residue_161: Perm, self_15: Ref) returns (_current_wait_level_161: Perm)
  requires _cthread_161 != null
  requires issubtype(typeof(_cthread_161), Thread_0())
  requires issubtype(typeof(self_15), Lock(Lock_arg(typeof(self_15), 0)))
  requires issubtype(Lock_arg(typeof(self_15), 0), object())
  requires self_15 != null
  requires [acc(MustTerminate(_cthread_161), write), true]
  requires [_residue_161 < Level(self_15), true]
  requires true
  requires true
  requires [true, (forperm _r_42: Ref [_r_42.MustReleaseBounded] :: Level(_r_42) < Level(self_15)) && ((forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: Level(_r_42) < Level(self_15)) && _residue_161 < Level(self_15))]
  requires [true, Measure$check(_caller_measures_161, _cthread_161, 1) || perm(MustTerminate(_cthread_161)) == none && ((forperm _r_44: Ref [MustInvokeBounded(_r_44)] :: false) && ((forperm _r_44: Ref [MustInvokeUnbounded(_r_44)] :: false) && ((forperm _r_44: Ref [_r_44.MustReleaseBounded] :: false) && (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_43: Ref [_r_43.MustReleaseBounded] :: Level(_r_43) <= _current_wait_level_161) && ((forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: Level(_r_43) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161), true]
  ensures acc(Lock_invariant(self_15), write)
  ensures [acc(self_15.MustReleaseUnbounded, write), acc(self_15.MustReleaseUnbounded, write)]
{
  var _cwl_161: Perm
  inhale typeof(self_15) == Lock(Lock_arg(typeof(self_15), 0))
  inhale false
}

method Lock_release(_cthread_162: Ref, _caller_measures_162: Seq[Measure$], _residue_162: Perm, self_16: Ref) returns (_current_wait_level_162: Perm)
  requires _cthread_162 != null
  requires issubtype(typeof(_cthread_162), Thread_0())
  requires issubtype(typeof(self_16), Lock(Lock_arg(typeof(self_16), 0)))
  requires issubtype(Lock_arg(typeof(self_16), 0), object())
  requires self_16 != null
  requires [acc(MustTerminate(_cthread_162), write), true]
  requires [acc(self_16.MustReleaseBounded, write), (perm(self_16.MustReleaseBounded) > none && Measure$check(_caller_measures_162, self_16, 1) ? acc(self_16.MustReleaseBounded, write) : acc(self_16.MustReleaseUnbounded, write))]
  requires acc(Lock_invariant(self_16), write)
  requires true
  requires true
  requires [true, Measure$check(_caller_measures_162, _cthread_162, 1) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_45: Ref [_r_45.MustReleaseBounded] :: Level(_r_45) <= _current_wait_level_162) && ((forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: Level(_r_45) <= _current_wait_level_162) && _residue_162 <= _current_wait_level_162), true]
{
  var _cwl_162: Perm
  inhale typeof(self_16) == Lock(Lock_arg(typeof(self_16), 0))
  inhale false
}

method main(_cthread_164: Ref, _caller_measures_164: Seq[Measure$], _residue_164: Perm) returns (_current_wait_level_164: Perm)
  requires _cthread_164 != null
  requires issubtype(typeof(_cthread_164), Thread_0())
  requires [true, perm(MustTerminate(_cthread_164)) == none && ((forperm _r_49: Ref [MustInvokeBounded(_r_49)] :: false) && ((forperm _r_49: Ref [MustInvokeUnbounded(_r_49)] :: false) && ((forperm _r_49: Ref [_r_49.MustReleaseBounded] :: false) && (forperm _r_49: Ref [_r_49.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_47: Ref [_r_47.MustReleaseBounded] :: Level(_r_47) <= _current_wait_level_164) && ((forperm _r_47: Ref [_r_47.MustReleaseUnbounded] :: Level(_r_47) <= _current_wait_level_164) && _residue_164 <= _current_wait_level_164), true]
  ensures [true, (forperm _r_48: Ref [MustInvokeBounded(_r_48)] :: false) && ((forperm _r_48: Ref [MustInvokeUnbounded(_r_48)] :: false) && ((forperm _r_48: Ref [_r_48.MustReleaseBounded] :: false) && (forperm _r_48: Ref [_r_48.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var module_defined_1: Bool
  var module_names_1: Set[_Name]
  var _cwl_164: Perm
  var _method_measures_164: Seq[Measure$]
  _method_measures_164 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_defined_1 := false
  module_names_1 := Set[_Name]()
  module_names_1 := (module_names_1 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file___0()._val, 99 / 100) && issubtype(typeof(__file___0()._val), str()) && issubtype(typeof(__file___0()._val), str())
  module_names_1 := (module_names_1 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name___0()._val, 99 / 100) && issubtype(typeof(__name___0()._val), str()) && issubtype(typeof(__name___0()._val), str()) && !str___eq__(str___create__(8, 2489249333222104298408468319), __name___0()._val)
  module_names_0 := (module_names_0 union Set(_single(6513473)))
  module_names_0 := (module_names_0 union Set(_single(3655284702854286527)))
  module_names_0 := (module_names_0 union Set(_single(4264095844347449787)))
  module_names_0 := (module_names_0 union Set(_single(4814323939045640847723228745)))
  module_names_0 := (module_names_0 union Set(_single(5969745018335918569738826320)))
  module_names_0 := (module_names_0 union Set(_single(7136376649266381199951095122)))
  module_names_0 := (module_names_0 union Set(_single(4659879962334230944322642242)))
  if (!module_defined_1) {
    module_defined_1 := true
    module_names_1 := (module_names_1 union Set(_single(3682427259782798009)))
    module_names_1 := (module_names_1 union Set(_single(5123216512802524336881954895)))
    module_names_1 := (module_names_1 union Set(_single(3686932966091490988)))
    module_names_1 := (module_names_1 union Set(_single(11116006324067352974226974112924930237)))
    module_names_1 := (module_names_1 union Set(_single(4264095844347449787)))
    module_names_1 := (module_names_1 union Set(_single(3939413879042314935)))
    module_names_1 := (module_names_1 union Set(_single(7827276)))
    module_names_1 := (module_names_1 union Set(_single(3584533797388877637428408140)))
    module_names_1 := (module_names_1 union Set(_single(5969745018335918569738826320)))
    module_names_1 := (module_names_1 union Set(_single(1701999952)))
    module_names_1 := (module_names_1 union Set(_single(7136376649266381199951095122)))
    module_names_1 := (module_names_1 union Set(_single(4659879962334230944322642242)))
    module_names_1 := (module_names_1 union Set(_single(3655571673241459380)))
    module_names_1 := (module_names_1 union Set(_single(5020080360567004017642927437)))
    module_names_1 := (module_names_1 union Set(_single(5460990052674857173734662115181759155)))
    module_names_1 := (module_names_1 union Set(_single(4900434677047853433511043415)))
    assert true && (_single(4659879962334230944322642242) in module_names_1) && (_single(4659879962334230944322642242) in module_names_1)
    assert true && (_single(4659879962334230944322642242) in module_names_1)
    module_names_1 := (module_names_1 union Set(_single(3493880855485680332086796127)))
    module_names_1 := (module_names_1 union Set(_single(4196433967405385533277627751)))
    module_names_1 := (module_names_1 union Set(_single(4259881987508968607)))
    module_names_1 := (module_names_1 union Set(_single(3682719749203270286)))
    module_names_1 := (module_names_1 union Set(_single(1801678668)))
  }
  assert (_single(1801678668) in module_names_1)
  module_names_0 := (module_names_0 union Set(_single(1801678668)))
  module_names_0 := (module_names_0 union Set(_single(5123216512802524336881954895)))
  assert true
  assert true && (_single(1801678668) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(5262747629716623330057544271)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(13156)))
  module_names_0 := (module_names_0 union Set(_single(12900)))
  module_names_0 := (module_names_0 union Set(_single(12644)))
  module_names_0 := (module_names_0 union Set(_single(30820)))
  module_names_0 := (module_names_0 union Set(_single(6449510)))
  module_names_0 := (module_names_0 union Set(_single(20574347337254748854652502947816442511)))
  module_names_0 := (module_names_0 union Set(_single(77697399870829049487516556347725559117881106246726227596)))
  module_names_0 := (module_names_0 union Set(_single(76815325371604286898492600143085213917007030326096450557169165983200482956)))
  module_names_0 := (module_names_0 union Set(_single(81224783066782693916642835297781139238477823212931277909816150717879195276)))
  module_names_0 := (module_names_0 union Set(_single(141249203410618118768837245678008646444880829878419254285140060532)))
  module_names_0 := (module_names_0 union Set(_single(193398527546636162639688221374504322022414773450964561970947000994800768652)))
  module_names_0 := (module_names_0 union Set(_single(304652265217194355522859424137860176226609013367944764973541467418044569228)))
  module_names_0 := (module_names_0 union Set(_single(65)))
  goto __end
  label __end
}