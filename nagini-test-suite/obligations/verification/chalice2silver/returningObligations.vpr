domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function ObjectLock(): PyType
  
  unique function Lock_basic(): PyType
  
  function Lock(arg0: PyType): PyType
  
  function Lock_arg(typ: PyType, index: Int): PyType
  
  unique function BaseLock(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_ObjectLock {
    extends_(ObjectLock(), Lock(object())) && get_basic(ObjectLock()) == ObjectLock()
  }
  
  axiom subtype_Lock {
    (forall T: PyType :: { Lock(T) } extends_(Lock(T), BaseLock()) && get_basic(Lock(T)) == Lock_basic())
  }
  
  axiom Lock_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Lock(arg0)) ==> Lock_arg(Z, 0) == arg0)
  }
  
  axiom subtype_BaseLock {
    extends_(BaseLock(), object()) && get_basic(BaseLock()) == BaseLock()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  unique function get_locked(): Function
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function reAcq_threading(): ThreadingID
  
  unique function reAcq2_threading(): ThreadingID
  
  unique function reAcq3_threading(): ThreadingID
  
  unique function reAcq4_threading(): ThreadingID
  
  unique function acq_threading(): ThreadingID
  
  unique function continuous1_threading(): ThreadingID
  
  unique function continuous2_threading(): ThreadingID
  
  unique function continuous3_threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
  
  unique function acquire_threading(): ThreadingID
  
  unique function release_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function Lock_get_locked(self_0: Ref): Ref
  requires issubtype(typeof(self_0), Lock(Lock_arg(typeof(self_0), 0)))
  requires issubtype(Lock_arg(typeof(self_0), 0), object())
  requires self_0 != null
  ensures issubtype(typeof(result), Lock_arg(typeof(self_0), 0)) 


function __file__(): Ref 


function __name__(): Ref 


function __file___0(): Ref 


function __name___0(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate Lock_invariant(self_4: Ref) {
  true && issubtype(typeof(self_4), Lock(Lock_arg(typeof(self_4), 0))) && ((issubtype(typeof(self_4), Lock(Lock_arg(typeof(self_4), 0))) ==> true) && (issubtype(typeof(self_4), ObjectLock()) ==> true))
}

method reAcq(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm, a: Ref) returns (_current_wait_level_146: Perm)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires issubtype(typeof(a), ObjectLock())
  requires a != null
  requires [_residue_146 < Level(a), true]
  requires [acc(a.MustReleaseBounded, write), (perm(a.MustReleaseBounded) > none && Measure$check(_caller_measures_146, a, 2) ? acc(a.MustReleaseBounded, write) : acc(a.MustReleaseUnbounded, write))]
  requires [true, (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) < Level(a)) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) < Level(a)) && _residue_146 < Level(a))]
  requires [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_0: Ref [_r_0.MustReleaseBounded] :: Level(_r_0) <= _current_wait_level_146) && ((forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: Level(_r_0) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures [acc(a.MustReleaseBounded, write), (perm(a.MustReleaseBounded) > none ? acc(a.MustReleaseBounded, write) : acc(a.MustReleaseUnbounded, write))]
  ensures [true, (forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_7: Ref
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq(Measure$create(true, a, 2))
  _err := null
  a_7 := a
  fold acc(Lock_invariant(a_7), write)
  _cwl_146 := Lock_release(_cthread_146, _method_measures_146, _residue_146, a_7)
  _cwl_146 := Lock_acquire(_cthread_146, _method_measures_146, _residue_146, a_7)
  unfold acc(Lock_invariant(a_7), write)
  goto __end
  label __end
}

method reAcq2(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, a_0: Ref) returns (_current_wait_level_147: Perm)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires issubtype(typeof(a_0), ObjectLock())
  requires a_0 != null
  requires [acc(a_0.MustReleaseBounded, write), (perm(a_0.MustReleaseBounded) > none && Measure$check(_caller_measures_147, a_0, 2) ? acc(a_0.MustReleaseBounded, write) : acc(a_0.MustReleaseUnbounded, write))]
  requires [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_3: Ref [_r_3.MustReleaseBounded] :: Level(_r_3) <= _current_wait_level_147) && ((forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: Level(_r_3) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures [acc(a_0.MustReleaseBounded, write), (perm(a_0.MustReleaseBounded) > none ? acc(a_0.MustReleaseBounded, write) : acc(a_0.MustReleaseUnbounded, write))]
  ensures [true, (forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_8: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq(Measure$create(true, a_0, 2))
  _err := null
  a_8 := a_0
  goto __end
  label __end
}

method reAcq3(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, a_1: Ref) returns (_current_wait_level_148: Perm)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires issubtype(typeof(a_1), ObjectLock())
  requires a_1 != null
  requires [_residue_148 < Level(a_1), true]
  requires [acc(a_1.MustReleaseBounded, write), (perm(a_1.MustReleaseBounded) > none && Measure$check(_caller_measures_148, a_1, 2) ? acc(a_1.MustReleaseBounded, write) : acc(a_1.MustReleaseUnbounded, write))]
  requires [true, (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) < Level(a_1)) && ((forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) < Level(a_1)) && _residue_148 < Level(a_1))]
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <= _current_wait_level_148) && ((forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures [acc(a_1.MustReleaseUnbounded, write), acc(a_1.MustReleaseUnbounded, write)]
  ensures [true, (forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_9: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq(Measure$create(true, a_1, 2))
  _err := null
  a_9 := a_1
  fold acc(Lock_invariant(a_9), write)
  _cwl_148 := Lock_release(_cthread_148, _method_measures_148, _residue_148, a_9)
  _cwl_148 := Lock_acquire(_cthread_148, _method_measures_148, _residue_148, a_9)
  unfold acc(Lock_invariant(a_9), write)
  goto __end
  label __end
}

method reAcq4(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm, a_2: Ref) returns (_current_wait_level_149: Perm)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires issubtype(typeof(a_2), ObjectLock())
  requires a_2 != null
  requires [acc(a_2.MustReleaseBounded, write), (perm(a_2.MustReleaseBounded) > none && Measure$check(_caller_measures_149, a_2, 2) ? acc(a_2.MustReleaseBounded, write) : acc(a_2.MustReleaseUnbounded, write))]
  requires [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_10: Ref [_r_10.MustReleaseBounded] :: Level(_r_10) <= _current_wait_level_149) && ((forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: Level(_r_10) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures [acc(a_2.MustReleaseUnbounded, write), acc(a_2.MustReleaseUnbounded, write)]
  ensures [true, (forperm _r_11: Ref [MustInvokeBounded(_r_11)] :: false) && ((forperm _r_11: Ref [MustInvokeUnbounded(_r_11)] :: false) && ((forperm _r_11: Ref [_r_11.MustReleaseBounded] :: false) && (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_10: Ref
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq(Measure$create(true, a_2, 2))
  _err := null
  a_10 := a_2
  goto __end
  label __end
}

method acq(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm, a_3: Ref) returns (_current_wait_level_150: Perm)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires issubtype(typeof(a_3), ObjectLock())
  requires a_3 != null
  requires [_residue_150 < Level(a_3), true]
  requires [true, (forperm _r_13: Ref [_r_13.MustReleaseBounded] :: Level(_r_13) < Level(a_3)) && ((forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: Level(_r_13) < Level(a_3)) && _residue_150 < Level(a_3))]
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_150) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures [acc(a_3.MustReleaseBounded, write), (perm(a_3.MustReleaseBounded) > none ? acc(a_3.MustReleaseBounded, write) : acc(a_3.MustReleaseUnbounded, write))]
  ensures [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_11: Ref
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq[Measure$]()
  _err := null
  a_11 := a_3
  _cwl_150 := Lock_acquire(_cthread_150, _method_measures_150, _residue_150, a_11)
  unfold acc(Lock_invariant(a_11), write)
  goto __end
  label __end
}

method continuous1(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_151: Perm, a_4: Ref) returns (_current_wait_level_151: Perm)
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires issubtype(typeof(a_4), ObjectLock())
  requires a_4 != null
  requires [_residue_151 < Level(a_4), true]
  requires [true, (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) < Level(a_4)) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) < Level(a_4)) && _residue_151 < Level(a_4))]
  requires [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_22: Ref [_r_22.MustReleaseBounded] :: Level(_r_22) <= _current_wait_level_151) && ((forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: Level(_r_22) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]
  ensures [true, (forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_12: Ref
  var _loop_measures: Seq[Measure$]
  var _loop_check_before: Bool
  var _loop_termination_flag: Bool
  var _loop_original_must_terminate: Perm
  var _residue_159: Perm
  var _cwl_151: Perm
  var _method_measures_151: Seq[Measure$]
  _method_measures_151 := Seq[Measure$]()
  _err := null
  a_12 := a_4
  _cwl_151 := acq(_cthread_151, _method_measures_151, _residue_151, a_12)
  // Save current MustTerminate amount._loop_original_must_terminate := perm(MustTerminate(_cthread_151))
  // Save loop termination promise._loop_termination_flag := false
  // We are before loop._loop_check_before := true
  while (true)
    invariant [(forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _residue_159) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _residue_159) && _residue_151 <= _residue_159), true]
    invariant true
    invariant [acc(a_12.MustReleaseBounded, write), (_loop_check_before ? (perm(a_12.MustReleaseBounded) > none ? acc(a_12.MustReleaseBounded, write) : acc(a_12.MustReleaseUnbounded, write)) : (perm(a_12.MustReleaseBounded) > none && Measure$check(_loop_measures, a_12, 3) ? acc(a_12.MustReleaseBounded, write) : acc(a_12.MustReleaseUnbounded, write)))]
    invariant true
    invariant !_loop_check_before ==> [true, (forperm _r_18: Ref [_r_18.MustReleaseBounded] :: Level(_r_18) < Level(a_12)) && ((forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: Level(_r_18) < Level(a_12)) && _residue_159 < Level(a_12))]
    invariant _loop_check_before ==> [true, (forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) < Level(a_12)) && ((forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) < Level(a_12)) && _residue_151 < Level(a_12))]
    invariant [true, _loop_check_before ==> _loop_termination_flag || (!true || perm(MustTerminate(_cthread_151)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))] 
  {
    inhale _residue_159 < Level(a_12)
    _loop_measures := Seq(Measure$create(true, a_12, 3))
    fold acc(Lock_invariant(a_12), write)
    _cwl_151 := Lock_release(_cthread_151, _method_measures_151, _residue_159, a_12)
    _cwl_151 := Lock_acquire(_cthread_151, _method_measures_151, _residue_159, a_12)
    unfold acc(Lock_invariant(a_12), write)
    _cwl_151 := reAcq(_cthread_151, _method_measures_151, _residue_159, a_12)
    label loop_end
    // We are after loop body._loop_check_before := false
    // Check if loop continues to terminate.assert _loop_termination_flag ==> !true
  }
  inhale _residue_151 < Level(a_12)
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_151)) > none ==> acc(MustTerminate(_cthread_151), perm(MustTerminate(_cthread_151)) - _loop_original_must_terminate)
  label post_loop
  goto __end
  label __end
}

method continuous2(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm, a_5: Ref) returns (_current_wait_level_152: Perm)
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires issubtype(typeof(a_5), ObjectLock())
  requires a_5 != null
  requires [_residue_152 < Level(a_5), true]
  requires [true, (forperm _r_25: Ref [_r_25.MustReleaseBounded] :: Level(_r_25) < Level(a_5)) && ((forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: Level(_r_25) < Level(a_5)) && _residue_152 < Level(a_5))]
  requires [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_32: Ref [MustInvokeBounded(_r_32)] :: false) && ((forperm _r_32: Ref [MustInvokeUnbounded(_r_32)] :: false) && ((forperm _r_32: Ref [_r_32.MustReleaseBounded] :: false) && (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_30: Ref [_r_30.MustReleaseBounded] :: Level(_r_30) <= _current_wait_level_152) && ((forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: Level(_r_30) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures [true, (forperm _r_31: Ref [MustInvokeBounded(_r_31)] :: false) && ((forperm _r_31: Ref [MustInvokeUnbounded(_r_31)] :: false) && ((forperm _r_31: Ref [_r_31.MustReleaseBounded] :: false) && (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_13: Ref
  var _loop_measures_0: Seq[Measure$]
  var _loop_check_before_0: Bool
  var _loop_termination_flag_0: Bool
  var _loop_original_must_terminate_0: Perm
  var _residue_160: Perm
  var _cwl_152: Perm
  var _method_measures_152: Seq[Measure$]
  _method_measures_152 := Seq[Measure$]()
  _err := null
  a_13 := a_5
  _cwl_152 := acq(_cthread_152, _method_measures_152, _residue_152, a_13)
  // Save current MustTerminate amount._loop_original_must_terminate_0 := perm(MustTerminate(_cthread_152))
  // Save loop termination promise._loop_termination_flag_0 := false
  // We are before loop._loop_check_before_0 := true
  while (true)
    invariant [(forperm _r_28: Ref [_r_28.MustReleaseBounded] :: Level(_r_28) <= _residue_160) && ((forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: Level(_r_28) <= _residue_160) && _residue_152 <= _residue_160), true]
    invariant true
    invariant [acc(a_13.MustReleaseBounded, write), (_loop_check_before_0 ? (perm(a_13.MustReleaseBounded) > none ? acc(a_13.MustReleaseBounded, write) : acc(a_13.MustReleaseUnbounded, write)) : (perm(a_13.MustReleaseBounded) > none && Measure$check(_loop_measures_0, a_13, 3) ? acc(a_13.MustReleaseBounded, write) : acc(a_13.MustReleaseUnbounded, write)))]
    invariant true
    invariant !_loop_check_before_0 ==> [true, (forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) < Level(a_13)) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) < Level(a_13)) && _residue_160 < Level(a_13))]
    invariant _loop_check_before_0 ==> [true, (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) < Level(a_13)) && ((forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) < Level(a_13)) && _residue_152 < Level(a_13))]
    invariant [true, _loop_check_before_0 ==> _loop_termination_flag_0 || (!true || perm(MustTerminate(_cthread_152)) == none && ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_0 ==> (forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false)))] 
  {
    inhale _residue_160 < Level(a_13)
    _loop_measures_0 := Seq(Measure$create(true, a_13, 3))
    fold acc(Lock_invariant(a_13), write)
    _cwl_152 := Lock_release(_cthread_152, _method_measures_152, _residue_160, a_13)
    _cwl_152 := Lock_acquire(_cthread_152, _method_measures_152, _residue_160, a_13)
    unfold acc(Lock_invariant(a_13), write)
    _cwl_152 := reAcq2(_cthread_152, _method_measures_152, _residue_160, a_13)
    label loop_end_0
    // We are after loop body._loop_check_before_0 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_0 ==> !true
  }
  inhale _residue_152 < Level(a_13)
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_152)) > none ==> acc(MustTerminate(_cthread_152), perm(MustTerminate(_cthread_152)) - _loop_original_must_terminate_0)
  label post_loop_0
  goto __end
  label __end
}

method continuous3(_cthread_153: Ref, _caller_measures_153: Seq[Measure$], _residue_153: Perm, a_6: Ref) returns (_current_wait_level_153: Perm)
  requires _cthread_153 != null
  requires issubtype(typeof(_cthread_153), Thread_0())
  requires issubtype(typeof(a_6), ObjectLock())
  requires a_6 != null
  requires [_residue_153 < Level(a_6), true]
  requires [true, (forperm _r_33: Ref [_r_33.MustReleaseBounded] :: Level(_r_33) < Level(a_6)) && ((forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: Level(_r_33) < Level(a_6)) && _residue_153 < Level(a_6))]
  requires [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_153) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]
  ensures [true, (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_14: Ref
  var _loop_measures_1: Seq[Measure$]
  var _loop_check_before_1: Bool
  var _loop_termination_flag_1: Bool
  var _loop_original_must_terminate_1: Perm
  var _residue_161: Perm
  var _cwl_153: Perm
  var _method_measures_153: Seq[Measure$]
  _method_measures_153 := Seq[Measure$]()
  _err := null
  a_14 := a_6
  _cwl_153 := acq(_cthread_153, _method_measures_153, _residue_153, a_14)
  // Save current MustTerminate amount._loop_original_must_terminate_1 := perm(MustTerminate(_cthread_153))
  // Save loop termination promise._loop_termination_flag_1 := false
  // We are before loop._loop_check_before_1 := true
  while (true)
    invariant [(forperm _r_36: Ref [_r_36.MustReleaseBounded] :: Level(_r_36) <= _residue_161) && ((forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: Level(_r_36) <= _residue_161) && _residue_153 <= _residue_161), true]
    invariant true
    invariant [acc(a_14.MustReleaseBounded, write), (_loop_check_before_1 ? (perm(a_14.MustReleaseBounded) > none ? acc(a_14.MustReleaseBounded, write) : acc(a_14.MustReleaseUnbounded, write)) : (perm(a_14.MustReleaseBounded) > none && Measure$check(_loop_measures_1, a_14, 3) ? acc(a_14.MustReleaseBounded, write) : acc(a_14.MustReleaseUnbounded, write)))]
    invariant true
    invariant !_loop_check_before_1 ==> [true, (forperm _r_34: Ref [_r_34.MustReleaseBounded] :: Level(_r_34) < Level(a_14)) && ((forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: Level(_r_34) < Level(a_14)) && _residue_161 < Level(a_14))]
    invariant _loop_check_before_1 ==> [true, (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) < Level(a_14)) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) < Level(a_14)) && _residue_153 < Level(a_14))]
    invariant [true, _loop_check_before_1 ==> _loop_termination_flag_1 || (!true || perm(MustTerminate(_cthread_153)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_1 ==> (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)))] 
  {
    inhale _residue_161 < Level(a_14)
    _loop_measures_1 := Seq(Measure$create(true, a_14, 3))
    fold acc(Lock_invariant(a_14), write)
    _cwl_153 := Lock_release(_cthread_153, _method_measures_153, _residue_161, a_14)
    _cwl_153 := Lock_acquire(_cthread_153, _method_measures_153, _residue_161, a_14)
    unfold acc(Lock_invariant(a_14), write)
    _cwl_153 := reAcq3(_cthread_153, _method_measures_153, _residue_161, a_14)
    label loop_end_1
    // We are after loop body._loop_check_before_1 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_1 ==> !true
  }
  inhale _residue_153 < Level(a_14)
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_153)) > none ==> acc(MustTerminate(_cthread_153), perm(MustTerminate(_cthread_153)) - _loop_original_must_terminate_1)
  label post_loop_1
  goto __end
  label __end
}

method Lock___init__(_cthread_155: Ref, _caller_measures_155: Seq[Measure$], _residue_155: Perm, self_1: Ref, locked_object: Ref, above: Ref, below: Ref) returns (_current_wait_level_155: Perm)
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires self_1 != null
  requires issubtype(typeof(self_1), Lock(Lock_arg(typeof(self_1), 0)))
  requires issubtype(typeof(locked_object), Lock_arg(typeof(self_1), 0))
  requires above == null || issubtype(typeof(above), BaseLock())
  requires below == null || issubtype(typeof(below), BaseLock())
  requires issubtype(Lock_arg(typeof(self_1), 0), object())
  requires self_1 != null
  requires [acc(MustTerminate(_cthread_155), write), true]
  requires above == null && below != null ==> [_residue_155 < Level(below), true]
  requires above != null && below != null ==> Level(above) < Level(below)
  requires acc(Lock_invariant(self_1), write)
  requires [true, above == null && below != null ==> (forperm _r_41: Ref [_r_41.MustReleaseBounded] :: Level(_r_41) < Level(below)) && ((forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: Level(_r_41) < Level(below)) && _residue_155 < Level(below))]
  requires [true, Measure$check(_caller_measures_155, _cthread_155, 1) || perm(MustTerminate(_cthread_155)) == none && ((forperm _r_44: Ref [MustInvokeBounded(_r_44)] :: false) && ((forperm _r_44: Ref [MustInvokeUnbounded(_r_44)] :: false) && ((forperm _r_44: Ref [_r_44.MustReleaseBounded] :: false) && (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_43: Ref [_r_43.MustReleaseBounded] :: Level(_r_43) <= _current_wait_level_155) && ((forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: Level(_r_43) <= _current_wait_level_155) && _residue_155 <= _current_wait_level_155), true]
  ensures above == null ==> [_current_wait_level_155 < Level(self_1), true]
  ensures above != null ==> Level(above) < Level(self_1)
  ensures below != null ==> Level(self_1) < Level(below)
{
  var _cwl_155: Perm
  inhale typeof(self_1) == Lock(Lock_arg(typeof(self_1), 0))
  inhale false
}

method Lock_acquire(_cthread_156: Ref, _caller_measures_156: Seq[Measure$], _residue_156: Perm, self_2: Ref) returns (_current_wait_level_156: Perm)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires issubtype(typeof(self_2), Lock(Lock_arg(typeof(self_2), 0)))
  requires issubtype(Lock_arg(typeof(self_2), 0), object())
  requires self_2 != null
  requires [acc(MustTerminate(_cthread_156), write), true]
  requires [_residue_156 < Level(self_2), true]
  requires true
  requires true
  requires [true, (forperm _r_45: Ref [_r_45.MustReleaseBounded] :: Level(_r_45) < Level(self_2)) && ((forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: Level(_r_45) < Level(self_2)) && _residue_156 < Level(self_2))]
  requires [true, Measure$check(_caller_measures_156, _cthread_156, 1) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_47: Ref [MustInvokeBounded(_r_47)] :: false) && ((forperm _r_47: Ref [MustInvokeUnbounded(_r_47)] :: false) && ((forperm _r_47: Ref [_r_47.MustReleaseBounded] :: false) && (forperm _r_47: Ref [_r_47.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_46: Ref [_r_46.MustReleaseBounded] :: Level(_r_46) <= _current_wait_level_156) && ((forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: Level(_r_46) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]
  ensures acc(Lock_invariant(self_2), write)
  ensures [acc(self_2.MustReleaseUnbounded, write), acc(self_2.MustReleaseUnbounded, write)]
{
  var _cwl_156: Perm
  inhale typeof(self_2) == Lock(Lock_arg(typeof(self_2), 0))
  inhale false
}

method Lock_release(_cthread_157: Ref, _caller_measures_157: Seq[Measure$], _residue_157: Perm, self_3: Ref) returns (_current_wait_level_157: Perm)
  requires _cthread_157 != null
  requires issubtype(typeof(_cthread_157), Thread_0())
  requires issubtype(typeof(self_3), Lock(Lock_arg(typeof(self_3), 0)))
  requires issubtype(Lock_arg(typeof(self_3), 0), object())
  requires self_3 != null
  requires [acc(MustTerminate(_cthread_157), write), true]
  requires [acc(self_3.MustReleaseBounded, write), (perm(self_3.MustReleaseBounded) > none && Measure$check(_caller_measures_157, self_3, 1) ? acc(self_3.MustReleaseBounded, write) : acc(self_3.MustReleaseUnbounded, write))]
  requires acc(Lock_invariant(self_3), write)
  requires true
  requires true
  requires [true, Measure$check(_caller_measures_157, _cthread_157, 1) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_49: Ref [MustInvokeBounded(_r_49)] :: false) && ((forperm _r_49: Ref [MustInvokeUnbounded(_r_49)] :: false) && ((forperm _r_49: Ref [_r_49.MustReleaseBounded] :: false) && (forperm _r_49: Ref [_r_49.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_48: Ref [_r_48.MustReleaseBounded] :: Level(_r_48) <= _current_wait_level_157) && ((forperm _r_48: Ref [_r_48.MustReleaseUnbounded] :: Level(_r_48) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]
{
  var _cwl_157: Perm
  inhale typeof(self_3) == Lock(Lock_arg(typeof(self_3), 0))
  inhale false
}

method main(_cthread_159: Ref, _caller_measures_159: Seq[Measure$], _residue_162: Perm) returns (_current_wait_level_159: Perm)
  requires _cthread_159 != null
  requires issubtype(typeof(_cthread_159), Thread_0())
  requires [true, perm(MustTerminate(_cthread_159)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_50: Ref [_r_50.MustReleaseBounded] :: Level(_r_50) <= _current_wait_level_159) && ((forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: Level(_r_50) <= _current_wait_level_159) && _residue_162 <= _current_wait_level_159), true]
  ensures [true, (forperm _r_51: Ref [MustInvokeBounded(_r_51)] :: false) && ((forperm _r_51: Ref [MustInvokeUnbounded(_r_51)] :: false) && ((forperm _r_51: Ref [_r_51.MustReleaseBounded] :: false) && (forperm _r_51: Ref [_r_51.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var module_defined_1: Bool
  var module_names_1: Set[_Name]
  var _cwl_159: Perm
  var _method_measures_159: Seq[Measure$]
  _method_measures_159 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_defined_1 := false
  module_names_1 := Set[_Name]()
  module_names_1 := (module_names_1 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file___0()._val, 99 / 100) && issubtype(typeof(__file___0()._val), str()) && issubtype(typeof(__file___0()._val), str())
  module_names_1 := (module_names_1 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name___0()._val, 99 / 100) && issubtype(typeof(__name___0()._val), str()) && issubtype(typeof(__name___0()._val), str()) && !str___eq__(str___create__(8, 2489249333222104298408468319), __name___0()._val)
  module_names_0 := (module_names_0 union Set(_single(3655284702854286527)))
  module_names_0 := (module_names_0 union Set(_single(4264095844347449787)))
  module_names_0 := (module_names_0 union Set(_single(4814323939045640847723228745)))
  module_names_0 := (module_names_0 union Set(_single(5969745018335918569738826320)))
  module_names_0 := (module_names_0 union Set(_single(7136376649266381199951095122)))
  module_names_0 := (module_names_0 union Set(_single(4659879962334230944322642242)))
  if (!module_defined_1) {
    module_defined_1 := true
    module_names_1 := (module_names_1 union Set(_single(3682427259782798009)))
    module_names_1 := (module_names_1 union Set(_single(5123216512802524336881954895)))
    module_names_1 := (module_names_1 union Set(_single(3686932966091490988)))
    module_names_1 := (module_names_1 union Set(_single(11116006324067352974226974112924930237)))
    module_names_1 := (module_names_1 union Set(_single(4264095844347449787)))
    module_names_1 := (module_names_1 union Set(_single(3939413879042314935)))
    module_names_1 := (module_names_1 union Set(_single(7827276)))
    module_names_1 := (module_names_1 union Set(_single(3584533797388877637428408140)))
    module_names_1 := (module_names_1 union Set(_single(5969745018335918569738826320)))
    module_names_1 := (module_names_1 union Set(_single(1701999952)))
    module_names_1 := (module_names_1 union Set(_single(7136376649266381199951095122)))
    module_names_1 := (module_names_1 union Set(_single(4659879962334230944322642242)))
    module_names_1 := (module_names_1 union Set(_single(3655571673241459380)))
    module_names_1 := (module_names_1 union Set(_single(5020080360567004017642927437)))
    module_names_1 := (module_names_1 union Set(_single(5460990052674857173734662115181759155)))
    module_names_1 := (module_names_1 union Set(_single(4900434677047853433511043415)))
    assert true && (_single(4659879962334230944322642242) in module_names_1) && (_single(4659879962334230944322642242) in module_names_1)
    assert true && (_single(4659879962334230944322642242) in module_names_1)
    module_names_1 := (module_names_1 union Set(_single(3493880855485680332086796127)))
    module_names_1 := (module_names_1 union Set(_single(4196433967405385533277627751)))
    module_names_1 := (module_names_1 union Set(_single(4259881987508968607)))
    module_names_1 := (module_names_1 union Set(_single(3682719749203270286)))
    module_names_1 := (module_names_1 union Set(_single(1801678668)))
  }
  assert (_single(1801678668) in module_names_1)
  module_names_0 := (module_names_0 union Set(_single(1801678668)))
  assert true
  assert true && (_single(1801678668) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(5262747629716623330057544271)))
  assert true && (_single(5262747629716623330057544271) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(3576055095436941966)))
  assert true && (_single(5262747629716623330057544271) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(3576110071018330766)))
  assert true && (_single(5262747629716623330057544271) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(3576111170529958542)))
  assert true && (_single(5262747629716623330057544271) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(3576112270041586318)))
  assert true && (_single(5262747629716623330057544271) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(7431009)))
  assert true && (_single(5262747629716623330057544271) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(6508585124874790193094094691)))
  assert true && (_single(5262747629716623330057544271) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(6509794050694404822268800867)))
  assert true && (_single(5262747629716623330057544271) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(6511002976514019451443507043)))
  goto __end
  label __end
}