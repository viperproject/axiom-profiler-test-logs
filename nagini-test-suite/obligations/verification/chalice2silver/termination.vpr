domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function over_in_one_threading(): ThreadingID
  
  unique function some_time_threading(): ThreadingID
  
  unique function i_time_threading(): ThreadingID
  
  unique function no_time_threading(): ThreadingID
  
  unique function f1_threading(): ThreadingID
  
  unique function f2_threading(): ThreadingID
  
  unique function f3_threading(): ThreadingID
  
  unique function f3_a_threading(): ThreadingID
  
  unique function non_terminating_call_threading(): ThreadingID
  
  unique function f4_threading(): ThreadingID
  
  unique function loop1_threading(): ThreadingID
  
  unique function loop2_threading(): ThreadingID
  
  unique function loop3_threading(): ThreadingID
  
  unique function loop3_a_threading(): ThreadingID
  
  unique function loop4_threading(): ThreadingID
  
  unique function hidden_obligation_threading(): ThreadingID
  
  unique function hidden_obligation_ok_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function int___ge__(self: Int, other: Int): Bool 
{
  self >= other
}

function int___gt__(self: Int, other: Int): Bool 
{
  self > other
}

function int___le__(self: Int, other: Int): Bool 
{
  self <= other
}

function int___lt__(self: Int, other: Int): Bool 
{
  self < other
}

function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function int___sub__(self: Int, other: Int): Int 
{
  self - other
}

function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

method over_in_one(_cthread_145: Ref, _caller_measures_145: Seq[Measure$], _residue_145: Perm) returns (_current_wait_level_145: Perm)
  requires _cthread_145 != null
  requires issubtype(typeof(_cthread_145), Thread_0())
  requires [acc(MustTerminate(_cthread_145), write), true]
  requires [true, Measure$check(_caller_measures_145, _cthread_145, 1) || perm(MustTerminate(_cthread_145)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_145) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var _cwl_145: Perm
  var _method_measures_145: Seq[Measure$]
  _method_measures_145 := Seq(Measure$create(true, _cthread_145, 1))
  _err := null
  goto __end
  label __end
}

method some_time(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm) returns (_current_wait_level_146: Perm)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires [acc(MustTerminate(_cthread_146), write), true]
  requires [true, Measure$check(_caller_measures_146, _cthread_146, 10) || perm(MustTerminate(_cthread_146)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_146) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq(Measure$create(true, _cthread_146, 10))
  _err := null
  goto __end
  label __end
}

method i_time(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, i: Ref) returns (_current_wait_level_147: Perm)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires issubtype(typeof(i), int())
  requires int___gt__(int___unbox__(i), 0)
  requires int___unbox__(i) > 0 && [acc(MustTerminate(_cthread_147), write), true]
  requires [true, Measure$check(_caller_measures_147, _cthread_147, int___unbox__(i)) || perm(MustTerminate(_cthread_147)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_147) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var i_9: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq(Measure$create(true, _cthread_147, int___unbox__(i)))
  _err := null
  i_9 := i
  goto __end
  label __end
}

method no_time(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm) returns (_current_wait_level_148: Perm)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_148) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures [true, (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq[Measure$]()
  _err := null
  goto __end
  label __end
}

method f1(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm) returns (_current_wait_level_149: Perm)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires [acc(MustTerminate(_cthread_149), write), true]
  requires [true, Measure$check(_caller_measures_149, _cthread_149, 1) || perm(MustTerminate(_cthread_149)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_149) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq(Measure$create(true, _cthread_149, 1))
  _err := null
  _cwl_149 := over_in_one(_cthread_149, _method_measures_149, _residue_149)
  goto __end
  label __end
}

method f2(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm) returns (_current_wait_level_150: Perm)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires [acc(MustTerminate(_cthread_150), write), true]
  requires [true, Measure$check(_caller_measures_150, _cthread_150, 2) || perm(MustTerminate(_cthread_150)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_150) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq(Measure$create(true, _cthread_150, 2))
  _err := null
  _cwl_150 := over_in_one(_cthread_150, _method_measures_150, _residue_150)
  _cwl_150 := i_time(_cthread_150, _method_measures_150, _residue_150, __prim__int___box__(1))
  goto __end
  label __end
}

method f3(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_151: Perm, n: Ref) returns (_current_wait_level_151: Perm)
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires issubtype(typeof(n), int())
  requires int___gt__(int___unbox__(n), 1)
  requires int___unbox__(n) > 0 && [acc(MustTerminate(_cthread_151), write), true]
  requires [true, Measure$check(_caller_measures_151, _cthread_151, int___unbox__(n)) || perm(MustTerminate(_cthread_151)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _current_wait_level_151) && ((forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]
  ensures [true, (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var i_0: Ref
  var n_8: Ref
  var _loop_measures: Seq[Measure$]
  var _loop_check_before: Bool
  var _loop_termination_flag: Bool
  var _loop_original_must_terminate: Perm
  var _residue_162: Perm
  var _cwl_151: Perm
  var _method_measures_151: Seq[Measure$]
  _method_measures_151 := Seq(Measure$create(true, _cthread_151, int___unbox__(n)))
  _err := null
  n_8 := n
  i_0 := __prim__int___box__(0)
  inhale _isDefined(3170153)
  // Save current MustTerminate amount._loop_original_must_terminate := perm(MustTerminate(_cthread_151))
  // Save loop termination promise._loop_termination_flag := true
  // We are before loop._loop_check_before := true
  while (int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), int___unbox__(n_8)))
    invariant [(forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _residue_162) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _residue_162) && _residue_151 <= _residue_162), true]
    invariant true
    invariant (int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), int___unbox__(n_8)) ==> int___sub__(int___unbox__(n_8), int___unbox__(_checkDefined(i_0, 3170153))) > 0) && [acc(MustTerminate(_cthread_151), write), true]
    invariant [true, _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), int___unbox__(n_8)) || perm(MustTerminate(_cthread_151)) == none && ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before ==> (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures := Seq(Measure$create(true, _cthread_151, int___sub__(int___unbox__(n_8), int___unbox__(_checkDefined(i_0, 3170153)))))
    _cwl_151 := over_in_one(_cthread_151, _method_measures_151, _residue_162)
    label loop_end
    // We are after loop body._loop_check_before := false
    // Check if loop continues to terminate.assert _loop_termination_flag ==> !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), int___unbox__(n_8)) || Measure$check(_loop_measures, _cthread_151, int___sub__(int___unbox__(n_8), int___unbox__(_checkDefined(i_0, 3170153))))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_151)) > none ==> acc(MustTerminate(_cthread_151), perm(MustTerminate(_cthread_151)) - _loop_original_must_terminate)
  label post_loop
  goto __end
  label __end
}

method f3_a(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm, n_0: Ref) returns (_current_wait_level_152: Perm)
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires issubtype(typeof(n_0), int())
  requires int___gt__(int___unbox__(n_0), 1)
  requires int___unbox__(n_0) > 0 && [acc(MustTerminate(_cthread_152), write), true]
  requires [true, Measure$check(_caller_measures_152, _cthread_152, int___unbox__(n_0)) || perm(MustTerminate(_cthread_152)) == none && ((forperm _r_26: Ref [MustInvokeBounded(_r_26)] :: false) && ((forperm _r_26: Ref [MustInvokeUnbounded(_r_26)] :: false) && ((forperm _r_26: Ref [_r_26.MustReleaseBounded] :: false) && (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_24: Ref [_r_24.MustReleaseBounded] :: Level(_r_24) <= _current_wait_level_152) && ((forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: Level(_r_24) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures [true, (forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var i_1: Ref
  var n_9: Ref
  var _loop_measures_0: Seq[Measure$]
  var _loop_check_before_0: Bool
  var _loop_termination_flag_0: Bool
  var _loop_original_must_terminate_0: Perm
  var _residue_163: Perm
  var _cwl_152: Perm
  var _method_measures_152: Seq[Measure$]
  _method_measures_152 := Seq(Measure$create(true, _cthread_152, int___unbox__(n_0)))
  _err := null
  n_9 := n_0
  i_1 := __prim__int___box__(0)
  inhale _isDefined(3235689)
  // Save current MustTerminate amount._loop_original_must_terminate_0 := perm(MustTerminate(_cthread_152))
  // Save loop termination promise._loop_termination_flag_0 := true
  // We are before loop._loop_check_before_0 := true
  while (int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), int___unbox__(n_9)))
    invariant [(forperm _r_22: Ref [_r_22.MustReleaseBounded] :: Level(_r_22) <= _residue_163) && ((forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: Level(_r_22) <= _residue_163) && _residue_152 <= _residue_163), true]
    invariant true
    invariant issubtype(typeof(i_1), int())
    invariant (int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), int___unbox__(n_9)) ==> int___sub__(int___unbox__(n_9), int___unbox__(_checkDefined(i_1, 3235689))) > 0) && [acc(MustTerminate(_cthread_152), write), true]
    invariant int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
    invariant [true, _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), int___unbox__(n_9)) || perm(MustTerminate(_cthread_152)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_0 ==> (forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_0 := Seq(Measure$create(true, _cthread_152, int___sub__(int___unbox__(n_9), int___unbox__(_checkDefined(i_1, 3235689)))))
    _cwl_152 := over_in_one(_cthread_152, _method_measures_152, _residue_163)
    if (int___gt__(int___sub__(int___sub__(int___unbox__(n_9), int___unbox__(_checkDefined(i_1, 3235689))), 1), 0)) {
      _cwl_152 := i_time(_cthread_152, _method_measures_152, _residue_163, __prim__int___box__(int___sub__(int___sub__(int___unbox__(n_9), int___unbox__(_checkDefined(i_1, 3235689))), 1)))
    }
    i_1 := __prim__int___box__(int___add__(int___unbox__(i_1), 1))
    inhale _isDefined(3235689)
    label loop_end_0
    // We are after loop body._loop_check_before_0 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_0 ==> !int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), int___unbox__(n_9)) || Measure$check(_loop_measures_0, _cthread_152, int___sub__(int___unbox__(n_9), int___unbox__(_checkDefined(i_1, 3235689))))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_152)) > none ==> acc(MustTerminate(_cthread_152), perm(MustTerminate(_cthread_152)) - _loop_original_must_terminate_0)
  label post_loop_0
  goto __end
  label __end
}

method non_terminating_call(_cthread_153: Ref, _caller_measures_153: Seq[Measure$], _residue_153: Perm) returns (_current_wait_level_153: Perm)
  requires _cthread_153 != null
  requires issubtype(typeof(_cthread_153), Thread_0())
  requires [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_153) && ((forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]
  ensures [true, (forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var _cwl_153: Perm
  var _method_measures_153: Seq[Measure$]
  _method_measures_153 := Seq[Measure$]()
  _err := null
  _cwl_153 := over_in_one(_cthread_153, _method_measures_153, _residue_153)
  _cwl_153 := i_time(_cthread_153, _method_measures_153, _residue_153, __prim__int___box__(5))
  _cwl_153 := no_time(_cthread_153, _method_measures_153, _residue_153)
  goto __end
  label __end
}

method f4(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm) returns (_current_wait_level_154: Perm)
  requires _cthread_154 != null
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires [acc(MustTerminate(_cthread_154), write), true]
  requires [true, Measure$check(_caller_measures_154, _cthread_154, 10) || perm(MustTerminate(_cthread_154)) == none && ((forperm _r_32: Ref [MustInvokeBounded(_r_32)] :: false) && ((forperm _r_32: Ref [MustInvokeUnbounded(_r_32)] :: false) && ((forperm _r_32: Ref [_r_32.MustReleaseBounded] :: false) && (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_30: Ref [_r_30.MustReleaseBounded] :: Level(_r_30) <= _current_wait_level_154) && ((forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: Level(_r_30) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]
  ensures [true, (forperm _r_31: Ref [MustInvokeBounded(_r_31)] :: false) && ((forperm _r_31: Ref [MustInvokeUnbounded(_r_31)] :: false) && ((forperm _r_31: Ref [_r_31.MustReleaseBounded] :: false) && (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var _cwl_154: Perm
  var _method_measures_154: Seq[Measure$]
  _method_measures_154 := Seq(Measure$create(true, _cthread_154, 10))
  _err := null
  _cwl_154 := i_time(_cthread_154, _method_measures_154, _residue_154, __prim__int___box__(9))
  _cwl_154 := i_time(_cthread_154, _method_measures_154, _residue_154, __prim__int___box__(7))
  _cwl_154 := i_time(_cthread_154, _method_measures_154, _residue_154, __prim__int___box__(8))
  _cwl_154 := i_time(_cthread_154, _method_measures_154, _residue_154, __prim__int___box__(10))
  goto __end
  label __end
}

method loop1(_cthread_155: Ref, _caller_measures_155: Seq[Measure$], _residue_155: Perm) returns (_current_wait_level_155: Perm)
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires [acc(MustTerminate(_cthread_155), write), true]
  requires [true, Measure$check(_caller_measures_155, _cthread_155, 2) || perm(MustTerminate(_cthread_155)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_155) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_155) && _residue_155 <= _current_wait_level_155), true]
  ensures [true, (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var i_2: Ref
  var n_1: Ref
  var _loop_measures_1: Seq[Measure$]
  var _loop_check_before_1: Bool
  var _loop_termination_flag_1: Bool
  var _loop_original_must_terminate_1: Perm
  var _residue_164: Perm
  var _cwl_155: Perm
  var _method_measures_155: Seq[Measure$]
  _method_measures_155 := Seq(Measure$create(true, _cthread_155, 2))
  _err := null
  i_2 := __prim__int___box__(0)
  inhale _isDefined(3301225)
  n_1 := __prim__int___box__(10)
  inhale _isDefined(3235694)
  // Save current MustTerminate amount._loop_original_must_terminate_1 := perm(MustTerminate(_cthread_155))
  // Save loop termination promise._loop_termination_flag_1 := false
  // We are before loop._loop_check_before_1 := true
  while (int___lt__(int___unbox__(_checkDefined(i_2, 3301225)), int___unbox__(_checkDefined(n_1, 3235694))))
    invariant [(forperm _r_33: Ref [_r_33.MustReleaseBounded] :: Level(_r_33) <= _residue_164) && ((forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: Level(_r_33) <= _residue_164) && _residue_155 <= _residue_164), true]
    invariant true
    invariant [true, _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(_checkDefined(i_2, 3301225)), int___unbox__(_checkDefined(n_1, 3235694))) || perm(MustTerminate(_cthread_155)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_1 ==> (forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_1 := Seq[Measure$]()
    label loop_end_1
    // We are after loop body._loop_check_before_1 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_1 ==> !int___lt__(int___unbox__(_checkDefined(i_2, 3301225)), int___unbox__(_checkDefined(n_1, 3235694)))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_155)) > none ==> acc(MustTerminate(_cthread_155), perm(MustTerminate(_cthread_155)) - _loop_original_must_terminate_1)
  label post_loop_1
  goto __end
  label __end
}

method loop2(_cthread_156: Ref, _caller_measures_156: Seq[Measure$], _residue_156: Perm) returns (_current_wait_level_156: Perm)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires [acc(MustTerminate(_cthread_156), write), true]
  requires [true, Measure$check(_caller_measures_156, _cthread_156, 2) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_42: Ref [MustInvokeBounded(_r_42)] :: false) && ((forperm _r_42: Ref [MustInvokeUnbounded(_r_42)] :: false) && ((forperm _r_42: Ref [_r_42.MustReleaseBounded] :: false) && (forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_40: Ref [_r_40.MustReleaseBounded] :: Level(_r_40) <= _current_wait_level_156) && ((forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: Level(_r_40) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]
  ensures [true, (forperm _r_41: Ref [MustInvokeBounded(_r_41)] :: false) && ((forperm _r_41: Ref [MustInvokeUnbounded(_r_41)] :: false) && ((forperm _r_41: Ref [_r_41.MustReleaseBounded] :: false) && (forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var i_3: Ref
  var n_2: Ref
  var _loop_measures_2: Seq[Measure$]
  var _loop_check_before_2: Bool
  var _loop_termination_flag_2: Bool
  var _loop_original_must_terminate_2: Perm
  var _residue_165: Perm
  var _cwl_156: Perm
  var _method_measures_156: Seq[Measure$]
  _method_measures_156 := Seq(Measure$create(true, _cthread_156, 2))
  _err := null
  i_3 := __prim__int___box__(0)
  inhale _isDefined(3366761)
  n_2 := __prim__int___box__(10)
  inhale _isDefined(3301230)
  // Save current MustTerminate amount._loop_original_must_terminate_2 := perm(MustTerminate(_cthread_156))
  // Save loop termination promise._loop_termination_flag_2 := true
  // We are before loop._loop_check_before_2 := true
  while (int___lt__(int___unbox__(_checkDefined(i_3, 3366761)), int___unbox__(_checkDefined(n_2, 3301230))))
    invariant [(forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _residue_165) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _residue_165) && _residue_156 <= _residue_165), true]
    invariant true
    invariant issubtype(typeof(i_3), int())
    invariant (int___lt__(int___unbox__(_checkDefined(i_3, 3366761)), int___unbox__(_checkDefined(n_2, 3301230))) ==> int___add__(int___sub__(int___unbox__(_checkDefined(n_2, 3301230)), int___unbox__(_checkDefined(i_3, 3366761))), 1) > 0) && [acc(MustTerminate(_cthread_156), write), true]
    invariant [true, _loop_check_before_2 ==> _loop_termination_flag_2 || (!int___lt__(int___unbox__(_checkDefined(i_3, 3366761)), int___unbox__(_checkDefined(n_2, 3301230))) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_2 ==> (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_2 := Seq(Measure$create(true, _cthread_156, int___add__(int___sub__(int___unbox__(_checkDefined(n_2, 3301230)), int___unbox__(_checkDefined(i_3, 3366761))), 1)))
    if (int___eq__(_checkDefined(i_3, 3366761), __prim__int___box__(2))) {
      i_3 := __prim__int___box__(int___sub__(int___unbox__(_checkDefined(i_3, 3366761)), 1))
      inhale _isDefined(3366761)
    }
    i_3 := __prim__int___box__(int___add__(int___unbox__(_checkDefined(i_3, 3366761)), 1))
    inhale _isDefined(3366761)
    label loop_end_2
    // We are after loop body._loop_check_before_2 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_2 ==> !int___lt__(int___unbox__(_checkDefined(i_3, 3366761)), int___unbox__(_checkDefined(n_2, 3301230))) || Measure$check(_loop_measures_2, _cthread_156, int___add__(int___sub__(int___unbox__(_checkDefined(n_2, 3301230)), int___unbox__(_checkDefined(i_3, 3366761))), 1))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_156)) > none ==> acc(MustTerminate(_cthread_156), perm(MustTerminate(_cthread_156)) - _loop_original_must_terminate_2)
  label post_loop_2
  goto __end
  label __end
}

method loop3(_cthread_157: Ref, _caller_measures_157: Seq[Measure$], _residue_157: Perm) returns (_current_wait_level_157: Perm)
  requires _cthread_157 != null
  requires issubtype(typeof(_cthread_157), Thread_0())
  requires [acc(MustTerminate(_cthread_157), write), true]
  requires [true, Measure$check(_caller_measures_157, _cthread_157, 2) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_47: Ref [MustInvokeBounded(_r_47)] :: false) && ((forperm _r_47: Ref [MustInvokeUnbounded(_r_47)] :: false) && ((forperm _r_47: Ref [_r_47.MustReleaseBounded] :: false) && (forperm _r_47: Ref [_r_47.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_45: Ref [_r_45.MustReleaseBounded] :: Level(_r_45) <= _current_wait_level_157) && ((forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: Level(_r_45) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]
  ensures [true, (forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var i_4: Ref
  var n_3: Ref
  var _loop_measures_3: Seq[Measure$]
  var _loop_check_before_3: Bool
  var _loop_termination_flag_3: Bool
  var _loop_original_must_terminate_3: Perm
  var _residue_166: Perm
  var _cwl_157: Perm
  var _method_measures_157: Seq[Measure$]
  _method_measures_157 := Seq(Measure$create(true, _cthread_157, 2))
  _err := null
  i_4 := __prim__int___box__(0)
  inhale _isDefined(3432297)
  n_3 := __prim__int___box__(10)
  inhale _isDefined(3366766)
  // Save current MustTerminate amount._loop_original_must_terminate_3 := perm(MustTerminate(_cthread_157))
  // Save loop termination promise._loop_termination_flag_3 := true
  // We are before loop._loop_check_before_3 := true
  while (int___lt__(int___unbox__(_checkDefined(i_4, 3432297)), int___unbox__(_checkDefined(n_3, 3366766))))
    invariant [(forperm _r_43: Ref [_r_43.MustReleaseBounded] :: Level(_r_43) <= _residue_166) && ((forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: Level(_r_43) <= _residue_166) && _residue_157 <= _residue_166), true]
    invariant true
    invariant issubtype(typeof(i_4), int())
    invariant (int___lt__(int___unbox__(_checkDefined(i_4, 3432297)), int___unbox__(_checkDefined(n_3, 3366766))) ==> int___add__(int___sub__(int___unbox__(_checkDefined(n_3, 3366766)), int___unbox__(_checkDefined(i_4, 3432297))), 1) > 0) && [acc(MustTerminate(_cthread_157), write), true]
    invariant [true, _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(i_4, 3432297)), int___unbox__(_checkDefined(n_3, 3366766))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_44: Ref [MustInvokeBounded(_r_44)] :: false) && ((forperm _r_44: Ref [MustInvokeUnbounded(_r_44)] :: false) && ((forperm _r_44: Ref [_r_44.MustReleaseBounded] :: false) && (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_3 ==> (forperm _r_44: Ref [MustInvokeBounded(_r_44)] :: false) && ((forperm _r_44: Ref [MustInvokeUnbounded(_r_44)] :: false) && ((forperm _r_44: Ref [_r_44.MustReleaseBounded] :: false) && (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_3 := Seq(Measure$create(true, _cthread_157, int___add__(int___sub__(int___unbox__(_checkDefined(n_3, 3366766)), int___unbox__(_checkDefined(i_4, 3432297))), 1)))
    _cwl_157 := i_time(_cthread_157, _method_measures_157, _residue_166, _checkDefined(i_4, 3432297))
    i_4 := __prim__int___box__(int___add__(int___unbox__(_checkDefined(i_4, 3432297)), 1))
    inhale _isDefined(3432297)
    label loop_end_3
    // We are after loop body._loop_check_before_3 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_3 ==> !int___lt__(int___unbox__(_checkDefined(i_4, 3432297)), int___unbox__(_checkDefined(n_3, 3366766))) || Measure$check(_loop_measures_3, _cthread_157, int___add__(int___sub__(int___unbox__(_checkDefined(n_3, 3366766)), int___unbox__(_checkDefined(i_4, 3432297))), 1))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_157)) > none ==> acc(MustTerminate(_cthread_157), perm(MustTerminate(_cthread_157)) - _loop_original_must_terminate_3)
  label post_loop_3
  goto __end
  label __end
}

method loop3_a(_cthread_158: Ref, _caller_measures_158: Seq[Measure$], _residue_158: Perm) returns (_current_wait_level_158: Perm)
  requires _cthread_158 != null
  requires issubtype(typeof(_cthread_158), Thread_0())
  requires [acc(MustTerminate(_cthread_158), write), true]
  requires [true, Measure$check(_caller_measures_158, _cthread_158, 2) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_50: Ref [_r_50.MustReleaseBounded] :: Level(_r_50) <= _current_wait_level_158) && ((forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: Level(_r_50) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158), true]
  ensures [true, (forperm _r_51: Ref [MustInvokeBounded(_r_51)] :: false) && ((forperm _r_51: Ref [MustInvokeUnbounded(_r_51)] :: false) && ((forperm _r_51: Ref [_r_51.MustReleaseBounded] :: false) && (forperm _r_51: Ref [_r_51.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var i_5: Ref
  var n_4: Ref
  var _loop_measures_4: Seq[Measure$]
  var _loop_check_before_4: Bool
  var _loop_termination_flag_4: Bool
  var _loop_original_must_terminate_4: Perm
  var _residue_167: Perm
  var _cwl_158: Perm
  var _method_measures_158: Seq[Measure$]
  _method_measures_158 := Seq(Measure$create(true, _cthread_158, 2))
  _err := null
  i_5 := __prim__int___box__(1)
  inhale _isDefined(3497833)
  n_4 := __prim__int___box__(10)
  inhale _isDefined(3432302)
  // Save current MustTerminate amount._loop_original_must_terminate_4 := perm(MustTerminate(_cthread_158))
  // Save loop termination promise._loop_termination_flag_4 := true
  // We are before loop._loop_check_before_4 := true
  while (int___lt__(int___unbox__(_checkDefined(i_5, 3497833)), int___unbox__(_checkDefined(n_4, 3432302))))
    invariant [(forperm _r_48: Ref [_r_48.MustReleaseBounded] :: Level(_r_48) <= _residue_167) && ((forperm _r_48: Ref [_r_48.MustReleaseUnbounded] :: Level(_r_48) <= _residue_167) && _residue_158 <= _residue_167), true]
    invariant true
    invariant issubtype(typeof(i_5), int())
    invariant (int___lt__(int___unbox__(_checkDefined(i_5, 3497833)), int___unbox__(_checkDefined(n_4, 3432302))) ==> int___add__(int___sub__(int___unbox__(_checkDefined(n_4, 3432302)), int___unbox__(_checkDefined(i_5, 3497833))), 1) > 0) && [acc(MustTerminate(_cthread_158), write), true]
    invariant int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), 0)
    invariant [true, _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(i_5, 3497833)), int___unbox__(_checkDefined(n_4, 3432302))) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_49: Ref [MustInvokeBounded(_r_49)] :: false) && ((forperm _r_49: Ref [MustInvokeUnbounded(_r_49)] :: false) && ((forperm _r_49: Ref [_r_49.MustReleaseBounded] :: false) && (forperm _r_49: Ref [_r_49.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_4 ==> (forperm _r_49: Ref [MustInvokeBounded(_r_49)] :: false) && ((forperm _r_49: Ref [MustInvokeUnbounded(_r_49)] :: false) && ((forperm _r_49: Ref [_r_49.MustReleaseBounded] :: false) && (forperm _r_49: Ref [_r_49.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_4 := Seq(Measure$create(true, _cthread_158, int___add__(int___sub__(int___unbox__(_checkDefined(n_4, 3432302)), int___unbox__(_checkDefined(i_5, 3497833))), 1)))
    _cwl_158 := i_time(_cthread_158, _method_measures_158, _residue_167, _checkDefined(i_5, 3497833))
    i_5 := __prim__int___box__(int___add__(int___unbox__(_checkDefined(i_5, 3497833)), 1))
    inhale _isDefined(3497833)
    label loop_end_4
    // We are after loop body._loop_check_before_4 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_4 ==> !int___lt__(int___unbox__(_checkDefined(i_5, 3497833)), int___unbox__(_checkDefined(n_4, 3432302))) || Measure$check(_loop_measures_4, _cthread_158, int___add__(int___sub__(int___unbox__(_checkDefined(n_4, 3432302)), int___unbox__(_checkDefined(i_5, 3497833))), 1))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_158)) > none ==> acc(MustTerminate(_cthread_158), perm(MustTerminate(_cthread_158)) - _loop_original_must_terminate_4)
  label post_loop_4
  goto __end
  label __end
}

method loop4(_cthread_159: Ref, _caller_measures_159: Seq[Measure$], _residue_159: Perm) returns (_current_wait_level_159: Perm)
  requires _cthread_159 != null
  requires issubtype(typeof(_cthread_159), Thread_0())
  requires [acc(MustTerminate(_cthread_159), write), true]
  requires [true, Measure$check(_caller_measures_159, _cthread_159, 2) || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_57: Ref [MustInvokeBounded(_r_57)] :: false) && ((forperm _r_57: Ref [MustInvokeUnbounded(_r_57)] :: false) && ((forperm _r_57: Ref [_r_57.MustReleaseBounded] :: false) && (forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_55: Ref [_r_55.MustReleaseBounded] :: Level(_r_55) <= _current_wait_level_159) && ((forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: Level(_r_55) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159), true]
  ensures [true, (forperm _r_56: Ref [MustInvokeBounded(_r_56)] :: false) && ((forperm _r_56: Ref [MustInvokeUnbounded(_r_56)] :: false) && ((forperm _r_56: Ref [_r_56.MustReleaseBounded] :: false) && (forperm _r_56: Ref [_r_56.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var i_6: Ref
  var n_5: Ref
  var _loop_measures_5: Seq[Measure$]
  var _loop_check_before_5: Bool
  var _loop_termination_flag_5: Bool
  var _loop_original_must_terminate_5: Perm
  var _residue_168: Perm
  var _cwl_159: Perm
  var _method_measures_159: Seq[Measure$]
  _method_measures_159 := Seq(Measure$create(true, _cthread_159, 2))
  _err := null
  i_6 := __prim__int___box__(0)
  inhale _isDefined(3563369)
  n_5 := __prim__int___box__(10)
  inhale _isDefined(3497838)
  // Save current MustTerminate amount._loop_original_must_terminate_5 := perm(MustTerminate(_cthread_159))
  // Save loop termination promise._loop_termination_flag_5 := true
  // We are before loop._loop_check_before_5 := true
  while (int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), int___unbox__(_checkDefined(n_5, 3497838))))
    invariant [(forperm _r_53: Ref [_r_53.MustReleaseBounded] :: Level(_r_53) <= _residue_168) && ((forperm _r_53: Ref [_r_53.MustReleaseUnbounded] :: Level(_r_53) <= _residue_168) && _residue_159 <= _residue_168), true]
    invariant true
    invariant issubtype(typeof(i_6), int())
    invariant [acc(MustTerminate(_cthread_159), write), true]
    invariant [true, _loop_check_before_5 ==> _loop_termination_flag_5 || (!int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), int___unbox__(_checkDefined(n_5, 3497838))) || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_54: Ref [MustInvokeBounded(_r_54)] :: false) && ((forperm _r_54: Ref [MustInvokeUnbounded(_r_54)] :: false) && ((forperm _r_54: Ref [_r_54.MustReleaseBounded] :: false) && (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_5 ==> (forperm _r_54: Ref [MustInvokeBounded(_r_54)] :: false) && ((forperm _r_54: Ref [MustInvokeUnbounded(_r_54)] :: false) && ((forperm _r_54: Ref [_r_54.MustReleaseBounded] :: false) && (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_5 := Seq(Measure$create(true, _cthread_159, 1))
    i_6 := __prim__int___box__(int___add__(int___unbox__(_checkDefined(i_6, 3563369)), 1))
    inhale _isDefined(3563369)
    label loop_end_5
    // We are after loop body._loop_check_before_5 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_5 ==> !int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), int___unbox__(_checkDefined(n_5, 3497838))) || Measure$check(_loop_measures_5, _cthread_159, 1)
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_159)) > none ==> acc(MustTerminate(_cthread_159), perm(MustTerminate(_cthread_159)) - _loop_original_must_terminate_5)
  label post_loop_5
  goto __end
  label __end
}

method hidden_obligation(_cthread_160: Ref, _caller_measures_160: Seq[Measure$], _residue_160: Perm) returns (_current_wait_level_160: Perm)
  requires _cthread_160 != null
  requires issubtype(typeof(_cthread_160), Thread_0())
  requires [acc(MustTerminate(_cthread_160), write), true]
  requires [true, Measure$check(_caller_measures_160, _cthread_160, 2) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_62: Ref [MustInvokeBounded(_r_62)] :: false) && ((forperm _r_62: Ref [MustInvokeUnbounded(_r_62)] :: false) && ((forperm _r_62: Ref [_r_62.MustReleaseBounded] :: false) && (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_60: Ref [_r_60.MustReleaseBounded] :: Level(_r_60) <= _current_wait_level_160) && ((forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: Level(_r_60) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160), true]
  ensures [true, (forperm _r_61: Ref [MustInvokeBounded(_r_61)] :: false) && ((forperm _r_61: Ref [MustInvokeUnbounded(_r_61)] :: false) && ((forperm _r_61: Ref [_r_61.MustReleaseBounded] :: false) && (forperm _r_61: Ref [_r_61.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var i_7: Ref
  var n_6: Ref
  var _loop_measures_6: Seq[Measure$]
  var _loop_check_before_6: Bool
  var _loop_termination_flag_6: Bool
  var _loop_original_must_terminate_6: Perm
  var _residue_169: Perm
  var _cwl_160: Perm
  var _method_measures_160: Seq[Measure$]
  _method_measures_160 := Seq(Measure$create(true, _cthread_160, 2))
  _err := null
  i_7 := __prim__int___box__(0)
  inhale _isDefined(3628905)
  n_6 := __prim__int___box__(10)
  inhale _isDefined(3563374)
  // Save current MustTerminate amount._loop_original_must_terminate_6 := perm(MustTerminate(_cthread_160))
  // Save loop termination promise._loop_termination_flag_6 := int___gt__(int___unbox__(_checkDefined(i_7, 3628905)), int___unbox__(_checkDefined(n_6, 3563374)))
  // We are before loop._loop_check_before_6 := true
  while (int___lt__(int___unbox__(_checkDefined(i_7, 3628905)), int___unbox__(_checkDefined(n_6, 3563374))))
    invariant [(forperm _r_58: Ref [_r_58.MustReleaseBounded] :: Level(_r_58) <= _residue_169) && ((forperm _r_58: Ref [_r_58.MustReleaseUnbounded] :: Level(_r_58) <= _residue_169) && _residue_160 <= _residue_169), true]
    invariant true
    invariant issubtype(typeof(i_7), int())
    invariant int___gt__(int___unbox__(_checkDefined(i_7, 3628905)), int___unbox__(_checkDefined(n_6, 3563374))) ==> (int___lt__(int___unbox__(_checkDefined(i_7, 3628905)), int___unbox__(_checkDefined(n_6, 3563374))) ==> int___sub__(int___unbox__(_checkDefined(n_6, 3563374)), int___unbox__(_checkDefined(i_7, 3628905))) > 0) && [acc(MustTerminate(_cthread_160), write), true]
    invariant [true, _loop_check_before_6 ==> _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(i_7, 3628905)), int___unbox__(_checkDefined(n_6, 3563374))) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_59: Ref [MustInvokeBounded(_r_59)] :: false) && ((forperm _r_59: Ref [MustInvokeUnbounded(_r_59)] :: false) && ((forperm _r_59: Ref [_r_59.MustReleaseBounded] :: false) && (forperm _r_59: Ref [_r_59.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_6 ==> (forperm _r_59: Ref [MustInvokeBounded(_r_59)] :: false) && ((forperm _r_59: Ref [MustInvokeUnbounded(_r_59)] :: false) && ((forperm _r_59: Ref [_r_59.MustReleaseBounded] :: false) && (forperm _r_59: Ref [_r_59.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_6 := Seq(Measure$create(int___gt__(int___unbox__(_checkDefined(i_7, 3628905)), int___unbox__(_checkDefined(n_6, 3563374))), _cthread_160, int___sub__(int___unbox__(_checkDefined(n_6, 3563374)), int___unbox__(_checkDefined(i_7, 3628905)))))
    i_7 := __prim__int___box__(int___add__(int___unbox__(_checkDefined(i_7, 3628905)), 1))
    inhale _isDefined(3628905)
    label loop_end_6
    // We are after loop body._loop_check_before_6 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_6 ==> !int___lt__(int___unbox__(_checkDefined(i_7, 3628905)), int___unbox__(_checkDefined(n_6, 3563374))) || int___gt__(int___unbox__(_checkDefined(i_7, 3628905)), int___unbox__(_checkDefined(n_6, 3563374))) && Measure$check(_loop_measures_6, _cthread_160, int___sub__(int___unbox__(_checkDefined(n_6, 3563374)), int___unbox__(_checkDefined(i_7, 3628905))))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_160)) > none ==> acc(MustTerminate(_cthread_160), perm(MustTerminate(_cthread_160)) - _loop_original_must_terminate_6)
  label post_loop_6
  goto __end
  label __end
}

method hidden_obligation_ok(_cthread_161: Ref, _caller_measures_161: Seq[Measure$], _residue_161: Perm) returns (_current_wait_level_161: Perm)
  requires _cthread_161 != null
  requires issubtype(typeof(_cthread_161), Thread_0())
  requires [acc(MustTerminate(_cthread_161), write), true]
  requires [true, Measure$check(_caller_measures_161, _cthread_161, 2) || perm(MustTerminate(_cthread_161)) == none && ((forperm _r_67: Ref [MustInvokeBounded(_r_67)] :: false) && ((forperm _r_67: Ref [MustInvokeUnbounded(_r_67)] :: false) && ((forperm _r_67: Ref [_r_67.MustReleaseBounded] :: false) && (forperm _r_67: Ref [_r_67.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_65: Ref [_r_65.MustReleaseBounded] :: Level(_r_65) <= _current_wait_level_161) && ((forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: Level(_r_65) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161), true]
  ensures [true, (forperm _r_66: Ref [MustInvokeBounded(_r_66)] :: false) && ((forperm _r_66: Ref [MustInvokeUnbounded(_r_66)] :: false) && ((forperm _r_66: Ref [_r_66.MustReleaseBounded] :: false) && (forperm _r_66: Ref [_r_66.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var i_8: Ref
  var n_7: Ref
  var _loop_measures_7: Seq[Measure$]
  var _loop_check_before_7: Bool
  var _loop_termination_flag_7: Bool
  var _loop_original_must_terminate_7: Perm
  var _residue_170: Perm
  var _cwl_161: Perm
  var _method_measures_161: Seq[Measure$]
  _method_measures_161 := Seq(Measure$create(true, _cthread_161, 2))
  _err := null
  i_8 := __prim__int___box__(0)
  inhale _isDefined(3694441)
  n_7 := __prim__int___box__(10)
  inhale _isDefined(3628910)
  // Save current MustTerminate amount._loop_original_must_terminate_7 := perm(MustTerminate(_cthread_161))
  // Save loop termination promise._loop_termination_flag_7 := int___gt__(int___unbox__(_checkDefined(i_8, 3694441)), int___unbox__(_checkDefined(n_7, 3628910))) || (false || int___le__(int___unbox__(_checkDefined(i_8, 3694441)), int___unbox__(_checkDefined(n_7, 3628910))))
  // We are before loop._loop_check_before_7 := true
  while (int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), int___unbox__(_checkDefined(n_7, 3628910))))
    invariant [(forperm _r_63: Ref [_r_63.MustReleaseBounded] :: Level(_r_63) <= _residue_170) && ((forperm _r_63: Ref [_r_63.MustReleaseUnbounded] :: Level(_r_63) <= _residue_170) && _residue_161 <= _residue_170), true]
    invariant true
    invariant issubtype(typeof(i_8), int())
    invariant int___gt__(int___unbox__(_checkDefined(i_8, 3694441)), int___unbox__(_checkDefined(n_7, 3628910))) ==> (int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), int___unbox__(_checkDefined(n_7, 3628910))) ==> int___add__(int___unbox__(_checkDefined(n_7, 3628910)), int___unbox__(_checkDefined(i_8, 3694441))) > 0) && [acc(MustTerminate(_cthread_161), write), true]
    invariant false ==> [acc(MustTerminate(_cthread_161), write), true]
    invariant int___le__(int___unbox__(_checkDefined(i_8, 3694441)), int___unbox__(_checkDefined(n_7, 3628910))) ==> (int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), int___unbox__(_checkDefined(n_7, 3628910))) ==> int___add__(int___sub__(int___unbox__(_checkDefined(n_7, 3628910)), int___unbox__(_checkDefined(i_8, 3694441))), 1) > 0) && [acc(MustTerminate(_cthread_161), write), true]
    invariant [true, _loop_check_before_7 ==> _loop_termination_flag_7 || (!int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), int___unbox__(_checkDefined(n_7, 3628910))) || perm(MustTerminate(_cthread_161)) == none && ((forperm _r_64: Ref [MustInvokeBounded(_r_64)] :: false) && ((forperm _r_64: Ref [MustInvokeUnbounded(_r_64)] :: false) && ((forperm _r_64: Ref [_r_64.MustReleaseBounded] :: false) && (forperm _r_64: Ref [_r_64.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_7 ==> (forperm _r_64: Ref [MustInvokeBounded(_r_64)] :: false) && ((forperm _r_64: Ref [MustInvokeUnbounded(_r_64)] :: false) && ((forperm _r_64: Ref [_r_64.MustReleaseBounded] :: false) && (forperm _r_64: Ref [_r_64.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_7 := Seq(Measure$create(int___gt__(int___unbox__(_checkDefined(i_8, 3694441)), int___unbox__(_checkDefined(n_7, 3628910))), _cthread_161, int___add__(int___unbox__(_checkDefined(n_7, 3628910)), int___unbox__(_checkDefined(i_8, 3694441)))), Measure$create(false, _cthread_161, 1), Measure$create(int___le__(int___unbox__(_checkDefined(i_8, 3694441)), int___unbox__(_checkDefined(n_7, 3628910))), _cthread_161, int___add__(int___sub__(int___unbox__(_checkDefined(n_7, 3628910)), int___unbox__(_checkDefined(i_8, 3694441))), 1)))
    i_8 := __prim__int___box__(int___add__(int___unbox__(_checkDefined(i_8, 3694441)), 1))
    inhale _isDefined(3694441)
    label loop_end_7
    // We are after loop body._loop_check_before_7 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_7 ==> !int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), int___unbox__(_checkDefined(n_7, 3628910))) || (int___gt__(int___unbox__(_checkDefined(i_8, 3694441)), int___unbox__(_checkDefined(n_7, 3628910))) && Measure$check(_loop_measures_7, _cthread_161, int___add__(int___unbox__(_checkDefined(n_7, 3628910)), int___unbox__(_checkDefined(i_8, 3694441)))) || (false && Measure$check(_loop_measures_7, _cthread_161, 1) || int___le__(int___unbox__(_checkDefined(i_8, 3694441)), int___unbox__(_checkDefined(n_7, 3628910))) && Measure$check(_loop_measures_7, _cthread_161, int___add__(int___sub__(int___unbox__(_checkDefined(n_7, 3628910)), int___unbox__(_checkDefined(i_8, 3694441))), 1))))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_161)) > none ==> acc(MustTerminate(_cthread_161), perm(MustTerminate(_cthread_161)) - _loop_original_must_terminate_7)
  label post_loop_7
  goto __end
  label __end
}

method main(_cthread_162: Ref, _caller_measures_162: Seq[Measure$], _residue_171: Perm) returns (_current_wait_level_162: Perm)
  requires _cthread_162 != null
  requires issubtype(typeof(_cthread_162), Thread_0())
  requires [true, perm(MustTerminate(_cthread_162)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_68: Ref [_r_68.MustReleaseBounded] :: Level(_r_68) <= _current_wait_level_162) && ((forperm _r_68: Ref [_r_68.MustReleaseUnbounded] :: Level(_r_68) <= _current_wait_level_162) && _residue_171 <= _current_wait_level_162), true]
  ensures [true, (forperm _r_69: Ref [MustInvokeBounded(_r_69)] :: false) && ((forperm _r_69: Ref [MustInvokeUnbounded(_r_69)] :: false) && ((forperm _r_69: Ref [_r_69.MustReleaseBounded] :: false) && (forperm _r_69: Ref [_r_69.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var _cwl_162: Perm
  var _method_measures_162: Seq[Measure$]
  _method_measures_162 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_names_0 := (module_names_0 union Set(_single(3655284702854286527)))
  module_names_0 := (module_names_0 union Set(_single(7136376649266381199951095122)))
  module_names_0 := (module_names_0 union Set(_single(4814323939045640847723228745)))
  module_names_0 := (module_names_0 union Set(_single(3939413879042314935)))
  module_names_0 := (module_names_0 union Set(_single(4659879962334230944322642242)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3933848060670842702789965423)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4971208959277593851673276275)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3799513204985143447)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4221321043146477714)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(12646)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(12902)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(13158)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(1633629030)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(59655053905314525779047417354125311910185375661030477970)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(13414)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4050908590722027668)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4050908595016994964)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4050908599311962260)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4078316125657534612)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4050908603606929556)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(32855453072466803009785958243142384564503341416)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(14590343123035346904484547664686181580041033009577301656)))
  goto __end
  label __end
}