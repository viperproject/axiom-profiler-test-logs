domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function ObjectLock(): PyType
  
  unique function Lock_basic(): PyType
  
  function Lock(arg0: PyType): PyType
  
  function Lock_arg(typ: PyType, index: Int): PyType
  
  unique function BaseLock(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_ObjectLock {
    extends_(ObjectLock(), Lock(object())) && get_basic(ObjectLock()) == ObjectLock()
  }
  
  axiom subtype_Lock {
    (forall T: PyType :: { Lock(T) } extends_(Lock(T), BaseLock()) && get_basic(Lock(T)) == Lock_basic())
  }
  
  axiom Lock_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Lock(arg0)) ==> Lock_arg(Z, 0) == arg0)
  }
  
  axiom subtype_BaseLock {
    extends_(BaseLock(), object()) && get_basic(BaseLock()) == BaseLock()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  unique function get_locked(): Function
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function create_lock_threading(): ThreadingID
  
  unique function create_lock_unknown_order_1_threading(): ThreadingID
  
  unique function create_lock_unknown_order_2_threading(): ThreadingID
  
  unique function create_lock_above_1_threading(): ThreadingID
  
  unique function create_lock_above_2_threading(): ThreadingID
  
  unique function create_lock_below_1_threading(): ThreadingID
  
  unique function create_lock_below_2_threading(): ThreadingID
  
  unique function create_lock_below_3_threading(): ThreadingID
  
  unique function create_lock_between_1_threading(): ThreadingID
  
  unique function create_lock_between_2_threading(): ThreadingID
  
  unique function create_lock_between_3_threading(): ThreadingID
  
  unique function release_threading(): ThreadingID
  
  unique function acquire_threading(): ThreadingID
  
  unique function double_acquire_threading(): ThreadingID
  
  unique function acquire_release_multiple_threading(): ThreadingID
  
  unique function acquire_release_multiple_caller_1_threading(): ThreadingID
  
  unique function acquire_release_multiple_caller_2_threading(): ThreadingID
  
  unique function change_level_threading(): ThreadingID
  
  unique function locks_creating_loop_threading(): ThreadingID
  
  unique function locks_creating_loop_nested_threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
  
  unique function acquire_threading_0(): ThreadingID
  
  unique function release_threading_0(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function Lock_get_locked(self_0: Ref): Ref
  requires issubtype(typeof(self_0), Lock(Lock_arg(typeof(self_0), 0)))
  requires issubtype(Lock_arg(typeof(self_0), 0), object())
  requires self_0 != null
  ensures issubtype(typeof(result), Lock_arg(typeof(self_0), 0)) 


function __file__(): Ref 


function __name__(): Ref 


function __file___0(): Ref 


function __name___0(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___lt__(self: Int, other: Int): Bool 
{
  self < other
}

function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate Lock_invariant(self_4: Ref) {
  true && issubtype(typeof(self_4), Lock(Lock_arg(typeof(self_4), 0))) && ((issubtype(typeof(self_4), Lock(Lock_arg(typeof(self_4), 0))) ==> true) && (issubtype(typeof(self_4), ObjectLock()) ==> true))
}

method create_lock(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm) returns (_current_wait_level_146: Perm)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_146) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l: Ref
  var object_res: Ref
  var ObjectLock_res: Ref
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq[Measure$]()
  _err := null
  object_res := new()
  inhale typeof(object_res) == object()
  ObjectLock_res := new()
  inhale typeof(ObjectLock_res) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res) == object_res
  fold acc(Lock_invariant(ObjectLock_res), write)
  _cwl_146 := Lock___init__(_cthread_146, _method_measures_146, _residue_146, ObjectLock_res, object_res, null, null)
  l := ObjectLock_res
  inhale _isDefined(108)
  _cwl_146 := Lock_acquire(_cthread_146, _method_measures_146, _residue_146, _checkDefined(l, 108))
  unfold acc(Lock_invariant(_checkDefined(l, 108)), write)
  fold acc(Lock_invariant(_checkDefined(l, 108)), write)
  _cwl_146 := Lock_release(_cthread_146, _method_measures_146, _residue_146, _checkDefined(l, 108))
  assert false
  goto __end
  label __end
}

method create_lock_unknown_order_1(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm) returns (_current_wait_level_147: Perm)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_147) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l1: Ref
  var l2: Ref
  var object_res_0: Ref
  var ObjectLock_res_0: Ref
  var object_res_1: Ref
  var ObjectLock_res_1: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq[Measure$]()
  _err := null
  object_res_0 := new()
  inhale typeof(object_res_0) == object()
  ObjectLock_res_0 := new()
  inhale typeof(ObjectLock_res_0) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_0) == object_res_0
  fold acc(Lock_invariant(ObjectLock_res_0), write)
  _cwl_147 := Lock___init__(_cthread_147, _method_measures_147, _residue_147, ObjectLock_res_0, object_res_0, null, null)
  l1 := ObjectLock_res_0
  inhale _isDefined(12652)
  object_res_1 := new()
  inhale typeof(object_res_1) == object()
  ObjectLock_res_1 := new()
  inhale typeof(ObjectLock_res_1) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_1) == object_res_1
  fold acc(Lock_invariant(ObjectLock_res_1), write)
  _cwl_147 := Lock___init__(_cthread_147, _method_measures_147, _residue_147, ObjectLock_res_1, object_res_1, null, null)
  l2 := ObjectLock_res_1
  inhale _isDefined(12908)
  _cwl_147 := Lock_acquire(_cthread_147, _method_measures_147, _residue_147, _checkDefined(l1, 12652))
  unfold acc(Lock_invariant(_checkDefined(l1, 12652)), write)
  _cwl_147 := Lock_acquire(_cthread_147, _method_measures_147, _residue_147, _checkDefined(l2, 12908))
  unfold acc(Lock_invariant(_checkDefined(l2, 12908)), write)
  goto __end
  label __end
}

method create_lock_unknown_order_2(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm) returns (_current_wait_level_148: Perm)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_148) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l1_0: Ref
  var l2_0: Ref
  var object_res_2: Ref
  var ObjectLock_res_2: Ref
  var object_res_3: Ref
  var ObjectLock_res_3: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq[Measure$]()
  _err := null
  object_res_2 := new()
  inhale typeof(object_res_2) == object()
  ObjectLock_res_2 := new()
  inhale typeof(ObjectLock_res_2) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_2) == object_res_2
  fold acc(Lock_invariant(ObjectLock_res_2), write)
  _cwl_148 := Lock___init__(_cthread_148, _method_measures_148, _residue_148, ObjectLock_res_2, object_res_2, null, null)
  l1_0 := ObjectLock_res_2
  inhale _isDefined(811544940)
  object_res_3 := new()
  inhale typeof(object_res_3) == object()
  ObjectLock_res_3 := new()
  inhale typeof(ObjectLock_res_3) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_3) == object_res_3
  fold acc(Lock_invariant(ObjectLock_res_3), write)
  _cwl_148 := Lock___init__(_cthread_148, _method_measures_148, _residue_148, ObjectLock_res_3, object_res_3, null, null)
  l2_0 := ObjectLock_res_3
  inhale _isDefined(811545196)
  _cwl_148 := Lock_acquire(_cthread_148, _method_measures_148, _residue_148, _checkDefined(l2_0, 811545196))
  unfold acc(Lock_invariant(_checkDefined(l2_0, 811545196)), write)
  _cwl_148 := Lock_acquire(_cthread_148, _method_measures_148, _residue_148, _checkDefined(l1_0, 811544940))
  unfold acc(Lock_invariant(_checkDefined(l1_0, 811544940)), write)
  goto __end
  label __end
}

method create_lock_above_1(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm) returns (_current_wait_level_149: Perm)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_149) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures [true, (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l1_1: Ref
  var l2_1: Ref
  var object_res_4: Ref
  var ObjectLock_res_4: Ref
  var object_res_5: Ref
  var ObjectLock_res_5: Ref
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq[Measure$]()
  _err := null
  object_res_4 := new()
  inhale typeof(object_res_4) == object()
  ObjectLock_res_4 := new()
  inhale typeof(ObjectLock_res_4) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_4) == object_res_4
  fold acc(Lock_invariant(ObjectLock_res_4), write)
  _cwl_149 := Lock___init__(_cthread_149, _method_measures_149, _residue_149, ObjectLock_res_4, object_res_4, null, null)
  l1_1 := ObjectLock_res_4
  inhale _isDefined(828322156)
  object_res_5 := new()
  inhale typeof(object_res_5) == object()
  ObjectLock_res_5 := new()
  inhale typeof(ObjectLock_res_5) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_5) == object_res_5
  fold acc(Lock_invariant(ObjectLock_res_5), write)
  _cwl_149 := Lock___init__(_cthread_149, _method_measures_149, _residue_149, ObjectLock_res_5, object_res_5, _checkDefined(l1_1, 828322156), null)
  l2_1 := ObjectLock_res_5
  inhale _isDefined(828322412)
  _cwl_149 := Lock_acquire(_cthread_149, _method_measures_149, _residue_149, _checkDefined(l1_1, 828322156))
  unfold acc(Lock_invariant(_checkDefined(l1_1, 828322156)), write)
  _cwl_149 := Lock_acquire(_cthread_149, _method_measures_149, _residue_149, _checkDefined(l2_1, 828322412))
  unfold acc(Lock_invariant(_checkDefined(l2_1, 828322412)), write)
  fold acc(Lock_invariant(_checkDefined(l1_1, 828322156)), write)
  _cwl_149 := Lock_release(_cthread_149, _method_measures_149, _residue_149, _checkDefined(l1_1, 828322156))
  fold acc(Lock_invariant(_checkDefined(l2_1, 828322412)), write)
  _cwl_149 := Lock_release(_cthread_149, _method_measures_149, _residue_149, _checkDefined(l2_1, 828322412))
  goto __end
  label __end
}

method create_lock_above_2(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm) returns (_current_wait_level_150: Perm)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_150) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l1_2: Ref
  var l2_2: Ref
  var object_res_6: Ref
  var ObjectLock_res_6: Ref
  var object_res_7: Ref
  var ObjectLock_res_7: Ref
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq[Measure$]()
  _err := null
  object_res_6 := new()
  inhale typeof(object_res_6) == object()
  ObjectLock_res_6 := new()
  inhale typeof(ObjectLock_res_6) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_6) == object_res_6
  fold acc(Lock_invariant(ObjectLock_res_6), write)
  _cwl_150 := Lock___init__(_cthread_150, _method_measures_150, _residue_150, ObjectLock_res_6, object_res_6, null, null)
  l1_2 := ObjectLock_res_6
  inhale _isDefined(845099372)
  object_res_7 := new()
  inhale typeof(object_res_7) == object()
  ObjectLock_res_7 := new()
  inhale typeof(ObjectLock_res_7) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_7) == object_res_7
  fold acc(Lock_invariant(ObjectLock_res_7), write)
  _cwl_150 := Lock___init__(_cthread_150, _method_measures_150, _residue_150, ObjectLock_res_7, object_res_7, _checkDefined(l1_2, 845099372), null)
  l2_2 := ObjectLock_res_7
  inhale _isDefined(845099628)
  _cwl_150 := Lock_acquire(_cthread_150, _method_measures_150, _residue_150, _checkDefined(l2_2, 845099628))
  unfold acc(Lock_invariant(_checkDefined(l2_2, 845099628)), write)
  _cwl_150 := Lock_acquire(_cthread_150, _method_measures_150, _residue_150, _checkDefined(l1_2, 845099372))
  unfold acc(Lock_invariant(_checkDefined(l1_2, 845099372)), write)
  goto __end
  label __end
}

method create_lock_below_1(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_151: Perm) returns (_current_wait_level_151: Perm)
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_151) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]
  ensures [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l1_3: Ref
  var l2_3: Ref
  var object_res_8: Ref
  var ObjectLock_res_8: Ref
  var object_res_9: Ref
  var ObjectLock_res_9: Ref
  var _cwl_151: Perm
  var _method_measures_151: Seq[Measure$]
  _method_measures_151 := Seq[Measure$]()
  _err := null
  object_res_8 := new()
  inhale typeof(object_res_8) == object()
  ObjectLock_res_8 := new()
  inhale typeof(ObjectLock_res_8) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_8) == object_res_8
  fold acc(Lock_invariant(ObjectLock_res_8), write)
  _cwl_151 := Lock___init__(_cthread_151, _method_measures_151, _residue_151, ObjectLock_res_8, object_res_8, null, null)
  l1_3 := ObjectLock_res_8
  inhale _isDefined(861876588)
  object_res_9 := new()
  inhale typeof(object_res_9) == object()
  ObjectLock_res_9 := new()
  inhale typeof(ObjectLock_res_9) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_9) == object_res_9
  fold acc(Lock_invariant(ObjectLock_res_9), write)
  _cwl_151 := Lock___init__(_cthread_151, _method_measures_151, _residue_151, ObjectLock_res_9, object_res_9, null, _checkDefined(l1_3, 861876588))
  l2_3 := ObjectLock_res_9
  inhale _isDefined(861876844)
  _cwl_151 := Lock_acquire(_cthread_151, _method_measures_151, _residue_151, _checkDefined(l1_3, 861876588))
  unfold acc(Lock_invariant(_checkDefined(l1_3, 861876588)), write)
  _cwl_151 := Lock_acquire(_cthread_151, _method_measures_151, _residue_151, _checkDefined(l2_3, 861876844))
  unfold acc(Lock_invariant(_checkDefined(l2_3, 861876844)), write)
  goto __end
  label __end
}

method create_lock_below_2(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm) returns (_current_wait_level_152: Perm)
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_19: Ref [MustInvokeBounded(_r_19)] :: false) && ((forperm _r_19: Ref [MustInvokeUnbounded(_r_19)] :: false) && ((forperm _r_19: Ref [_r_19.MustReleaseBounded] :: false) && (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_152) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures [true, (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l1_4: Ref
  var l2_4: Ref
  var object_res_10: Ref
  var ObjectLock_res_10: Ref
  var object_res_11: Ref
  var ObjectLock_res_11: Ref
  var _cwl_152: Perm
  var _method_measures_152: Seq[Measure$]
  _method_measures_152 := Seq[Measure$]()
  _err := null
  object_res_10 := new()
  inhale typeof(object_res_10) == object()
  ObjectLock_res_10 := new()
  inhale typeof(ObjectLock_res_10) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_10) == object_res_10
  fold acc(Lock_invariant(ObjectLock_res_10), write)
  _cwl_152 := Lock___init__(_cthread_152, _method_measures_152, _residue_152, ObjectLock_res_10, object_res_10, null, null)
  l1_4 := ObjectLock_res_10
  inhale _isDefined(878653804)
  object_res_11 := new()
  inhale typeof(object_res_11) == object()
  ObjectLock_res_11 := new()
  inhale typeof(ObjectLock_res_11) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_11) == object_res_11
  fold acc(Lock_invariant(ObjectLock_res_11), write)
  _cwl_152 := Lock___init__(_cthread_152, _method_measures_152, _residue_152, ObjectLock_res_11, object_res_11, null, _checkDefined(l1_4, 878653804))
  l2_4 := ObjectLock_res_11
  inhale _isDefined(878654060)
  _cwl_152 := Lock_acquire(_cthread_152, _method_measures_152, _residue_152, _checkDefined(l2_4, 878654060))
  unfold acc(Lock_invariant(_checkDefined(l2_4, 878654060)), write)
  _cwl_152 := Lock_acquire(_cthread_152, _method_measures_152, _residue_152, _checkDefined(l1_4, 878653804))
  unfold acc(Lock_invariant(_checkDefined(l1_4, 878653804)), write)
  fold acc(Lock_invariant(_checkDefined(l1_4, 878653804)), write)
  _cwl_152 := Lock_release(_cthread_152, _method_measures_152, _residue_152, _checkDefined(l1_4, 878653804))
  fold acc(Lock_invariant(_checkDefined(l2_4, 878654060)), write)
  _cwl_152 := Lock_release(_cthread_152, _method_measures_152, _residue_152, _checkDefined(l2_4, 878654060))
  goto __end
  label __end
}

method create_lock_below_3(_cthread_153: Ref, _caller_measures_153: Seq[Measure$], _residue_153: Perm) returns (_current_wait_level_153: Perm)
  requires _cthread_153 != null
  requires issubtype(typeof(_cthread_153), Thread_0())
  requires [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_153) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]
  ensures [true, (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l1_5: Ref
  var l2_5: Ref
  var object_res_12: Ref
  var ObjectLock_res_12: Ref
  var object_res_13: Ref
  var ObjectLock_res_13: Ref
  var _cwl_153: Perm
  var _method_measures_153: Seq[Measure$]
  _method_measures_153 := Seq[Measure$]()
  _err := null
  object_res_12 := new()
  inhale typeof(object_res_12) == object()
  ObjectLock_res_12 := new()
  inhale typeof(ObjectLock_res_12) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_12) == object_res_12
  fold acc(Lock_invariant(ObjectLock_res_12), write)
  _cwl_153 := Lock___init__(_cthread_153, _method_measures_153, _residue_153, ObjectLock_res_12, object_res_12, null, null)
  l1_5 := ObjectLock_res_12
  inhale _isDefined(895431020)
  _cwl_153 := Lock_acquire(_cthread_153, _method_measures_153, _residue_153, _checkDefined(l1_5, 895431020))
  unfold acc(Lock_invariant(_checkDefined(l1_5, 895431020)), write)
  object_res_13 := new()
  inhale typeof(object_res_13) == object()
  ObjectLock_res_13 := new()
  inhale typeof(ObjectLock_res_13) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_13) == object_res_13
  fold acc(Lock_invariant(ObjectLock_res_13), write)
  _cwl_153 := Lock___init__(_cthread_153, _method_measures_153, _residue_153, ObjectLock_res_13, object_res_13, null, _checkDefined(l1_5, 895431020))
  l2_5 := ObjectLock_res_13
  inhale _isDefined(895431276)
  goto __end
  label __end
}

method create_lock_between_1(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm) returns (_current_wait_level_154: Perm)
  requires _cthread_154 != null
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_154) && ((forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]
  ensures [true, (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l1_6: Ref
  var l3: Ref
  var l2_6: Ref
  var object_res_14: Ref
  var ObjectLock_res_14: Ref
  var object_res_15: Ref
  var ObjectLock_res_15: Ref
  var object_res_16: Ref
  var ObjectLock_res_16: Ref
  var _cwl_154: Perm
  var _method_measures_154: Seq[Measure$]
  _method_measures_154 := Seq[Measure$]()
  _err := null
  object_res_14 := new()
  inhale typeof(object_res_14) == object()
  ObjectLock_res_14 := new()
  inhale typeof(ObjectLock_res_14) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_14) == object_res_14
  fold acc(Lock_invariant(ObjectLock_res_14), write)
  _cwl_154 := Lock___init__(_cthread_154, _method_measures_154, _residue_154, ObjectLock_res_14, object_res_14, null, null)
  l1_6 := ObjectLock_res_14
  inhale _isDefined(912208236)
  object_res_15 := new()
  inhale typeof(object_res_15) == object()
  ObjectLock_res_15 := new()
  inhale typeof(ObjectLock_res_15) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_15) == object_res_15
  fold acc(Lock_invariant(ObjectLock_res_15), write)
  _cwl_154 := Lock___init__(_cthread_154, _method_measures_154, _residue_154, ObjectLock_res_15, object_res_15, null, _checkDefined(l1_6, 912208236))
  l3 := ObjectLock_res_15
  inhale _isDefined(13164)
  object_res_16 := new()
  inhale typeof(object_res_16) == object()
  ObjectLock_res_16 := new()
  inhale typeof(ObjectLock_res_16) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_16) == object_res_16
  fold acc(Lock_invariant(ObjectLock_res_16), write)
  _cwl_154 := Lock___init__(_cthread_154, _method_measures_154, _residue_154, ObjectLock_res_16, object_res_16, _checkDefined(l3, 13164), _checkDefined(l1_6, 912208236))
  l2_6 := ObjectLock_res_16
  inhale _isDefined(912208492)
  _cwl_154 := Lock_acquire(_cthread_154, _method_measures_154, _residue_154, _checkDefined(l3, 13164))
  unfold acc(Lock_invariant(_checkDefined(l3, 13164)), write)
  _cwl_154 := Lock_acquire(_cthread_154, _method_measures_154, _residue_154, _checkDefined(l2_6, 912208492))
  unfold acc(Lock_invariant(_checkDefined(l2_6, 912208492)), write)
  _cwl_154 := Lock_acquire(_cthread_154, _method_measures_154, _residue_154, _checkDefined(l1_6, 912208236))
  unfold acc(Lock_invariant(_checkDefined(l1_6, 912208236)), write)
  fold acc(Lock_invariant(_checkDefined(l3, 13164)), write)
  _cwl_154 := Lock_release(_cthread_154, _method_measures_154, _residue_154, _checkDefined(l3, 13164))
  _cwl_154 := Lock_acquire(_cthread_154, _method_measures_154, _residue_154, _checkDefined(l3, 13164))
  unfold acc(Lock_invariant(_checkDefined(l3, 13164)), write)
  goto __end
  label __end
}

method create_lock_between_2(_cthread_155: Ref, _caller_measures_155: Seq[Measure$], _residue_155: Perm) returns (_current_wait_level_155: Perm)
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires [true, perm(MustTerminate(_cthread_155)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_155) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_155) && _residue_155 <= _current_wait_level_155), true]
  ensures [true, (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l1_7: Ref
  var l3_0: Ref
  var l2_7: Ref
  var object_res_17: Ref
  var ObjectLock_res_17: Ref
  var object_res_18: Ref
  var ObjectLock_res_18: Ref
  var object_res_19: Ref
  var ObjectLock_res_19: Ref
  var _cwl_155: Perm
  var _method_measures_155: Seq[Measure$]
  _method_measures_155 := Seq[Measure$]()
  _err := null
  object_res_17 := new()
  inhale typeof(object_res_17) == object()
  ObjectLock_res_17 := new()
  inhale typeof(ObjectLock_res_17) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_17) == object_res_17
  fold acc(Lock_invariant(ObjectLock_res_17), write)
  _cwl_155 := Lock___init__(_cthread_155, _method_measures_155, _residue_155, ObjectLock_res_17, object_res_17, null, null)
  l1_7 := ObjectLock_res_17
  inhale _isDefined(928985452)
  object_res_18 := new()
  inhale typeof(object_res_18) == object()
  ObjectLock_res_18 := new()
  inhale typeof(ObjectLock_res_18) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_18) == object_res_18
  fold acc(Lock_invariant(ObjectLock_res_18), write)
  _cwl_155 := Lock___init__(_cthread_155, _method_measures_155, _residue_155, ObjectLock_res_18, object_res_18, null, _checkDefined(l1_7, 928985452))
  l3_0 := ObjectLock_res_18
  inhale _isDefined(811545452)
  object_res_19 := new()
  inhale typeof(object_res_19) == object()
  ObjectLock_res_19 := new()
  inhale typeof(ObjectLock_res_19) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_19) == object_res_19
  fold acc(Lock_invariant(ObjectLock_res_19), write)
  _cwl_155 := Lock___init__(_cthread_155, _method_measures_155, _residue_155, ObjectLock_res_19, object_res_19, _checkDefined(l3_0, 811545452), _checkDefined(l1_7, 928985452))
  l2_7 := ObjectLock_res_19
  inhale _isDefined(928985708)
  _cwl_155 := Lock_acquire(_cthread_155, _method_measures_155, _residue_155, _checkDefined(l1_7, 928985452))
  unfold acc(Lock_invariant(_checkDefined(l1_7, 928985452)), write)
  _cwl_155 := Lock_acquire(_cthread_155, _method_measures_155, _residue_155, _checkDefined(l2_7, 928985708))
  unfold acc(Lock_invariant(_checkDefined(l2_7, 928985708)), write)
  _cwl_155 := Lock_acquire(_cthread_155, _method_measures_155, _residue_155, _checkDefined(l3_0, 811545452))
  unfold acc(Lock_invariant(_checkDefined(l3_0, 811545452)), write)
  goto __end
  label __end
}

method create_lock_between_3(_cthread_156: Ref, _caller_measures_156: Seq[Measure$], _residue_156: Perm) returns (_current_wait_level_156: Perm)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires [true, perm(MustTerminate(_cthread_156)) == none && ((forperm _r_31: Ref [MustInvokeBounded(_r_31)] :: false) && ((forperm _r_31: Ref [MustInvokeUnbounded(_r_31)] :: false) && ((forperm _r_31: Ref [_r_31.MustReleaseBounded] :: false) && (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_156) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]
  ensures [true, (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l1_8: Ref
  var l3_1: Ref
  var l2_8: Ref
  var object_res_20: Ref
  var ObjectLock_res_20: Ref
  var object_res_21: Ref
  var ObjectLock_res_21: Ref
  var object_res_22: Ref
  var ObjectLock_res_22: Ref
  var _cwl_156: Perm
  var _method_measures_156: Seq[Measure$]
  _method_measures_156 := Seq[Measure$]()
  _err := null
  object_res_20 := new()
  inhale typeof(object_res_20) == object()
  ObjectLock_res_20 := new()
  inhale typeof(ObjectLock_res_20) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_20) == object_res_20
  fold acc(Lock_invariant(ObjectLock_res_20), write)
  _cwl_156 := Lock___init__(_cthread_156, _method_measures_156, _residue_156, ObjectLock_res_20, object_res_20, null, null)
  l1_8 := ObjectLock_res_20
  inhale _isDefined(945762668)
  object_res_21 := new()
  inhale typeof(object_res_21) == object()
  ObjectLock_res_21 := new()
  inhale typeof(ObjectLock_res_21) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_21) == object_res_21
  fold acc(Lock_invariant(ObjectLock_res_21), write)
  _cwl_156 := Lock___init__(_cthread_156, _method_measures_156, _residue_156, ObjectLock_res_21, object_res_21, _checkDefined(l1_8, 945762668), null)
  l3_1 := ObjectLock_res_21
  inhale _isDefined(828322668)
  object_res_22 := new()
  inhale typeof(object_res_22) == object()
  ObjectLock_res_22 := new()
  inhale typeof(ObjectLock_res_22) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_22) == object_res_22
  fold acc(Lock_invariant(ObjectLock_res_22), write)
  _cwl_156 := Lock___init__(_cthread_156, _method_measures_156, _residue_156, ObjectLock_res_22, object_res_22, _checkDefined(l3_1, 828322668), _checkDefined(l1_8, 945762668))
  l2_8 := ObjectLock_res_22
  inhale _isDefined(945762924)
  goto __end
  label __end
}

method release(_cthread_157: Ref, _caller_measures_157: Seq[Measure$], _residue_157: Perm, l_0: Ref) returns (_current_wait_level_157: Perm)
  requires _cthread_157 != null
  requires issubtype(typeof(_cthread_157), Thread_0())
  requires issubtype(typeof(l_0), ObjectLock())
  requires [acc(l_0.MustReleaseBounded, write), (perm(l_0.MustReleaseBounded) > none && Measure$check(_caller_measures_157, l_0, 2) ? acc(l_0.MustReleaseBounded, write) : acc(l_0.MustReleaseUnbounded, write))]
  requires [true, perm(MustTerminate(_cthread_157)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_157) && ((forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]
  ensures [true, (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l_9: Ref
  var _cwl_157: Perm
  var _method_measures_157: Seq[Measure$]
  _method_measures_157 := Seq(Measure$create(true, l_0, 2))
  _err := null
  l_9 := l_0
  fold acc(Lock_invariant(l_9), write)
  _cwl_157 := Lock_release(_cthread_157, _method_measures_157, _residue_157, l_9)
  goto __end
  label __end
}

method acquire(_cthread_158: Ref, _caller_measures_158: Seq[Measure$], _residue_158: Perm, l_1: Ref) returns (_current_wait_level_158: Perm)
  requires _cthread_158 != null
  requires issubtype(typeof(_cthread_158), Thread_0())
  requires issubtype(typeof(l_1), ObjectLock())
  requires l_1 != null
  requires [true, perm(MustTerminate(_cthread_158)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_158) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158), true]
  ensures [true, (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l_10: Ref
  var _cwl_158: Perm
  var _method_measures_158: Seq[Measure$]
  _method_measures_158 := Seq[Measure$]()
  _err := null
  l_10 := l_1
  _cwl_158 := Lock_acquire(_cthread_158, _method_measures_158, _residue_158, l_10)
  unfold acc(Lock_invariant(l_10), write)
  goto __end
  label __end
}

method double_acquire(_cthread_159: Ref, _caller_measures_159: Seq[Measure$], _residue_159: Perm, l_2: Ref) returns (_current_wait_level_159: Perm)
  requires _cthread_159 != null
  requires issubtype(typeof(_cthread_159), Thread_0())
  requires issubtype(typeof(l_2), ObjectLock())
  requires l_2 != null
  requires [_residue_159 < Level(l_2), true]
  requires [true, (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) < Level(l_2)) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) < Level(l_2)) && _residue_159 < Level(l_2))]
  requires [true, perm(MustTerminate(_cthread_159)) == none && ((forperm _r_41: Ref [MustInvokeBounded(_r_41)] :: false) && ((forperm _r_41: Ref [MustInvokeUnbounded(_r_41)] :: false) && ((forperm _r_41: Ref [_r_41.MustReleaseBounded] :: false) && (forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_39: Ref [_r_39.MustReleaseBounded] :: Level(_r_39) <= _current_wait_level_159) && ((forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: Level(_r_39) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159), true]
  ensures [true, (forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l_11: Ref
  var _cwl_159: Perm
  var _method_measures_159: Seq[Measure$]
  _method_measures_159 := Seq[Measure$]()
  _err := null
  l_11 := l_2
  _cwl_159 := Lock_acquire(_cthread_159, _method_measures_159, _residue_159, l_11)
  unfold acc(Lock_invariant(l_11), write)
  _cwl_159 := Lock_acquire(_cthread_159, _method_measures_159, _residue_159, l_11)
  unfold acc(Lock_invariant(l_11), write)
  goto __end
  label __end
}

method acquire_release_multiple(_cthread_160: Ref, _caller_measures_160: Seq[Measure$], _residue_160: Perm, l_3: Ref) returns (_current_wait_level_160: Perm)
  requires _cthread_160 != null
  requires issubtype(typeof(_cthread_160), Thread_0())
  requires issubtype(typeof(l_3), ObjectLock())
  requires l_3 != null
  requires [_residue_160 < Level(l_3), true]
  requires [true, (forperm _r_42: Ref [_r_42.MustReleaseBounded] :: Level(_r_42) < Level(l_3)) && ((forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: Level(_r_42) < Level(l_3)) && _residue_160 < Level(l_3))]
  requires [true, perm(MustTerminate(_cthread_160)) == none && ((forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false) && ((forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false) && ((forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false) && (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_43: Ref [_r_43.MustReleaseBounded] :: Level(_r_43) <= _current_wait_level_160) && ((forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: Level(_r_43) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160), true]
  ensures [acc(l_3.MustReleaseUnbounded, write), acc(l_3.MustReleaseUnbounded, write)]
  ensures [true, (forperm _r_44: Ref [MustInvokeBounded(_r_44)] :: false) && ((forperm _r_44: Ref [MustInvokeUnbounded(_r_44)] :: false) && ((forperm _r_44: Ref [_r_44.MustReleaseBounded] :: false) && (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l_12: Ref
  var _cwl_160: Perm
  var _method_measures_160: Seq[Measure$]
  _method_measures_160 := Seq[Measure$]()
  _err := null
  l_12 := l_3
  _cwl_160 := Lock_acquire(_cthread_160, _method_measures_160, _residue_160, l_12)
  unfold acc(Lock_invariant(l_12), write)
  fold acc(Lock_invariant(l_12), write)
  _cwl_160 := Lock_release(_cthread_160, _method_measures_160, _residue_160, l_12)
  _cwl_160 := Lock_acquire(_cthread_160, _method_measures_160, _residue_160, l_12)
  unfold acc(Lock_invariant(l_12), write)
  fold acc(Lock_invariant(l_12), write)
  _cwl_160 := Lock_release(_cthread_160, _method_measures_160, _residue_160, l_12)
  _cwl_160 := Lock_acquire(_cthread_160, _method_measures_160, _residue_160, l_12)
  unfold acc(Lock_invariant(l_12), write)
  goto __end
  label __end
}

method acquire_release_multiple_caller_1(_cthread_161: Ref, _caller_measures_161: Seq[Measure$], _residue_161: Perm) returns (_current_wait_level_161: Perm)
  requires _cthread_161 != null
  requires issubtype(typeof(_cthread_161), Thread_0())
  requires [true, perm(MustTerminate(_cthread_161)) == none && ((forperm _r_48: Ref [MustInvokeBounded(_r_48)] :: false) && ((forperm _r_48: Ref [MustInvokeUnbounded(_r_48)] :: false) && ((forperm _r_48: Ref [_r_48.MustReleaseBounded] :: false) && (forperm _r_48: Ref [_r_48.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_46: Ref [_r_46.MustReleaseBounded] :: Level(_r_46) <= _current_wait_level_161) && ((forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: Level(_r_46) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161), true]
  ensures [true, (forperm _r_47: Ref [MustInvokeBounded(_r_47)] :: false) && ((forperm _r_47: Ref [MustInvokeUnbounded(_r_47)] :: false) && ((forperm _r_47: Ref [_r_47.MustReleaseBounded] :: false) && (forperm _r_47: Ref [_r_47.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l_4: Ref
  var object_res_23: Ref
  var ObjectLock_res_23: Ref
  var _cwl_161: Perm
  var _method_measures_161: Seq[Measure$]
  _method_measures_161 := Seq[Measure$]()
  _err := null
  object_res_23 := new()
  inhale typeof(object_res_23) == object()
  ObjectLock_res_23 := new()
  inhale typeof(ObjectLock_res_23) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_23) == object_res_23
  fold acc(Lock_invariant(ObjectLock_res_23), write)
  _cwl_161 := Lock___init__(_cthread_161, _method_measures_161, _residue_161, ObjectLock_res_23, object_res_23, null, null)
  l_4 := ObjectLock_res_23
  inhale _isDefined(3432300)
  _cwl_161 := acquire_release_multiple(_cthread_161, _method_measures_161, _residue_161, _checkDefined(l_4, 3432300))
  fold acc(Lock_invariant(_checkDefined(l_4, 3432300)), write)
  _cwl_161 := Lock_release(_cthread_161, _method_measures_161, _residue_161, _checkDefined(l_4, 3432300))
  goto __end
  label __end
}

method acquire_release_multiple_caller_2(_cthread_162: Ref, _caller_measures_162: Seq[Measure$], _residue_162: Perm, l_5: Ref) returns (_current_wait_level_162: Perm)
  requires _cthread_162 != null
  requires issubtype(typeof(_cthread_162), Thread_0())
  requires issubtype(typeof(l_5), ObjectLock())
  requires l_5 != null
  requires [true, perm(MustTerminate(_cthread_162)) == none && ((forperm _r_51: Ref [MustInvokeBounded(_r_51)] :: false) && ((forperm _r_51: Ref [MustInvokeUnbounded(_r_51)] :: false) && ((forperm _r_51: Ref [_r_51.MustReleaseBounded] :: false) && (forperm _r_51: Ref [_r_51.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_49: Ref [_r_49.MustReleaseBounded] :: Level(_r_49) <= _current_wait_level_162) && ((forperm _r_49: Ref [_r_49.MustReleaseUnbounded] :: Level(_r_49) <= _current_wait_level_162) && _residue_162 <= _current_wait_level_162), true]
  ensures [true, (forperm _r_50: Ref [MustInvokeBounded(_r_50)] :: false) && ((forperm _r_50: Ref [MustInvokeUnbounded(_r_50)] :: false) && ((forperm _r_50: Ref [_r_50.MustReleaseBounded] :: false) && (forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l_13: Ref
  var _cwl_162: Perm
  var _method_measures_162: Seq[Measure$]
  _method_measures_162 := Seq[Measure$]()
  _err := null
  l_13 := l_5
  _cwl_162 := acquire_release_multiple(_cthread_162, _method_measures_162, _residue_162, l_13)
  goto __end
  label __end
}

method change_level(_cthread_163: Ref, _caller_measures_163: Seq[Measure$], _residue_163: Perm, l_6: Ref) returns (_current_wait_level_163: Perm)
  requires _cthread_163 != null
  requires issubtype(typeof(_cthread_163), Thread_0())
  requires issubtype(typeof(l_6), ObjectLock())
  requires l_6 != null
  requires [true, perm(MustTerminate(_cthread_163)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_53: Ref [_r_53.MustReleaseBounded] :: Level(_r_53) <= _current_wait_level_163) && ((forperm _r_53: Ref [_r_53.MustReleaseUnbounded] :: Level(_r_53) <= _current_wait_level_163) && _residue_163 <= _current_wait_level_163), true]
  ensures [_current_wait_level_163 < Level(l_6), true]
  ensures [true, (forperm _r_54: Ref [MustInvokeBounded(_r_54)] :: false) && ((forperm _r_54: Ref [MustInvokeUnbounded(_r_54)] :: false) && ((forperm _r_54: Ref [_r_54.MustReleaseBounded] :: false) && (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: false)))]
  ensures [true, (forperm _r_52: Ref [_r_52.MustReleaseBounded] :: Level(_r_52) < Level(l_6)) && ((forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: Level(_r_52) < Level(l_6)) && _residue_163 < Level(l_6))]
{
  var _err: Ref
  var l_14: Ref
  var _cwl_163: Perm
  var _method_measures_163: Seq[Measure$]
  _method_measures_163 := Seq[Measure$]()
  _err := null
  l_14 := l_6
  goto __end
  label __end
}

method locks_creating_loop(_cthread_164: Ref, _caller_measures_164: Seq[Measure$], _residue_164: Perm) returns (_current_wait_level_164: Perm, _res: Ref)
  requires _cthread_164 != null
  requires issubtype(typeof(_cthread_164), Thread_0())
  requires [true, perm(MustTerminate(_cthread_164)) == none && ((forperm _r_63: Ref [MustInvokeBounded(_r_63)] :: false) && ((forperm _r_63: Ref [MustInvokeUnbounded(_r_63)] :: false) && ((forperm _r_63: Ref [_r_63.MustReleaseBounded] :: false) && (forperm _r_63: Ref [_r_63.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_61: Ref [_r_61.MustReleaseBounded] :: Level(_r_61) <= _current_wait_level_164) && ((forperm _r_61: Ref [_r_61.MustReleaseUnbounded] :: Level(_r_61) <= _current_wait_level_164) && _residue_164 <= _current_wait_level_164), true]
  ensures issubtype(typeof(_res), ObjectLock())
  ensures [_current_wait_level_164 < Level(_res), true]
  ensures [true, (forperm _r_62: Ref [MustInvokeBounded(_r_62)] :: false) && ((forperm _r_62: Ref [MustInvokeUnbounded(_r_62)] :: false) && ((forperm _r_62: Ref [_r_62.MustReleaseBounded] :: false) && (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: false)))]
  ensures [true, (forperm _r_56: Ref [_r_56.MustReleaseBounded] :: Level(_r_56) < Level(_res)) && ((forperm _r_56: Ref [_r_56.MustReleaseUnbounded] :: Level(_r_56) < Level(_res)) && _residue_164 < Level(_res))]
{
  var _err: Ref
  var l_7: Ref
  var i: Ref
  var object_res_24: Ref
  var ObjectLock_res_24: Ref
  var _loop_measures: Seq[Measure$]
  var _loop_check_before: Bool
  var _loop_termination_flag: Bool
  var _loop_original_must_terminate: Perm
  var _residue_171: Perm
  var object_res_25: Ref
  var ObjectLock_res_25: Ref
  var _cwl_164: Perm
  var _method_measures_164: Seq[Measure$]
  _method_measures_164 := Seq[Measure$]()
  _res := null
  _err := null
  object_res_24 := new()
  inhale typeof(object_res_24) == object()
  ObjectLock_res_24 := new()
  inhale typeof(ObjectLock_res_24) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_24) == object_res_24
  fold acc(Lock_invariant(ObjectLock_res_24), write)
  _cwl_164 := Lock___init__(_cthread_164, _method_measures_164, _residue_164, ObjectLock_res_24, object_res_24, null, null)
  l_7 := ObjectLock_res_24
  inhale _isDefined(3628908)
  i := __prim__int___box__(0)
  inhale _isDefined(105)
  // Save current MustTerminate amount._loop_original_must_terminate := perm(MustTerminate(_cthread_164))
  // Save loop termination promise._loop_termination_flag := false
  // We are before loop._loop_check_before := true
  while (int___lt__(int___unbox__(_checkDefined(i, 105)), 5))
    invariant [(forperm _r_59: Ref [_r_59.MustReleaseBounded] :: Level(_r_59) <= _residue_171) && ((forperm _r_59: Ref [_r_59.MustReleaseUnbounded] :: Level(_r_59) <= _residue_171) && _residue_164 <= _residue_171), true]
    invariant true
    invariant issubtype(typeof(l_7), ObjectLock())
    invariant issubtype(typeof(i), int())
    invariant _checkDefined(l_7, 3628908) != null
    invariant true
    invariant !_loop_check_before ==> [true, (forperm _r_57: Ref [_r_57.MustReleaseBounded] :: Level(_r_57) < Level(_checkDefined(l_7, 3628908))) && ((forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: Level(_r_57) < Level(_checkDefined(l_7, 3628908))) && _residue_171 < Level(_checkDefined(l_7, 3628908)))]
    invariant _loop_check_before ==> [true, (forperm _r_58: Ref [_r_58.MustReleaseBounded] :: Level(_r_58) < Level(_checkDefined(l_7, 3628908))) && ((forperm _r_58: Ref [_r_58.MustReleaseUnbounded] :: Level(_r_58) < Level(_checkDefined(l_7, 3628908))) && _residue_164 < Level(_checkDefined(l_7, 3628908)))]
    invariant [true, _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), 5) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before ==> (forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))] 
  {
    inhale _residue_171 < Level(_checkDefined(l_7, 3628908))
    _loop_measures := Seq[Measure$]()
    _cwl_164 := Lock_acquire(_cthread_164, _method_measures_164, _residue_171, _checkDefined(l_7, 3628908))
    unfold acc(Lock_invariant(_checkDefined(l_7, 3628908)), write)
    fold acc(Lock_invariant(_checkDefined(l_7, 3628908)), write)
    _cwl_164 := Lock_release(_cthread_164, _method_measures_164, _residue_171, _checkDefined(l_7, 3628908))
    object_res_25 := new()
    inhale typeof(object_res_25) == object()
    ObjectLock_res_25 := new()
    inhale typeof(ObjectLock_res_25) == ObjectLock()
    inhale Lock_get_locked(ObjectLock_res_25) == object_res_25
    fold acc(Lock_invariant(ObjectLock_res_25), write)
    _cwl_164 := Lock___init__(_cthread_164, _method_measures_164, _residue_171, ObjectLock_res_25, object_res_25, null, null)
    l_7 := ObjectLock_res_25
    inhale _isDefined(3628908)
    i := __prim__int___box__(int___add__(int___unbox__(i), 1))
    inhale _isDefined(105)
    label loop_end
    // We are after loop body._loop_check_before := false
    // Check if loop continues to terminate.assert _loop_termination_flag ==> !int___lt__(int___unbox__(_checkDefined(i, 105)), 5)
  }
  inhale _residue_164 < Level(_checkDefined(l_7, 3628908))
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_164)) > none ==> acc(MustTerminate(_cthread_164), perm(MustTerminate(_cthread_164)) - _loop_original_must_terminate)
  label post_loop
  _res := null
  _res := _checkDefined(l_7, 3628908)
  goto __end
  goto __end
  label __end
}

method locks_creating_loop_nested(_cthread_165: Ref, _caller_measures_165: Seq[Measure$], _residue_165: Perm) returns (_current_wait_level_165: Perm, _res: Ref)
  requires _cthread_165 != null
  requires issubtype(typeof(_cthread_165), Thread_0())
  requires [true, perm(MustTerminate(_cthread_165)) == none && ((forperm _r_75: Ref [MustInvokeBounded(_r_75)] :: false) && ((forperm _r_75: Ref [MustInvokeUnbounded(_r_75)] :: false) && ((forperm _r_75: Ref [_r_75.MustReleaseBounded] :: false) && (forperm _r_75: Ref [_r_75.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_73: Ref [_r_73.MustReleaseBounded] :: Level(_r_73) <= _current_wait_level_165) && ((forperm _r_73: Ref [_r_73.MustReleaseUnbounded] :: Level(_r_73) <= _current_wait_level_165) && _residue_165 <= _current_wait_level_165), true]
  ensures issubtype(typeof(_res), ObjectLock())
  ensures [_current_wait_level_165 < Level(_res), true]
  ensures [true, (forperm _r_74: Ref [MustInvokeBounded(_r_74)] :: false) && ((forperm _r_74: Ref [MustInvokeUnbounded(_r_74)] :: false) && ((forperm _r_74: Ref [_r_74.MustReleaseBounded] :: false) && (forperm _r_74: Ref [_r_74.MustReleaseUnbounded] :: false)))]
  ensures [true, (forperm _r_64: Ref [_r_64.MustReleaseBounded] :: Level(_r_64) < Level(_res)) && ((forperm _r_64: Ref [_r_64.MustReleaseUnbounded] :: Level(_r_64) < Level(_res)) && _residue_165 < Level(_res))]
{
  var _err: Ref
  var l_8: Ref
  var i_0: Ref
  var j: Ref
  var object_res_26: Ref
  var ObjectLock_res_26: Ref
  var _loop_measures_0: Seq[Measure$]
  var _loop_check_before_0: Bool
  var _loop_termination_flag_0: Bool
  var _loop_original_must_terminate_0: Perm
  var _residue_172: Perm
  var _loop_measures_1: Seq[Measure$]
  var _loop_check_before_1: Bool
  var _loop_termination_flag_1: Bool
  var _loop_original_must_terminate_1: Perm
  var _residue_173: Perm
  var object_res_27: Ref
  var ObjectLock_res_27: Ref
  var _cwl_165: Perm
  var _method_measures_165: Seq[Measure$]
  _method_measures_165 := Seq[Measure$]()
  _res := null
  _err := null
  object_res_26 := new()
  inhale typeof(object_res_26) == object()
  ObjectLock_res_26 := new()
  inhale typeof(ObjectLock_res_26) == ObjectLock()
  inhale Lock_get_locked(ObjectLock_res_26) == object_res_26
  fold acc(Lock_invariant(ObjectLock_res_26), write)
  _cwl_165 := Lock___init__(_cthread_165, _method_measures_165, _residue_165, ObjectLock_res_26, object_res_26, null, null)
  l_8 := ObjectLock_res_26
  inhale _isDefined(3694444)
  i_0 := __prim__int___box__(0)
  inhale _isDefined(3170153)
  // Save current MustTerminate amount._loop_original_must_terminate_0 := perm(MustTerminate(_cthread_165))
  // Save loop termination promise._loop_termination_flag_0 := false
  // We are before loop._loop_check_before_0 := true
  while (int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), 5))
    invariant [(forperm _r_71: Ref [_r_71.MustReleaseBounded] :: Level(_r_71) <= _residue_172) && ((forperm _r_71: Ref [_r_71.MustReleaseUnbounded] :: Level(_r_71) <= _residue_172) && _residue_165 <= _residue_172), true]
    invariant true
    invariant issubtype(typeof(l_8), ObjectLock())
    invariant issubtype(typeof(i_0), int())
    invariant _checkDefined(l_8, 3694444) != null
    invariant true
    invariant !_loop_check_before_0 ==> [true, (forperm _r_65: Ref [_r_65.MustReleaseBounded] :: Level(_r_65) < Level(_checkDefined(l_8, 3694444))) && ((forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: Level(_r_65) < Level(_checkDefined(l_8, 3694444))) && _residue_172 < Level(_checkDefined(l_8, 3694444)))]
    invariant _loop_check_before_0 ==> [true, (forperm _r_66: Ref [_r_66.MustReleaseBounded] :: Level(_r_66) < Level(_checkDefined(l_8, 3694444))) && ((forperm _r_66: Ref [_r_66.MustReleaseUnbounded] :: Level(_r_66) < Level(_checkDefined(l_8, 3694444))) && _residue_165 < Level(_checkDefined(l_8, 3694444)))]
    invariant [true, _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), 5) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_72: Ref [MustInvokeBounded(_r_72)] :: false) && ((forperm _r_72: Ref [MustInvokeUnbounded(_r_72)] :: false) && ((forperm _r_72: Ref [_r_72.MustReleaseBounded] :: false) && (forperm _r_72: Ref [_r_72.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_0 ==> (forperm _r_72: Ref [MustInvokeBounded(_r_72)] :: false) && ((forperm _r_72: Ref [MustInvokeUnbounded(_r_72)] :: false) && ((forperm _r_72: Ref [_r_72.MustReleaseBounded] :: false) && (forperm _r_72: Ref [_r_72.MustReleaseUnbounded] :: false)))] 
  {
    inhale _residue_172 < Level(_checkDefined(l_8, 3694444))
    _loop_measures_0 := Seq[Measure$]()
    _cwl_165 := Lock_acquire(_cthread_165, _method_measures_165, _residue_172, _checkDefined(l_8, 3694444))
    unfold acc(Lock_invariant(_checkDefined(l_8, 3694444)), write)
    fold acc(Lock_invariant(_checkDefined(l_8, 3694444)), write)
    _cwl_165 := Lock_release(_cthread_165, _method_measures_165, _residue_172, _checkDefined(l_8, 3694444))
    j := __prim__int___box__(0)
    inhale _isDefined(106)
    // Save current MustTerminate amount._loop_original_must_terminate_1 := perm(MustTerminate(_cthread_165))
    // Save loop termination promise._loop_termination_flag_1 := false
    // We are before loop._loop_check_before_1 := true
    while (int___lt__(int___unbox__(_checkDefined(j, 106)), 5))
      invariant [(forperm _r_69: Ref [_r_69.MustReleaseBounded] :: Level(_r_69) <= _residue_173) && ((forperm _r_69: Ref [_r_69.MustReleaseUnbounded] :: Level(_r_69) <= _residue_173) && _residue_172 <= _residue_173), true]
      invariant true
      invariant issubtype(typeof(l_8), ObjectLock())
      invariant issubtype(typeof(j), int())
      invariant _checkDefined(l_8, 3694444) != null
      invariant true
      invariant !_loop_check_before_1 ==> [true, (forperm _r_67: Ref [_r_67.MustReleaseBounded] :: Level(_r_67) < Level(_checkDefined(l_8, 3694444))) && ((forperm _r_67: Ref [_r_67.MustReleaseUnbounded] :: Level(_r_67) < Level(_checkDefined(l_8, 3694444))) && _residue_173 < Level(_checkDefined(l_8, 3694444)))]
      invariant _loop_check_before_1 ==> [true, (forperm _r_68: Ref [_r_68.MustReleaseBounded] :: Level(_r_68) < Level(_checkDefined(l_8, 3694444))) && ((forperm _r_68: Ref [_r_68.MustReleaseUnbounded] :: Level(_r_68) < Level(_checkDefined(l_8, 3694444))) && _residue_172 < Level(_checkDefined(l_8, 3694444)))]
      invariant [true, _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(_checkDefined(j, 106)), 5) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))]
      invariant [true, !_loop_check_before_1 ==> (forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))] 
    {
      inhale _residue_173 < Level(_checkDefined(l_8, 3694444))
      _loop_measures_1 := Seq[Measure$]()
      _cwl_165 := Lock_acquire(_cthread_165, _method_measures_165, _residue_173, _checkDefined(l_8, 3694444))
      unfold acc(Lock_invariant(_checkDefined(l_8, 3694444)), write)
      fold acc(Lock_invariant(_checkDefined(l_8, 3694444)), write)
      _cwl_165 := Lock_release(_cthread_165, _method_measures_165, _residue_173, _checkDefined(l_8, 3694444))
      object_res_27 := new()
      inhale typeof(object_res_27) == object()
      ObjectLock_res_27 := new()
      inhale typeof(ObjectLock_res_27) == ObjectLock()
      inhale Lock_get_locked(ObjectLock_res_27) == object_res_27
      fold acc(Lock_invariant(ObjectLock_res_27), write)
      _cwl_165 := Lock___init__(_cthread_165, _method_measures_165, _residue_173, ObjectLock_res_27, object_res_27, null, null)
      l_8 := ObjectLock_res_27
      inhale _isDefined(3694444)
      j := __prim__int___box__(int___add__(int___unbox__(j), 1))
      inhale _isDefined(106)
      label loop_end_1
      // We are after loop body._loop_check_before_1 := false
      // Check if loop continues to terminate.assert _loop_termination_flag_1 ==> !int___lt__(int___unbox__(_checkDefined(j, 106)), 5)
    }
    inhale _residue_172 < Level(_checkDefined(l_8, 3694444))
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_165)) > none ==> acc(MustTerminate(_cthread_165), perm(MustTerminate(_cthread_165)) - _loop_original_must_terminate_1)
    label post_loop_1
    _res := null
    i_0 := __prim__int___box__(int___add__(int___unbox__(i_0), 1))
    inhale _isDefined(3170153)
    label loop_end_0
    // We are after loop body._loop_check_before_0 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_0 ==> !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), 5)
  }
  inhale _residue_165 < Level(_checkDefined(l_8, 3694444))
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_165)) > none ==> acc(MustTerminate(_cthread_165), perm(MustTerminate(_cthread_165)) - _loop_original_must_terminate_0)
  label post_loop_0
  _res := null
  _res := _checkDefined(l_8, 3694444)
  goto __end
  goto __end
  label __end
}

method Lock___init__(_cthread_167: Ref, _caller_measures_167: Seq[Measure$], _residue_167: Perm, self_1: Ref, locked_object: Ref, above: Ref, below: Ref) returns (_current_wait_level_167: Perm)
  requires _cthread_167 != null
  requires issubtype(typeof(_cthread_167), Thread_0())
  requires self_1 != null
  requires issubtype(typeof(self_1), Lock(Lock_arg(typeof(self_1), 0)))
  requires issubtype(typeof(locked_object), Lock_arg(typeof(self_1), 0))
  requires above == null || issubtype(typeof(above), BaseLock())
  requires below == null || issubtype(typeof(below), BaseLock())
  requires issubtype(Lock_arg(typeof(self_1), 0), object())
  requires self_1 != null
  requires [acc(MustTerminate(_cthread_167), write), true]
  requires above == null && below != null ==> [_residue_167 < Level(below), true]
  requires above != null && below != null ==> Level(above) < Level(below)
  requires acc(Lock_invariant(self_1), write)
  requires [true, above == null && below != null ==> (forperm _r_76: Ref [_r_76.MustReleaseBounded] :: Level(_r_76) < Level(below)) && ((forperm _r_76: Ref [_r_76.MustReleaseUnbounded] :: Level(_r_76) < Level(below)) && _residue_167 < Level(below))]
  requires [true, Measure$check(_caller_measures_167, _cthread_167, 1) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_79: Ref [MustInvokeBounded(_r_79)] :: false) && ((forperm _r_79: Ref [MustInvokeUnbounded(_r_79)] :: false) && ((forperm _r_79: Ref [_r_79.MustReleaseBounded] :: false) && (forperm _r_79: Ref [_r_79.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_78: Ref [_r_78.MustReleaseBounded] :: Level(_r_78) <= _current_wait_level_167) && ((forperm _r_78: Ref [_r_78.MustReleaseUnbounded] :: Level(_r_78) <= _current_wait_level_167) && _residue_167 <= _current_wait_level_167), true]
  ensures above == null ==> [_current_wait_level_167 < Level(self_1), true]
  ensures above != null ==> Level(above) < Level(self_1)
  ensures below != null ==> Level(self_1) < Level(below)
{
  var _cwl_167: Perm
  inhale typeof(self_1) == Lock(Lock_arg(typeof(self_1), 0))
  inhale false
}

method Lock_acquire(_cthread_168: Ref, _caller_measures_168: Seq[Measure$], _residue_168: Perm, self_2: Ref) returns (_current_wait_level_168: Perm)
  requires _cthread_168 != null
  requires issubtype(typeof(_cthread_168), Thread_0())
  requires issubtype(typeof(self_2), Lock(Lock_arg(typeof(self_2), 0)))
  requires issubtype(Lock_arg(typeof(self_2), 0), object())
  requires self_2 != null
  requires [acc(MustTerminate(_cthread_168), write), true]
  requires [_residue_168 < Level(self_2), true]
  requires true
  requires true
  requires [true, (forperm _r_80: Ref [_r_80.MustReleaseBounded] :: Level(_r_80) < Level(self_2)) && ((forperm _r_80: Ref [_r_80.MustReleaseUnbounded] :: Level(_r_80) < Level(self_2)) && _residue_168 < Level(self_2))]
  requires [true, Measure$check(_caller_measures_168, _cthread_168, 1) || perm(MustTerminate(_cthread_168)) == none && ((forperm _r_82: Ref [MustInvokeBounded(_r_82)] :: false) && ((forperm _r_82: Ref [MustInvokeUnbounded(_r_82)] :: false) && ((forperm _r_82: Ref [_r_82.MustReleaseBounded] :: false) && (forperm _r_82: Ref [_r_82.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_81: Ref [_r_81.MustReleaseBounded] :: Level(_r_81) <= _current_wait_level_168) && ((forperm _r_81: Ref [_r_81.MustReleaseUnbounded] :: Level(_r_81) <= _current_wait_level_168) && _residue_168 <= _current_wait_level_168), true]
  ensures acc(Lock_invariant(self_2), write)
  ensures [acc(self_2.MustReleaseUnbounded, write), acc(self_2.MustReleaseUnbounded, write)]
{
  var _cwl_168: Perm
  inhale typeof(self_2) == Lock(Lock_arg(typeof(self_2), 0))
  inhale false
}

method Lock_release(_cthread_169: Ref, _caller_measures_169: Seq[Measure$], _residue_169: Perm, self_3: Ref) returns (_current_wait_level_169: Perm)
  requires _cthread_169 != null
  requires issubtype(typeof(_cthread_169), Thread_0())
  requires issubtype(typeof(self_3), Lock(Lock_arg(typeof(self_3), 0)))
  requires issubtype(Lock_arg(typeof(self_3), 0), object())
  requires self_3 != null
  requires [acc(MustTerminate(_cthread_169), write), true]
  requires [acc(self_3.MustReleaseBounded, write), (perm(self_3.MustReleaseBounded) > none && Measure$check(_caller_measures_169, self_3, 1) ? acc(self_3.MustReleaseBounded, write) : acc(self_3.MustReleaseUnbounded, write))]
  requires acc(Lock_invariant(self_3), write)
  requires true
  requires true
  requires [true, Measure$check(_caller_measures_169, _cthread_169, 1) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_84: Ref [MustInvokeBounded(_r_84)] :: false) && ((forperm _r_84: Ref [MustInvokeUnbounded(_r_84)] :: false) && ((forperm _r_84: Ref [_r_84.MustReleaseBounded] :: false) && (forperm _r_84: Ref [_r_84.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_83: Ref [_r_83.MustReleaseBounded] :: Level(_r_83) <= _current_wait_level_169) && ((forperm _r_83: Ref [_r_83.MustReleaseUnbounded] :: Level(_r_83) <= _current_wait_level_169) && _residue_169 <= _current_wait_level_169), true]
{
  var _cwl_169: Perm
  inhale typeof(self_3) == Lock(Lock_arg(typeof(self_3), 0))
  inhale false
}

method main(_cthread_171: Ref, _caller_measures_171: Seq[Measure$], _residue_174: Perm) returns (_current_wait_level_171: Perm)
  requires _cthread_171 != null
  requires issubtype(typeof(_cthread_171), Thread_0())
  requires [true, perm(MustTerminate(_cthread_171)) == none && ((forperm _r_87: Ref [MustInvokeBounded(_r_87)] :: false) && ((forperm _r_87: Ref [MustInvokeUnbounded(_r_87)] :: false) && ((forperm _r_87: Ref [_r_87.MustReleaseBounded] :: false) && (forperm _r_87: Ref [_r_87.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_85: Ref [_r_85.MustReleaseBounded] :: Level(_r_85) <= _current_wait_level_171) && ((forperm _r_85: Ref [_r_85.MustReleaseUnbounded] :: Level(_r_85) <= _current_wait_level_171) && _residue_174 <= _current_wait_level_171), true]
  ensures [true, (forperm _r_86: Ref [MustInvokeBounded(_r_86)] :: false) && ((forperm _r_86: Ref [MustInvokeUnbounded(_r_86)] :: false) && ((forperm _r_86: Ref [_r_86.MustReleaseBounded] :: false) && (forperm _r_86: Ref [_r_86.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var module_defined_1: Bool
  var module_names_1: Set[_Name]
  var _cwl_171: Perm
  var _method_measures_171: Seq[Measure$]
  _method_measures_171 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_defined_1 := false
  module_names_1 := Set[_Name]()
  module_names_1 := (module_names_1 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file___0()._val, 99 / 100) && issubtype(typeof(__file___0()._val), str()) && issubtype(typeof(__file___0()._val), str())
  module_names_1 := (module_names_1 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name___0()._val, 99 / 100) && issubtype(typeof(__name___0()._val), str()) && issubtype(typeof(__name___0()._val), str()) && !str___eq__(str___create__(8, 2489249333222104298408468319), __name___0()._val)
  module_names_0 := (module_names_0 union Set(_single(6513473)))
  module_names_0 := (module_names_0 union Set(_single(3655284702854286527)))
  module_names_0 := (module_names_0 union Set(_single(4814323939045640847723228745)))
  module_names_0 := (module_names_0 union Set(_single(3939413879042314935)))
  module_names_0 := (module_names_0 union Set(_single(5969745018335918569738826320)))
  module_names_0 := (module_names_0 union Set(_single(7136376649266381199951095122)))
  module_names_0 := (module_names_0 union Set(_single(4264095844347449787)))
  module_names_0 := (module_names_0 union Set(_single(4231737769045301934)))
  module_names_0 := (module_names_0 union Set(_single(4659879962334230944322642242)))
  if (!module_defined_1) {
    module_defined_1 := true
    module_names_1 := (module_names_1 union Set(_single(3682427259782798009)))
    module_names_1 := (module_names_1 union Set(_single(5123216512802524336881954895)))
    module_names_1 := (module_names_1 union Set(_single(3686932966091490988)))
    module_names_1 := (module_names_1 union Set(_single(11116006324067352974226974112924930237)))
    module_names_1 := (module_names_1 union Set(_single(4264095844347449787)))
    module_names_1 := (module_names_1 union Set(_single(3939413879042314935)))
    module_names_1 := (module_names_1 union Set(_single(7827276)))
    module_names_1 := (module_names_1 union Set(_single(3584533797388877637428408140)))
    module_names_1 := (module_names_1 union Set(_single(5969745018335918569738826320)))
    module_names_1 := (module_names_1 union Set(_single(1701999952)))
    module_names_1 := (module_names_1 union Set(_single(7136376649266381199951095122)))
    module_names_1 := (module_names_1 union Set(_single(4659879962334230944322642242)))
    module_names_1 := (module_names_1 union Set(_single(3655571673241459380)))
    module_names_1 := (module_names_1 union Set(_single(5020080360567004017642927437)))
    module_names_1 := (module_names_1 union Set(_single(5460990052674857173734662115181759155)))
    module_names_1 := (module_names_1 union Set(_single(4900434677047853433511043415)))
    assert true && (_single(4659879962334230944322642242) in module_names_1) && (_single(4659879962334230944322642242) in module_names_1)
    assert true && (_single(4659879962334230944322642242) in module_names_1)
    module_names_1 := (module_names_1 union Set(_single(3493880855485680332086796127)))
    module_names_1 := (module_names_1 union Set(_single(4196433967405385533277627751)))
    module_names_1 := (module_names_1 union Set(_single(4259881987508968607)))
    module_names_1 := (module_names_1 union Set(_single(3682719749203270286)))
    module_names_1 := (module_names_1 union Set(_single(1801678668)))
  }
  assert (_single(1801678668) in module_names_1)
  module_names_0 := (module_names_0 union Set(_single(1801678668)))
  assert true
  assert true && (_single(1801678668) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(5262747629716623330057544271)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4628309969551728799402783331)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(149707976814663193428622595189362364022502452432362060512590393955)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(150119352953993494939161337485001701648748136398770455478427546211)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(39387060074235745245508202364808449845721657955)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(39409360819434275868649738083081098207227638371)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(19372278252794956491172574380157826560222917219)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(19394578997993487114314110098430474921728897635)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(19416879743192017737455645816703123283234878051)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(81495606655388018408981237360471759292975139611622411677)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(81495608116889655739884155564156592009258159267554954653)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(81495609578391293070787073767841424725541178923487497629)))
  assert true && (_single(5262747629716623330057544271) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(3682719749203270286)))
  assert true && (_single(5262747629716623330057544271) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(4259881987508968607)))
  assert true && (_single(5262747629716623330057544271) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(12470059865555451812985131644064796828)))
  assert true && (_single(5262747629716623330057544271) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(94506364997104979036073558946476144410253294131768560171663582049)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(83314317098006117978421505113364657251568720845752489426422194955400707355914101601)))
  assert true && (_single(5262747629716623330057544271) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(83314432890095355294616928684349665939476574115737155066986234412984715269043741537)))
  assert true && (_single(5262747629716623330057544271) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(20056577091047974664715702331911346077)))
  assert true && (_single(5262747629716623330057544271) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(34251017173995639779597610489782174614861082476)))
  assert true && (_single(5262747629716623330057544271) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(155523819403745241796782748002877653905949985809860079886708993900)))
  goto __end
  label __end
}