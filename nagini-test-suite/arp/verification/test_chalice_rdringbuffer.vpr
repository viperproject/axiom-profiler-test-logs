domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function RingBuffer(): PyType
  
  unique function Client(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_RingBuffer {
    extends_(RingBuffer(), object()) && get_basic(RingBuffer()) == RingBuffer()
  }
  
  axiom subtype_Client {
    extends_(Client(), object()) && get_basic(Client()) == Client()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  unique function contents(): Function
  
  unique function capacity(): Function
  
  unique function head(): Function
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
  
  unique function create_threading(): ThreadingID
  
  unique function clear_threading_0(): ThreadingID
  
  unique function push_threading(): ThreadingID
  
  unique function pop_threading(): ThreadingID
  
  unique function testHarness_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

domain ARPLog {
  
  function ARPLog_Nil(): ARPLog
  
  function ARPLog_Cons(arp_quant_ref: Ref, arp_quant_fieldId: Int, permission: Perm, arp_quant_level: Int, arp_quant_log: ARPLog): ARPLog
  
  function ARPLog_head_ref_Cons(arp_quant_log: ARPLog): Ref
  
  function ARPLog_head_fieldId_Cons(arp_quant_log: ARPLog): Int
  
  function ARPLog_head_permission_Cons(arp_quant_log: ARPLog): Perm
  
  function ARPLog_head_level_Cons(arp_quant_log: ARPLog): Int
  
  function ARPLog_tail_Cons(arp_quant_log: ARPLog): ARPLog
  
  function ARPLog_type(arp_quant_log: ARPLog): Int
  
  unique function ARPLog_type_Nil(): Int
  
  unique function ARPLog_type_Cons(): Int
  
  function ARPLog_is_Nil(arp_quant_log: ARPLog): Bool
  
  function ARPLog_is_Cons(arp_quant_log: ARPLog): Bool
  
  function ARPLog_max_level(arp_quant_log: ARPLog): Int
  
  function ARPLog_sum_gt(arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog): Perm
  
  function ARPLog_sum(arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog): Perm
  
  axiom ARPLog_destruct_over_construct_Cons {
    (forall arp_quant_head_ref: Ref, arp_quant_head_fieldId: Int, arp_quant_head_permission: Perm, arp_quant_head_level: Int, arp_quant_tail: ARPLog :: { ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail) } ARPLog_head_ref_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_ref && (ARPLog_head_fieldId_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_fieldId && (ARPLog_head_permission_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_permission && (ARPLog_head_level_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_level && ARPLog_tail_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_tail))))
  }
  
  axiom ARPLog_construct_over_destruct_Cons {
    (forall arp_quant_log: ARPLog :: { ARPLog_head_ref_Cons(arp_quant_log) } { ARPLog_head_fieldId_Cons(arp_quant_log) } { ARPLog_head_permission_Cons(arp_quant_log) } { ARPLog_head_level_Cons(arp_quant_log) } { ARPLog_tail_Cons(arp_quant_log) } ARPLog_is_Cons(arp_quant_log) ==> arp_quant_log == ARPLog_Cons(ARPLog_head_ref_Cons(arp_quant_log), ARPLog_head_fieldId_Cons(arp_quant_log), ARPLog_head_permission_Cons(arp_quant_log), ARPLog_head_level_Cons(arp_quant_log), ARPLog_tail_Cons(arp_quant_log)))
  }
  
  axiom ARPLog_type_of_Nil {
    ARPLog_type(ARPLog_Nil()) == ARPLog_type_Nil()
  }
  
  axiom ARPLog_type_of_Cons {
    (forall arp_quant_head_ref: Ref, arp_quant_head_fieldId: Int, arp_quant_head_permission: Perm, arp_quant_head_level: Int, arp_quant_tail: ARPLog :: ARPLog_type(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == ARPLog_type_Cons())
  }
  
  axiom ARPLog_type_existence {
    (forall arp_quant_log: ARPLog :: { ARPLog_is_Nil(arp_quant_log) } { ARPLog_is_Cons(arp_quant_log) } { ARPLog_type(arp_quant_log) } ARPLog_type(arp_quant_log) == ARPLog_type_Nil() || ARPLog_type(arp_quant_log) == ARPLog_type_Cons())
  }
  
  axiom ARPLog_type_is_Nil {
    (forall arp_quant_log: ARPLog :: { ARPLog_is_Nil(arp_quant_log) } { ARPLog_type(arp_quant_log) } (ARPLog_type(arp_quant_log) == ARPLog_type_Nil()) == ARPLog_is_Nil(arp_quant_log))
  }
  
  axiom ARPLog_type_is_Cons {
    (forall arp_quant_log: ARPLog :: { ARPLog_is_Cons(arp_quant_log) } { ARPLog_type(arp_quant_log) } (ARPLog_type(arp_quant_log) == ARPLog_type_Cons()) == ARPLog_is_Cons(arp_quant_log))
  }
  
  axiom ARPLog_log_max_level {
    (forall arp_quant_log: ARPLog :: { ARPLog_max_level(arp_quant_log) } ARPLog_max_level(arp_quant_log) == 6)
  }
  
  axiom ARPLog_sum_gt_of_log {
    (forall arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog :: { ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) } (arp_quant_level >= ARPLog_max_level(arp_quant_log) ==> ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == none) && (arp_quant_level < ARPLog_max_level(arp_quant_log) ==> ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level + 1, arp_quant_log) + ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level + 1, arp_quant_log)))
  }
  
  axiom ARPLog_sum_of_log {
    (forall arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog :: { ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) } (ARPLog_is_Nil(arp_quant_log) ==> ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == none) && (ARPLog_is_Cons(arp_quant_log) ==> ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, ARPLog_tail_Cons(arp_quant_log)) + (ARPLog_head_ref_Cons(arp_quant_log) == arp_quant_ref && (ARPLog_head_fieldId_Cons(arp_quant_log) == arp_quant_fieldId && ARPLog_head_level_Cons(arp_quant_log) == arp_quant_level) ? ARPLog_head_permission_Cons(arp_quant_log) : none)))
  }
}

domain ARP_field_functions {
  
  unique function field__val(): Int
  
  unique function field___container(): Int
  
  unique function field___iter_index(): Int
  
  unique function field___previous(): Int
  
  unique function field_list_acc(): Int
  
  unique function field_set_acc(): Int
  
  unique function field_dict_acc(): Int
  
  unique function field_Measure$acc(): Int
  
  unique function field_RingBuffer_data(): Int
  
  unique function field_RingBuffer_first(): Int
  
  unique function field_RingBuffer_datalen(): Int
  
  function predicate__thread_start(t: Ref): Int
  
  function predicate__thread_post(t: Ref): Int
  
  function predicate__MaySet(rec: Ref, id: Int): Int
  
  function predicate_RingBuffer_valid(self_7: Ref): Int
  
  axiom ARP__thread_start__val {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field__val())
  }
  
  axiom ARP__thread_start___container {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field___container())
  }
  
  axiom ARP__thread_start___iter_index {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field___iter_index())
  }
  
  axiom ARP__thread_start___previous {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field___previous())
  }
  
  axiom ARP__thread_start_list_acc {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field_list_acc())
  }
  
  axiom ARP__thread_start_set_acc {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field_set_acc())
  }
  
  axiom ARP__thread_start_dict_acc {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field_dict_acc())
  }
  
  axiom ARP__thread_start_Measure$acc {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field_Measure$acc())
  }
  
  axiom ARP__thread_start_RingBuffer_data {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field_RingBuffer_data())
  }
  
  axiom ARP__thread_start_RingBuffer_first {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field_RingBuffer_first())
  }
  
  axiom ARP__thread_start_RingBuffer_datalen {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field_RingBuffer_datalen())
  }
  
  axiom ARP__thread_start__thread_post {
    (forall t: Ref, t_1: Ref :: { predicate__thread_start(t),predicate__thread_post(t_1) } predicate__thread_start(t) != predicate__thread_post(t_1))
  }
  
  axiom ARP__thread_start__MaySet {
    (forall t: Ref, rec_0: Ref, id_0: Int :: { predicate__thread_start(t),predicate__MaySet(rec_0, id_0) } predicate__thread_start(t) != predicate__MaySet(rec_0, id_0))
  }
  
  axiom ARP__thread_start_RingBuffer_valid {
    (forall t: Ref, self_7_0: Ref :: { predicate__thread_start(t),predicate_RingBuffer_valid(self_7_0) } predicate__thread_start(t) != predicate_RingBuffer_valid(self_7_0))
  }
  
  axiom ARP__thread_start {
    (forall t: Ref, t_0: Ref :: { predicate__thread_start(t),predicate__thread_start(t_0) } predicate__thread_start(t) == predicate__thread_start(t_0) ==> t == t_0)
  }
  
  axiom ARP__thread_post__val {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field__val())
  }
  
  axiom ARP__thread_post___container {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field___container())
  }
  
  axiom ARP__thread_post___iter_index {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field___iter_index())
  }
  
  axiom ARP__thread_post___previous {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field___previous())
  }
  
  axiom ARP__thread_post_list_acc {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field_list_acc())
  }
  
  axiom ARP__thread_post_set_acc {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field_set_acc())
  }
  
  axiom ARP__thread_post_dict_acc {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field_dict_acc())
  }
  
  axiom ARP__thread_post_Measure$acc {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field_Measure$acc())
  }
  
  axiom ARP__thread_post_RingBuffer_data {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field_RingBuffer_data())
  }
  
  axiom ARP__thread_post_RingBuffer_first {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field_RingBuffer_first())
  }
  
  axiom ARP__thread_post_RingBuffer_datalen {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field_RingBuffer_datalen())
  }
  
  axiom ARP__thread_post__thread_start {
    (forall t: Ref, t_3: Ref :: { predicate__thread_post(t),predicate__thread_start(t_3) } predicate__thread_post(t) != predicate__thread_start(t_3))
  }
  
  axiom ARP__thread_post__MaySet {
    (forall t: Ref, rec_1: Ref, id_1: Int :: { predicate__thread_post(t),predicate__MaySet(rec_1, id_1) } predicate__thread_post(t) != predicate__MaySet(rec_1, id_1))
  }
  
  axiom ARP__thread_post_RingBuffer_valid {
    (forall t: Ref, self_7_1: Ref :: { predicate__thread_post(t),predicate_RingBuffer_valid(self_7_1) } predicate__thread_post(t) != predicate_RingBuffer_valid(self_7_1))
  }
  
  axiom ARP__thread_post {
    (forall t: Ref, t_2: Ref :: { predicate__thread_post(t),predicate__thread_post(t_2) } predicate__thread_post(t) == predicate__thread_post(t_2) ==> t == t_2)
  }
  
  axiom ARP__MaySet__val {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field__val())
  }
  
  axiom ARP__MaySet___container {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field___container())
  }
  
  axiom ARP__MaySet___iter_index {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field___iter_index())
  }
  
  axiom ARP__MaySet___previous {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field___previous())
  }
  
  axiom ARP__MaySet_list_acc {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_list_acc())
  }
  
  axiom ARP__MaySet_set_acc {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_set_acc())
  }
  
  axiom ARP__MaySet_dict_acc {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_dict_acc())
  }
  
  axiom ARP__MaySet_Measure$acc {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_Measure$acc())
  }
  
  axiom ARP__MaySet_RingBuffer_data {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_RingBuffer_data())
  }
  
  axiom ARP__MaySet_RingBuffer_first {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_RingBuffer_first())
  }
  
  axiom ARP__MaySet_RingBuffer_datalen {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_RingBuffer_datalen())
  }
  
  axiom ARP__MaySet__thread_start {
    (forall rec: Ref, id: Int, t_4: Ref :: { predicate__MaySet(rec, id),predicate__thread_start(t_4) } predicate__MaySet(rec, id) != predicate__thread_start(t_4))
  }
  
  axiom ARP__MaySet__thread_post {
    (forall rec: Ref, id: Int, t_5: Ref :: { predicate__MaySet(rec, id),predicate__thread_post(t_5) } predicate__MaySet(rec, id) != predicate__thread_post(t_5))
  }
  
  axiom ARP__MaySet_RingBuffer_valid {
    (forall rec: Ref, id: Int, self_7_2: Ref :: { predicate__MaySet(rec, id),predicate_RingBuffer_valid(self_7_2) } predicate__MaySet(rec, id) != predicate_RingBuffer_valid(self_7_2))
  }
  
  axiom ARP__MaySet {
    (forall rec: Ref, id: Int, rec_2: Ref, id_2: Int :: { predicate__MaySet(rec, id),predicate__MaySet(rec_2, id_2) } predicate__MaySet(rec, id) == predicate__MaySet(rec_2, id_2) ==> rec == rec_2 && id == id_2)
  }
  
  axiom ARP_RingBuffer_valid__val {
    (forall self_7: Ref :: { predicate_RingBuffer_valid(self_7) } predicate_RingBuffer_valid(self_7) != field__val())
  }
  
  axiom ARP_RingBuffer_valid___container {
    (forall self_7: Ref :: { predicate_RingBuffer_valid(self_7) } predicate_RingBuffer_valid(self_7) != field___container())
  }
  
  axiom ARP_RingBuffer_valid___iter_index {
    (forall self_7: Ref :: { predicate_RingBuffer_valid(self_7) } predicate_RingBuffer_valid(self_7) != field___iter_index())
  }
  
  axiom ARP_RingBuffer_valid___previous {
    (forall self_7: Ref :: { predicate_RingBuffer_valid(self_7) } predicate_RingBuffer_valid(self_7) != field___previous())
  }
  
  axiom ARP_RingBuffer_valid_list_acc {
    (forall self_7: Ref :: { predicate_RingBuffer_valid(self_7) } predicate_RingBuffer_valid(self_7) != field_list_acc())
  }
  
  axiom ARP_RingBuffer_valid_set_acc {
    (forall self_7: Ref :: { predicate_RingBuffer_valid(self_7) } predicate_RingBuffer_valid(self_7) != field_set_acc())
  }
  
  axiom ARP_RingBuffer_valid_dict_acc {
    (forall self_7: Ref :: { predicate_RingBuffer_valid(self_7) } predicate_RingBuffer_valid(self_7) != field_dict_acc())
  }
  
  axiom ARP_RingBuffer_valid_Measure$acc {
    (forall self_7: Ref :: { predicate_RingBuffer_valid(self_7) } predicate_RingBuffer_valid(self_7) != field_Measure$acc())
  }
  
  axiom ARP_RingBuffer_valid_RingBuffer_data {
    (forall self_7: Ref :: { predicate_RingBuffer_valid(self_7) } predicate_RingBuffer_valid(self_7) != field_RingBuffer_data())
  }
  
  axiom ARP_RingBuffer_valid_RingBuffer_first {
    (forall self_7: Ref :: { predicate_RingBuffer_valid(self_7) } predicate_RingBuffer_valid(self_7) != field_RingBuffer_first())
  }
  
  axiom ARP_RingBuffer_valid_RingBuffer_datalen {
    (forall self_7: Ref :: { predicate_RingBuffer_valid(self_7) } predicate_RingBuffer_valid(self_7) != field_RingBuffer_datalen())
  }
  
  axiom ARP_RingBuffer_valid__thread_start {
    (forall self_7: Ref, t_6: Ref :: { predicate_RingBuffer_valid(self_7),predicate__thread_start(t_6) } predicate_RingBuffer_valid(self_7) != predicate__thread_start(t_6))
  }
  
  axiom ARP_RingBuffer_valid__thread_post {
    (forall self_7: Ref, t_7: Ref :: { predicate_RingBuffer_valid(self_7),predicate__thread_post(t_7) } predicate_RingBuffer_valid(self_7) != predicate__thread_post(t_7))
  }
  
  axiom ARP_RingBuffer_valid__MaySet {
    (forall self_7: Ref, rec_3: Ref, id_3: Int :: { predicate_RingBuffer_valid(self_7),predicate__MaySet(rec_3, id_3) } predicate_RingBuffer_valid(self_7) != predicate__MaySet(rec_3, id_3))
  }
  
  axiom ARP_RingBuffer_valid {
    (forall self_7: Ref, self_7_3: Ref :: { predicate_RingBuffer_valid(self_7),predicate_RingBuffer_valid(self_7_3) } predicate_RingBuffer_valid(self_7) == predicate_RingBuffer_valid(self_7_3) ==> self_7 == self_7_3)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field RingBuffer_data: Ref

field RingBuffer_first: Ref

field RingBuffer_datalen: Ref

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function RingBuffer_contents(self: Ref): Ref
  requires issubtype(typeof(self), RingBuffer())
  requires self != null
  requires acc(RingBuffer_valid(self), wildcard)
  ensures issubtype(typeof(result), Sequence(int())) 
{
  (unfolding acc(RingBuffer_valid(self), wildcard) in (int___le__(int___add__(int___unbox__(self.RingBuffer_first), int___unbox__(self.RingBuffer_datalen)), Sequence___len__(self.RingBuffer_data)) ? Sequence_take(Sequence_drop(self.RingBuffer_data, int___unbox__(self.RingBuffer_first)), int___unbox__(self.RingBuffer_datalen)) : Sequence___add__(Sequence_drop(self.RingBuffer_data, int___unbox__(self.RingBuffer_first)), Sequence_take(self.RingBuffer_data, int___sub__(int___add__(int___unbox__(self.RingBuffer_first), int___unbox__(self.RingBuffer_datalen)), Sequence___len__(self.RingBuffer_data))))))
}

function RingBuffer_capacity(self_0: Ref): Ref
  requires issubtype(typeof(self_0), RingBuffer())
  requires self_0 != null
  requires acc(RingBuffer_valid(self_0), wildcard)
  ensures issubtype(typeof(result), int()) 
{
  __prim__int___box__((unfolding acc(RingBuffer_valid(self_0), wildcard) in Sequence___len__(self_0.RingBuffer_data)))
}

function RingBuffer_head(self_1: Ref): Ref
  requires issubtype(typeof(self_1), RingBuffer())
  requires self_1 != null
  requires acc(RingBuffer_valid(self_1), wildcard)
  requires !int___eq__(__prim__int___box__(Sequence___len__(RingBuffer_contents(self_1))), __prim__int___box__(0))
  requires (unfolding acc(RingBuffer_valid(self_1), wildcard) in int___ge__(int___unbox__(self_1.RingBuffer_first), 0) && int___lt__(int___unbox__(self_1.RingBuffer_first), Sequence___len__(self_1.RingBuffer_data)))
  ensures issubtype(typeof(result), int())
  ensures int___eq__(result, Sequence___getitem__(RingBuffer_contents(self_1), __prim__int___box__(0))) 
{
  (unfolding acc(RingBuffer_valid(self_1), wildcard) in Sequence___getitem__(self_1.RingBuffer_data, self_1.RingBuffer_first))
}

function __file__(): Ref 


function __name__(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function int___ge__(self: Int, other: Int): Bool 
{
  self >= other
}

function int___gt__(self: Int, other: Int): Bool 
{
  self > other
}

function int___le__(self: Int, other: Int): Bool 
{
  self <= other
}

function int___lt__(self: Int, other: Int): Bool 
{
  self < other
}

function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function int___sub__(self: Int, other: Int): Int 
{
  self - other
}

function Level(r: Ref): Perm 


function Sequence___create__(prim: Seq[Ref], cont_type: PyType): Ref
  ensures typeof(result) == Sequence(cont_type)
  ensures Sequence___sil_seq__(result) == prim 


function Sequence___sil_seq__(box: Ref): Seq[Ref]
  requires issubtype(typeof(box), Sequence(Sequence_arg(typeof(box), 0))) 


function Sequence___getitem__(self: Ref, index: Ref): Ref
  requires issubtype(typeof(self), Sequence(Sequence_arg(typeof(self), 0)))
  requires issubtype(typeof(index), int())
  requires int___unbox__(index) >= 0 && int___unbox__(index) < Sequence___len__(self)
  ensures result == Sequence___sil_seq__(self)[int___unbox__(index)]
  ensures issubtype(typeof(result), Sequence_arg(typeof(self), 0)) 


function Sequence___len__(self: Ref): Int
  requires issubtype(typeof(self), Sequence(Sequence_arg(typeof(self), 0)))
  ensures result == |Sequence___sil_seq__(self)| 


function Sequence_take(self: Ref, no: Int): Ref
  requires issubtype(typeof(self), Sequence(Sequence_arg(typeof(self), 0)))
  ensures result == Sequence___create__(Sequence___sil_seq__(self)[..no], Sequence_arg(typeof(self), 0)) 


function Sequence_drop(self: Ref, no: Int): Ref
  requires issubtype(typeof(self), Sequence(Sequence_arg(typeof(self), 0)))
  ensures result == Sequence___create__(Sequence___sil_seq__(self)[no..], Sequence_arg(typeof(self), 0)) 


function Sequence_update(self: Ref, index: Int, val: Ref): Ref
  requires issubtype(typeof(self), Sequence(Sequence_arg(typeof(self), 0)))
  ensures result == Sequence___create__(Sequence___sil_seq__(self)[index := val], Sequence_arg(typeof(self), 0)) 


function Sequence___add__(self: Ref, other: Ref): Ref
  requires issubtype(typeof(self), Sequence(Sequence_arg(typeof(self), 0)))
  requires issubtype(typeof(other), Sequence(Sequence_arg(typeof(other), 0)))
  requires Sequence_arg(typeof(self), 0) == Sequence_arg(typeof(other), 0)
  ensures result == Sequence___create__(Sequence___sil_seq__(self) ++ Sequence___sil_seq__(other), Sequence_arg(typeof(self), 0)) 


function Sequence___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), Sequence(Sequence_arg(typeof(self), 0)))
  requires issubtype(typeof(other), Sequence(Sequence_arg(typeof(other), 0)))
  requires Sequence_arg(typeof(self), 0) == Sequence_arg(typeof(other), 0)
  ensures result == (Sequence___sil_seq__(self) == Sequence___sil_seq__(other)) 


function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


function rd(): Perm
  requires false 


function rdc(count: Int): Perm
  requires false 


function rdw(): Perm
  requires false 


function rd_token(tk: Ref): Perm
  ensures none < result && result < write 


function globalRd(): Perm
  ensures none < result && result < write 


function epsilonRd(): Perm
  ensures none < result && result < write 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate RingBuffer_valid(self_7: Ref) {
  true && issubtype(typeof(self_7), RingBuffer()) && (issubtype(typeof(self_7), RingBuffer()) ==> acc(self_7.RingBuffer_data, write) && issubtype(typeof(self_7.RingBuffer_data), Sequence(int())) && (acc(self_7.RingBuffer_first, write) && issubtype(typeof(self_7.RingBuffer_first), int()) && (acc(self_7.RingBuffer_datalen, write) && issubtype(typeof(self_7.RingBuffer_datalen), int()) && (int___le__(0, int___unbox__(self_7.RingBuffer_first)) && (int___le__(0, int___unbox__(self_7.RingBuffer_datalen)) && ((int___eq__(__prim__int___box__(Sequence___len__(self_7.RingBuffer_data)), __prim__int___box__(0)) ==> int___eq__(self_7.RingBuffer_datalen, __prim__int___box__(0)) && int___eq__(self_7.RingBuffer_first, __prim__int___box__(0))) && (int___gt__(Sequence___len__(self_7.RingBuffer_data), 0) ==> int___le__(int___unbox__(self_7.RingBuffer_datalen), Sequence___len__(self_7.RingBuffer_data)) && int___lt__(int___unbox__(self_7.RingBuffer_first), Sequence___len__(self_7.RingBuffer_data)))))))))
}

method RingBuffer___init__(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, self_2: Ref, RingBuffer___init___rd: Perm) returns (_current_wait_level_148: Perm)
  requires none < RingBuffer___init___rd && RingBuffer___init___rd < write
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires self_2 != null
  requires acc(_MaySet(self_2, 12090751183912862946054232913935963822), write)
  requires acc(_MaySet(self_2, 40437788449625771230479836552878032860350409042), write)
  requires acc(_MaySet(self_2, 14556325779913083764007120593892597978148792658), write)
  requires issubtype(typeof(self_2), RingBuffer())
  requires self_2 != null
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_148) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures acc(self_2.RingBuffer_data, write) && issubtype(typeof(self_2.RingBuffer_data), Sequence(int()))
  ensures acc(self_2.RingBuffer_first, write) && issubtype(typeof(self_2.RingBuffer_first), int())
  ensures acc(self_2.RingBuffer_datalen, write) && issubtype(typeof(self_2.RingBuffer_datalen), int())
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_9: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq[Measure$]()
  inhale typeof(self_2) == RingBuffer()
  _err := null
  self_9 := self_2
  if (perm(_MaySet(self_9, 12090751183912862946054232913935963822)) > none) {
    exhale acc(_MaySet(self_9, 12090751183912862946054232913935963822), write)
    inhale acc(self_9.RingBuffer_data, write)
  }
  self_9.RingBuffer_data := Sequence___create__(Seq[Ref](), int())
  if (perm(_MaySet(self_9, 40437788449625771230479836552878032860350409042)) > none) {
    exhale acc(_MaySet(self_9, 40437788449625771230479836552878032860350409042), write)
    inhale acc(self_9.RingBuffer_first, write)
  }
  self_9.RingBuffer_first := __prim__int___box__(0)
  if (perm(_MaySet(self_9, 14556325779913083764007120593892597978148792658)) > none) {
    exhale acc(_MaySet(self_9, 14556325779913083764007120593892597978148792658), write)
    inhale acc(self_9.RingBuffer_datalen, write)
  }
  self_9.RingBuffer_datalen := __prim__int___box__(0)
  goto __end
  label __end
}

method RingBuffer_create(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm, self_3: Ref, n: Ref, RingBuffer_create_rd: Perm) returns (_current_wait_level_149: Perm)
  requires none < RingBuffer_create_rd && RingBuffer_create_rd < write
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires issubtype(typeof(self_3), RingBuffer())
  requires issubtype(typeof(n), int())
  requires self_3 != null
  requires int___le__(0, int___unbox__(n))
  requires acc(self_3.RingBuffer_data, write) && issubtype(typeof(self_3.RingBuffer_data), Sequence(int())) && (acc(self_3.RingBuffer_first, write) && issubtype(typeof(self_3.RingBuffer_first), int()) && (acc(self_3.RingBuffer_datalen, write) && issubtype(typeof(self_3.RingBuffer_datalen), int())))
  requires [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _current_wait_level_149) && ((forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures acc(RingBuffer_valid(self_3), write)
  ensures int___eq__(__prim__int___box__(Sequence___len__(RingBuffer_contents(self_3))), __prim__int___box__(0)) && int___eq__(RingBuffer_capacity(self_3), n)
  ensures [true, (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var i: Ref
  var self_10: Ref
  var n_0: Ref
  var _loop_measures: Seq[Measure$]
  var _loop_check_before: Bool
  var _loop_termination_flag: Bool
  var _loop_original_must_terminate: Perm
  var _residue_155: Perm
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  var ARP_while_rd: Perm
  _method_measures_149 := Seq[Measure$]()
  inhale typeof(self_3) == RingBuffer()
  _err := null
  self_10 := self_3
  n_0 := n
  if (perm(_MaySet(self_10, 12090751183912862946054232913935963822)) > none) {
    exhale acc(_MaySet(self_10, 12090751183912862946054232913935963822), write)
    inhale acc(self_10.RingBuffer_data, write)
  }
  self_10.RingBuffer_data := Sequence___create__(Seq[Ref](), int())
  i := n_0
  inhale _isDefined(105)
  // Save current MustTerminate amount._loop_original_must_terminate := perm(MustTerminate(_cthread_149))
  // Save loop termination promise._loop_termination_flag := false
  // We are before loop._loop_check_before := true
  inhale none < ARP_while_rd && ARP_while_rd < write
  while (int___gt__(int___unbox__(_checkDefined(i, 105)), 0))
    invariant [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _residue_155) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _residue_155) && _residue_149 <= _residue_155), true]
    invariant true
    invariant issubtype(typeof(i), int())
    invariant acc(self_10.RingBuffer_data, write) && issubtype(typeof(self_10.RingBuffer_data), Sequence(int())) && (int___le__(0, int___unbox__(_checkDefined(i, 105))) && int___eq__(__prim__int___box__(Sequence___len__(self_10.RingBuffer_data)), __prim__int___box__(int___sub__(int___unbox__(n_0), int___unbox__(_checkDefined(i, 105))))))
    invariant [true, _loop_check_before ==> _loop_termination_flag || (!int___gt__(int___unbox__(_checkDefined(i, 105)), 0) || perm(MustTerminate(_cthread_149)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before ==> (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures := Seq[Measure$]()
    if (perm(_MaySet(self_10, 12090751183912862946054232913935963822)) > none) {
      exhale acc(_MaySet(self_10, 12090751183912862946054232913935963822), write)
      inhale acc(self_10.RingBuffer_data, write)
    }
    self_10.RingBuffer_data := Sequence___add__(self_10.RingBuffer_data, Sequence___create__(Seq(__prim__int___box__(0)), int()))
    i := __prim__int___box__(int___sub__(int___unbox__(i), 1))
    inhale _isDefined(105)
    // We are after loop body._loop_check_before := false
    // Check if loop continues to terminate.assert _loop_termination_flag ==> !int___gt__(int___unbox__(_checkDefined(i, 105)), 0)
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_149)) > none ==> acc(MustTerminate(_cthread_149), perm(MustTerminate(_cthread_149)) - _loop_original_must_terminate)
  if (perm(_MaySet(self_10, 40437788449625771230479836552878032860350409042)) > none) {
    exhale acc(_MaySet(self_10, 40437788449625771230479836552878032860350409042), write)
    inhale acc(self_10.RingBuffer_first, write)
  }
  self_10.RingBuffer_first := __prim__int___box__(0)
  if (perm(_MaySet(self_10, 14556325779913083764007120593892597978148792658)) > none) {
    exhale acc(_MaySet(self_10, 14556325779913083764007120593892597978148792658), write)
    inhale acc(self_10.RingBuffer_datalen, write)
  }
  self_10.RingBuffer_datalen := __prim__int___box__(0)
  fold acc(RingBuffer_valid(self_10), write)
  goto __end
  label __end
}

method RingBuffer_clear(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm, self_4: Ref, RingBuffer_clear_rd: Perm) returns (_current_wait_level_150: Perm)
  requires none < RingBuffer_clear_rd && RingBuffer_clear_rd < write
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires issubtype(typeof(self_4), RingBuffer())
  requires self_4 != null
  requires acc(RingBuffer_valid(self_4), write)
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <= _current_wait_level_150) && ((forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures acc(RingBuffer_valid(self_4), write)
  ensures int___eq__(__prim__int___box__(Sequence___len__(RingBuffer_contents(self_4))), __prim__int___box__(0)) && int___eq__(RingBuffer_capacity(self_4), old(RingBuffer_capacity(self_4)))
  ensures [true, (forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_11: Ref
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq[Measure$]()
  inhale typeof(self_4) == RingBuffer()
  _err := null
  self_11 := self_4
  unfold acc(RingBuffer_valid(self_11), write)
  if (perm(_MaySet(self_11, 14556325779913083764007120593892597978148792658)) > none) {
    exhale acc(_MaySet(self_11, 14556325779913083764007120593892597978148792658), write)
    inhale acc(self_11.RingBuffer_datalen, write)
  }
  self_11.RingBuffer_datalen := __prim__int___box__(0)
  fold acc(RingBuffer_valid(self_11), write)
  goto __end
  label __end
}

method RingBuffer_push(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_151: Perm, self_5: Ref, x_0: Ref, RingBuffer_push_rd: Perm) returns (_current_wait_level_151: Perm)
  requires none < RingBuffer_push_rd && RingBuffer_push_rd < write
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires issubtype(typeof(self_5), RingBuffer())
  requires issubtype(typeof(x_0), int())
  requires self_5 != null
  requires acc(RingBuffer_valid(self_5), write)
  requires !int___eq__(__prim__int___box__(Sequence___len__(RingBuffer_contents(self_5))), RingBuffer_capacity(self_5))
  requires [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_10: Ref [_r_10.MustReleaseBounded] :: Level(_r_10) <= _current_wait_level_151) && ((forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: Level(_r_10) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]
  ensures acc(RingBuffer_valid(self_5), write)
  ensures Sequence___eq__(RingBuffer_contents(self_5), Sequence___add__(old(RingBuffer_contents(self_5)), Sequence___create__(Seq(x_0), int())))
  ensures int___eq__(RingBuffer_capacity(self_5), old(RingBuffer_capacity(self_5)))
  ensures [true, (forperm _r_11: Ref [MustInvokeBounded(_r_11)] :: false) && ((forperm _r_11: Ref [MustInvokeUnbounded(_r_11)] :: false) && ((forperm _r_11: Ref [_r_11.MustReleaseBounded] :: false) && (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var nextEmpty: Ref
  var self_12: Ref
  var x_2: Ref
  var _cwl_151: Perm
  var _method_measures_151: Seq[Measure$]
  _method_measures_151 := Seq[Measure$]()
  inhale typeof(self_5) == RingBuffer()
  _err := null
  self_12 := self_5
  x_2 := x_0
  unfold acc(RingBuffer_valid(self_12), write)
  nextEmpty := (int___lt__(int___add__(int___unbox__(self_12.RingBuffer_first), int___unbox__(self_12.RingBuffer_datalen)), Sequence___len__(self_12.RingBuffer_data)) ? __prim__int___box__(int___add__(int___unbox__(self_12.RingBuffer_first), int___unbox__(self_12.RingBuffer_datalen))) : __prim__int___box__(int___sub__(int___add__(int___unbox__(self_12.RingBuffer_first), int___unbox__(self_12.RingBuffer_datalen)), Sequence___len__(self_12.RingBuffer_data))))
  inhale _isDefined(7222502837134503444907320686)
  if (perm(_MaySet(self_12, 12090751183912862946054232913935963822)) > none) {
    exhale acc(_MaySet(self_12, 12090751183912862946054232913935963822), write)
    inhale acc(self_12.RingBuffer_data, write)
  }
  self_12.RingBuffer_data := Sequence_update(self_12.RingBuffer_data, int___unbox__(_checkDefined(nextEmpty, 7222502837134503444907320686)), x_2)
  if (perm(_MaySet(self_12, 14556325779913083764007120593892597978148792658)) > none) {
    exhale acc(_MaySet(self_12, 14556325779913083764007120593892597978148792658), write)
    inhale acc(self_12.RingBuffer_datalen, write)
  }
  self_12.RingBuffer_datalen := __prim__int___box__(int___add__(int___unbox__(self_12.RingBuffer_datalen), 1))
  fold acc(RingBuffer_valid(self_12), write)
  goto __end
  label __end
}

method RingBuffer_pop(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm, self_6: Ref, RingBuffer_pop_rd: Perm) returns (_current_wait_level_152: Perm, _res: Ref)
  requires none < RingBuffer_pop_rd && RingBuffer_pop_rd < write
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires issubtype(typeof(self_6), RingBuffer())
  requires self_6 != null
  requires acc(RingBuffer_valid(self_6), write)
  requires !int___eq__(__prim__int___box__(Sequence___len__(RingBuffer_contents(self_6))), __prim__int___box__(0))
  requires [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_13: Ref [_r_13.MustReleaseBounded] :: Level(_r_13) <= _current_wait_level_152) && ((forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: Level(_r_13) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures issubtype(typeof(_res), int())
  ensures acc(RingBuffer_valid(self_6), write)
  ensures int___eq__(_res, Sequence___getitem__(old(RingBuffer_contents(self_6)), __prim__int___box__(0)))
  ensures Sequence___eq__(RingBuffer_contents(self_6), Sequence_drop(old(RingBuffer_contents(self_6)), 1))
  ensures int___eq__(RingBuffer_capacity(self_6), old(RingBuffer_capacity(self_6)))
  ensures [true, (forperm _r_14: Ref [MustInvokeBounded(_r_14)] :: false) && ((forperm _r_14: Ref [MustInvokeUnbounded(_r_14)] :: false) && ((forperm _r_14: Ref [_r_14.MustReleaseBounded] :: false) && (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var res: Ref
  var self_13: Ref
  var _cwl_152: Perm
  var _method_measures_152: Seq[Measure$]
  _method_measures_152 := Seq[Measure$]()
  inhale typeof(self_6) == RingBuffer()
  _res := null
  _err := null
  self_13 := self_6
  unfold acc(RingBuffer_valid(self_13), write)
  res := Sequence___getitem__(self_13.RingBuffer_data, self_13.RingBuffer_first)
  inhale _isDefined(7562610)
  if (perm(_MaySet(self_13, 40437788449625771230479836552878032860350409042)) > none) {
    exhale acc(_MaySet(self_13, 40437788449625771230479836552878032860350409042), write)
    inhale acc(self_13.RingBuffer_first, write)
  }
  self_13.RingBuffer_first := (int___eq__(__prim__int___box__(int___add__(int___unbox__(self_13.RingBuffer_first), 1)), __prim__int___box__(Sequence___len__(self_13.RingBuffer_data))) ? __prim__int___box__(0) : __prim__int___box__(int___add__(int___unbox__(self_13.RingBuffer_first), 1)))
  if (perm(_MaySet(self_13, 14556325779913083764007120593892597978148792658)) > none) {
    exhale acc(_MaySet(self_13, 14556325779913083764007120593892597978148792658), write)
    inhale acc(self_13.RingBuffer_datalen, write)
  }
  self_13.RingBuffer_datalen := __prim__int___box__(int___sub__(int___unbox__(self_13.RingBuffer_datalen), 1))
  fold acc(RingBuffer_valid(self_13), write)
  _res := _checkDefined(res, 7562610)
  goto __end
  goto __end
  label __end
}

method Client_testHarness(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm, self_8: Ref, x_1: Ref, y: Ref, z: Ref, Client_testHarness_rd: Perm) returns (_current_wait_level_154: Perm)
  requires none < Client_testHarness_rd && Client_testHarness_rd < write
  requires _cthread_154 != null
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires issubtype(typeof(self_8), Client())
  requires issubtype(typeof(x_1), int())
  requires issubtype(typeof(y), int())
  requires issubtype(typeof(z), int())
  requires self_8 != null
  requires [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_154) && ((forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]
  ensures [true, (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var b: Ref
  var h: Ref
  var self_14: Ref
  var x_3: Ref
  var y_0: Ref
  var z_0: Ref
  var RingBuffer_res: Ref
  var pop_res: Ref
  var pop_res_0: Ref
  var pop_res_1: Ref
  var _cwl_154: Perm
  var _method_measures_154: Seq[Measure$]
  _method_measures_154 := Seq[Measure$]()
  inhale typeof(self_8) == Client()
  _err := null
  self_14 := self_8
  x_3 := x_1
  y_0 := y
  z_0 := z
  RingBuffer_res := new()
  inhale typeof(RingBuffer_res) == RingBuffer()
  inhale acc(_MaySet(RingBuffer_res, 12090751183912862946054232913935963822), write)
  inhale acc(_MaySet(RingBuffer_res, 40437788449625771230479836552878032860350409042), write)
  inhale acc(_MaySet(RingBuffer_res, 14556325779913083764007120593892597978148792658), write)
  var RingBuffer___init___call_rd: Perm
  inhale none < RingBuffer___init___call_rd && RingBuffer___init___call_rd < write
  _cwl_154 := RingBuffer___init__(_cthread_154, _method_measures_154, _residue_154, RingBuffer_res, RingBuffer___init___call_rd)
  b := RingBuffer_res
  inhale _isDefined(98)
  var RingBuffer_create_call_rd: Perm
  inhale none < RingBuffer_create_call_rd && RingBuffer_create_call_rd < write
  _cwl_154 := RingBuffer_create(_cthread_154, _method_measures_154, _residue_154, _checkDefined(b, 98), __prim__int___box__(2), RingBuffer_create_call_rd)
  var RingBuffer_push_call_rd: Perm
  inhale none < RingBuffer_push_call_rd && RingBuffer_push_call_rd < write
  _cwl_154 := RingBuffer_push(_cthread_154, _method_measures_154, _residue_154, _checkDefined(b, 98), x_3, RingBuffer_push_call_rd)
  var RingBuffer_push_0_call_rd: Perm
  inhale none < RingBuffer_push_0_call_rd && RingBuffer_push_0_call_rd < write
  _cwl_154 := RingBuffer_push(_cthread_154, _method_measures_154, _residue_154, _checkDefined(b, 98), y_0, RingBuffer_push_0_call_rd)
  var RingBuffer_pop_call_rd: Perm
  inhale none < RingBuffer_pop_call_rd && RingBuffer_pop_call_rd < write
  _cwl_154, pop_res := RingBuffer_pop(_cthread_154, _method_measures_154, _residue_154, _checkDefined(b, 98), RingBuffer_pop_call_rd)
  h := pop_res
  inhale _isDefined(104)
  assert int___eq__(_checkDefined(h, 104), x_3)
  var RingBuffer_push_1_call_rd: Perm
  inhale none < RingBuffer_push_1_call_rd && RingBuffer_push_1_call_rd < write
  _cwl_154 := RingBuffer_push(_cthread_154, _method_measures_154, _residue_154, _checkDefined(b, 98), z_0, RingBuffer_push_1_call_rd)
  var RingBuffer_pop_0_call_rd: Perm
  inhale none < RingBuffer_pop_0_call_rd && RingBuffer_pop_0_call_rd < write
  _cwl_154, pop_res_0 := RingBuffer_pop(_cthread_154, _method_measures_154, _residue_154, _checkDefined(b, 98), RingBuffer_pop_0_call_rd)
  h := pop_res_0
  inhale _isDefined(104)
  assert int___eq__(_checkDefined(h, 104), y_0)
  var RingBuffer_pop_1_call_rd: Perm
  inhale none < RingBuffer_pop_1_call_rd && RingBuffer_pop_1_call_rd < write
  _cwl_154, pop_res_1 := RingBuffer_pop(_cthread_154, _method_measures_154, _residue_154, _checkDefined(b, 98), RingBuffer_pop_1_call_rd)
  h := pop_res_1
  inhale _isDefined(104)
  assert int___eq__(_checkDefined(h, 104), z_0)
  goto __end
  label __end
}

method main(_cthread_155: Ref, _caller_measures_155: Seq[Measure$], _residue_156: Perm, main_rd: Perm) returns (_current_wait_level_155: Perm)
  requires none < main_rd && main_rd < write
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires [true, perm(MustTerminate(_cthread_155)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _current_wait_level_155) && ((forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _current_wait_level_155) && _residue_156 <= _current_wait_level_155), true]
  ensures [true, (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var _cwl_155: Perm
  var _method_measures_155: Seq[Measure$]
  _method_measures_155 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(7067168048850532521764351843)))
  module_names_0 := (module_names_0 union Set(_single(6526145392863551346034368867)))
  module_names_0 := (module_names_0 union Set(_single(3509182229183630749)))
  module_names_0 := (module_names_0 union Set(_single(3509067871384408989)))
  module_names_0 := (module_names_0 union Set(_single(1684104552)))
  module_names_0 := (module_names_0 union Set(_single(1752397168)))
  module_names_0 := (module_names_0 union Set(_single(7368560)))
  module_names_0 := (module_names_0 union Set(_single(4041775980649033636070189394)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(6433286470256433619438626164)))
  module_names_0 := (module_names_0 union Set(_single(3653873466795791293)))
  goto __end
  label __end
}

method HavocPerm() returns (returnval: Perm)


method HavocInt() returns (returnval_0: Int)


method HavocBool() returns (returnval_1: Bool)


method HavocRef() returns (returnval_2: Ref)
