domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function State(): PyType
  
  unique function Expr(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_State {
    extends_(State(), object()) && get_basic(State()) == State()
  }
  
  axiom subtype_Expr {
    extends_(Expr(), object()) && get_basic(Expr()) == Expr()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
  
  unique function __init___threading_3(): ThreadingID
  
  unique function eval_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

domain ARPLog {
  
  function ARPLog_Nil(): ARPLog
  
  function ARPLog_Cons(arp_quant_ref: Ref, arp_quant_fieldId: Int, permission: Perm, arp_quant_level: Int, arp_quant_log: ARPLog): ARPLog
  
  function ARPLog_head_ref_Cons(arp_quant_log: ARPLog): Ref
  
  function ARPLog_head_fieldId_Cons(arp_quant_log: ARPLog): Int
  
  function ARPLog_head_permission_Cons(arp_quant_log: ARPLog): Perm
  
  function ARPLog_head_level_Cons(arp_quant_log: ARPLog): Int
  
  function ARPLog_tail_Cons(arp_quant_log: ARPLog): ARPLog
  
  function ARPLog_type(arp_quant_log: ARPLog): Int
  
  unique function ARPLog_type_Nil(): Int
  
  unique function ARPLog_type_Cons(): Int
  
  function ARPLog_is_Nil(arp_quant_log: ARPLog): Bool
  
  function ARPLog_is_Cons(arp_quant_log: ARPLog): Bool
  
  function ARPLog_max_level(arp_quant_log: ARPLog): Int
  
  function ARPLog_sum_gt(arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog): Perm
  
  function ARPLog_sum(arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog): Perm
  
  axiom ARPLog_destruct_over_construct_Cons {
    (forall arp_quant_head_ref: Ref, arp_quant_head_fieldId: Int, arp_quant_head_permission: Perm, arp_quant_head_level: Int, arp_quant_tail: ARPLog :: { ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail) } ARPLog_head_ref_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_ref && (ARPLog_head_fieldId_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_fieldId && (ARPLog_head_permission_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_permission && (ARPLog_head_level_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_head_level && ARPLog_tail_Cons(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == arp_quant_tail))))
  }
  
  axiom ARPLog_construct_over_destruct_Cons {
    (forall arp_quant_log: ARPLog :: { ARPLog_head_ref_Cons(arp_quant_log) } { ARPLog_head_fieldId_Cons(arp_quant_log) } { ARPLog_head_permission_Cons(arp_quant_log) } { ARPLog_head_level_Cons(arp_quant_log) } { ARPLog_tail_Cons(arp_quant_log) } ARPLog_is_Cons(arp_quant_log) ==> arp_quant_log == ARPLog_Cons(ARPLog_head_ref_Cons(arp_quant_log), ARPLog_head_fieldId_Cons(arp_quant_log), ARPLog_head_permission_Cons(arp_quant_log), ARPLog_head_level_Cons(arp_quant_log), ARPLog_tail_Cons(arp_quant_log)))
  }
  
  axiom ARPLog_type_of_Nil {
    ARPLog_type(ARPLog_Nil()) == ARPLog_type_Nil()
  }
  
  axiom ARPLog_type_of_Cons {
    (forall arp_quant_head_ref: Ref, arp_quant_head_fieldId: Int, arp_quant_head_permission: Perm, arp_quant_head_level: Int, arp_quant_tail: ARPLog :: ARPLog_type(ARPLog_Cons(arp_quant_head_ref, arp_quant_head_fieldId, arp_quant_head_permission, arp_quant_head_level, arp_quant_tail)) == ARPLog_type_Cons())
  }
  
  axiom ARPLog_type_existence {
    (forall arp_quant_log: ARPLog :: { ARPLog_is_Nil(arp_quant_log) } { ARPLog_is_Cons(arp_quant_log) } { ARPLog_type(arp_quant_log) } ARPLog_type(arp_quant_log) == ARPLog_type_Nil() || ARPLog_type(arp_quant_log) == ARPLog_type_Cons())
  }
  
  axiom ARPLog_type_is_Nil {
    (forall arp_quant_log: ARPLog :: { ARPLog_is_Nil(arp_quant_log) } { ARPLog_type(arp_quant_log) } (ARPLog_type(arp_quant_log) == ARPLog_type_Nil()) == ARPLog_is_Nil(arp_quant_log))
  }
  
  axiom ARPLog_type_is_Cons {
    (forall arp_quant_log: ARPLog :: { ARPLog_is_Cons(arp_quant_log) } { ARPLog_type(arp_quant_log) } (ARPLog_type(arp_quant_log) == ARPLog_type_Cons()) == ARPLog_is_Cons(arp_quant_log))
  }
  
  axiom ARPLog_log_max_level {
    (forall arp_quant_log: ARPLog :: { ARPLog_max_level(arp_quant_log) } ARPLog_max_level(arp_quant_log) == 6)
  }
  
  axiom ARPLog_sum_gt_of_log {
    (forall arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog :: { ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) } (arp_quant_level >= ARPLog_max_level(arp_quant_log) ==> ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == none) && (arp_quant_level < ARPLog_max_level(arp_quant_log) ==> ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == ARPLog_sum_gt(arp_quant_ref, arp_quant_fieldId, arp_quant_level + 1, arp_quant_log) + ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level + 1, arp_quant_log)))
  }
  
  axiom ARPLog_sum_of_log {
    (forall arp_quant_ref: Ref, arp_quant_fieldId: Int, arp_quant_level: Int, arp_quant_log: ARPLog :: { ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) } (ARPLog_is_Nil(arp_quant_log) ==> ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == none) && (ARPLog_is_Cons(arp_quant_log) ==> ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, arp_quant_log) == ARPLog_sum(arp_quant_ref, arp_quant_fieldId, arp_quant_level, ARPLog_tail_Cons(arp_quant_log)) + (ARPLog_head_ref_Cons(arp_quant_log) == arp_quant_ref && (ARPLog_head_fieldId_Cons(arp_quant_log) == arp_quant_fieldId && ARPLog_head_level_Cons(arp_quant_log) == arp_quant_level) ? ARPLog_head_permission_Cons(arp_quant_log) : none)))
  }
}

domain ARP_field_functions {
  
  unique function field__val(): Int
  
  unique function field___container(): Int
  
  unique function field___iter_index(): Int
  
  unique function field___previous(): Int
  
  unique function field_list_acc(): Int
  
  unique function field_set_acc(): Int
  
  unique function field_dict_acc(): Int
  
  unique function field_Measure$acc(): Int
  
  unique function field_State_mapping(): Int
  
  unique function field_Expr_left(): Int
  
  unique function field_Expr_right(): Int
  
  function predicate__thread_start(t: Ref): Int
  
  function predicate__thread_post(t: Ref): Int
  
  function predicate__MaySet(rec: Ref, id: Int): Int
  
  function predicate_Expr_valid(self_2: Ref): Int
  
  axiom ARP__thread_start__val {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field__val())
  }
  
  axiom ARP__thread_start___container {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field___container())
  }
  
  axiom ARP__thread_start___iter_index {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field___iter_index())
  }
  
  axiom ARP__thread_start___previous {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field___previous())
  }
  
  axiom ARP__thread_start_list_acc {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field_list_acc())
  }
  
  axiom ARP__thread_start_set_acc {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field_set_acc())
  }
  
  axiom ARP__thread_start_dict_acc {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field_dict_acc())
  }
  
  axiom ARP__thread_start_Measure$acc {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field_Measure$acc())
  }
  
  axiom ARP__thread_start_State_mapping {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field_State_mapping())
  }
  
  axiom ARP__thread_start_Expr_left {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field_Expr_left())
  }
  
  axiom ARP__thread_start_Expr_right {
    (forall t: Ref :: { predicate__thread_start(t) } predicate__thread_start(t) != field_Expr_right())
  }
  
  axiom ARP__thread_start__thread_post {
    (forall t: Ref, t_1: Ref :: { predicate__thread_start(t),predicate__thread_post(t_1) } predicate__thread_start(t) != predicate__thread_post(t_1))
  }
  
  axiom ARP__thread_start__MaySet {
    (forall t: Ref, rec_0: Ref, id_0: Int :: { predicate__thread_start(t),predicate__MaySet(rec_0, id_0) } predicate__thread_start(t) != predicate__MaySet(rec_0, id_0))
  }
  
  axiom ARP__thread_start_Expr_valid {
    (forall t: Ref, self_2_0: Ref :: { predicate__thread_start(t),predicate_Expr_valid(self_2_0) } predicate__thread_start(t) != predicate_Expr_valid(self_2_0))
  }
  
  axiom ARP__thread_start {
    (forall t: Ref, t_0: Ref :: { predicate__thread_start(t),predicate__thread_start(t_0) } predicate__thread_start(t) == predicate__thread_start(t_0) ==> t == t_0)
  }
  
  axiom ARP__thread_post__val {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field__val())
  }
  
  axiom ARP__thread_post___container {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field___container())
  }
  
  axiom ARP__thread_post___iter_index {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field___iter_index())
  }
  
  axiom ARP__thread_post___previous {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field___previous())
  }
  
  axiom ARP__thread_post_list_acc {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field_list_acc())
  }
  
  axiom ARP__thread_post_set_acc {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field_set_acc())
  }
  
  axiom ARP__thread_post_dict_acc {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field_dict_acc())
  }
  
  axiom ARP__thread_post_Measure$acc {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field_Measure$acc())
  }
  
  axiom ARP__thread_post_State_mapping {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field_State_mapping())
  }
  
  axiom ARP__thread_post_Expr_left {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field_Expr_left())
  }
  
  axiom ARP__thread_post_Expr_right {
    (forall t: Ref :: { predicate__thread_post(t) } predicate__thread_post(t) != field_Expr_right())
  }
  
  axiom ARP__thread_post__thread_start {
    (forall t: Ref, t_3: Ref :: { predicate__thread_post(t),predicate__thread_start(t_3) } predicate__thread_post(t) != predicate__thread_start(t_3))
  }
  
  axiom ARP__thread_post__MaySet {
    (forall t: Ref, rec_1: Ref, id_1: Int :: { predicate__thread_post(t),predicate__MaySet(rec_1, id_1) } predicate__thread_post(t) != predicate__MaySet(rec_1, id_1))
  }
  
  axiom ARP__thread_post_Expr_valid {
    (forall t: Ref, self_2_1: Ref :: { predicate__thread_post(t),predicate_Expr_valid(self_2_1) } predicate__thread_post(t) != predicate_Expr_valid(self_2_1))
  }
  
  axiom ARP__thread_post {
    (forall t: Ref, t_2: Ref :: { predicate__thread_post(t),predicate__thread_post(t_2) } predicate__thread_post(t) == predicate__thread_post(t_2) ==> t == t_2)
  }
  
  axiom ARP__MaySet__val {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field__val())
  }
  
  axiom ARP__MaySet___container {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field___container())
  }
  
  axiom ARP__MaySet___iter_index {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field___iter_index())
  }
  
  axiom ARP__MaySet___previous {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field___previous())
  }
  
  axiom ARP__MaySet_list_acc {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_list_acc())
  }
  
  axiom ARP__MaySet_set_acc {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_set_acc())
  }
  
  axiom ARP__MaySet_dict_acc {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_dict_acc())
  }
  
  axiom ARP__MaySet_Measure$acc {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_Measure$acc())
  }
  
  axiom ARP__MaySet_State_mapping {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_State_mapping())
  }
  
  axiom ARP__MaySet_Expr_left {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_Expr_left())
  }
  
  axiom ARP__MaySet_Expr_right {
    (forall rec: Ref, id: Int :: { predicate__MaySet(rec, id) } predicate__MaySet(rec, id) != field_Expr_right())
  }
  
  axiom ARP__MaySet__thread_start {
    (forall rec: Ref, id: Int, t_4: Ref :: { predicate__MaySet(rec, id),predicate__thread_start(t_4) } predicate__MaySet(rec, id) != predicate__thread_start(t_4))
  }
  
  axiom ARP__MaySet__thread_post {
    (forall rec: Ref, id: Int, t_5: Ref :: { predicate__MaySet(rec, id),predicate__thread_post(t_5) } predicate__MaySet(rec, id) != predicate__thread_post(t_5))
  }
  
  axiom ARP__MaySet_Expr_valid {
    (forall rec: Ref, id: Int, self_2_2: Ref :: { predicate__MaySet(rec, id),predicate_Expr_valid(self_2_2) } predicate__MaySet(rec, id) != predicate_Expr_valid(self_2_2))
  }
  
  axiom ARP__MaySet {
    (forall rec: Ref, id: Int, rec_2: Ref, id_2: Int :: { predicate__MaySet(rec, id),predicate__MaySet(rec_2, id_2) } predicate__MaySet(rec, id) == predicate__MaySet(rec_2, id_2) ==> rec == rec_2 && id == id_2)
  }
  
  axiom ARP_Expr_valid__val {
    (forall self_2: Ref :: { predicate_Expr_valid(self_2) } predicate_Expr_valid(self_2) != field__val())
  }
  
  axiom ARP_Expr_valid___container {
    (forall self_2: Ref :: { predicate_Expr_valid(self_2) } predicate_Expr_valid(self_2) != field___container())
  }
  
  axiom ARP_Expr_valid___iter_index {
    (forall self_2: Ref :: { predicate_Expr_valid(self_2) } predicate_Expr_valid(self_2) != field___iter_index())
  }
  
  axiom ARP_Expr_valid___previous {
    (forall self_2: Ref :: { predicate_Expr_valid(self_2) } predicate_Expr_valid(self_2) != field___previous())
  }
  
  axiom ARP_Expr_valid_list_acc {
    (forall self_2: Ref :: { predicate_Expr_valid(self_2) } predicate_Expr_valid(self_2) != field_list_acc())
  }
  
  axiom ARP_Expr_valid_set_acc {
    (forall self_2: Ref :: { predicate_Expr_valid(self_2) } predicate_Expr_valid(self_2) != field_set_acc())
  }
  
  axiom ARP_Expr_valid_dict_acc {
    (forall self_2: Ref :: { predicate_Expr_valid(self_2) } predicate_Expr_valid(self_2) != field_dict_acc())
  }
  
  axiom ARP_Expr_valid_Measure$acc {
    (forall self_2: Ref :: { predicate_Expr_valid(self_2) } predicate_Expr_valid(self_2) != field_Measure$acc())
  }
  
  axiom ARP_Expr_valid_State_mapping {
    (forall self_2: Ref :: { predicate_Expr_valid(self_2) } predicate_Expr_valid(self_2) != field_State_mapping())
  }
  
  axiom ARP_Expr_valid_Expr_left {
    (forall self_2: Ref :: { predicate_Expr_valid(self_2) } predicate_Expr_valid(self_2) != field_Expr_left())
  }
  
  axiom ARP_Expr_valid_Expr_right {
    (forall self_2: Ref :: { predicate_Expr_valid(self_2) } predicate_Expr_valid(self_2) != field_Expr_right())
  }
  
  axiom ARP_Expr_valid__thread_start {
    (forall self_2: Ref, t_6: Ref :: { predicate_Expr_valid(self_2),predicate__thread_start(t_6) } predicate_Expr_valid(self_2) != predicate__thread_start(t_6))
  }
  
  axiom ARP_Expr_valid__thread_post {
    (forall self_2: Ref, t_7: Ref :: { predicate_Expr_valid(self_2),predicate__thread_post(t_7) } predicate_Expr_valid(self_2) != predicate__thread_post(t_7))
  }
  
  axiom ARP_Expr_valid__MaySet {
    (forall self_2: Ref, rec_3: Ref, id_3: Int :: { predicate_Expr_valid(self_2),predicate__MaySet(rec_3, id_3) } predicate_Expr_valid(self_2) != predicate__MaySet(rec_3, id_3))
  }
  
  axiom ARP_Expr_valid {
    (forall self_2: Ref, self_2_3: Ref :: { predicate_Expr_valid(self_2),predicate_Expr_valid(self_2_3) } predicate_Expr_valid(self_2) == predicate_Expr_valid(self_2_3) ==> self_2 == self_2_3)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field State_mapping: Ref

field Expr_left: Ref

field Expr_right: Ref

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function Level(r: Ref): Perm 


function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


function rd(): Perm
  requires false 


function rdc(count: Int): Perm
  requires false 


function rdw(): Perm
  requires false 


function rd_token(tk: Ref): Perm
  ensures none < result && result < write 


function globalRd(): Perm
  ensures none < result && result < write 


function epsilonRd(): Perm
  ensures none < result && result < write 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate Expr_valid(self_2: Ref) {
  true && issubtype(typeof(self_2), Expr()) && (issubtype(typeof(self_2), Expr()) ==> none < globalRd() && globalRd() < write && acc(self_2.Expr_left, globalRd()) && issubtype(typeof(self_2.Expr_left), Expr()) && (none < globalRd() && globalRd() < write && acc(self_2.Expr_right, globalRd()) && issubtype(typeof(self_2.Expr_right), Expr()) && ((self_2.Expr_left != null ==> acc(Expr_valid(self_2.Expr_left), write)) && (self_2.Expr_right != null ==> acc(Expr_valid(self_2.Expr_right), write)))))
}

method State___init__(_cthread_145: Ref, _caller_measures_145: Seq[Measure$], _residue_145: Perm, self: Ref, State___init___rd: Perm) returns (_current_wait_level_145: Perm)
  requires none < State___init___rd && State___init___rd < write
  requires _cthread_145 != null
  requires issubtype(typeof(_cthread_145), Thread_0())
  requires self != null
  requires acc(_MaySet(self, 18755854280312352002519834933495499693), write)
  requires issubtype(typeof(self), State())
  requires self != null
  requires [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_145) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_3: Ref
  var _cwl_145: Perm
  var _method_measures_145: Seq[Measure$]
  _method_measures_145 := Seq[Measure$]()
  inhale typeof(self) == State()
  _err := null
  self_3 := self
  if (perm(_MaySet(self_3, 18755854280312352002519834933495499693)) > none) {
    exhale acc(_MaySet(self_3, 18755854280312352002519834933495499693), write)
    inhale acc(self_3.State_mapping, write)
  }
  self_3.State_mapping := __prim__int___box__(0)
  goto __end
  label __end
}

method Expr___init__(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm, self_0: Ref, Expr___init___rd: Perm) returns (_current_wait_level_146: Perm)
  requires none < Expr___init___rd && Expr___init___rd < write
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires self_0 != null
  requires acc(_MaySet(self_0, 4892318349537933543152318533), write)
  requires acc(_MaySet(self_0, 5050040446265177848115394629), write)
  requires issubtype(typeof(self_0), Expr())
  requires self_0 != null
  requires [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_146) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures acc(self_0.Expr_left, write) && issubtype(typeof(self_0.Expr_left), Expr())
  ensures acc(self_0.Expr_right, write) && issubtype(typeof(self_0.Expr_right), Expr())
  ensures [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_4: Ref
  var Expr_res: Ref
  var Expr_res_0: Ref
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  var Expr___init___call_rd: Perm
  var Expr___init___0_call_rd: Perm
  _method_measures_146 := Seq[Measure$]()
  inhale typeof(self_0) == Expr()
  _err := null
  self_4 := self_0
  Expr_res := new()
  inhale typeof(Expr_res) == Expr()
  inhale acc(_MaySet(Expr_res, 4892318349537933543152318533), write)
  inhale acc(_MaySet(Expr_res, 5050040446265177848115394629), write)
  inhale none < Expr___init___call_rd && Expr___init___call_rd < write
  _cwl_146 := Expr___init__(_cthread_146, _method_measures_146, _residue_146, Expr_res, Expr___init___call_rd)
  if (perm(_MaySet(self_4, 4892318349537933543152318533)) > none) {
    exhale acc(_MaySet(self_4, 4892318349537933543152318533), write)
    inhale acc(self_4.Expr_left, write)
  }
  self_4.Expr_left := Expr_res
  Expr_res_0 := new()
  inhale typeof(Expr_res_0) == Expr()
  inhale acc(_MaySet(Expr_res_0, 4892318349537933543152318533), write)
  inhale acc(_MaySet(Expr_res_0, 5050040446265177848115394629), write)
  inhale none < Expr___init___0_call_rd && Expr___init___0_call_rd < write
  _cwl_146 := Expr___init__(_cthread_146, _method_measures_146, _residue_146, Expr_res_0, Expr___init___0_call_rd)
  if (perm(_MaySet(self_4, 5050040446265177848115394629)) > none) {
    exhale acc(_MaySet(self_4, 5050040446265177848115394629), write)
    inhale acc(self_4.Expr_right, write)
  }
  self_4.Expr_right := Expr_res_0
  goto __end
  label __end
}

method Expr_eval_ARP_TRANSFORMED(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, self_1: Ref, state: Ref, Expr_eval_rd: Perm) returns (_current_wait_level_147: Perm, _res: Ref)
{
  var _err: Ref
  var result_0: Ref
  var self_5: Ref
  var state_0: Ref
  var eval_res: Ref
  var eval_res_0: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  var Expr_eval_log: ARPLog
  Expr_eval_log := ARPLog_Nil()
  inhale none < Expr_eval_rd && Expr_eval_rd < write
  inhale _cthread_147 != null
  inhale issubtype(typeof(_cthread_147), Thread_0())
  inhale issubtype(typeof(self_1), Expr())
  inhale issubtype(typeof(state), State())
  inhale self_1 != null
  inhale acc(Expr_valid(self_1), write)
  Expr_eval_log := ARPLog_Cons(null, predicate_Expr_valid(self_1), write, 6, Expr_eval_log)
  inhale acc(state.State_mapping, Expr_eval_rd)
  inhale none < Expr_eval_rd
  Expr_eval_log := ARPLog_Cons(state, field_State_mapping(), Expr_eval_rd, 4, Expr_eval_log)
  inhale issubtype(typeof(state.State_mapping), int())
  // Caller side leak checkinhale [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  _method_measures_147 := Seq[Measure$]()
  inhale typeof(self_1) == Expr()
  _res := null
  _err := null
  self_5 := self_1
  state_0 := state
  unfold acc(Expr_valid(self_5), write)
  if (issubtype(typeof(self_5), Expr())) {
    inhale none < ARPLog_sum_gt(self_5, field_Expr_left(), 5, Expr_eval_log) ==> write * globalRd() < perm(self_5.Expr_left)
    inhale none < ARPLog_sum_gt(self_5, field_Expr_right(), 5, Expr_eval_log) ==> write * globalRd() < perm(self_5.Expr_right)
  }
  if (issubtype(typeof(self_5), Expr())) {
    Expr_eval_log := ARPLog_Cons(self_5, field_Expr_left(), write * globalRd(), 5, Expr_eval_log)
    Expr_eval_log := ARPLog_Cons(self_5, field_Expr_right(), write * globalRd(), 5, Expr_eval_log)
    if (self_5.Expr_left != null) {
      Expr_eval_log := ARPLog_Cons(null, predicate_Expr_valid(self_5.Expr_left), write, 6, Expr_eval_log)
    }
    if (self_5.Expr_right != null) {
      Expr_eval_log := ARPLog_Cons(null, predicate_Expr_valid(self_5.Expr_right), write, 6, Expr_eval_log)
    }
  }
  Expr_eval_log := ARPLog_Cons(null, predicate_Expr_valid(self_5), -write, 6, Expr_eval_log)
  result_0 := __prim__int___box__(0)
  inhale _isDefined(3105556460240411278)
  if (self_5.Expr_left != null) {
    var Expr_eval_call_rd: Perm
    var arg__cthread_147: Ref
    var arg__caller_measures_147: Seq[Measure$]
    var arg__residue_147: Perm
    var arg_self_1: Ref
    var arg_state: Ref
    inhale none < Expr_eval_call_rd && Expr_eval_call_rd < write
    arg__cthread_147 := _cthread_147
    arg__caller_measures_147 := _method_measures_147
    arg__residue_147 := _residue_147
    arg_self_1 := self_5.Expr_left
    arg_state := state_0
    label Expr_eval_call_label
    label ARP_exhale_label
    exhale arg__cthread_147 != null
    label ARP_0_exhale_label
    exhale old[Expr_eval_call_label](issubtype(typeof(arg__cthread_147), Thread_0()))
    label ARP_1_exhale_label
    exhale old[Expr_eval_call_label](issubtype(typeof(arg_self_1), Expr()))
    label ARP_2_exhale_label
    exhale old[Expr_eval_call_label](issubtype(typeof(arg_state), State()))
    label ARP_3_exhale_label
    exhale arg_self_1 != null
    label ARP_4_exhale_label
    Expr_eval_log := ARPLog_Cons(null, predicate_Expr_valid(arg_self_1), -write, 6, Expr_eval_log)
    exhale acc(Expr_valid(arg_self_1), write)
    label ARP_5_exhale_label
    inhale none < old[ARP_5_exhale_label](ARPLog_sum_gt(arg_state, field_State_mapping(), 1, Expr_eval_log)) ==> Expr_eval_call_rd < perm(arg_state.State_mapping)
    Expr_eval_log := ARPLog_Cons(arg_state, field_State_mapping(), -Expr_eval_call_rd, 1, Expr_eval_log)
    exhale acc(arg_state.State_mapping, Expr_eval_call_rd)
    exhale old[Expr_eval_call_label](issubtype(typeof(arg_state.State_mapping), int()))
    // Caller side leak check// Caller side leak checklabel ARP_6_exhale_label
    // Caller side leak checkexhale [true, perm(MustTerminate(arg__cthread_147)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
    _cwl_147 := HavocPerm()
    eval_res := HavocRef()
    inhale [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _cwl_147) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _cwl_147) && arg__residue_147 <= _cwl_147), true]
    inhale issubtype(typeof(eval_res), int())
    inhale acc(Expr_valid(arg_self_1), write)
    Expr_eval_log := ARPLog_Cons(null, predicate_Expr_valid(arg_self_1), write, 6, Expr_eval_log)
    inhale acc(arg_state.State_mapping, Expr_eval_call_rd)
    inhale none < Expr_eval_call_rd
    Expr_eval_log := ARPLog_Cons(arg_state, field_State_mapping(), Expr_eval_call_rd, 1, Expr_eval_log)
    inhale issubtype(typeof(arg_state.State_mapping), int())
    // Body leak check.// Body leak check.inhale [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
    result_0 := __prim__int___box__(int___add__(int___unbox__(result_0), int___unbox__(eval_res)))
    inhale _isDefined(3105556460240411278)
  }
  if (self_5.Expr_right != null) {
    var Expr_eval_0_call_rd: Perm
    var arg_0__cthread_147: Ref
    var arg_0__caller_measures_147: Seq[Measure$]
    var arg_0__residue_147: Perm
    var arg_0_self_1: Ref
    var arg_0_state: Ref
    inhale none < Expr_eval_0_call_rd && Expr_eval_0_call_rd < write
    arg_0__cthread_147 := _cthread_147
    arg_0__caller_measures_147 := _method_measures_147
    arg_0__residue_147 := _residue_147
    arg_0_self_1 := self_5.Expr_right
    arg_0_state := state_0
    label Expr_eval_0_call_label
    label ARP_7_exhale_label
    exhale arg_0__cthread_147 != null
    label ARP_8_exhale_label
    exhale old[Expr_eval_0_call_label](issubtype(typeof(arg_0__cthread_147), Thread_0()))
    label ARP_9_exhale_label
    exhale old[Expr_eval_0_call_label](issubtype(typeof(arg_0_self_1), Expr()))
    label ARP_10_exhale_label
    exhale old[Expr_eval_0_call_label](issubtype(typeof(arg_0_state), State()))
    label ARP_11_exhale_label
    exhale arg_0_self_1 != null
    label ARP_12_exhale_label
    Expr_eval_log := ARPLog_Cons(null, predicate_Expr_valid(arg_0_self_1), -write, 6, Expr_eval_log)
    exhale acc(Expr_valid(arg_0_self_1), write)
    label ARP_13_exhale_label
    inhale none < old[ARP_13_exhale_label](ARPLog_sum_gt(arg_0_state, field_State_mapping(), 1, Expr_eval_log)) ==> Expr_eval_0_call_rd < perm(arg_0_state.State_mapping)
    Expr_eval_log := ARPLog_Cons(arg_0_state, field_State_mapping(), -Expr_eval_0_call_rd, 1, Expr_eval_log)
    exhale acc(arg_0_state.State_mapping, Expr_eval_0_call_rd)
    exhale old[Expr_eval_0_call_label](issubtype(typeof(arg_0_state.State_mapping), int()))
    // Caller side leak check// Caller side leak checklabel ARP_14_exhale_label
    // Caller side leak checkexhale [true, perm(MustTerminate(arg_0__cthread_147)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
    _cwl_147 := HavocPerm()
    eval_res_0 := HavocRef()
    inhale [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _cwl_147) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _cwl_147) && arg_0__residue_147 <= _cwl_147), true]
    inhale issubtype(typeof(eval_res_0), int())
    inhale acc(Expr_valid(arg_0_self_1), write)
    Expr_eval_log := ARPLog_Cons(null, predicate_Expr_valid(arg_0_self_1), write, 6, Expr_eval_log)
    inhale acc(arg_0_state.State_mapping, Expr_eval_0_call_rd)
    inhale none < Expr_eval_0_call_rd
    Expr_eval_log := ARPLog_Cons(arg_0_state, field_State_mapping(), Expr_eval_0_call_rd, 1, Expr_eval_log)
    inhale issubtype(typeof(arg_0_state.State_mapping), int())
    // Body leak check.// Body leak check.inhale [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
    result_0 := __prim__int___box__(int___add__(int___unbox__(result_0), int___unbox__(eval_res_0)))
    inhale _isDefined(3105556460240411278)
  }
  if (issubtype(typeof(self_5), Expr())) {
    inhale none < ARPLog_sum_gt(self_5, field_Expr_left(), 5, Expr_eval_log) ==> write * globalRd() < perm(self_5.Expr_left)
    inhale none < ARPLog_sum_gt(self_5, field_Expr_right(), 5, Expr_eval_log) ==> write * globalRd() < perm(self_5.Expr_right)
  }
  if (issubtype(typeof(self_5), Expr())) {
    Expr_eval_log := ARPLog_Cons(self_5, field_Expr_left(), -(write * globalRd()), 5, Expr_eval_log)
    Expr_eval_log := ARPLog_Cons(self_5, field_Expr_right(), -(write * globalRd()), 5, Expr_eval_log)
    if (self_5.Expr_left != null) {
      Expr_eval_log := ARPLog_Cons(null, predicate_Expr_valid(self_5.Expr_left), -write, 6, Expr_eval_log)
    }
    if (self_5.Expr_right != null) {
      Expr_eval_log := ARPLog_Cons(null, predicate_Expr_valid(self_5.Expr_right), -write, 6, Expr_eval_log)
    }
  }
  Expr_eval_log := ARPLog_Cons(null, predicate_Expr_valid(self_5), write, 6, Expr_eval_log)
  fold acc(Expr_valid(self_5), write)
  _res := _checkDefined(result_0, 3105556460240411278)
  goto __end
  goto __end
  label __end
  label Expr_eval_end_label
  exhale [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_147) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  exhale old[Expr_eval_end_label](issubtype(typeof(_res), int()))
  Expr_eval_log := ARPLog_Cons(null, predicate_Expr_valid(self_1), -write, 6, Expr_eval_log)
  exhale acc(Expr_valid(self_1), write)
  label ARP_18_exhale_label
  inhale none < old[ARP_18_exhale_label](ARPLog_sum_gt(state, field_State_mapping(), 4, Expr_eval_log)) ==> Expr_eval_rd < perm(state.State_mapping)
  Expr_eval_log := ARPLog_Cons(state, field_State_mapping(), -Expr_eval_rd, 4, Expr_eval_log)
  exhale acc(state.State_mapping, Expr_eval_rd)
  exhale old[Expr_eval_end_label](issubtype(typeof(state.State_mapping), int()))
  // Body leak check.exhale [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
}

method main(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm, main_rd: Perm) returns (_current_wait_level_149: Perm)
  requires none < main_rd && main_rd < write
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_149) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures [true, (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(4193056372324993965)))
  assert true && (_single(4193056372324993965) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(1818326629)))
  module_names_0 := (module_names_0 union Set(_single(1919973445)))
  goto __end
  label __end
}

method Expr_eval(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, self_1: Ref, state: Ref, Expr_eval_0_rd: Perm) returns (_current_wait_level_147: Perm, _res: Ref)
  requires none < Expr_eval_0_rd && Expr_eval_0_rd < write
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires issubtype(typeof(self_1), Expr())
  requires issubtype(typeof(state), State())
  requires self_1 != null
  requires acc(Expr_valid(self_1), write)
  requires acc(state.State_mapping, Expr_eval_0_rd) && issubtype(typeof(state.State_mapping), int())
  requires [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_147) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures issubtype(typeof(_res), int())
  ensures acc(Expr_valid(self_1), write)
  ensures acc(state.State_mapping, Expr_eval_0_rd) && issubtype(typeof(state.State_mapping), int())
  ensures [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]


method HavocPerm() returns (returnval: Perm)


method HavocInt() returns (returnval_0: Int)


method HavocBool() returns (returnval_1: Bool)


method HavocRef() returns (returnval_2: Ref)
