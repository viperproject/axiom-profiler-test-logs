domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function Container(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_Container {
    extends_(Container(), object()) && get_basic(Container()) == Container()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getMethod_0(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getArg_0(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
  
  function getOld_0(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function get_secret_threading(): ThreadingID
  
  unique function inc_threading(): ThreadingID
  
  unique function add_preserving_threading(): ThreadingID
  
  unique function addLoop_threading(): ThreadingID
  
  unique function inc_preserving_threading(): ThreadingID
  
  unique function add_loop_preserving_threading(): ThreadingID
  
  unique function incPred_threading(): ThreadingID
  
  unique function addPredLoop_threading(): ThreadingID
  
  unique function addPred_threading(): ThreadingID
  
  unique function addPred_preserving_threading(): ThreadingID
  
  unique function pred_assert_low_threading(): ThreadingID
  
  unique function low_m_threading(): ThreadingID
  
  unique function test_inc_preserving_threading(): ThreadingID
  
  unique function test_inc_all_low_threading(): ThreadingID
  
  unique function test_inc_predicate_threading(): ThreadingID
  
  unique function test_add_predicate_threading(): ThreadingID
  
  unique function test_add_preserving_threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field _valp: Ref

field __container: Ref

field __containerp: Ref

field __iter_index: Int

field __iter_indexp: Int

field __previous: Seq[Ref]

field __previousp: Seq[Ref]

field list_acc: Seq[Ref]

field list_accp: Seq[Ref]

field set_acc: Set[Ref]

field set_accp: Set[Ref]

field dict_acc: Set[Ref]

field dict_accp: Set[Ref]

field Measure$acc: Seq[Ref]

field Measure$accp: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseBoundedp: Int

field MustReleaseUnbounded: Int

field MustReleaseUnboundedp: Int

field Container_f: Ref

field Container_fp: Ref

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function int___ge__(self: Int, other: Int): Bool 
{
  self >= other
}

function int___le__(self: Int, other: Int): Bool 
{
  self <= other
}

function int___lt__(self: Int, other: Int): Bool 
{
  self < other
}

function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function Level(r: Ref): Perm 


function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


function contPred_all_low(c_14: Ref, c_14_0: Ref): Bool
  requires acc(contPred(c_14), wildcard) && acc(contPred_0(c_14_0), wildcard) 
{
  (unfolding acc(contPred(c_14), wildcard) in (unfolding acc(contPred_0(c_14_0), wildcard) in c_14.Container_f == c_14_0.Container_fp))
}

predicate MustTerminate(r: Ref) 

predicate MustTerminate_0(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeBounded_0(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeUnbounded_0(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate MustInvokeCredit_0(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_start_0(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _thread_post_0(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate _MaySet_0(rec: Ref, id: Int) 

predicate contPred(c_14: Ref) {
  issubtype(typeof(c_14), Container()) && (acc(c_14.Container_f, write) && issubtype(typeof(c_14.Container_f), int()))
}

predicate contPred_0(c_14: Ref) {
  issubtype(typeof(c_14), Container()) && (acc(c_14.Container_fp, write) && issubtype(typeof(c_14.Container_fp), int()))
}

method get_secret(p1: Bool, p2: Bool, _cthread_146: Ref, _cthread_146_0: Ref, _caller_measures_146: Seq[Measure$], _caller_measures_146_0: Seq[Measure$], _residue_146: Perm, _residue_146_0: Perm) returns (_current_wait_level_146: Perm, _current_wait_level_146_0: Perm, _res: Ref, _res_0: Ref)
  requires (p1 ==> _cthread_146 != null) && (p2 ==> _cthread_146_0 != null)
  requires (p1 ==> issubtype(typeof(_cthread_146), Thread_0())) && (p2 ==> issubtype(typeof(_cthread_146_0), Thread_0()))
  requires (p1 ==> [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]) && (p2 ==> [true, perm(MustTerminate_0(_cthread_146_0)) == none && ((forperm _r_1: Ref [MustInvokeBounded_0(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded_0(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: false))))])
  ensures (p1 ==> [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_146) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]) && (p2 ==> [(forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _current_wait_level_146_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _current_wait_level_146_0) && _residue_146_0 <= _current_wait_level_146_0), true])
  ensures (p1 ==> issubtype(typeof(_res), int())) && (p2 ==> issubtype(typeof(_res_0), int()))
  ensures (p1 ==> [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]) && (p2 ==> [true, (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))])
{
  var ret1: Bool
  var ret2: Bool
  inhale p1
  ret1 := false
  ret2 := false
  var _err: Ref
  var _err_0: Ref
  var _cwl_146: Perm
  var _cwl_146_0: Perm
  var _method_measures_146: Seq[Measure$]
  var _method_measures_146_0: Seq[Measure$]
  if (p1 && !ret1) {
    _method_measures_146 := Seq[Measure$]()
    _res := null
    _err := null
    _res := __prim__int___box__(12)
    ret1 := true
  }
  if (p2 && !ret2) {
    _method_measures_146_0 := Seq[Measure$]()
    _res_0 := null
    _err_0 := null
    _res_0 := __prim__int___box__(12)
    ret2 := true
  }
  assert true
}

method inc(p1_0: Bool, p2_0: Bool, _cthread_147: Ref, _cthread_147_0: Ref, _caller_measures_147: Seq[Measure$], _caller_measures_147_0: Seq[Measure$], _residue_147: Perm, _residue_147_0: Perm, c: Ref, c_30: Ref) returns (_current_wait_level_147: Perm, _current_wait_level_147_0: Perm)
  requires (p1_0 ==> _cthread_147 != null) && (p2_0 ==> _cthread_147_0 != null)
  requires (p1_0 ==> issubtype(typeof(_cthread_147), Thread_0())) && (p2_0 ==> issubtype(typeof(_cthread_147_0), Thread_0()))
  requires (p1_0 ==> issubtype(typeof(c), Container())) && (p2_0 ==> issubtype(typeof(c_30), Container()))
  requires (p1_0 ==> acc(c.Container_f, write)) && (p2_0 ==> acc(c_30.Container_fp, write)) && ((p1_0 ==> issubtype(typeof(c.Container_f), int())) && (p2_0 ==> issubtype(typeof(c_30.Container_fp), int())))
  requires (p1_0 ==> [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]) && (p2_0 ==> [true, perm(MustTerminate_0(_cthread_147_0)) == none && ((forperm _r_4: Ref [MustInvokeBounded_0(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded_0(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBoundedp] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnboundedp] :: false))))])
  requires (p1_0 && p2_0 ==> c == c_30) && (p1_0 && p2_0 ==> c.Container_f == c_30.Container_fp)
  ensures (p1_0 ==> [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_147) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]) && (p2_0 ==> [(forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: Level(_r_2) <= _current_wait_level_147_0) && ((forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: Level(_r_2) <= _current_wait_level_147_0) && _residue_147_0 <= _current_wait_level_147_0), true])
  ensures (p1_0 ==> acc(c.Container_f, write)) && (p2_0 ==> acc(c_30.Container_fp, write)) && ((p1_0 ==> issubtype(typeof(c.Container_f), int())) && (p2_0 ==> issubtype(typeof(c_30.Container_fp), int())))
  ensures (p1_0 ==> int___eq__(c.Container_f, __prim__int___box__(int___add__(int___unbox__(old(c.Container_f)), 1)))) && (p2_0 ==> int___eq__(c_30.Container_fp, __prim__int___box__(int___add__(int___unbox__(old(c_30.Container_fp)), 1))))
  ensures (p1_0 ==> [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]) && (p2_0 ==> [true, (forperm _r_3: Ref [MustInvokeBounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBoundedp] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnboundedp] :: false)))])
  ensures p1_0 && p2_0 ==> c.Container_f == c_30.Container_fp
{
  inhale p1_0
  var _err: Ref
  var _err_1: Ref
  var c_15: Ref
  var c_15_0: Ref
  var _cwl_147: Perm
  var _cwl_147_0: Perm
  var _method_measures_147: Seq[Measure$]
  var _method_measures_147_0: Seq[Measure$]
  if (p1_0) {
    _method_measures_147 := Seq[Measure$]()
    _err := null
    c_15 := c
  }
  if (p2_0) {
    _method_measures_147_0 := Seq[Measure$]()
    _err_1 := null
    c_15_0 := c_30
  }
  var p1_1: Bool
  var p2_1: Bool
  var p3: Bool
  var p4: Bool
  p1_1 := p1_0 && perm(_MaySet(c_15, 5020895374614515255530647363)) > none
  p2_1 := p2_0 && perm(_MaySet_0(c_15_0, 5020895374614515255530647363)) > none
  p3 := p1_0 && !(perm(_MaySet(c_15, 5020895374614515255530647363)) > none)
  p4 := p2_0 && !(perm(_MaySet_0(c_15_0, 5020895374614515255530647363)) > none)
  if (p1_1) {
    exhale acc(_MaySet(c_15, 5020895374614515255530647363), write)
    inhale acc(c_15.Container_f, write)
  }
  if (p2_1) {
    exhale acc(_MaySet_0(c_15_0, 5020895374614515255530647363), write)
    inhale acc(c_15_0.Container_fp, write)
  }
  if (p1_0) {
    c_15.Container_f := __prim__int___box__(int___add__(int___unbox__(c_15.Container_f), 1))
  }
  if (p2_0) {
    c_15_0.Container_fp := __prim__int___box__(int___add__(int___unbox__(c_15_0.Container_fp), 1))
  }
  assert true
}

method add_preserving(p1_2: Bool, p2_2: Bool, _cthread_148: Ref, _cthread_148_0: Ref, _caller_measures_148: Seq[Measure$], _caller_measures_148_0: Seq[Measure$], _residue_148: Perm, _residue_148_0: Perm, amount: Ref, amount_13: Ref, c_0: Ref, c_0_0: Ref) returns (_current_wait_level_148: Perm, _current_wait_level_148_0: Perm)
  requires (p1_2 ==> _cthread_148 != null) && (p2_2 ==> _cthread_148_0 != null)
  requires (p1_2 ==> issubtype(typeof(_cthread_148), Thread_0())) && (p2_2 ==> issubtype(typeof(_cthread_148_0), Thread_0()))
  requires (p1_2 ==> issubtype(typeof(amount), int())) && (p2_2 ==> issubtype(typeof(amount_13), int()))
  requires (p1_2 ==> issubtype(typeof(c_0), Container())) && (p2_2 ==> issubtype(typeof(c_0_0), Container()))
  requires (p1_2 ==> acc(c_0.Container_f, write)) && (p2_2 ==> acc(c_0_0.Container_fp, write)) && ((p1_2 ==> issubtype(typeof(c_0.Container_f), int())) && (p2_2 ==> issubtype(typeof(c_0_0.Container_fp), int())))
  requires (p1_2 ==> [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]) && (p2_2 ==> [true, perm(MustTerminate_0(_cthread_148_0)) == none && ((forperm _r_7: Ref [MustInvokeBounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBoundedp] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnboundedp] :: false))))])
  ensures (p1_2 ==> [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_148) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]) && (p2_2 ==> [(forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: Level(_r_5) <= _current_wait_level_148_0) && ((forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: Level(_r_5) <= _current_wait_level_148_0) && _residue_148_0 <= _current_wait_level_148_0), true])
  ensures (p1_2 ==> acc(c_0.Container_f, write)) && (p2_2 ==> acc(c_0_0.Container_fp, write)) && ((p1_2 ==> issubtype(typeof(c_0.Container_f), int())) && (p2_2 ==> issubtype(typeof(c_0_0.Container_fp), int())))
  ensures (p1_2 ==> int___eq__(c_0.Container_f, __prim__int___box__(int___add__(int___unbox__(old(c_0.Container_f)), int___unbox__(amount))))) && (p2_2 ==> int___eq__(c_0_0.Container_fp, __prim__int___box__(int___add__(int___unbox__(old(c_0_0.Container_fp)), int___unbox__(amount_13)))))
  ensures (p1_2 ==> [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]) && (p2_2 ==> [true, (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)))])
  ensures (p1_2 && p2_2 ==> amount == amount_13) && (p1_2 && p2_2 ==> c_0 == c_0_0) && old(p1_2 && p2_2 ==> c_0.Container_f == c_0_0.Container_fp) ==> p1_2 && p2_2 ==> c_0.Container_f == c_0_0.Container_fp
{
  inhale p1_2
  var _err: Ref
  var _err_2: Ref
  var amount_6: Ref
  var amount_6_0: Ref
  var c_16: Ref
  var c_16_0: Ref
  var _cwl_148: Perm
  var _cwl_148_0: Perm
  var _method_measures_148: Seq[Measure$]
  var _method_measures_148_0: Seq[Measure$]
  if (p1_2) {
    _method_measures_148 := Seq[Measure$]()
    _err := null
    amount_6 := amount
    c_16 := c_0
  }
  if (p2_2) {
    _method_measures_148_0 := Seq[Measure$]()
    _err_2 := null
    amount_6_0 := amount_13
    c_16_0 := c_0_0
  }
  var p1_3: Bool
  var p2_3: Bool
  var p3_0: Bool
  var p4_0: Bool
  p1_3 := p1_2 && perm(_MaySet(c_16, 5020895374614515255530647363)) > none
  p2_3 := p2_2 && perm(_MaySet_0(c_16_0, 5020895374614515255530647363)) > none
  p3_0 := p1_2 && !(perm(_MaySet(c_16, 5020895374614515255530647363)) > none)
  p4_0 := p2_2 && !(perm(_MaySet_0(c_16_0, 5020895374614515255530647363)) > none)
  if (p1_3) {
    exhale acc(_MaySet(c_16, 5020895374614515255530647363), write)
    inhale acc(c_16.Container_f, write)
  }
  if (p2_3) {
    exhale acc(_MaySet_0(c_16_0, 5020895374614515255530647363), write)
    inhale acc(c_16_0.Container_fp, write)
  }
  if (p1_2) {
    c_16.Container_f := __prim__int___box__(int___add__(int___unbox__(c_16.Container_f), int___unbox__(amount_6)))
  }
  if (p2_2) {
    c_16_0.Container_fp := __prim__int___box__(int___add__(int___unbox__(c_16_0.Container_fp), int___unbox__(amount_6_0)))
  }
  assert true
}

method addLoop(p1_4: Bool, p2_4: Bool, _cthread_149: Ref, _cthread_149_0: Ref, _caller_measures_149: Seq[Measure$], _caller_measures_149_0: Seq[Measure$], _residue_149: Perm, _residue_149_0: Perm, amount_0: Ref, amount_0_0: Ref, c_1: Ref, c_1_0: Ref) returns (_current_wait_level_149: Perm, _current_wait_level_149_0: Perm)
  requires (p1_4 ==> _cthread_149 != null) && (p2_4 ==> _cthread_149_0 != null)
  requires (p1_4 ==> issubtype(typeof(_cthread_149), Thread_0())) && (p2_4 ==> issubtype(typeof(_cthread_149_0), Thread_0()))
  requires (p1_4 ==> issubtype(typeof(amount_0), int())) && (p2_4 ==> issubtype(typeof(amount_0_0), int()))
  requires (p1_4 ==> issubtype(typeof(c_1), Container())) && (p2_4 ==> issubtype(typeof(c_1_0), Container()))
  requires (p1_4 ==> acc(c_1.Container_f, write)) && (p2_4 ==> acc(c_1_0.Container_fp, write)) && ((p1_4 ==> issubtype(typeof(c_1.Container_f), int())) && (p2_4 ==> issubtype(typeof(c_1_0.Container_fp), int())))
  requires (p1_4 ==> int___ge__(int___unbox__(amount_0), 0)) && (p2_4 ==> int___ge__(int___unbox__(amount_0_0), 0))
  requires (p1_4 ==> [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false))))]) && (p2_4 ==> [true, perm(MustTerminate_0(_cthread_149_0)) == none && ((forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false))))])
  requires (p1_4 && p2_4 ==> amount_0 == amount_0_0) && (p1_4 && p2_4 ==> c_1 == c_1_0) && (p1_4 && p2_4 ==> c_1.Container_f == c_1_0.Container_fp)
  ensures (p1_4 ==> [(forperm _r_10: Ref [_r_10.MustReleaseBounded] :: Level(_r_10) <= _current_wait_level_149) && ((forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: Level(_r_10) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]) && (p2_4 ==> [(forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: Level(_r_10) <= _current_wait_level_149_0) && ((forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: Level(_r_10) <= _current_wait_level_149_0) && _residue_149_0 <= _current_wait_level_149_0), true])
  ensures (p1_4 ==> acc(c_1.Container_f, write)) && (p2_4 ==> acc(c_1_0.Container_fp, write)) && ((p1_4 ==> issubtype(typeof(c_1.Container_f), int())) && (p2_4 ==> issubtype(typeof(c_1_0.Container_fp), int())))
  ensures (p1_4 ==> int___eq__(c_1.Container_f, __prim__int___box__(int___add__(int___unbox__(old(c_1.Container_f)), int___unbox__(amount_0))))) && (p2_4 ==> int___eq__(c_1_0.Container_fp, __prim__int___box__(int___add__(int___unbox__(old(c_1_0.Container_fp)), int___unbox__(amount_0_0)))))
  ensures (p1_4 ==> [true, (forperm _r_11: Ref [MustInvokeBounded(_r_11)] :: false) && ((forperm _r_11: Ref [MustInvokeUnbounded(_r_11)] :: false) && ((forperm _r_11: Ref [_r_11.MustReleaseBounded] :: false) && (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: false)))]) && (p2_4 ==> [true, (forperm _r_11: Ref [MustInvokeBounded_0(_r_11)] :: false) && ((forperm _r_11: Ref [MustInvokeUnbounded_0(_r_11)] :: false) && ((forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: false) && (forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: false)))])
  ensures p1_4 && p2_4 ==> c_1.Container_f == c_1_0.Container_fp
{
  inhale p1_4
  var _err: Ref
  var _err_3: Ref
  var i: Ref
  var i_2: Ref
  var amount_7: Ref
  var amount_7_0: Ref
  var c_17: Ref
  var c_17_0: Ref
  var _loop_measures: Seq[Measure$]
  var _loop_measures_2: Seq[Measure$]
  var _loop_check_before: Bool
  var _loop_check_before_2: Bool
  var _loop_termination_flag: Bool
  var _loop_termination_flag_2: Bool
  var _loop_original_must_terminate: Perm
  var _loop_original_must_terminate_2: Perm
  var _residue_164: Perm
  var _residue_164_0: Perm
  var _cwl_149: Perm
  var _cwl_149_0: Perm
  var _method_measures_149: Seq[Measure$]
  var _method_measures_149_0: Seq[Measure$]
  if (p1_4) {
    _method_measures_149 := Seq[Measure$]()
    _err := null
    amount_7 := amount_0
    c_17 := c_1
    i := __prim__int___box__(0)
    inhale _isDefined(105)
    // Save current MustTerminate amount._loop_original_must_terminate := perm(MustTerminate(_cthread_149))
    // Save loop termination promise._loop_termination_flag := false
    // We are before loop._loop_check_before := true
  }
  if (p2_4) {
    _method_measures_149_0 := Seq[Measure$]()
    _err_3 := null
    amount_7_0 := amount_0_0
    c_17_0 := c_1_0
    i_2 := __prim__int___box__(0)
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_2 := perm(MustTerminate_0(_cthread_149_0))
    // Save loop termination promise._loop_termination_flag_2 := false
    // We are before loop._loop_check_before_2 := true
  }
  var bypass1: Bool
  var bypass2: Bool
  var tmp1: Seq[Measure$]
  var tmp2: Seq[Measure$]
  var tmp1_0: Perm
  var tmp2_0: Perm
  var tmp1_1: Ref
  var tmp2_1: Ref
  var tmp1_2: Bool
  var tmp2_2: Bool
  var p1_5: Bool
  var p2_5: Bool
  var idle1: Bool
  var idle2: Bool
  bypass1 := !p1_4
  bypass2 := !p2_4
  if (bypass1) {
    tmp1 := _loop_measures
    tmp1_0 := _cwl_149
    tmp1_1 := i
    tmp1_2 := _loop_check_before
  }
  if (bypass2) {
    tmp2 := _loop_measures_2
    tmp2_0 := _cwl_149_0
    tmp2_1 := i_2
    tmp2_2 := _loop_check_before_2
  }
  idle1 := false
  idle2 := false
  while (p1_4 && !bypass1 && int___lt__(int___unbox__(_checkDefined(i, 105)), int___unbox__(amount_7)) || p2_4 && !bypass2 && int___lt__(int___unbox__(i_2), int___unbox__(amount_7_0)))
    invariant (p1_4 ==> [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _residue_164) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _residue_164) && _residue_149 <= _residue_164), true]) && (p2_4 ==> [(forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: Level(_r_8) <= _residue_164_0) && ((forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: Level(_r_8) <= _residue_164_0) && _residue_149_0 <= _residue_164_0), true])
    invariant (p1_4 ==> issubtype(typeof(i), int())) && (p2_4 ==> issubtype(typeof(i_2), int()))
    invariant (p1_4 ==> acc(c_17.Container_f, write)) && (p2_4 ==> acc(c_17_0.Container_fp, write)) && ((p1_4 ==> issubtype(typeof(c_17.Container_f), int())) && (p2_4 ==> issubtype(typeof(c_17_0.Container_fp), int())))
    invariant (p1_4 ==> int___le__(0, int___unbox__(_checkDefined(i, 105)))) && (p2_4 ==> int___le__(0, int___unbox__(i_2))) && ((p1_4 ==> int___le__(int___unbox__(_checkDefined(i, 105)), int___unbox__(amount_7))) && (p2_4 ==> int___le__(int___unbox__(i_2), int___unbox__(amount_7_0))))
    invariant (p1_4 ==> int___eq__(c_17.Container_f, __prim__int___box__(int___add__(int___unbox__(old(c_17.Container_f)), int___unbox__(_checkDefined(i, 105)))))) && (p2_4 ==> int___eq__(c_17_0.Container_fp, __prim__int___box__(int___add__(int___unbox__(old(c_17_0.Container_fp)), int___unbox__(i_2)))))
    invariant (p1_4 ==> [true, !idle1 ==> _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), int___unbox__(amount_7)) || perm(MustTerminate(_cthread_149)) == none && ((forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))))]) && (p2_4 ==> [true, !idle2 ==> _loop_check_before_2 ==> _loop_termination_flag_2 || (!int___lt__(int___unbox__(i_2), int___unbox__(amount_7_0)) || perm(MustTerminate_0(_cthread_149_0)) == none && ((forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)))))])
    invariant (p1_4 ==> [true, !idle1 ==> !_loop_check_before ==> (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]) && (p2_4 ==> [true, !idle2 ==> !_loop_check_before_2 ==> (forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)))])
    invariant p1_4 && p2_4 ==> i == i_2
    invariant p1_4 && p2_4 ==> _loop_check_before == _loop_check_before_2
    invariant p1_4 && p2_4 ==> c_1.Container_f == c_1_0.Container_fp
    invariant bypass1 ==> tmp1 == _loop_measures
    invariant bypass1 ==> tmp1_0 == _cwl_149
    invariant bypass1 ==> tmp1_1 == i
    invariant bypass1 ==> tmp1_2 == _loop_check_before
    invariant bypass2 ==> tmp2 == _loop_measures_2
    invariant bypass2 ==> tmp2_0 == _cwl_149_0
    invariant bypass2 ==> tmp2_1 == i_2
    invariant bypass2 ==> tmp2_2 == _loop_check_before_2 
  {
    p1_5 := p1_4 && int___lt__(int___unbox__(_checkDefined(i, 105)), int___unbox__(amount_7))
    p2_5 := p2_4 && int___lt__(int___unbox__(i_2), int___unbox__(amount_7_0))
    idle1 := p1_4 && !int___lt__(int___unbox__(_checkDefined(i, 105)), int___unbox__(amount_7))
    idle2 := p2_4 && !int___lt__(int___unbox__(i_2), int___unbox__(amount_7_0))
    if (p1_5) {
      _loop_measures := Seq[Measure$]()
    }
    if (p2_5) {
      _loop_measures_2 := Seq[Measure$]()
    }
    // Method call: inc
  if (p1_5 || p2_5) {
      var tmp1_3: Ref
      var tmp2_3: Ref
      var tmp1_4: Seq[Measure$]
      var tmp2_4: Seq[Measure$]
      var tmp1_5: Perm
      var tmp2_5: Perm
      var tmp1_6: Ref
      var tmp2_6: Ref
      var tmp1_7: Perm
      var tmp2_7: Perm
      if (p1_5) {
        tmp1_3 := _cthread_149
        tmp1_4 := _method_measures_149
        tmp1_5 := _residue_164
        tmp1_6 := c_17
      }
      if (p2_5) {
        tmp2_3 := _cthread_149_0
        tmp2_4 := _method_measures_149_0
        tmp2_5 := _residue_164_0
        tmp2_6 := c_17_0
      }
      tmp1_7, tmp2_7 := inc(p1_5, p2_5, tmp1_3, tmp2_3, tmp1_4, tmp2_4, tmp1_5, tmp2_5, tmp1_6, tmp2_6)
      if (p1_5) {
        _cwl_149 := tmp1_7
      }
      if (p2_5) {
        _cwl_149_0 := tmp2_7
      }
    }
    if (p1_5) {
      i := __prim__int___box__(int___add__(int___unbox__(i), 1))
      inhale _isDefined(105)
      // We are after loop body._loop_check_before := false
    }
    if (p2_5) {
      i_2 := __prim__int___box__(int___add__(int___unbox__(i_2), 1))
      inhale true
      // We are after loop body._loop_check_before_2 := false
    }
    assert (p1_5 ==> _loop_termination_flag ==> !int___lt__(int___unbox__(_checkDefined(i, 105)), int___unbox__(amount_7))) && (p2_5 ==> _loop_termination_flag_2 ==> !int___lt__(int___unbox__(i_2), int___unbox__(amount_7_0)))
    inhale !p1_4 || true
    inhale !p2_4 || true
  }
  if (p1_4) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_149)) > none ==> acc(MustTerminate(_cthread_149), perm(MustTerminate(_cthread_149)) - _loop_original_must_terminate)
  }
  if (p2_4) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_149_0)) > none ==> acc(MustTerminate_0(_cthread_149_0), perm(MustTerminate_0(_cthread_149_0)) - _loop_original_must_terminate_2)
  }
  assert true
}

method inc_preserving(p1_6: Bool, p2_6: Bool, _cthread_150: Ref, _cthread_150_0: Ref, _caller_measures_150: Seq[Measure$], _caller_measures_150_0: Seq[Measure$], _residue_150: Perm, _residue_150_0: Perm, c_2: Ref, c_2_0: Ref) returns (_current_wait_level_150: Perm, _current_wait_level_150_0: Perm)
  requires (p1_6 ==> _cthread_150 != null) && (p2_6 ==> _cthread_150_0 != null)
  requires (p1_6 ==> issubtype(typeof(_cthread_150), Thread_0())) && (p2_6 ==> issubtype(typeof(_cthread_150_0), Thread_0()))
  requires (p1_6 ==> issubtype(typeof(c_2), Container())) && (p2_6 ==> issubtype(typeof(c_2_0), Container()))
  requires (p1_6 ==> acc(c_2.Container_f, write)) && (p2_6 ==> acc(c_2_0.Container_fp, write)) && ((p1_6 ==> issubtype(typeof(c_2.Container_f), int())) && (p2_6 ==> issubtype(typeof(c_2_0.Container_fp), int())))
  requires (p1_6 ==> [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))]) && (p2_6 ==> [true, perm(MustTerminate_0(_cthread_150_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))])
  ensures (p1_6 ==> [(forperm _r_13: Ref [_r_13.MustReleaseBounded] :: Level(_r_13) <= _current_wait_level_150) && ((forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: Level(_r_13) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]) && (p2_6 ==> [(forperm _r_13: Ref [_r_13.MustReleaseBoundedp] :: Level(_r_13) <= _current_wait_level_150_0) && ((forperm _r_13: Ref [_r_13.MustReleaseUnboundedp] :: Level(_r_13) <= _current_wait_level_150_0) && _residue_150_0 <= _current_wait_level_150_0), true])
  ensures (p1_6 ==> acc(c_2.Container_f, write)) && (p2_6 ==> acc(c_2_0.Container_fp, write)) && ((p1_6 ==> issubtype(typeof(c_2.Container_f), int())) && (p2_6 ==> issubtype(typeof(c_2_0.Container_fp), int())))
  ensures (p1_6 ==> int___eq__(c_2.Container_f, __prim__int___box__(int___add__(int___unbox__(old(c_2.Container_f)), 1)))) && (p2_6 ==> int___eq__(c_2_0.Container_fp, __prim__int___box__(int___add__(int___unbox__(old(c_2_0.Container_fp)), 1))))
  ensures (p1_6 ==> [true, (forperm _r_14: Ref [MustInvokeBounded(_r_14)] :: false) && ((forperm _r_14: Ref [MustInvokeUnbounded(_r_14)] :: false) && ((forperm _r_14: Ref [_r_14.MustReleaseBounded] :: false) && (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: false)))]) && (p2_6 ==> [true, (forperm _r_14: Ref [MustInvokeBounded_0(_r_14)] :: false) && ((forperm _r_14: Ref [MustInvokeUnbounded_0(_r_14)] :: false) && ((forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: false) && (forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: false)))])
  ensures (p1_6 && p2_6 ==> c_2 == c_2_0) && old(p1_6 && p2_6 ==> c_2.Container_f == c_2_0.Container_fp) ==> p1_6 && p2_6 ==> c_2.Container_f == c_2_0.Container_fp
{
  inhale p1_6
  var _err: Ref
  var _err_4: Ref
  var c_18: Ref
  var c_18_0: Ref
  var _cwl_150: Perm
  var _cwl_150_0: Perm
  var _method_measures_150: Seq[Measure$]
  var _method_measures_150_0: Seq[Measure$]
  if (p1_6) {
    _method_measures_150 := Seq[Measure$]()
    _err := null
    c_18 := c_2
  }
  if (p2_6) {
    _method_measures_150_0 := Seq[Measure$]()
    _err_4 := null
    c_18_0 := c_2_0
  }
  var p1_7: Bool
  var p2_7: Bool
  var p3_1: Bool
  var p4_1: Bool
  p1_7 := p1_6 && perm(_MaySet(c_18, 5020895374614515255530647363)) > none
  p2_7 := p2_6 && perm(_MaySet_0(c_18_0, 5020895374614515255530647363)) > none
  p3_1 := p1_6 && !(perm(_MaySet(c_18, 5020895374614515255530647363)) > none)
  p4_1 := p2_6 && !(perm(_MaySet_0(c_18_0, 5020895374614515255530647363)) > none)
  if (p1_7) {
    exhale acc(_MaySet(c_18, 5020895374614515255530647363), write)
    inhale acc(c_18.Container_f, write)
  }
  if (p2_7) {
    exhale acc(_MaySet_0(c_18_0, 5020895374614515255530647363), write)
    inhale acc(c_18_0.Container_fp, write)
  }
  if (p1_6) {
    c_18.Container_f := __prim__int___box__(int___add__(int___unbox__(c_18.Container_f), 1))
  }
  if (p2_6) {
    c_18_0.Container_fp := __prim__int___box__(int___add__(int___unbox__(c_18_0.Container_fp), 1))
  }
  assert true
}

method add_loop_preserving(p1_8: Bool, p2_8: Bool, _cthread_151: Ref, _cthread_151_0: Ref, _caller_measures_151: Seq[Measure$], _caller_measures_151_0: Seq[Measure$], _residue_151: Perm, _residue_151_0: Perm, amount_1: Ref, amount_1_0: Ref, c_3: Ref, c_3_0: Ref) returns (_current_wait_level_151: Perm, _current_wait_level_151_0: Perm)
  requires (p1_8 ==> _cthread_151 != null) && (p2_8 ==> _cthread_151_0 != null)
  requires (p1_8 ==> issubtype(typeof(_cthread_151), Thread_0())) && (p2_8 ==> issubtype(typeof(_cthread_151_0), Thread_0()))
  requires (p1_8 ==> issubtype(typeof(amount_1), int())) && (p2_8 ==> issubtype(typeof(amount_1_0), int()))
  requires (p1_8 ==> issubtype(typeof(c_3), Container())) && (p2_8 ==> issubtype(typeof(c_3_0), Container()))
  requires (p1_8 ==> acc(c_3.Container_f, write)) && (p2_8 ==> acc(c_3_0.Container_fp, write)) && ((p1_8 ==> issubtype(typeof(c_3.Container_f), int())) && (p2_8 ==> issubtype(typeof(c_3_0.Container_fp), int())))
  requires (p1_8 ==> int___ge__(int___unbox__(amount_1), 0)) && (p2_8 ==> int___ge__(int___unbox__(amount_1_0), 0))
  requires (p1_8 ==> [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false))))]) && (p2_8 ==> [true, perm(MustTerminate_0(_cthread_151_0)) == none && ((forperm _r_20: Ref [MustInvokeBounded_0(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded_0(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBoundedp] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnboundedp] :: false))))])
  ensures (p1_8 ==> [(forperm _r_18: Ref [_r_18.MustReleaseBounded] :: Level(_r_18) <= _current_wait_level_151) && ((forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: Level(_r_18) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]) && (p2_8 ==> [(forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: Level(_r_18) <= _current_wait_level_151_0) && ((forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: Level(_r_18) <= _current_wait_level_151_0) && _residue_151_0 <= _current_wait_level_151_0), true])
  ensures (p1_8 ==> acc(c_3.Container_f, write)) && (p2_8 ==> acc(c_3_0.Container_fp, write)) && ((p1_8 ==> issubtype(typeof(c_3.Container_f), int())) && (p2_8 ==> issubtype(typeof(c_3_0.Container_fp), int())))
  ensures (p1_8 ==> int___eq__(c_3.Container_f, __prim__int___box__(int___add__(int___unbox__(old(c_3.Container_f)), int___unbox__(amount_1))))) && (p2_8 ==> int___eq__(c_3_0.Container_fp, __prim__int___box__(int___add__(int___unbox__(old(c_3_0.Container_fp)), int___unbox__(amount_1_0)))))
  ensures (p1_8 ==> [true, (forperm _r_19: Ref [MustInvokeBounded(_r_19)] :: false) && ((forperm _r_19: Ref [MustInvokeUnbounded(_r_19)] :: false) && ((forperm _r_19: Ref [_r_19.MustReleaseBounded] :: false) && (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: false)))]) && (p2_8 ==> [true, (forperm _r_19: Ref [MustInvokeBounded_0(_r_19)] :: false) && ((forperm _r_19: Ref [MustInvokeUnbounded_0(_r_19)] :: false) && ((forperm _r_19: Ref [_r_19.MustReleaseBoundedp] :: false) && (forperm _r_19: Ref [_r_19.MustReleaseUnboundedp] :: false)))])
  ensures (p1_8 && p2_8 ==> amount_1 == amount_1_0) && (p1_8 && p2_8 ==> c_3 == c_3_0) && old(p1_8 && p2_8 ==> c_3.Container_f == c_3_0.Container_fp) ==> p1_8 && p2_8 ==> c_3.Container_f == c_3_0.Container_fp
{
  inhale p1_8
  var _err: Ref
  var _err_5: Ref
  var i_0: Ref
  var i_0_0: Ref
  var amount_8: Ref
  var amount_8_0: Ref
  var c_19: Ref
  var c_19_0: Ref
  var _loop_measures_0: Seq[Measure$]
  var _loop_measures_0_0: Seq[Measure$]
  var _loop_check_before_0: Bool
  var _loop_check_before_0_0: Bool
  var _loop_termination_flag_0: Bool
  var _loop_termination_flag_0_0: Bool
  var _loop_original_must_terminate_0: Perm
  var _loop_original_must_terminate_0_0: Perm
  var _residue_165: Perm
  var _residue_165_0: Perm
  var _cwl_151: Perm
  var _cwl_151_0: Perm
  var _method_measures_151: Seq[Measure$]
  var _method_measures_151_0: Seq[Measure$]
  if (p1_8) {
    _method_measures_151 := Seq[Measure$]()
    _err := null
    amount_8 := amount_1
    c_19 := c_3
    i_0 := __prim__int___box__(0)
    inhale _isDefined(3170153)
    // Save current MustTerminate amount._loop_original_must_terminate_0 := perm(MustTerminate(_cthread_151))
    // Save loop termination promise._loop_termination_flag_0 := false
    // We are before loop._loop_check_before_0 := true
  }
  if (p2_8) {
    _method_measures_151_0 := Seq[Measure$]()
    _err_5 := null
    amount_8_0 := amount_1_0
    c_19_0 := c_3_0
    i_0_0 := __prim__int___box__(0)
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_0_0 := perm(MustTerminate_0(_cthread_151_0))
    // Save loop termination promise._loop_termination_flag_0_0 := false
    // We are before loop._loop_check_before_0_0 := true
  }
  var bypass1_0: Bool
  var bypass2_0: Bool
  var tmp1_8: Seq[Measure$]
  var tmp2_8: Seq[Measure$]
  var tmp1_9: Perm
  var tmp2_9: Perm
  var tmp1_10: Ref
  var tmp2_10: Ref
  var tmp1_11: Bool
  var tmp2_11: Bool
  var p1_9: Bool
  var p2_9: Bool
  var idle1_0: Bool
  var idle2_0: Bool
  bypass1_0 := !p1_8
  bypass2_0 := !p2_8
  if (bypass1_0) {
    tmp1_8 := _loop_measures_0
    tmp1_9 := _cwl_151
    tmp1_10 := i_0
    tmp1_11 := _loop_check_before_0
  }
  if (bypass2_0) {
    tmp2_8 := _loop_measures_0_0
    tmp2_9 := _cwl_151_0
    tmp2_10 := i_0_0
    tmp2_11 := _loop_check_before_0_0
  }
  idle1_0 := false
  idle2_0 := false
  while (p1_8 && !bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), int___unbox__(amount_8)) || p2_8 && !bypass2_0 && int___lt__(int___unbox__(i_0_0), int___unbox__(amount_8_0)))
    invariant (p1_8 ==> [(forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _residue_165) && ((forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _residue_165) && _residue_151 <= _residue_165), true]) && (p2_8 ==> [(forperm _r_16: Ref [_r_16.MustReleaseBoundedp] :: Level(_r_16) <= _residue_165_0) && ((forperm _r_16: Ref [_r_16.MustReleaseUnboundedp] :: Level(_r_16) <= _residue_165_0) && _residue_151_0 <= _residue_165_0), true])
    invariant (p1_8 ==> issubtype(typeof(i_0), int())) && (p2_8 ==> issubtype(typeof(i_0_0), int()))
    invariant (p1_8 ==> acc(c_19.Container_f, write)) && (p2_8 ==> acc(c_19_0.Container_fp, write)) && ((p1_8 ==> issubtype(typeof(c_19.Container_f), int())) && (p2_8 ==> issubtype(typeof(c_19_0.Container_fp), int())))
    invariant (p1_8 ==> int___le__(0, int___unbox__(_checkDefined(i_0, 3170153)))) && (p2_8 ==> int___le__(0, int___unbox__(i_0_0))) && ((p1_8 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), int___unbox__(amount_8))) && (p2_8 ==> int___le__(int___unbox__(i_0_0), int___unbox__(amount_8_0))))
    invariant (p1_8 ==> int___eq__(c_19.Container_f, __prim__int___box__(int___add__(int___unbox__(old(c_19.Container_f)), int___unbox__(_checkDefined(i_0, 3170153)))))) && (p2_8 ==> int___eq__(c_19_0.Container_fp, __prim__int___box__(int___add__(int___unbox__(old(c_19_0.Container_fp)), int___unbox__(i_0_0)))))
    invariant (p1_8 ==> [true, !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), int___unbox__(amount_8)) || perm(MustTerminate(_cthread_151)) == none && ((forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)))))]) && (p2_8 ==> [true, !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(i_0_0), int___unbox__(amount_8_0)) || perm(MustTerminate_0(_cthread_151_0)) == none && ((forperm _r_17: Ref [MustInvokeBounded_0(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded_0(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: false)))))])
    invariant (p1_8 ==> [true, !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)))]) && (p2_8 ==> [true, !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_17: Ref [MustInvokeBounded_0(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded_0(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: false)))])
    invariant (p1_8 && p2_8 ==> amount_1 == amount_1_0) && (p1_8 && p2_8 ==> c_3 == c_3_0) && old(p1_8 && p2_8 ==> c_3.Container_f == c_3_0.Container_fp) ==> p1_8 && p2_8 ==> i_0 == i_0_0
    invariant (p1_8 && p2_8 ==> amount_1 == amount_1_0) && (p1_8 && p2_8 ==> c_3 == c_3_0) && old(p1_8 && p2_8 ==> c_3.Container_f == c_3_0.Container_fp) ==> p1_8 && p2_8 ==> _loop_check_before_0 == _loop_check_before_0_0
    invariant (p1_8 && p2_8 ==> amount_1 == amount_1_0) && (p1_8 && p2_8 ==> c_3 == c_3_0) && old(p1_8 && p2_8 ==> c_3.Container_f == c_3_0.Container_fp) ==> p1_8 && p2_8 ==> c_3.Container_f == c_3_0.Container_fp
    invariant bypass1_0 ==> tmp1_8 == _loop_measures_0
    invariant bypass1_0 ==> tmp1_9 == _cwl_151
    invariant bypass1_0 ==> tmp1_10 == i_0
    invariant bypass1_0 ==> tmp1_11 == _loop_check_before_0
    invariant bypass2_0 ==> tmp2_8 == _loop_measures_0_0
    invariant bypass2_0 ==> tmp2_9 == _cwl_151_0
    invariant bypass2_0 ==> tmp2_10 == i_0_0
    invariant bypass2_0 ==> tmp2_11 == _loop_check_before_0_0 
  {
    p1_9 := p1_8 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), int___unbox__(amount_8))
    p2_9 := p2_8 && int___lt__(int___unbox__(i_0_0), int___unbox__(amount_8_0))
    idle1_0 := p1_8 && !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), int___unbox__(amount_8))
    idle2_0 := p2_8 && !int___lt__(int___unbox__(i_0_0), int___unbox__(amount_8_0))
    if (p1_9) {
      _loop_measures_0 := Seq[Measure$]()
    }
    if (p2_9) {
      _loop_measures_0_0 := Seq[Measure$]()
    }
    // Method call: inc_preserving
  if (p1_9 || p2_9) {
      var tmp1_12: Ref
      var tmp2_12: Ref
      var tmp1_13: Seq[Measure$]
      var tmp2_13: Seq[Measure$]
      var tmp1_14: Perm
      var tmp2_14: Perm
      var tmp1_15: Ref
      var tmp2_15: Ref
      var tmp1_16: Perm
      var tmp2_16: Perm
      if (p1_9) {
        tmp1_12 := _cthread_151
        tmp1_13 := _method_measures_151
        tmp1_14 := _residue_165
        tmp1_15 := c_19
      }
      if (p2_9) {
        tmp2_12 := _cthread_151_0
        tmp2_13 := _method_measures_151_0
        tmp2_14 := _residue_165_0
        tmp2_15 := c_19_0
      }
      tmp1_16, tmp2_16 := inc_preserving(p1_9, p2_9, tmp1_12, tmp2_12, tmp1_13, tmp2_13, tmp1_14, tmp2_14, tmp1_15, tmp2_15)
      if (p1_9) {
        _cwl_151 := tmp1_16
      }
      if (p2_9) {
        _cwl_151_0 := tmp2_16
      }
    }
    if (p1_9) {
      i_0 := __prim__int___box__(int___add__(int___unbox__(i_0), 1))
      inhale _isDefined(3170153)
      // We are after loop body._loop_check_before_0 := false
    }
    if (p2_9) {
      i_0_0 := __prim__int___box__(int___add__(int___unbox__(i_0_0), 1))
      inhale true
      // We are after loop body._loop_check_before_0_0 := false
    }
    assert (p1_9 ==> _loop_termination_flag_0 ==> !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), int___unbox__(amount_8))) && (p2_9 ==> _loop_termination_flag_0_0 ==> !int___lt__(int___unbox__(i_0_0), int___unbox__(amount_8_0)))
    inhale !p1_8 || true
    inhale !p2_8 || true
  }
  if (p1_8) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_151)) > none ==> acc(MustTerminate(_cthread_151), perm(MustTerminate(_cthread_151)) - _loop_original_must_terminate_0)
  }
  if (p2_8) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_151_0)) > none ==> acc(MustTerminate_0(_cthread_151_0), perm(MustTerminate_0(_cthread_151_0)) - _loop_original_must_terminate_0_0)
  }
  assert true
}

method incPred(p1_10: Bool, p2_10: Bool, _cthread_152: Ref, _cthread_152_0: Ref, _caller_measures_152: Seq[Measure$], _caller_measures_152_0: Seq[Measure$], _residue_152: Perm, _residue_152_0: Perm, c_4: Ref, c_4_0: Ref) returns (_current_wait_level_152: Perm, _current_wait_level_152_0: Perm)
  requires (p1_10 ==> _cthread_152 != null) && (p2_10 ==> _cthread_152_0 != null)
  requires (p1_10 ==> issubtype(typeof(_cthread_152), Thread_0())) && (p2_10 ==> issubtype(typeof(_cthread_152_0), Thread_0()))
  requires (p1_10 ==> issubtype(typeof(c_4), Container())) && (p2_10 ==> issubtype(typeof(c_4_0), Container()))
  requires (p1_10 ==> acc(contPred(c_4), write)) && (p2_10 ==> acc(contPred_0(c_4_0), write)) && (p1_10 && p2_10 ==> contPred_all_low(c_4, c_4_0))
  requires (p1_10 ==> [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false))))]) && (p2_10 ==> [true, perm(MustTerminate_0(_cthread_152_0)) == none && ((forperm _r_23: Ref [MustInvokeBounded_0(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded_0(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBoundedp] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnboundedp] :: false))))])
  requires (p1_10 && p2_10 ==> c_4 == c_4_0) && (p1_10 && p2_10 ==> contPred_all_low(c_4, c_4_0))
  ensures (p1_10 ==> [(forperm _r_21: Ref [_r_21.MustReleaseBounded] :: Level(_r_21) <= _current_wait_level_152) && ((forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: Level(_r_21) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]) && (p2_10 ==> [(forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: Level(_r_21) <= _current_wait_level_152_0) && ((forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: Level(_r_21) <= _current_wait_level_152_0) && _residue_152_0 <= _current_wait_level_152_0), true])
  ensures (p1_10 ==> acc(contPred(c_4), write)) && (p2_10 ==> acc(contPred_0(c_4_0), write)) && (p1_10 && p2_10 ==> contPred_all_low(c_4, c_4_0))
  ensures (p1_10 ==> (unfolding acc(contPred(c_4), write) in int___eq__(c_4.Container_f, __prim__int___box__(int___add__(int___unbox__(old((unfolding acc(contPred(c_4), write) in c_4.Container_f))), 1))))) && (p2_10 ==> (unfolding acc(contPred_0(c_4_0), write) in int___eq__(c_4_0.Container_fp, __prim__int___box__(int___add__(int___unbox__(old((unfolding acc(contPred_0(c_4_0), write) in c_4_0.Container_fp))), 1)))))
  ensures (p1_10 ==> [true, (forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false)))]) && (p2_10 ==> [true, (forperm _r_22: Ref [MustInvokeBounded_0(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded_0(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBoundedp] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnboundedp] :: false)))])
  ensures (p1_10 && p2_10 ==> contPred_all_low(c_4, c_4_0)) && ((p1_10 && p2_10 ==> contPred_all_low(c_4, c_4_0)) && (p1_10 && p2_10 ==> contPred_all_low(c_4, c_4_0)))
{
  inhale p1_10
  var _err: Ref
  var _err_6: Ref
  var c_20: Ref
  var c_20_0: Ref
  var _cwl_152: Perm
  var _cwl_152_0: Perm
  var _method_measures_152: Seq[Measure$]
  var _method_measures_152_0: Seq[Measure$]
  if (p1_10) {
    _method_measures_152 := Seq[Measure$]()
    _err := null
    c_20 := c_4
  }
  if (p2_10) {
    _method_measures_152_0 := Seq[Measure$]()
    _err_6 := null
    c_20_0 := c_4_0
  }
  assert p1_10 && p2_10 ==> perm(contPred(c_20)) >= write && perm(contPred_0(c_20_0)) >= write ==> contPred_all_low(c_20, c_20_0)
  if (p1_10) {
    unfold acc(contPred(c_20), write)
  }
  if (p2_10) {
    unfold acc(contPred_0(c_20_0), write)
  }
  var p1_11: Bool
  var p2_11: Bool
  var p3_2: Bool
  var p4_2: Bool
  p1_11 := p1_10 && perm(_MaySet(c_20, 5020895374614515255530647363)) > none
  p2_11 := p2_10 && perm(_MaySet_0(c_20_0, 5020895374614515255530647363)) > none
  p3_2 := p1_10 && !(perm(_MaySet(c_20, 5020895374614515255530647363)) > none)
  p4_2 := p2_10 && !(perm(_MaySet_0(c_20_0, 5020895374614515255530647363)) > none)
  if (p1_11) {
    exhale acc(_MaySet(c_20, 5020895374614515255530647363), write)
    inhale acc(c_20.Container_f, write)
  }
  if (p2_11) {
    exhale acc(_MaySet_0(c_20_0, 5020895374614515255530647363), write)
    inhale acc(c_20_0.Container_fp, write)
  }
  if (p1_10) {
    c_20.Container_f := __prim__int___box__(int___add__(int___unbox__(c_20.Container_f), 1))
  }
  if (p2_10) {
    c_20_0.Container_fp := __prim__int___box__(int___add__(int___unbox__(c_20_0.Container_fp), 1))
  }
  if (p1_10) {
    fold acc(contPred(c_20), write)
  }
  if (p2_10) {
    fold acc(contPred_0(c_20_0), write)
  }
  assert p1_10 && p2_10 ==> contPred_all_low(c_20, c_20_0)
  assert true
}

method addPredLoop(p1_12: Bool, p2_12: Bool, _cthread_153: Ref, _cthread_153_0: Ref, _caller_measures_153: Seq[Measure$], _caller_measures_153_0: Seq[Measure$], _residue_153: Perm, _residue_153_0: Perm, amount_2: Ref, amount_2_0: Ref, c_5: Ref, c_5_0: Ref) returns (_current_wait_level_153: Perm, _current_wait_level_153_0: Perm)
  requires (p1_12 ==> _cthread_153 != null) && (p2_12 ==> _cthread_153_0 != null)
  requires (p1_12 ==> issubtype(typeof(_cthread_153), Thread_0())) && (p2_12 ==> issubtype(typeof(_cthread_153_0), Thread_0()))
  requires (p1_12 ==> issubtype(typeof(amount_2), int())) && (p2_12 ==> issubtype(typeof(amount_2_0), int()))
  requires (p1_12 ==> issubtype(typeof(c_5), Container())) && (p2_12 ==> issubtype(typeof(c_5_0), Container()))
  requires (p1_12 ==> acc(contPred(c_5), write)) && (p2_12 ==> acc(contPred_0(c_5_0), write)) && (p1_12 && p2_12 ==> contPred_all_low(c_5, c_5_0))
  requires (p1_12 ==> int___ge__(int___unbox__(amount_2), 0)) && (p2_12 ==> int___ge__(int___unbox__(amount_2_0), 0))
  requires (p1_12 ==> [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false))))]) && (p2_12 ==> [true, perm(MustTerminate_0(_cthread_153_0)) == none && ((forperm _r_28: Ref [MustInvokeBounded_0(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded_0(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBoundedp] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnboundedp] :: false))))])
  requires (p1_12 && p2_12 ==> amount_2 == amount_2_0) && (p1_12 && p2_12 ==> c_5 == c_5_0) && (p1_12 && p2_12 ==> contPred_all_low(c_5, c_5_0))
  ensures (p1_12 ==> [(forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_153) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]) && (p2_12 ==> [(forperm _r_26: Ref [_r_26.MustReleaseBoundedp] :: Level(_r_26) <= _current_wait_level_153_0) && ((forperm _r_26: Ref [_r_26.MustReleaseUnboundedp] :: Level(_r_26) <= _current_wait_level_153_0) && _residue_153_0 <= _current_wait_level_153_0), true])
  ensures (p1_12 ==> acc(contPred(c_5), write)) && (p2_12 ==> acc(contPred_0(c_5_0), write)) && (p1_12 && p2_12 ==> contPred_all_low(c_5, c_5_0))
  ensures (p1_12 ==> (unfolding acc(contPred(c_5), write) in int___eq__(c_5.Container_f, __prim__int___box__(int___add__(int___unbox__(old((unfolding acc(contPred(c_5), write) in c_5.Container_f))), int___unbox__(amount_2)))))) && (p2_12 ==> (unfolding acc(contPred_0(c_5_0), write) in int___eq__(c_5_0.Container_fp, __prim__int___box__(int___add__(int___unbox__(old((unfolding acc(contPred_0(c_5_0), write) in c_5_0.Container_fp))), int___unbox__(amount_2_0))))))
  ensures (p1_12 ==> [true, (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))]) && (p2_12 ==> [true, (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)))])
  ensures (p1_12 && p2_12 ==> contPred_all_low(c_5, c_5_0)) && ((p1_12 && p2_12 ==> contPred_all_low(c_5, c_5_0)) && (p1_12 && p2_12 ==> contPred_all_low(c_5, c_5_0)))
{
  inhale p1_12
  var _err: Ref
  var _err_7: Ref
  var i_1: Ref
  var i_1_0: Ref
  var amount_9: Ref
  var amount_9_0: Ref
  var c_21: Ref
  var c_21_0: Ref
  var _loop_measures_1: Seq[Measure$]
  var _loop_measures_1_0: Seq[Measure$]
  var _loop_check_before_1: Bool
  var _loop_check_before_1_0: Bool
  var _loop_termination_flag_1: Bool
  var _loop_termination_flag_1_0: Bool
  var _loop_original_must_terminate_1: Perm
  var _loop_original_must_terminate_1_0: Perm
  var _residue_166: Perm
  var _residue_166_0: Perm
  var _cwl_153: Perm
  var _cwl_153_0: Perm
  var _method_measures_153: Seq[Measure$]
  var _method_measures_153_0: Seq[Measure$]
  if (p1_12) {
    _method_measures_153 := Seq[Measure$]()
    _err := null
    amount_9 := amount_2
    c_21 := c_5
    i_1 := __prim__int___box__(0)
    inhale _isDefined(3235689)
    // Save current MustTerminate amount._loop_original_must_terminate_1 := perm(MustTerminate(_cthread_153))
    // Save loop termination promise._loop_termination_flag_1 := false
    // We are before loop._loop_check_before_1 := true
  }
  if (p2_12) {
    _method_measures_153_0 := Seq[Measure$]()
    _err_7 := null
    amount_9_0 := amount_2_0
    c_21_0 := c_5_0
    i_1_0 := __prim__int___box__(0)
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_1_0 := perm(MustTerminate_0(_cthread_153_0))
    // Save loop termination promise._loop_termination_flag_1_0 := false
    // We are before loop._loop_check_before_1_0 := true
  }
  var bypass1_1: Bool
  var bypass2_1: Bool
  var tmp1_17: Seq[Measure$]
  var tmp2_17: Seq[Measure$]
  var tmp1_18: Perm
  var tmp2_18: Perm
  var tmp1_19: Ref
  var tmp2_19: Ref
  var tmp1_20: Bool
  var tmp2_20: Bool
  var p1_13: Bool
  var p2_13: Bool
  var idle1_1: Bool
  var idle2_1: Bool
  bypass1_1 := !p1_12
  bypass2_1 := !p2_12
  if (bypass1_1) {
    tmp1_17 := _loop_measures_1
    tmp1_18 := _cwl_153
    tmp1_19 := i_1
    tmp1_20 := _loop_check_before_1
  }
  if (bypass2_1) {
    tmp2_17 := _loop_measures_1_0
    tmp2_18 := _cwl_153_0
    tmp2_19 := i_1_0
    tmp2_20 := _loop_check_before_1_0
  }
  idle1_1 := false
  idle2_1 := false
  while (p1_12 && !bypass1_1 && int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), int___unbox__(amount_9)) || p2_12 && !bypass2_1 && int___lt__(int___unbox__(i_1_0), int___unbox__(amount_9_0)))
    invariant (p1_12 ==> [(forperm _r_24: Ref [_r_24.MustReleaseBounded] :: Level(_r_24) <= _residue_166) && ((forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: Level(_r_24) <= _residue_166) && _residue_153 <= _residue_166), true]) && (p2_12 ==> [(forperm _r_24: Ref [_r_24.MustReleaseBoundedp] :: Level(_r_24) <= _residue_166_0) && ((forperm _r_24: Ref [_r_24.MustReleaseUnboundedp] :: Level(_r_24) <= _residue_166_0) && _residue_153_0 <= _residue_166_0), true])
    invariant (p1_12 ==> issubtype(typeof(i_1), int())) && (p2_12 ==> issubtype(typeof(i_1_0), int()))
    invariant (p1_12 ==> acc(contPred(c_21), write)) && (p2_12 ==> acc(contPred_0(c_21_0), write)) && (p1_12 && p2_12 ==> contPred_all_low(c_21, c_21_0))
    invariant (p1_12 ==> int___le__(0, int___unbox__(_checkDefined(i_1, 3235689)))) && (p2_12 ==> int___le__(0, int___unbox__(i_1_0))) && ((p1_12 ==> int___le__(int___unbox__(_checkDefined(i_1, 3235689)), int___unbox__(amount_9))) && (p2_12 ==> int___le__(int___unbox__(i_1_0), int___unbox__(amount_9_0))))
    invariant (p1_12 ==> (unfolding acc(contPred(c_21), write) in int___eq__(c_21.Container_f, __prim__int___box__(int___add__(int___unbox__(old((unfolding acc(contPred(c_21), write) in c_21.Container_f))), int___unbox__(_checkDefined(i_1, 3235689))))))) && (p2_12 ==> (unfolding acc(contPred_0(c_21_0), write) in int___eq__(c_21_0.Container_fp, __prim__int___box__(int___add__(int___unbox__(old((unfolding acc(contPred_0(c_21_0), write) in c_21_0.Container_fp))), int___unbox__(i_1_0))))))
    invariant (p1_12 ==> [true, !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), int___unbox__(amount_9)) || perm(MustTerminate(_cthread_153)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false)))))]) && (p2_12 ==> [true, !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || (!int___lt__(int___unbox__(i_1_0), int___unbox__(amount_9_0)) || perm(MustTerminate_0(_cthread_153_0)) == none && ((forperm _r_25: Ref [MustInvokeBounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBoundedp] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnboundedp] :: false)))))])
    invariant (p1_12 ==> [true, !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false)))]) && (p2_12 ==> [true, !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_25: Ref [MustInvokeBounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBoundedp] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnboundedp] :: false)))])
    invariant p1_12 && p2_12 ==> i_1 == i_1_0
    invariant p1_12 && p2_12 ==> _loop_check_before_1 == _loop_check_before_1_0
    invariant p1_12 && p2_12 ==> contPred_all_low(c_5, c_5_0)
    invariant bypass1_1 ==> tmp1_17 == _loop_measures_1
    invariant bypass1_1 ==> tmp1_18 == _cwl_153
    invariant bypass1_1 ==> tmp1_19 == i_1
    invariant bypass1_1 ==> tmp1_20 == _loop_check_before_1
    invariant bypass2_1 ==> tmp2_17 == _loop_measures_1_0
    invariant bypass2_1 ==> tmp2_18 == _cwl_153_0
    invariant bypass2_1 ==> tmp2_19 == i_1_0
    invariant bypass2_1 ==> tmp2_20 == _loop_check_before_1_0 
  {
    p1_13 := p1_12 && int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), int___unbox__(amount_9))
    p2_13 := p2_12 && int___lt__(int___unbox__(i_1_0), int___unbox__(amount_9_0))
    idle1_1 := p1_12 && !int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), int___unbox__(amount_9))
    idle2_1 := p2_12 && !int___lt__(int___unbox__(i_1_0), int___unbox__(amount_9_0))
    if (p1_13) {
      _loop_measures_1 := Seq[Measure$]()
    }
    if (p2_13) {
      _loop_measures_1_0 := Seq[Measure$]()
    }
    // Method call: incPred
  if (p1_13 || p2_13) {
      var tmp1_21: Ref
      var tmp2_21: Ref
      var tmp1_22: Seq[Measure$]
      var tmp2_22: Seq[Measure$]
      var tmp1_23: Perm
      var tmp2_23: Perm
      var tmp1_24: Ref
      var tmp2_24: Ref
      var tmp1_25: Perm
      var tmp2_25: Perm
      if (p1_13) {
        tmp1_21 := _cthread_153
        tmp1_22 := _method_measures_153
        tmp1_23 := _residue_166
        tmp1_24 := c_21
      }
      if (p2_13) {
        tmp2_21 := _cthread_153_0
        tmp2_22 := _method_measures_153_0
        tmp2_23 := _residue_166_0
        tmp2_24 := c_21_0
      }
      tmp1_25, tmp2_25 := incPred(p1_13, p2_13, tmp1_21, tmp2_21, tmp1_22, tmp2_22, tmp1_23, tmp2_23, tmp1_24, tmp2_24)
      if (p1_13) {
        _cwl_153 := tmp1_25
      }
      if (p2_13) {
        _cwl_153_0 := tmp2_25
      }
    }
    if (p1_13) {
      i_1 := __prim__int___box__(int___add__(int___unbox__(i_1), 1))
      inhale _isDefined(3235689)
      // We are after loop body._loop_check_before_1 := false
    }
    if (p2_13) {
      i_1_0 := __prim__int___box__(int___add__(int___unbox__(i_1_0), 1))
      inhale true
      // We are after loop body._loop_check_before_1_0 := false
    }
    assert (p1_13 ==> _loop_termination_flag_1 ==> !int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), int___unbox__(amount_9))) && (p2_13 ==> _loop_termination_flag_1_0 ==> !int___lt__(int___unbox__(i_1_0), int___unbox__(amount_9_0)))
    inhale !p1_12 || true
    inhale !p2_12 || true
  }
  if (p1_12) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_153)) > none ==> acc(MustTerminate(_cthread_153), perm(MustTerminate(_cthread_153)) - _loop_original_must_terminate_1)
  }
  if (p2_12) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_153_0)) > none ==> acc(MustTerminate_0(_cthread_153_0), perm(MustTerminate_0(_cthread_153_0)) - _loop_original_must_terminate_1_0)
  }
  assert true
}

method addPred(p1_14: Bool, p2_14: Bool, _cthread_154: Ref, _cthread_154_0: Ref, _caller_measures_154: Seq[Measure$], _caller_measures_154_0: Seq[Measure$], _residue_154: Perm, _residue_154_0: Perm, amount_3: Ref, amount_3_0: Ref, c_6: Ref, c_6_0: Ref) returns (_current_wait_level_154: Perm, _current_wait_level_154_0: Perm)
  requires (p1_14 ==> _cthread_154 != null) && (p2_14 ==> _cthread_154_0 != null)
  requires (p1_14 ==> issubtype(typeof(_cthread_154), Thread_0())) && (p2_14 ==> issubtype(typeof(_cthread_154_0), Thread_0()))
  requires (p1_14 ==> issubtype(typeof(amount_3), int())) && (p2_14 ==> issubtype(typeof(amount_3_0), int()))
  requires (p1_14 ==> issubtype(typeof(c_6), Container())) && (p2_14 ==> issubtype(typeof(c_6_0), Container()))
  requires (p1_14 ==> acc(contPred(c_6), write)) && (p2_14 ==> acc(contPred_0(c_6_0), write)) && (p1_14 && p2_14 ==> contPred_all_low(c_6, c_6_0))
  requires (p1_14 ==> [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_31: Ref [MustInvokeBounded(_r_31)] :: false) && ((forperm _r_31: Ref [MustInvokeUnbounded(_r_31)] :: false) && ((forperm _r_31: Ref [_r_31.MustReleaseBounded] :: false) && (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: false))))]) && (p2_14 ==> [true, perm(MustTerminate_0(_cthread_154_0)) == none && ((forperm _r_31: Ref [MustInvokeBounded_0(_r_31)] :: false) && ((forperm _r_31: Ref [MustInvokeUnbounded_0(_r_31)] :: false) && ((forperm _r_31: Ref [_r_31.MustReleaseBoundedp] :: false) && (forperm _r_31: Ref [_r_31.MustReleaseUnboundedp] :: false))))])
  requires (p1_14 && p2_14 ==> amount_3 == amount_3_0) && (p1_14 && p2_14 ==> c_6 == c_6_0) && (p1_14 && p2_14 ==> contPred_all_low(c_6, c_6_0))
  ensures (p1_14 ==> [(forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_154) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]) && (p2_14 ==> [(forperm _r_29: Ref [_r_29.MustReleaseBoundedp] :: Level(_r_29) <= _current_wait_level_154_0) && ((forperm _r_29: Ref [_r_29.MustReleaseUnboundedp] :: Level(_r_29) <= _current_wait_level_154_0) && _residue_154_0 <= _current_wait_level_154_0), true])
  ensures (p1_14 ==> acc(contPred(c_6), write)) && (p2_14 ==> acc(contPred_0(c_6_0), write)) && (p1_14 && p2_14 ==> contPred_all_low(c_6, c_6_0))
  ensures (p1_14 ==> [true, (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))]) && (p2_14 ==> [true, (forperm _r_30: Ref [MustInvokeBounded_0(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded_0(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBoundedp] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnboundedp] :: false)))])
  ensures p1_14 && p2_14 ==> contPred_all_low(c_6, c_6_0)
{
  inhale p1_14
  var _err: Ref
  var _err_8: Ref
  var amount_10: Ref
  var amount_10_0: Ref
  var c_22: Ref
  var c_22_0: Ref
  var _cwl_154: Perm
  var _cwl_154_0: Perm
  var _method_measures_154: Seq[Measure$]
  var _method_measures_154_0: Seq[Measure$]
  if (p1_14) {
    _method_measures_154 := Seq[Measure$]()
    _err := null
    amount_10 := amount_3
    c_22 := c_6
  }
  if (p2_14) {
    _method_measures_154_0 := Seq[Measure$]()
    _err_8 := null
    amount_10_0 := amount_3_0
    c_22_0 := c_6_0
  }
  assert p1_14 && p2_14 ==> perm(contPred(c_22)) >= write && perm(contPred_0(c_22_0)) >= write ==> contPred_all_low(c_22, c_22_0)
  if (p1_14) {
    unfold acc(contPred(c_22), write)
  }
  if (p2_14) {
    unfold acc(contPred_0(c_22_0), write)
  }
  var p1_15: Bool
  var p2_15: Bool
  var p3_3: Bool
  var p4_3: Bool
  p1_15 := p1_14 && perm(_MaySet(c_22, 5020895374614515255530647363)) > none
  p2_15 := p2_14 && perm(_MaySet_0(c_22_0, 5020895374614515255530647363)) > none
  p3_3 := p1_14 && !(perm(_MaySet(c_22, 5020895374614515255530647363)) > none)
  p4_3 := p2_14 && !(perm(_MaySet_0(c_22_0, 5020895374614515255530647363)) > none)
  if (p1_15) {
    exhale acc(_MaySet(c_22, 5020895374614515255530647363), write)
    inhale acc(c_22.Container_f, write)
  }
  if (p2_15) {
    exhale acc(_MaySet_0(c_22_0, 5020895374614515255530647363), write)
    inhale acc(c_22_0.Container_fp, write)
  }
  if (p1_14) {
    c_22.Container_f := __prim__int___box__(int___add__(int___unbox__(c_22.Container_f), int___unbox__(amount_10)))
  }
  if (p2_14) {
    c_22_0.Container_fp := __prim__int___box__(int___add__(int___unbox__(c_22_0.Container_fp), int___unbox__(amount_10_0)))
  }
  if (p1_14) {
    fold acc(contPred(c_22), write)
  }
  if (p2_14) {
    fold acc(contPred_0(c_22_0), write)
  }
  assert p1_14 && p2_14 ==> contPred_all_low(c_22, c_22_0)
  assert true
}

method addPred_preserving(p1_16: Bool, p2_16: Bool, _cthread_155: Ref, _cthread_155_0: Ref, _caller_measures_155: Seq[Measure$], _caller_measures_155_0: Seq[Measure$], _residue_155: Perm, _residue_155_0: Perm, amount_4: Ref, amount_4_0: Ref, c_7: Ref, c_7_0: Ref) returns (_current_wait_level_155: Perm, _current_wait_level_155_0: Perm)
  requires (p1_16 ==> _cthread_155 != null) && (p2_16 ==> _cthread_155_0 != null)
  requires (p1_16 ==> issubtype(typeof(_cthread_155), Thread_0())) && (p2_16 ==> issubtype(typeof(_cthread_155_0), Thread_0()))
  requires (p1_16 ==> issubtype(typeof(amount_4), int())) && (p2_16 ==> issubtype(typeof(amount_4_0), int()))
  requires (p1_16 ==> issubtype(typeof(c_7), Container())) && (p2_16 ==> issubtype(typeof(c_7_0), Container()))
  requires (p1_16 ==> acc(contPred(c_7), write)) && (p2_16 ==> acc(contPred_0(c_7_0), write)) && (p1_16 && p2_16 && ((p1_16 && p2_16 ==> amount_4 == amount_4_0) && (p1_16 && p2_16 ==> c_7 == c_7_0) && (p1_16 && p2_16 ==> contPred_all_low(c_7, c_7_0))) ==> contPred_all_low(c_7, c_7_0))
  requires (p1_16 ==> [true, perm(MustTerminate(_cthread_155)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))]) && (p2_16 ==> [true, perm(MustTerminate_0(_cthread_155_0)) == none && ((forperm _r_34: Ref [MustInvokeBounded_0(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded_0(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBoundedp] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnboundedp] :: false))))])
  ensures (p1_16 ==> [(forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_155) && ((forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_155) && _residue_155 <= _current_wait_level_155), true]) && (p2_16 ==> [(forperm _r_32: Ref [_r_32.MustReleaseBoundedp] :: Level(_r_32) <= _current_wait_level_155_0) && ((forperm _r_32: Ref [_r_32.MustReleaseUnboundedp] :: Level(_r_32) <= _current_wait_level_155_0) && _residue_155_0 <= _current_wait_level_155_0), true])
  ensures (p1_16 ==> acc(contPred(c_7), write)) && (p2_16 ==> acc(contPred_0(c_7_0), write)) && (p1_16 && p2_16 && ((p1_16 && p2_16 ==> amount_4 == amount_4_0) && (p1_16 && p2_16 ==> c_7 == c_7_0) && old(p1_16 && p2_16 ==> contPred_all_low(c_7, c_7_0))) ==> contPred_all_low(c_7, c_7_0))
  ensures (p1_16 ==> [true, (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))]) && (p2_16 ==> [true, (forperm _r_33: Ref [MustInvokeBounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded_0(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: false)))])
  ensures (p1_16 && p2_16 ==> amount_4 == amount_4_0) && (p1_16 && p2_16 ==> c_7 == c_7_0) && old(p1_16 && p2_16 ==> contPred_all_low(c_7, c_7_0)) ==> p1_16 && p2_16 ==> contPred_all_low(c_7, c_7_0)
{
  inhale p1_16
  var _err: Ref
  var _err_9: Ref
  var amount_11: Ref
  var amount_11_0: Ref
  var c_23: Ref
  var c_23_0: Ref
  var _cwl_155: Perm
  var _cwl_155_0: Perm
  var _method_measures_155: Seq[Measure$]
  var _method_measures_155_0: Seq[Measure$]
  if (p1_16) {
    _method_measures_155 := Seq[Measure$]()
    _err := null
    amount_11 := amount_4
    c_23 := c_7
  }
  if (p2_16) {
    _method_measures_155_0 := Seq[Measure$]()
    _err_9 := null
    amount_11_0 := amount_4_0
    c_23_0 := c_7_0
  }
  assert p1_16 && p2_16 && ((p1_16 && p2_16 ==> amount_4 == amount_4_0) && (p1_16 && p2_16 ==> c_7 == c_7_0) && old(p1_16 && p2_16 ==> contPred_all_low(c_7, c_7_0))) ==> perm(contPred(c_23)) >= write && perm(contPred_0(c_23_0)) >= write ==> contPred_all_low(c_23, c_23_0)
  if (p1_16) {
    unfold acc(contPred(c_23), write)
  }
  if (p2_16) {
    unfold acc(contPred_0(c_23_0), write)
  }
  var p1_17: Bool
  var p2_17: Bool
  var p3_4: Bool
  var p4_4: Bool
  p1_17 := p1_16 && perm(_MaySet(c_23, 5020895374614515255530647363)) > none
  p2_17 := p2_16 && perm(_MaySet_0(c_23_0, 5020895374614515255530647363)) > none
  p3_4 := p1_16 && !(perm(_MaySet(c_23, 5020895374614515255530647363)) > none)
  p4_4 := p2_16 && !(perm(_MaySet_0(c_23_0, 5020895374614515255530647363)) > none)
  if (p1_17) {
    exhale acc(_MaySet(c_23, 5020895374614515255530647363), write)
    inhale acc(c_23.Container_f, write)
  }
  if (p2_17) {
    exhale acc(_MaySet_0(c_23_0, 5020895374614515255530647363), write)
    inhale acc(c_23_0.Container_fp, write)
  }
  if (p1_16) {
    c_23.Container_f := __prim__int___box__(int___add__(int___unbox__(c_23.Container_f), int___unbox__(amount_11)))
  }
  if (p2_16) {
    c_23_0.Container_fp := __prim__int___box__(int___add__(int___unbox__(c_23_0.Container_fp), int___unbox__(amount_11_0)))
  }
  if (p1_16) {
    fold acc(contPred(c_23), write)
  }
  if (p2_16) {
    fold acc(contPred_0(c_23_0), write)
  }
  assert p1_16 && p2_16 && ((p1_16 && p2_16 ==> amount_4 == amount_4_0) && (p1_16 && p2_16 ==> c_7 == c_7_0) && old(p1_16 && p2_16 ==> contPred_all_low(c_7, c_7_0))) ==> contPred_all_low(c_23, c_23_0)
  assert true
}

method pred_assert_low(p1_18: Bool, p2_18: Bool, _cthread_156: Ref, _cthread_156_0: Ref, _caller_measures_156: Seq[Measure$], _caller_measures_156_0: Seq[Measure$], _residue_156: Perm, _residue_156_0: Perm, amount_5: Ref, amount_5_0: Ref, c_8: Ref, c_8_0: Ref) returns (_current_wait_level_156: Perm, _current_wait_level_156_0: Perm)
  requires (p1_18 ==> _cthread_156 != null) && (p2_18 ==> _cthread_156_0 != null)
  requires (p1_18 ==> issubtype(typeof(_cthread_156), Thread_0())) && (p2_18 ==> issubtype(typeof(_cthread_156_0), Thread_0()))
  requires (p1_18 ==> issubtype(typeof(amount_5), int())) && (p2_18 ==> issubtype(typeof(amount_5_0), int()))
  requires (p1_18 ==> issubtype(typeof(c_8), Container())) && (p2_18 ==> issubtype(typeof(c_8_0), Container()))
  requires (p1_18 ==> acc(contPred(c_8), write)) && (p2_18 ==> acc(contPred_0(c_8_0), write)) && (p1_18 && p2_18 && ((p1_18 && p2_18 ==> amount_5 == amount_5_0) && (p1_18 && p2_18 ==> c_8 == c_8_0) && (p1_18 && p2_18 ==> contPred_all_low(c_8, c_8_0))) ==> contPred_all_low(c_8, c_8_0))
  requires (p1_18 ==> [true, perm(MustTerminate(_cthread_156)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))]) && (p2_18 ==> [true, perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))])
  ensures (p1_18 ==> [(forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_156) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]) && (p2_18 ==> [(forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_156_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0), true])
  ensures (p1_18 ==> [true, (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))]) && (p2_18 ==> [true, (forperm _r_36: Ref [MustInvokeBounded_0(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded_0(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBoundedp] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnboundedp] :: false)))])
  ensures (p1_18 && p2_18 ==> amount_5 == amount_5_0) && (p1_18 && p2_18 ==> c_8 == c_8_0) && old(p1_18 && p2_18 ==> contPred_all_low(c_8, c_8_0)) ==> (p1_18 ==> true) && (p2_18 ==> true)
{
  inhale p1_18
  var _err: Ref
  var _err_10: Ref
  var amount_12: Ref
  var amount_12_0: Ref
  var c_24: Ref
  var c_24_0: Ref
  var get_secret_res: Ref
  var get_secret_res_0: Ref
  var _cwl_156: Perm
  var _cwl_156_0: Perm
  var _method_measures_156: Seq[Measure$]
  var _method_measures_156_0: Seq[Measure$]
  if (p1_18) {
    _method_measures_156 := Seq[Measure$]()
    _err := null
    amount_12 := amount_5
    c_24 := c_8
  }
  if (p2_18) {
    _method_measures_156_0 := Seq[Measure$]()
    _err_10 := null
    amount_12_0 := amount_5_0
    c_24_0 := c_8_0
  }
  assert (p1_18 ==> acc(contPred(c_24), write)) && (p2_18 ==> acc(contPred_0(c_24_0), write)) && (p1_18 && p2_18 && ((p1_18 && p2_18 ==> amount_5 == amount_5_0) && (p1_18 && p2_18 ==> c_8 == c_8_0) && old(p1_18 && p2_18 ==> contPred_all_low(c_8, c_8_0))) ==> contPred_all_low(c_24, c_24_0))
  assert p1_18 && p2_18 && ((p1_18 && p2_18 ==> amount_5 == amount_5_0) && (p1_18 && p2_18 ==> c_8 == c_8_0) && old(p1_18 && p2_18 ==> contPred_all_low(c_8, c_8_0))) ==> perm(contPred(c_24)) >= write && perm(contPred_0(c_24_0)) >= write ==> contPred_all_low(c_24, c_24_0)
  if (p1_18) {
    unfold acc(contPred(c_24), write)
  }
  if (p2_18) {
    unfold acc(contPred_0(c_24_0), write)
  }
  // Method call: get_secret
  if (p1_18 || p2_18) {
    var tmp1_26: Ref
    var tmp2_26: Ref
    var tmp1_27: Seq[Measure$]
    var tmp2_27: Seq[Measure$]
    var tmp1_28: Perm
    var tmp2_28: Perm
    var tmp1_29: Perm
    var tmp2_29: Perm
    var tmp1_30: Ref
    var tmp2_30: Ref
    if (p1_18) {
      tmp1_26 := _cthread_156
      tmp1_27 := _method_measures_156
      tmp1_28 := _residue_156
    }
    if (p2_18) {
      tmp2_26 := _cthread_156_0
      tmp2_27 := _method_measures_156_0
      tmp2_28 := _residue_156_0
    }
    tmp1_29, tmp2_29, tmp1_30, tmp2_30 := get_secret(p1_18, p2_18, tmp1_26, tmp2_26, tmp1_27, tmp2_27, tmp1_28, tmp2_28)
    if (p1_18) {
      _cwl_156 := tmp1_29
      get_secret_res := tmp1_30
    }
    if (p2_18) {
      _cwl_156_0 := tmp2_29
      get_secret_res_0 := tmp2_30
    }
  }
  var p1_19: Bool
  var p2_19: Bool
  var p3_5: Bool
  var p4_5: Bool
  p1_19 := p1_18 && perm(_MaySet(c_24, 5020895374614515255530647363)) > none
  p2_19 := p2_18 && perm(_MaySet_0(c_24_0, 5020895374614515255530647363)) > none
  p3_5 := p1_18 && !(perm(_MaySet(c_24, 5020895374614515255530647363)) > none)
  p4_5 := p2_18 && !(perm(_MaySet_0(c_24_0, 5020895374614515255530647363)) > none)
  if (p1_19) {
    exhale acc(_MaySet(c_24, 5020895374614515255530647363), write)
    inhale acc(c_24.Container_f, write)
  }
  if (p2_19) {
    exhale acc(_MaySet_0(c_24_0, 5020895374614515255530647363), write)
    inhale acc(c_24_0.Container_fp, write)
  }
  if (p1_18) {
    c_24.Container_f := get_secret_res
  }
  if (p2_18) {
    c_24_0.Container_fp := get_secret_res_0
  }
  if (p1_18) {
    fold acc(contPred(c_24), write)
  }
  if (p2_18) {
    fold acc(contPred_0(c_24_0), write)
  }
  assert p1_18 && p2_18 && ((p1_18 && p2_18 ==> amount_5 == amount_5_0) && (p1_18 && p2_18 ==> c_8 == c_8_0) && old(p1_18 && p2_18 ==> contPred_all_low(c_8, c_8_0))) ==> contPred_all_low(c_24, c_24_0)
  assert true
}

method low_m(p1_20: Bool, p2_20: Bool, _cthread_157: Ref, _cthread_157_0: Ref, _caller_measures_157: Seq[Measure$], _caller_measures_157_0: Seq[Measure$], _residue_157: Perm, _residue_157_0: Perm, a: Ref, a_1: Ref) returns (_current_wait_level_157: Perm, _current_wait_level_157_0: Perm, _res: Ref, _res_1: Ref)
  requires (p1_20 ==> _cthread_157 != null) && (p2_20 ==> _cthread_157_0 != null)
  requires (p1_20 ==> issubtype(typeof(_cthread_157), Thread_0())) && (p2_20 ==> issubtype(typeof(_cthread_157_0), Thread_0()))
  requires (p1_20 ==> issubtype(typeof(a), int())) && (p2_20 ==> issubtype(typeof(a_1), int()))
  requires (p1_20 ==> [true, perm(MustTerminate(_cthread_157)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))]) && (p2_20 ==> [true, perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_40: Ref [MustInvokeBounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBoundedp] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnboundedp] :: false))))])
  requires p1_20 && p2_20 ==> a == a_1
  ensures (p1_20 ==> [(forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_157) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]) && (p2_20 ==> [(forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: Level(_r_38) <= _current_wait_level_157_0) && ((forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: Level(_r_38) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0), true])
  ensures (p1_20 ==> issubtype(typeof(_res), int())) && (p2_20 ==> issubtype(typeof(_res_1), int()))
  ensures (p1_20 ==> [true, (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))]) && (p2_20 ==> [true, (forperm _r_39: Ref [MustInvokeBounded_0(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded_0(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBoundedp] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnboundedp] :: false)))])
  ensures p1_20 && p2_20 ==> _res == _res_1
{
  var ret1_0: Bool
  var ret2_0: Bool
  inhale p1_20
  ret1_0 := false
  ret2_0 := false
  var _err: Ref
  var _err_11: Ref
  var a_0: Ref
  var a_0_0: Ref
  var _cwl_157: Perm
  var _cwl_157_0: Perm
  var _method_measures_157: Seq[Measure$]
  var _method_measures_157_0: Seq[Measure$]
  if (p1_20 && !ret1_0) {
    _method_measures_157 := Seq[Measure$]()
    _res := null
    _err := null
    a_0 := a
    _res := __prim__int___box__(int___add__(int___unbox__(a_0), 1))
    ret1_0 := true
  }
  if (p2_20 && !ret2_0) {
    _method_measures_157_0 := Seq[Measure$]()
    _res_1 := null
    _err_11 := null
    a_0_0 := a_1
    _res_1 := __prim__int___box__(int___add__(int___unbox__(a_0_0), 1))
    ret2_0 := true
  }
  assert true
}

method test_inc_preserving(p1_21: Bool, p2_21: Bool, _cthread_158: Ref, _cthread_158_0: Ref, _caller_measures_158: Seq[Measure$], _caller_measures_158_0: Seq[Measure$], _residue_158: Perm, _residue_158_0: Perm, secret: Ref, secret_9: Ref, c_9: Ref, c_9_0: Ref) returns (_current_wait_level_158: Perm, _current_wait_level_158_0: Perm)
  requires (p1_21 ==> _cthread_158 != null) && (p2_21 ==> _cthread_158_0 != null)
  requires (p1_21 ==> issubtype(typeof(_cthread_158), Thread_0())) && (p2_21 ==> issubtype(typeof(_cthread_158_0), Thread_0()))
  requires (p1_21 ==> issubtype(typeof(secret), bool())) && (p2_21 ==> issubtype(typeof(secret_9), bool()))
  requires (p1_21 ==> issubtype(typeof(c_9), Container())) && (p2_21 ==> issubtype(typeof(c_9_0), Container()))
  requires p1_21 == p2_21
  requires (p1_21 ==> acc(c_9.Container_f, write)) && (p2_21 ==> acc(c_9_0.Container_fp, write)) && ((p1_21 ==> issubtype(typeof(c_9.Container_f), int())) && (p2_21 ==> issubtype(typeof(c_9_0.Container_fp), int())))
  requires p1_21 && p2_21 ==> c_9 == c_9_0
  requires p1_21 && p2_21 ==> c_9.Container_f == c_9_0.Container_fp
  requires (p1_21 ==> [true, perm(MustTerminate(_cthread_158)) == none && ((forperm _r_43: Ref [MustInvokeBounded(_r_43)] :: false) && ((forperm _r_43: Ref [MustInvokeUnbounded(_r_43)] :: false) && ((forperm _r_43: Ref [_r_43.MustReleaseBounded] :: false) && (forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: false))))]) && (p2_21 ==> [true, perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_43: Ref [MustInvokeBounded_0(_r_43)] :: false) && ((forperm _r_43: Ref [MustInvokeUnbounded_0(_r_43)] :: false) && ((forperm _r_43: Ref [_r_43.MustReleaseBoundedp] :: false) && (forperm _r_43: Ref [_r_43.MustReleaseUnboundedp] :: false))))])
  ensures (p1_21 ==> [(forperm _r_41: Ref [_r_41.MustReleaseBounded] :: Level(_r_41) <= _current_wait_level_158) && ((forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: Level(_r_41) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158), true]) && (p2_21 ==> [(forperm _r_41: Ref [_r_41.MustReleaseBoundedp] :: Level(_r_41) <= _current_wait_level_158_0) && ((forperm _r_41: Ref [_r_41.MustReleaseUnboundedp] :: Level(_r_41) <= _current_wait_level_158_0) && _residue_158_0 <= _current_wait_level_158_0), true])
  ensures (p1_21 ==> acc(c_9.Container_f, write)) && (p2_21 ==> acc(c_9_0.Container_fp, write)) && ((p1_21 ==> issubtype(typeof(c_9.Container_f), int())) && (p2_21 ==> issubtype(typeof(c_9_0.Container_fp), int())))
  ensures p1_21 && p2_21 ==> c_9 == c_9_0
  ensures p1_21 && p2_21 ==> int___eq__(c_9.Container_f, c_9_0.Container_fp)
  ensures (p1_21 ==> [true, (forperm _r_42: Ref [MustInvokeBounded(_r_42)] :: false) && ((forperm _r_42: Ref [MustInvokeUnbounded(_r_42)] :: false) && ((forperm _r_42: Ref [_r_42.MustReleaseBounded] :: false) && (forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: false)))]) && (p2_21 ==> [true, (forperm _r_42: Ref [MustInvokeBounded_0(_r_42)] :: false) && ((forperm _r_42: Ref [MustInvokeUnbounded_0(_r_42)] :: false) && ((forperm _r_42: Ref [_r_42.MustReleaseBoundedp] :: false) && (forperm _r_42: Ref [_r_42.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_21
  var _err: Ref
  var _err_12: Ref
  var secret_4: Ref
  var secret_4_0: Ref
  var c_25: Ref
  var c_25_0: Ref
  var _cwl_158: Perm
  var _cwl_158_0: Perm
  var _method_measures_158: Seq[Measure$]
  var _method_measures_158_0: Seq[Measure$]
  if (p1_21) {
    _method_measures_158 := Seq[Measure$]()
    _err := null
    secret_4 := secret
    c_25 := c_9
  }
  if (p2_21) {
    _method_measures_158_0 := Seq[Measure$]()
    _err_12 := null
    secret_4_0 := secret_9
    c_25_0 := c_9_0
  }
  var p1_22: Bool
  var p2_22: Bool
  var p3_6: Bool
  var p4_6: Bool
  p1_22 := p1_21 && bool___unbox__(secret_4)
  p2_22 := p2_21 && bool___unbox__(secret_4_0)
  p3_6 := p1_21 && !bool___unbox__(secret_4)
  p4_6 := p2_21 && !bool___unbox__(secret_4_0)
  // Method call: inc_preserving
  if (p1_22 || p2_22) {
    var tmp1_31: Ref
    var tmp2_31: Ref
    var tmp1_32: Seq[Measure$]
    var tmp2_32: Seq[Measure$]
    var tmp1_33: Perm
    var tmp2_33: Perm
    var tmp1_34: Ref
    var tmp2_34: Ref
    var tmp1_35: Perm
    var tmp2_35: Perm
    if (p1_22) {
      tmp1_31 := _cthread_158
      tmp1_32 := _method_measures_158
      tmp1_33 := _residue_158
      tmp1_34 := c_25
    }
    if (p2_22) {
      tmp2_31 := _cthread_158_0
      tmp2_32 := _method_measures_158_0
      tmp2_33 := _residue_158_0
      tmp2_34 := c_25_0
    }
    tmp1_35, tmp2_35 := inc_preserving(p1_22, p2_22, tmp1_31, tmp2_31, tmp1_32, tmp2_32, tmp1_33, tmp2_33, tmp1_34, tmp2_34)
    if (p1_22) {
      _cwl_158 := tmp1_35
    }
    if (p2_22) {
      _cwl_158_0 := tmp2_35
    }
  }
  // Method call: inc_preserving
  if (p3_6 || p4_6) {
    var tmp1_36: Ref
    var tmp2_36: Ref
    var tmp1_37: Seq[Measure$]
    var tmp2_37: Seq[Measure$]
    var tmp1_38: Perm
    var tmp2_38: Perm
    var tmp1_39: Ref
    var tmp2_39: Ref
    var tmp1_40: Perm
    var tmp2_40: Perm
    if (p3_6) {
      tmp1_36 := _cthread_158
      tmp1_37 := _method_measures_158
      tmp1_38 := _residue_158
      tmp1_39 := c_25
    }
    if (p4_6) {
      tmp2_36 := _cthread_158_0
      tmp2_37 := _method_measures_158_0
      tmp2_38 := _residue_158_0
      tmp2_39 := c_25_0
    }
    tmp1_40, tmp2_40 := inc_preserving(p3_6, p4_6, tmp1_36, tmp2_36, tmp1_37, tmp2_37, tmp1_38, tmp2_38, tmp1_39, tmp2_39)
    if (p3_6) {
      _cwl_158 := tmp1_40
    }
    if (p4_6) {
      _cwl_158_0 := tmp2_40
    }
  }
  assert true
}

method test_inc_all_low(p1_23: Bool, p2_23: Bool, _cthread_159: Ref, _cthread_159_0: Ref, _caller_measures_159: Seq[Measure$], _caller_measures_159_0: Seq[Measure$], _residue_159: Perm, _residue_159_0: Perm, secret_0: Ref, secret_0_0: Ref, c_10: Ref, c_10_0: Ref) returns (_current_wait_level_159: Perm, _current_wait_level_159_0: Perm)
  requires (p1_23 ==> _cthread_159 != null) && (p2_23 ==> _cthread_159_0 != null)
  requires (p1_23 ==> issubtype(typeof(_cthread_159), Thread_0())) && (p2_23 ==> issubtype(typeof(_cthread_159_0), Thread_0()))
  requires (p1_23 ==> issubtype(typeof(secret_0), bool())) && (p2_23 ==> issubtype(typeof(secret_0_0), bool()))
  requires (p1_23 ==> issubtype(typeof(c_10), Container())) && (p2_23 ==> issubtype(typeof(c_10_0), Container()))
  requires p1_23 == p2_23
  requires p1_23 && p2_23 ==> c_10 == c_10_0
  requires (p1_23 ==> acc(c_10.Container_f, write)) && (p2_23 ==> acc(c_10_0.Container_fp, write)) && ((p1_23 ==> issubtype(typeof(c_10.Container_f), int())) && (p2_23 ==> issubtype(typeof(c_10_0.Container_fp), int())))
  requires p1_23 && p2_23 ==> c_10.Container_f == c_10_0.Container_fp
  requires (p1_23 ==> [true, perm(MustTerminate(_cthread_159)) == none && ((forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false))))]) && (p2_23 ==> [true, perm(MustTerminate_0(_cthread_159_0)) == none && ((forperm _r_46: Ref [MustInvokeBounded_0(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded_0(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBoundedp] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnboundedp] :: false))))])
  ensures (p1_23 ==> [(forperm _r_44: Ref [_r_44.MustReleaseBounded] :: Level(_r_44) <= _current_wait_level_159) && ((forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: Level(_r_44) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159), true]) && (p2_23 ==> [(forperm _r_44: Ref [_r_44.MustReleaseBoundedp] :: Level(_r_44) <= _current_wait_level_159_0) && ((forperm _r_44: Ref [_r_44.MustReleaseUnboundedp] :: Level(_r_44) <= _current_wait_level_159_0) && _residue_159_0 <= _current_wait_level_159_0), true])
  ensures p1_23 && p2_23 ==> c_10 == c_10_0
  ensures (p1_23 ==> acc(c_10.Container_f, write)) && (p2_23 ==> acc(c_10_0.Container_fp, write)) && ((p1_23 ==> issubtype(typeof(c_10.Container_f), int())) && (p2_23 ==> issubtype(typeof(c_10_0.Container_fp), int())))
  ensures p1_23 && p2_23 ==> c_10.Container_f == c_10_0.Container_fp
  ensures (p1_23 ==> [true, (forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false) && ((forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false) && ((forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false) && (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)))]) && (p2_23 ==> [true, (forperm _r_45: Ref [MustInvokeBounded_0(_r_45)] :: false) && ((forperm _r_45: Ref [MustInvokeUnbounded_0(_r_45)] :: false) && ((forperm _r_45: Ref [_r_45.MustReleaseBoundedp] :: false) && (forperm _r_45: Ref [_r_45.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_23
  var _err: Ref
  var _err_13: Ref
  var x_0: Ref
  var x_0_0: Ref
  var secret_5: Ref
  var secret_5_0: Ref
  var c_26: Ref
  var c_26_0: Ref
  var _cwl_159: Perm
  var _cwl_159_0: Perm
  var _method_measures_159: Seq[Measure$]
  var _method_measures_159_0: Seq[Measure$]
  if (p1_23) {
    _method_measures_159 := Seq[Measure$]()
    _err := null
    secret_5 := secret_0
    c_26 := c_10
  }
  if (p2_23) {
    _method_measures_159_0 := Seq[Measure$]()
    _err_13 := null
    secret_5_0 := secret_0_0
    c_26_0 := c_10_0
  }
  var p1_24: Bool
  var p2_24: Bool
  var p3_7: Bool
  var p4_7: Bool
  p1_24 := p1_23 && bool___unbox__(secret_5)
  p2_24 := p2_23 && bool___unbox__(secret_5_0)
  p3_7 := p1_23 && !bool___unbox__(secret_5)
  p4_7 := p2_23 && !bool___unbox__(secret_5_0)
  if (p1_24) {
    x_0 := __prim__int___box__(1)
    inhale _isDefined(3170168)
  }
  if (p2_24) {
    x_0_0 := __prim__int___box__(1)
    inhale true
  }
  // Method call: inc
  if (p1_23 || p2_23) {
    var tmp1_41: Ref
    var tmp2_41: Ref
    var tmp1_42: Seq[Measure$]
    var tmp2_42: Seq[Measure$]
    var tmp1_43: Perm
    var tmp2_43: Perm
    var tmp1_44: Ref
    var tmp2_44: Ref
    var tmp1_45: Perm
    var tmp2_45: Perm
    if (p1_23) {
      tmp1_41 := _cthread_159
      tmp1_42 := _method_measures_159
      tmp1_43 := _residue_159
      tmp1_44 := c_26
    }
    if (p2_23) {
      tmp2_41 := _cthread_159_0
      tmp2_42 := _method_measures_159_0
      tmp2_43 := _residue_159_0
      tmp2_44 := c_26_0
    }
    tmp1_45, tmp2_45 := inc(p1_23, p2_23, tmp1_41, tmp2_41, tmp1_42, tmp2_42, tmp1_43, tmp2_43, tmp1_44, tmp2_44)
    if (p1_23) {
      _cwl_159 := tmp1_45
    }
    if (p2_23) {
      _cwl_159_0 := tmp2_45
    }
  }
  assert true
}

method test_inc_predicate(p1_25: Bool, p2_25: Bool, _cthread_160: Ref, _cthread_160_0: Ref, _caller_measures_160: Seq[Measure$], _caller_measures_160_0: Seq[Measure$], _residue_160: Perm, _residue_160_0: Perm, secret_1: Ref, secret_1_0: Ref, c_11: Ref, c_11_0: Ref) returns (_current_wait_level_160: Perm, _current_wait_level_160_0: Perm)
  requires (p1_25 ==> _cthread_160 != null) && (p2_25 ==> _cthread_160_0 != null)
  requires (p1_25 ==> issubtype(typeof(_cthread_160), Thread_0())) && (p2_25 ==> issubtype(typeof(_cthread_160_0), Thread_0()))
  requires (p1_25 ==> issubtype(typeof(secret_1), bool())) && (p2_25 ==> issubtype(typeof(secret_1_0), bool()))
  requires (p1_25 ==> issubtype(typeof(c_11), Container())) && (p2_25 ==> issubtype(typeof(c_11_0), Container()))
  requires (p1_25 ==> acc(contPred(c_11), write)) && (p2_25 ==> acc(contPred_0(c_11_0), write)) && ((p1_25 && p2_25 ==> c_11 == c_11_0) && (p1_25 && p2_25 ==> (unfolding acc(contPred(c_11), write) in (unfolding acc(contPred_0(c_11_0), write) in p1_25 && p2_25 ==> c_11.Container_f == c_11_0.Container_fp))))
  requires (p1_25 ==> [true, perm(MustTerminate(_cthread_160)) == none && ((forperm _r_49: Ref [MustInvokeBounded(_r_49)] :: false) && ((forperm _r_49: Ref [MustInvokeUnbounded(_r_49)] :: false) && ((forperm _r_49: Ref [_r_49.MustReleaseBounded] :: false) && (forperm _r_49: Ref [_r_49.MustReleaseUnbounded] :: false))))]) && (p2_25 ==> [true, perm(MustTerminate_0(_cthread_160_0)) == none && ((forperm _r_49: Ref [MustInvokeBounded_0(_r_49)] :: false) && ((forperm _r_49: Ref [MustInvokeUnbounded_0(_r_49)] :: false) && ((forperm _r_49: Ref [_r_49.MustReleaseBoundedp] :: false) && (forperm _r_49: Ref [_r_49.MustReleaseUnboundedp] :: false))))])
  ensures (p1_25 ==> [(forperm _r_47: Ref [_r_47.MustReleaseBounded] :: Level(_r_47) <= _current_wait_level_160) && ((forperm _r_47: Ref [_r_47.MustReleaseUnbounded] :: Level(_r_47) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160), true]) && (p2_25 ==> [(forperm _r_47: Ref [_r_47.MustReleaseBoundedp] :: Level(_r_47) <= _current_wait_level_160_0) && ((forperm _r_47: Ref [_r_47.MustReleaseUnboundedp] :: Level(_r_47) <= _current_wait_level_160_0) && _residue_160_0 <= _current_wait_level_160_0), true])
  ensures (p1_25 ==> acc(contPred(c_11), write)) && (p2_25 ==> acc(contPred_0(c_11_0), write)) && ((p1_25 && p2_25 ==> c_11 == c_11_0) && (p1_25 && p2_25 ==> (unfolding acc(contPred(c_11), write) in (unfolding acc(contPred_0(c_11_0), write) in p1_25 && p2_25 ==> c_11.Container_f == c_11_0.Container_fp))))
  ensures (p1_25 ==> [true, (forperm _r_48: Ref [MustInvokeBounded(_r_48)] :: false) && ((forperm _r_48: Ref [MustInvokeUnbounded(_r_48)] :: false) && ((forperm _r_48: Ref [_r_48.MustReleaseBounded] :: false) && (forperm _r_48: Ref [_r_48.MustReleaseUnbounded] :: false)))]) && (p2_25 ==> [true, (forperm _r_48: Ref [MustInvokeBounded_0(_r_48)] :: false) && ((forperm _r_48: Ref [MustInvokeUnbounded_0(_r_48)] :: false) && ((forperm _r_48: Ref [_r_48.MustReleaseBoundedp] :: false) && (forperm _r_48: Ref [_r_48.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_25
  var _err: Ref
  var _err_14: Ref
  var secret_6: Ref
  var secret_6_0: Ref
  var c_27: Ref
  var c_27_0: Ref
  var _cwl_160: Perm
  var _cwl_160_0: Perm
  var _method_measures_160: Seq[Measure$]
  var _method_measures_160_0: Seq[Measure$]
  if (p1_25) {
    _method_measures_160 := Seq[Measure$]()
    _err := null
    secret_6 := secret_1
    c_27 := c_11
  }
  if (p2_25) {
    _method_measures_160_0 := Seq[Measure$]()
    _err_14 := null
    secret_6_0 := secret_1_0
    c_27_0 := c_11_0
  }
  var p1_26: Bool
  var p2_26: Bool
  var p3_8: Bool
  var p4_8: Bool
  p1_26 := p1_25 && bool___unbox__(secret_6)
  p2_26 := p2_25 && bool___unbox__(secret_6_0)
  p3_8 := p1_25 && !bool___unbox__(secret_6)
  p4_8 := p2_25 && !bool___unbox__(secret_6_0)
  // Method call: incPred
  if (p1_26 || p2_26) {
    var tmp1_46: Ref
    var tmp2_46: Ref
    var tmp1_47: Seq[Measure$]
    var tmp2_47: Seq[Measure$]
    var tmp1_48: Perm
    var tmp2_48: Perm
    var tmp1_49: Ref
    var tmp2_49: Ref
    var tmp1_50: Perm
    var tmp2_50: Perm
    if (p1_26) {
      tmp1_46 := _cthread_160
      tmp1_47 := _method_measures_160
      tmp1_48 := _residue_160
      tmp1_49 := c_27
    }
    if (p2_26) {
      tmp2_46 := _cthread_160_0
      tmp2_47 := _method_measures_160_0
      tmp2_48 := _residue_160_0
      tmp2_49 := c_27_0
    }
    tmp1_50, tmp2_50 := incPred(p1_26, p2_26, tmp1_46, tmp2_46, tmp1_47, tmp2_47, tmp1_48, tmp2_48, tmp1_49, tmp2_49)
    if (p1_26) {
      _cwl_160 := tmp1_50
    }
    if (p2_26) {
      _cwl_160_0 := tmp2_50
    }
  }
  assert true
}

method test_add_predicate(p1_27: Bool, p2_27: Bool, _cthread_161: Ref, _cthread_161_0: Ref, _caller_measures_161: Seq[Measure$], _caller_measures_161_0: Seq[Measure$], _residue_161: Perm, _residue_161_0: Perm, secret_2: Ref, secret_2_0: Ref, c_12: Ref, c_12_0: Ref) returns (_current_wait_level_161: Perm, _current_wait_level_161_0: Perm)
  requires (p1_27 ==> _cthread_161 != null) && (p2_27 ==> _cthread_161_0 != null)
  requires (p1_27 ==> issubtype(typeof(_cthread_161), Thread_0())) && (p2_27 ==> issubtype(typeof(_cthread_161_0), Thread_0()))
  requires (p1_27 ==> issubtype(typeof(secret_2), int())) && (p2_27 ==> issubtype(typeof(secret_2_0), int()))
  requires (p1_27 ==> issubtype(typeof(c_12), Container())) && (p2_27 ==> issubtype(typeof(c_12_0), Container()))
  requires (p1_27 ==> acc(contPred(c_12), write)) && (p2_27 ==> acc(contPred_0(c_12_0), write))
  requires (p1_27 ==> [true, perm(MustTerminate(_cthread_161)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false))))]) && (p2_27 ==> [true, perm(MustTerminate_0(_cthread_161_0)) == none && ((forperm _r_52: Ref [MustInvokeBounded_0(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded_0(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBoundedp] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnboundedp] :: false))))])
  ensures (p1_27 ==> [(forperm _r_50: Ref [_r_50.MustReleaseBounded] :: Level(_r_50) <= _current_wait_level_161) && ((forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: Level(_r_50) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161), true]) && (p2_27 ==> [(forperm _r_50: Ref [_r_50.MustReleaseBoundedp] :: Level(_r_50) <= _current_wait_level_161_0) && ((forperm _r_50: Ref [_r_50.MustReleaseUnboundedp] :: Level(_r_50) <= _current_wait_level_161_0) && _residue_161_0 <= _current_wait_level_161_0), true])
  ensures (p1_27 ==> acc(contPred(c_12), write)) && (p2_27 ==> acc(contPred_0(c_12_0), write))
  ensures (p1_27 ==> [true, (forperm _r_51: Ref [MustInvokeBounded(_r_51)] :: false) && ((forperm _r_51: Ref [MustInvokeUnbounded(_r_51)] :: false) && ((forperm _r_51: Ref [_r_51.MustReleaseBounded] :: false) && (forperm _r_51: Ref [_r_51.MustReleaseUnbounded] :: false)))]) && (p2_27 ==> [true, (forperm _r_51: Ref [MustInvokeBounded_0(_r_51)] :: false) && ((forperm _r_51: Ref [MustInvokeUnbounded_0(_r_51)] :: false) && ((forperm _r_51: Ref [_r_51.MustReleaseBoundedp] :: false) && (forperm _r_51: Ref [_r_51.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_27
  var _err: Ref
  var _err_15: Ref
  var secret_7: Ref
  var secret_7_0: Ref
  var c_28: Ref
  var c_28_0: Ref
  var _cwl_161: Perm
  var _cwl_161_0: Perm
  var _method_measures_161: Seq[Measure$]
  var _method_measures_161_0: Seq[Measure$]
  if (p1_27) {
    _method_measures_161 := Seq[Measure$]()
    _err := null
    secret_7 := secret_2
    c_28 := c_12
  }
  if (p2_27) {
    _method_measures_161_0 := Seq[Measure$]()
    _err_15 := null
    secret_7_0 := secret_2_0
    c_28_0 := c_12_0
  }
  // Method call: addPred
  if (p1_27 || p2_27) {
    var tmp1_51: Ref
    var tmp2_51: Ref
    var tmp1_52: Seq[Measure$]
    var tmp2_52: Seq[Measure$]
    var tmp1_53: Perm
    var tmp2_53: Perm
    var tmp1_54: Ref
    var tmp2_54: Ref
    var tmp1_55: Ref
    var tmp2_55: Ref
    var tmp1_56: Perm
    var tmp2_56: Perm
    if (p1_27) {
      tmp1_51 := _cthread_161
      tmp1_52 := _method_measures_161
      tmp1_53 := _residue_161
      tmp1_54 := secret_7
      tmp1_55 := c_28
    }
    if (p2_27) {
      tmp2_51 := _cthread_161_0
      tmp2_52 := _method_measures_161_0
      tmp2_53 := _residue_161_0
      tmp2_54 := secret_7_0
      tmp2_55 := c_28_0
    }
    tmp1_56, tmp2_56 := addPred(p1_27, p2_27, tmp1_51, tmp2_51, tmp1_52, tmp2_52, tmp1_53, tmp2_53, tmp1_54, tmp2_54, tmp1_55, tmp2_55)
    if (p1_27) {
      _cwl_161 := tmp1_56
    }
    if (p2_27) {
      _cwl_161_0 := tmp2_56
    }
  }
  assert true
}

method test_add_preserving(p1_28: Bool, p2_28: Bool, _cthread_162: Ref, _cthread_162_0: Ref, _caller_measures_162: Seq[Measure$], _caller_measures_162_0: Seq[Measure$], _residue_162: Perm, _residue_162_0: Perm, secret_3: Ref, secret_3_0: Ref, c_13: Ref, c_13_0: Ref) returns (_current_wait_level_162: Perm, _current_wait_level_162_0: Perm)
  requires (p1_28 ==> _cthread_162 != null) && (p2_28 ==> _cthread_162_0 != null)
  requires (p1_28 ==> issubtype(typeof(_cthread_162), Thread_0())) && (p2_28 ==> issubtype(typeof(_cthread_162_0), Thread_0()))
  requires (p1_28 ==> issubtype(typeof(secret_3), int())) && (p2_28 ==> issubtype(typeof(secret_3_0), int()))
  requires (p1_28 ==> issubtype(typeof(c_13), Container())) && (p2_28 ==> issubtype(typeof(c_13_0), Container()))
  requires (p1_28 ==> acc(c_13.Container_f, write)) && (p2_28 ==> acc(c_13_0.Container_fp, write)) && ((p1_28 ==> issubtype(typeof(c_13.Container_f), int())) && (p2_28 ==> issubtype(typeof(c_13_0.Container_fp), int())))
  requires (p1_28 && p2_28 ==> c_13 == c_13_0) && (p1_28 && p2_28 ==> c_13.Container_f == c_13_0.Container_fp)
  requires (p1_28 ==> [true, perm(MustTerminate(_cthread_162)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false))))]) && (p2_28 ==> [true, perm(MustTerminate_0(_cthread_162_0)) == none && ((forperm _r_55: Ref [MustInvokeBounded_0(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded_0(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBoundedp] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnboundedp] :: false))))])
  ensures (p1_28 ==> [(forperm _r_53: Ref [_r_53.MustReleaseBounded] :: Level(_r_53) <= _current_wait_level_162) && ((forperm _r_53: Ref [_r_53.MustReleaseUnbounded] :: Level(_r_53) <= _current_wait_level_162) && _residue_162 <= _current_wait_level_162), true]) && (p2_28 ==> [(forperm _r_53: Ref [_r_53.MustReleaseBoundedp] :: Level(_r_53) <= _current_wait_level_162_0) && ((forperm _r_53: Ref [_r_53.MustReleaseUnboundedp] :: Level(_r_53) <= _current_wait_level_162_0) && _residue_162_0 <= _current_wait_level_162_0), true])
  ensures (p1_28 ==> acc(c_13.Container_f, write)) && (p2_28 ==> acc(c_13_0.Container_fp, write)) && ((p1_28 ==> issubtype(typeof(c_13.Container_f), int())) && (p2_28 ==> issubtype(typeof(c_13_0.Container_fp), int())))
  ensures (p1_28 && p2_28 ==> c_13 == c_13_0) && (p1_28 && p2_28 ==> c_13.Container_f == c_13_0.Container_fp)
  ensures (p1_28 ==> [true, (forperm _r_54: Ref [MustInvokeBounded(_r_54)] :: false) && ((forperm _r_54: Ref [MustInvokeUnbounded(_r_54)] :: false) && ((forperm _r_54: Ref [_r_54.MustReleaseBounded] :: false) && (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: false)))]) && (p2_28 ==> [true, (forperm _r_54: Ref [MustInvokeBounded_0(_r_54)] :: false) && ((forperm _r_54: Ref [MustInvokeUnbounded_0(_r_54)] :: false) && ((forperm _r_54: Ref [_r_54.MustReleaseBoundedp] :: false) && (forperm _r_54: Ref [_r_54.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_28
  var _err: Ref
  var _err_16: Ref
  var secret_8: Ref
  var secret_8_0: Ref
  var c_29: Ref
  var c_29_0: Ref
  var _cwl_162: Perm
  var _cwl_162_0: Perm
  var _method_measures_162: Seq[Measure$]
  var _method_measures_162_0: Seq[Measure$]
  if (p1_28) {
    _method_measures_162 := Seq[Measure$]()
    _err := null
    secret_8 := secret_3
    c_29 := c_13
  }
  if (p2_28) {
    _method_measures_162_0 := Seq[Measure$]()
    _err_16 := null
    secret_8_0 := secret_3_0
    c_29_0 := c_13_0
  }
  // Method call: add_preserving
  if (p1_28 || p2_28) {
    var tmp1_57: Ref
    var tmp2_57: Ref
    var tmp1_58: Seq[Measure$]
    var tmp2_58: Seq[Measure$]
    var tmp1_59: Perm
    var tmp2_59: Perm
    var tmp1_60: Ref
    var tmp2_60: Ref
    var tmp1_61: Ref
    var tmp2_61: Ref
    var tmp1_62: Perm
    var tmp2_62: Perm
    if (p1_28) {
      tmp1_57 := _cthread_162
      tmp1_58 := _method_measures_162
      tmp1_59 := _residue_162
      tmp1_60 := secret_8
      tmp1_61 := c_29
    }
    if (p2_28) {
      tmp2_57 := _cthread_162_0
      tmp2_58 := _method_measures_162_0
      tmp2_59 := _residue_162_0
      tmp2_60 := secret_8_0
      tmp2_61 := c_29_0
    }
    tmp1_62, tmp2_62 := add_preserving(p1_28, p2_28, tmp1_57, tmp2_57, tmp1_58, tmp2_58, tmp1_59, tmp2_59, tmp1_60, tmp2_60, tmp1_61, tmp2_61)
    if (p1_28) {
      _cwl_162 := tmp1_62
    }
    if (p2_28) {
      _cwl_162_0 := tmp2_62
    }
  }
  assert true
}

method Container___init__(p1_29: Bool, p2_29: Bool, _cthread_145: Ref, _cthread_145_0: Ref, _caller_measures_145: Seq[Measure$], _caller_measures_145_0: Seq[Measure$], _residue_145: Perm, _residue_145_0: Perm, self: Ref, self_1: Ref) returns (_current_wait_level_145: Perm, _current_wait_level_145_0: Perm)
  requires (p1_29 ==> _cthread_145 != null) && (p2_29 ==> _cthread_145_0 != null)
  requires (p1_29 ==> issubtype(typeof(_cthread_145), Thread_0())) && (p2_29 ==> issubtype(typeof(_cthread_145_0), Thread_0()))
  requires (p1_29 ==> self != null) && (p2_29 ==> self_1 != null)
  requires (p1_29 ==> acc(_MaySet(self, 5020895374614515255530647363), write)) && (p2_29 ==> acc(_MaySet_0(self_1, 5020895374614515255530647363), write))
  requires (p1_29 ==> issubtype(typeof(self), Container())) && (p2_29 ==> issubtype(typeof(self_1), Container()))
  requires (p1_29 ==> self != null) && (p2_29 ==> self_1 != null)
  requires (p1_29 ==> [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_58: Ref [MustInvokeBounded(_r_58)] :: false) && ((forperm _r_58: Ref [MustInvokeUnbounded(_r_58)] :: false) && ((forperm _r_58: Ref [_r_58.MustReleaseBounded] :: false) && (forperm _r_58: Ref [_r_58.MustReleaseUnbounded] :: false))))]) && (p2_29 ==> [true, perm(MustTerminate_0(_cthread_145_0)) == none && ((forperm _r_58: Ref [MustInvokeBounded_0(_r_58)] :: false) && ((forperm _r_58: Ref [MustInvokeUnbounded_0(_r_58)] :: false) && ((forperm _r_58: Ref [_r_58.MustReleaseBoundedp] :: false) && (forperm _r_58: Ref [_r_58.MustReleaseUnboundedp] :: false))))])
  ensures (p1_29 ==> [(forperm _r_56: Ref [_r_56.MustReleaseBounded] :: Level(_r_56) <= _current_wait_level_145) && ((forperm _r_56: Ref [_r_56.MustReleaseUnbounded] :: Level(_r_56) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]) && (p2_29 ==> [(forperm _r_56: Ref [_r_56.MustReleaseBoundedp] :: Level(_r_56) <= _current_wait_level_145_0) && ((forperm _r_56: Ref [_r_56.MustReleaseUnboundedp] :: Level(_r_56) <= _current_wait_level_145_0) && _residue_145_0 <= _current_wait_level_145_0), true])
  ensures (p1_29 ==> acc(self.Container_f, write)) && (p2_29 ==> acc(self_1.Container_fp, write)) && ((p1_29 ==> issubtype(typeof(self.Container_f), int())) && (p2_29 ==> issubtype(typeof(self_1.Container_fp), int())))
  ensures (p1_29 ==> [true, (forperm _r_57: Ref [MustInvokeBounded(_r_57)] :: false) && ((forperm _r_57: Ref [MustInvokeUnbounded(_r_57)] :: false) && ((forperm _r_57: Ref [_r_57.MustReleaseBounded] :: false) && (forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: false)))]) && (p2_29 ==> [true, (forperm _r_57: Ref [MustInvokeBounded_0(_r_57)] :: false) && ((forperm _r_57: Ref [MustInvokeUnbounded_0(_r_57)] :: false) && ((forperm _r_57: Ref [_r_57.MustReleaseBoundedp] :: false) && (forperm _r_57: Ref [_r_57.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_29
  var _err: Ref
  var _err_17: Ref
  var self_0: Ref
  var self_0_0: Ref
  var _cwl_145: Perm
  var _cwl_145_0: Perm
  var _method_measures_145: Seq[Measure$]
  var _method_measures_145_0: Seq[Measure$]
  if (p1_29) {
    _method_measures_145 := Seq[Measure$]()
    inhale typeof(self) == Container()
    _err := null
    self_0 := self
  }
  if (p2_29) {
    _method_measures_145_0 := Seq[Measure$]()
    inhale typeof(self_1) == Container()
    _err_17 := null
    self_0_0 := self_1
  }
  var p1_30: Bool
  var p2_30: Bool
  var p3_9: Bool
  var p4_9: Bool
  p1_30 := p1_29 && perm(_MaySet(self_0, 5020895374614515255530647363)) > none
  p2_30 := p2_29 && perm(_MaySet_0(self_0_0, 5020895374614515255530647363)) > none
  p3_9 := p1_29 && !(perm(_MaySet(self_0, 5020895374614515255530647363)) > none)
  p4_9 := p2_29 && !(perm(_MaySet_0(self_0_0, 5020895374614515255530647363)) > none)
  if (p1_30) {
    exhale acc(_MaySet(self_0, 5020895374614515255530647363), write)
    inhale acc(self_0.Container_f, write)
  }
  if (p2_30) {
    exhale acc(_MaySet_0(self_0_0, 5020895374614515255530647363), write)
    inhale acc(self_0_0.Container_fp, write)
  }
  if (p1_29) {
    self_0.Container_f := __prim__int___box__(0)
  }
  if (p2_29) {
    self_0_0.Container_fp := __prim__int___box__(0)
  }
  assert true
}

method main(p1_31: Bool, p2_31: Bool, _cthread_164: Ref, _cthread_164_0: Ref, _caller_measures_164: Seq[Measure$], _caller_measures_164_0: Seq[Measure$], _residue_167: Perm, _residue_167_0: Perm) returns (_current_wait_level_164: Perm, _current_wait_level_164_0: Perm)
  requires (p1_31 ==> _cthread_164 != null) && (p2_31 ==> _cthread_164_0 != null)
  requires (p1_31 ==> issubtype(typeof(_cthread_164), Thread_0())) && (p2_31 ==> issubtype(typeof(_cthread_164_0), Thread_0()))
  requires (p1_31 ==> [true, perm(MustTerminate(_cthread_164)) == none && ((forperm _r_61: Ref [MustInvokeBounded(_r_61)] :: false) && ((forperm _r_61: Ref [MustInvokeUnbounded(_r_61)] :: false) && ((forperm _r_61: Ref [_r_61.MustReleaseBounded] :: false) && (forperm _r_61: Ref [_r_61.MustReleaseUnbounded] :: false))))]) && (p2_31 ==> [true, perm(MustTerminate_0(_cthread_164_0)) == none && ((forperm _r_61: Ref [MustInvokeBounded_0(_r_61)] :: false) && ((forperm _r_61: Ref [MustInvokeUnbounded_0(_r_61)] :: false) && ((forperm _r_61: Ref [_r_61.MustReleaseBoundedp] :: false) && (forperm _r_61: Ref [_r_61.MustReleaseUnboundedp] :: false))))])
  ensures (p1_31 ==> [(forperm _r_59: Ref [_r_59.MustReleaseBounded] :: Level(_r_59) <= _current_wait_level_164) && ((forperm _r_59: Ref [_r_59.MustReleaseUnbounded] :: Level(_r_59) <= _current_wait_level_164) && _residue_167 <= _current_wait_level_164), true]) && (p2_31 ==> [(forperm _r_59: Ref [_r_59.MustReleaseBoundedp] :: Level(_r_59) <= _current_wait_level_164_0) && ((forperm _r_59: Ref [_r_59.MustReleaseUnboundedp] :: Level(_r_59) <= _current_wait_level_164_0) && _residue_167_0 <= _current_wait_level_164_0), true])
  ensures (p1_31 ==> [true, (forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))]) && (p2_31 ==> [true, (forperm _r_60: Ref [MustInvokeBounded_0(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded_0(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBoundedp] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_31
  var module_defined_0: Bool
  var module_defined_0_0: Bool
  var module_names_0: Set[_Name]
  var module_names_0_0: Set[_Name]
  var _err: Ref
  var _err_18: Ref
  var _cwl_164: Perm
  var _cwl_164_0: Perm
  var _method_measures_164: Seq[Measure$]
  var _method_measures_164_0: Seq[Measure$]
  if (p1_31) {
    _method_measures_164 := Seq[Measure$]()
    module_defined_0 := true
    module_names_0 := Set[_Name]()
    module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
    module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
    _err := null
  }
  if (p2_31) {
    _method_measures_164_0 := Seq[Measure$]()
    module_defined_0_0 := true
    module_names_0_0 := Set[_Name]()
    module_names_0_0 := (module_names_0_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file__()._valp, 99 / 100) && issubtype(typeof(__file__()._valp), str()) && issubtype(typeof(__file__()._valp), str())
    module_names_0_0 := (module_names_0_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name__()._valp, 99 / 100) && issubtype(typeof(__name__()._valp), str()) && issubtype(typeof(__name__()._valp), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._valp)
    _err_18 := null
  }
  assert (p1_31 ==> true) && (p2_31 ==> true)
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
    module_names_0 := (module_names_0 union Set(_single(4897136316197950463415316291)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(3493880855485680332086796127)))
    module_names_0_0 := (module_names_0_0 union Set(_single(4897136316197950463415316291)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true)
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(5279683511870616904681153895)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(5279683511870616904681153895)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true) && ((p1_31 ==> (_single(4897136316197950463415316291) in module_names_0)) && (p2_31 ==> (_single(4897136316197950463415316291) in module_names_0_0)))
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(4736972783670569480225714019)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(4736972783670569480225714019)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true) && ((p1_31 ==> (_single(4897136316197950463415316291) in module_names_0)) && (p2_31 ==> (_single(4897136316197950463415316291) in module_names_0_0)))
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(6516329)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(6516329)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true) && ((p1_31 ==> (_single(4897136316197950463415316291) in module_names_0)) && (p2_31 ==> (_single(4897136316197950463415316291) in module_names_0_0)))
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(17952564853568578136901389855785458591)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(17952564853568578136901389855785458591)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true) && ((p1_31 ==> (_single(4897136316197950463415316291) in module_names_0)) && (p2_31 ==> (_single(4897136316197950463415316291) in module_names_0_0)))
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(2783965224806095775)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(2783965224806095775)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true) && ((p1_31 ==> (_single(4897136316197950463415316291) in module_names_0)) && (p2_31 ==> (_single(4897136316197950463415316291) in module_names_0_0)))
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(17951941248702299528235410410386002327)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(17951941248702299528235410410386002327)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true) && ((p1_31 ==> (_single(4897136316197950463415316291) in module_names_0)) && (p2_31 ==> (_single(4897136316197950463415316291) in module_names_0_0)))
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(5741172848180574665306606248561489654302663777)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(5741172848180574665306606248561489654302663777)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true) && ((p1_31 ==> (_single(4897136316197950463415316291) in module_names_0)) && (p2_31 ==> (_single(4897136316197950463415316291) in module_names_0_0)))
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(2924556508112654743)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(2924556508112654743)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true) && ((p1_31 ==> (_single(4897136316197950463415316291) in module_names_0)) && (p2_31 ==> (_single(4897136316197950463415316291) in module_names_0_0)))
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(8273563649284381266877375585)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(8273563649284381266877375585)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true) && ((p1_31 ==> (_single(4897136316197950463415316291) in module_names_0)) && (p2_31 ==> (_single(4897136316197950463415316291) in module_names_0_0)))
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(2924691730862939039)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(2924691730862939039)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true) && ((p1_31 ==> (_single(4897136316197950463415316291) in module_names_0)) && (p2_31 ==> (_single(4897136316197950463415316291) in module_names_0_0)))
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(14446718347420762285553188945855297817441231969)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(14446718347420762285553188945855297817441231969)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true) && ((p1_31 ==> (_single(4897136316197950463415316291) in module_names_0)) && (p2_31 ==> (_single(4897136316197950463415316291) in module_names_0_0)))
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(12768816695880897297175130942517972368)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(12768816695880897297175130942517972368)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true)
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(3439545199289208980)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(3439545199289208980)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true) && ((p1_31 ==> (_single(4897136316197950463415316291) in module_names_0)) && (p2_31 ==> (_single(4897136316197950463415316291) in module_names_0_0)))
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(3975172548169929484756929789008487294916846964)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(3975172548169929484756929789008487294916846964)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true) && ((p1_31 ==> (_single(4897136316197950463415316291) in module_names_0)) && (p2_31 ==> (_single(4897136316197950463415316291) in module_names_0_0)))
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(14446879518896220437609265446564154418339734900)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(14446879518896220437609265446564154418339734900)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true) && ((p1_31 ==> (_single(4897136316197950463415316291) in module_names_0)) && (p2_31 ==> (_single(4897136316197950463415316291) in module_names_0_0)))
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(32909780748635879799672096918849963776862807412)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(32909780748635879799672096918849963776862807412)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true) && ((p1_31 ==> (_single(4897136316197950463415316291) in module_names_0)) && (p2_31 ==> (_single(4897136316197950463415316291) in module_names_0_0)))
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(33595441550246907625531656803363835152822396276)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(33595441550246907625531656803363835152822396276)))
  }
  assert (p1_31 ==> true) && (p2_31 ==> true) && ((p1_31 ==> (_single(4897136316197950463415316291) in module_names_0)) && (p2_31 ==> (_single(4897136316197950463415316291) in module_names_0_0)))
  if (p1_31) {
    module_names_0 := (module_names_0 union Set(_single(4660833349780957310616489673522358670876435828)))
  }
  if (p2_31) {
    module_names_0_0 := (module_names_0_0 union Set(_single(4660833349780957310616489673522358670876435828)))
  }
  assert true
}