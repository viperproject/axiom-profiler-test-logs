domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function Cell(): PyType
  
  unique function CellLock(): PyType
  
  unique function Lock_basic(): PyType
  
  function Lock(arg0: PyType): PyType
  
  function Lock_arg(typ: PyType, index: Int): PyType
  
  unique function BaseLock(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_Cell {
    extends_(Cell(), object()) && get_basic(Cell()) == Cell()
  }
  
  axiom subtype_CellLock {
    extends_(CellLock(), Lock(Cell())) && get_basic(CellLock()) == CellLock()
  }
  
  axiom subtype_Lock {
    (forall T: PyType :: { Lock(T) } extends_(Lock(T), BaseLock()) && get_basic(Lock(T)) == Lock_basic())
  }
  
  axiom Lock_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Lock(arg0)) ==> Lock_arg(Z, 0) == arg0)
  }
  
  axiom subtype_BaseLock {
    extends_(BaseLock(), object()) && get_basic(BaseLock()) == BaseLock()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getMethod_0(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getArg_0(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
  
  function getOld_0(t: Ref, i: Int): Ref
}

domain Function {
  
  unique function get_locked(): Function
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function client_threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
  
  unique function __init___threading_3(): ThreadingID
  
  unique function acquire_threading(): ThreadingID
  
  unique function release_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field _valp: Ref

field __container: Ref

field __containerp: Ref

field __iter_index: Int

field __iter_indexp: Int

field __previous: Seq[Ref]

field __previousp: Seq[Ref]

field list_acc: Seq[Ref]

field list_accp: Seq[Ref]

field set_acc: Set[Ref]

field set_accp: Set[Ref]

field dict_acc: Set[Ref]

field dict_accp: Set[Ref]

field Measure$acc: Seq[Ref]

field Measure$accp: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseBoundedp: Int

field MustReleaseUnbounded: Int

field MustReleaseUnboundedp: Int

field Cell_value: Ref

field Cell_valuep: Ref

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function Lock_get_locked(self_1: Ref): Ref
  requires issubtype(typeof(self_1), Lock(Lock_arg(typeof(self_1), 0)))
  requires issubtype(Lock_arg(typeof(self_1), 0), object())
  requires self_1 != null
  ensures issubtype(typeof(result), Lock_arg(typeof(self_1), 0)) 


function __file__(): Ref 


function __name__(): Ref 


function __file___0(): Ref 


function __name___0(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


function Lock_invariant_low(self_5: Ref, self_5_0: Ref): Bool
  requires acc(Lock_invariant(self_5), wildcard) && acc(Lock_invariant_0(self_5_0), wildcard) 
{
  (unfolding acc(Lock_invariant(self_5), wildcard) in (unfolding acc(Lock_invariant_0(self_5_0), wildcard) in issubtype(typeof(self_5), CellLock()) && issubtype(typeof(self_5_0), CellLock()) ==> int___eq__(Lock_get_locked(self_5).Cell_value, Lock_get_locked(self_5_0).Cell_valuep)))
}

function Lock_invariant_all_low(self_5: Ref, self_5_0: Ref): Bool
  requires acc(Lock_invariant(self_5), wildcard) && acc(Lock_invariant_0(self_5_0), wildcard) 
{
  (unfolding acc(Lock_invariant(self_5), wildcard) in (unfolding acc(Lock_invariant_0(self_5_0), wildcard) in issubtype(typeof(self_5), CellLock()) && issubtype(typeof(self_5_0), CellLock()) ==> Lock_get_locked(self_5).Cell_value == Lock_get_locked(self_5_0).Cell_valuep))
}

predicate MustTerminate(r: Ref) 

predicate MustTerminate_0(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeBounded_0(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeUnbounded_0(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate MustInvokeCredit_0(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_start_0(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _thread_post_0(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate _MaySet_0(rec: Ref, id: Int) 

predicate Lock_invariant(self_5: Ref) {
  issubtype(typeof(self_5), Lock(Lock_arg(typeof(self_5), 0))) && (issubtype(typeof(self_5), CellLock()) ==> acc(Lock_get_locked(self_5).Cell_value, write) && issubtype(typeof(Lock_get_locked(self_5).Cell_value), int()))
}

predicate Lock_invariant_0(self_5: Ref) {
  issubtype(typeof(self_5), Lock(Lock_arg(typeof(self_5), 0))) && (issubtype(typeof(self_5), CellLock()) ==> acc(Lock_get_locked(self_5).Cell_valuep, write) && issubtype(typeof(Lock_get_locked(self_5).Cell_valuep), int()))
}

method client(p1: Bool, p2: Bool, _cthread_147: Ref, _cthread_147_0: Ref, _caller_measures_147: Seq[Measure$], _caller_measures_147_0: Seq[Measure$], _residue_147: Perm, _residue_147_0: Perm, secret: Ref, secret_1: Ref) returns (_current_wait_level_147: Perm, _current_wait_level_147_0: Perm)
  requires (p1 ==> _cthread_147 != null) && (p2 ==> _cthread_147_0 != null)
  requires (p1 ==> issubtype(typeof(_cthread_147), Thread_0())) && (p2 ==> issubtype(typeof(_cthread_147_0), Thread_0()))
  requires (p1 ==> issubtype(typeof(secret), bool())) && (p2 ==> issubtype(typeof(secret_1), bool()))
  requires p1 == p2
  requires (p1 ==> [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]) && (p2 ==> [true, perm(MustTerminate_0(_cthread_147_0)) == none && ((forperm _r_1: Ref [MustInvokeBounded_0(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded_0(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: false))))])
  ensures (p1 ==> [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_147) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]) && (p2 ==> [(forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _current_wait_level_147_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _current_wait_level_147_0) && _residue_147_0 <= _current_wait_level_147_0), true])
  ensures (p1 ==> [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]) && (p2 ==> [true, (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))])
{
  inhale p1
  var _err: Ref
  var _err_0: Ref
  var c: Ref
  var c_0: Ref
  var l: Ref
  var l_0: Ref
  var secret_0: Ref
  var secret_0_0: Ref
  var Cell_res: Ref
  var Cell_res_0: Ref
  var CellLock_res: Ref
  var CellLock_res_0: Ref
  var _cwl_147: Perm
  var _cwl_147_0: Perm
  var _method_measures_147: Seq[Measure$]
  var _method_measures_147_0: Seq[Measure$]
  if (p1) {
    _method_measures_147 := Seq[Measure$]()
    _err := null
    secret_0 := secret
  }
  if (p2) {
    _method_measures_147_0 := Seq[Measure$]()
    _err_0 := null
    secret_0_0 := secret_1
  }
  var tmp: Ref
  tmp := new()
  if (p1) {
    Cell_res := tmp
  }
  if (p2) {
    Cell_res_0 := tmp
  }
  if (p1) {
    inhale typeof(Cell_res) == Cell()
    inhale acc(_MaySet(Cell_res, 5353397235643131551055373635), write)
  }
  if (p2) {
    inhale typeof(Cell_res_0) == Cell()
    inhale acc(_MaySet_0(Cell_res_0, 5353397235643131551055373635), write)
  }
  // Method call: Cell___init__
  if (p1 || p2) {
    var tmp1: Ref
    var tmp2: Ref
    var tmp1_0: Seq[Measure$]
    var tmp2_0: Seq[Measure$]
    var tmp1_1: Perm
    var tmp2_1: Perm
    var tmp1_2: Ref
    var tmp2_2: Ref
    var tmp1_3: Ref
    var tmp2_3: Ref
    var tmp1_4: Perm
    var tmp2_4: Perm
    if (p1) {
      tmp1 := _cthread_147
      tmp1_0 := _method_measures_147
      tmp1_1 := _residue_147
      tmp1_2 := Cell_res
      tmp1_3 := __prim__int___box__(1)
    }
    if (p2) {
      tmp2 := _cthread_147_0
      tmp2_0 := _method_measures_147_0
      tmp2_1 := _residue_147_0
      tmp2_2 := Cell_res_0
      tmp2_3 := __prim__int___box__(1)
    }
    tmp1_4, tmp2_4 := Cell___init__(p1, p2, tmp1, tmp2, tmp1_0, tmp2_0, tmp1_1, tmp2_1, tmp1_2, tmp2_2, tmp1_3, tmp2_3)
    if (p1) {
      _cwl_147 := tmp1_4
    }
    if (p2) {
      _cwl_147_0 := tmp2_4
    }
  }
  if (p1) {
    c := Cell_res
    inhale _isDefined(99)
  }
  if (p2) {
    c_0 := Cell_res_0
    inhale true
  }
  var tmp_0: Ref
  tmp_0 := new()
  if (p1) {
    CellLock_res := tmp_0
  }
  if (p2) {
    CellLock_res_0 := tmp_0
  }
  if (p1) {
    inhale typeof(CellLock_res) == CellLock()
    inhale Lock_get_locked(CellLock_res) == _checkDefined(c, 99)
  }
  if (p2) {
    inhale typeof(CellLock_res_0) == CellLock()
    inhale Lock_get_locked(CellLock_res_0) == c_0
  }
  if (p1) {
    fold acc(Lock_invariant(CellLock_res), write)
  }
  if (p2) {
    fold acc(Lock_invariant_0(CellLock_res_0), write)
  }
  assert p1 && p2 ==> Lock_invariant_low(CellLock_res, CellLock_res_0)
  // Method call: Lock___init__
  if (p1 || p2) {
    var tmp1_5: Ref
    var tmp2_5: Ref
    var tmp1_6: Seq[Measure$]
    var tmp2_6: Seq[Measure$]
    var tmp1_7: Perm
    var tmp2_7: Perm
    var tmp1_8: Ref
    var tmp2_8: Ref
    var tmp1_9: Ref
    var tmp2_9: Ref
    var tmp1_10: Ref
    var tmp2_10: Ref
    var tmp1_11: Ref
    var tmp2_11: Ref
    var tmp1_12: Perm
    var tmp2_12: Perm
    if (p1) {
      tmp1_5 := _cthread_147
      tmp1_6 := _method_measures_147
      tmp1_7 := _residue_147
      tmp1_8 := CellLock_res
      tmp1_9 := _checkDefined(c, 99)
      tmp1_10 := null
      tmp1_11 := null
    }
    if (p2) {
      tmp2_5 := _cthread_147_0
      tmp2_6 := _method_measures_147_0
      tmp2_7 := _residue_147_0
      tmp2_8 := CellLock_res_0
      tmp2_9 := c_0
      tmp2_10 := null
      tmp2_11 := null
    }
    tmp1_12, tmp2_12 := Lock___init__(p1, p2, tmp1_5, tmp2_5, tmp1_6, tmp2_6, tmp1_7, tmp2_7, tmp1_8, tmp2_8, tmp1_9, tmp2_9, tmp1_10, tmp2_10, tmp1_11, tmp2_11)
    if (p1) {
      _cwl_147 := tmp1_12
    }
    if (p2) {
      _cwl_147_0 := tmp2_12
    }
  }
  if (p1) {
    l := CellLock_res
    inhale _isDefined(108)
  }
  if (p2) {
    l_0 := CellLock_res_0
    inhale true
  }
  // Method call: Lock_acquire
  if (p1 || p2) {
    var tmp1_13: Ref
    var tmp2_13: Ref
    var tmp1_14: Seq[Measure$]
    var tmp2_14: Seq[Measure$]
    var tmp1_15: Perm
    var tmp2_15: Perm
    var tmp1_16: Ref
    var tmp2_16: Ref
    var tmp1_17: Perm
    var tmp2_17: Perm
    if (p1) {
      tmp1_13 := _cthread_147
      tmp1_14 := _method_measures_147
      tmp1_15 := _residue_147
      tmp1_16 := _checkDefined(l, 108)
    }
    if (p2) {
      tmp2_13 := _cthread_147_0
      tmp2_14 := _method_measures_147_0
      tmp2_15 := _residue_147_0
      tmp2_16 := l_0
    }
    tmp1_17, tmp2_17 := Lock_acquire(p1, p2, tmp1_13, tmp2_13, tmp1_14, tmp2_14, tmp1_15, tmp2_15, tmp1_16, tmp2_16)
    if (p1) {
      _cwl_147 := tmp1_17
    }
    if (p2) {
      _cwl_147_0 := tmp2_17
    }
  }
  assert p1 && p2 ==> perm(Lock_invariant(_checkDefined(l, 108))) >= write && perm(Lock_invariant_0(l_0)) >= write ==> Lock_invariant_low(_checkDefined(l, 108), l_0)
  if (p1) {
    unfold acc(Lock_invariant(_checkDefined(l, 108)), write)
  }
  if (p2) {
    unfold acc(Lock_invariant_0(l_0), write)
  }
  var p1_0: Bool
  var p2_0: Bool
  var p3: Bool
  var p4: Bool
  p1_0 := p1 && perm(_MaySet(_checkDefined(c, 99), 5353397235643131551055373635)) > none
  p2_0 := p2 && perm(_MaySet_0(c_0, 5353397235643131551055373635)) > none
  p3 := p1 && !(perm(_MaySet(_checkDefined(c, 99), 5353397235643131551055373635)) > none)
  p4 := p2 && !(perm(_MaySet_0(c_0, 5353397235643131551055373635)) > none)
  if (p1_0) {
    exhale acc(_MaySet(_checkDefined(c, 99), 5353397235643131551055373635), write)
    inhale acc(_checkDefined(c, 99).Cell_value, write)
  }
  if (p2_0) {
    exhale acc(_MaySet_0(c_0, 5353397235643131551055373635), write)
    inhale acc(c_0.Cell_valuep, write)
  }
  if (p1) {
    _checkDefined(c, 99).Cell_value := __prim__int___box__(4)
  }
  if (p2) {
    c_0.Cell_valuep := __prim__int___box__(4)
  }
  var p1_1: Bool
  var p2_1: Bool
  var p3_0: Bool
  var p4_0: Bool
  p1_1 := p1 && bool___unbox__(secret_0)
  p2_1 := p2 && bool___unbox__(secret_0_0)
  p3_0 := p1 && !bool___unbox__(secret_0)
  p4_0 := p2 && !bool___unbox__(secret_0_0)
  if (p1_1) {
    fold acc(Lock_invariant(_checkDefined(l, 108)), write)
  }
  if (p2_1) {
    fold acc(Lock_invariant_0(l_0), write)
  }
  assert p1_1 && p2_1 ==> Lock_invariant_low(_checkDefined(l, 108), l_0)
  // Method call: Lock_release
  if (p1_1 || p2_1) {
    var tmp1_18: Ref
    var tmp2_18: Ref
    var tmp1_19: Seq[Measure$]
    var tmp2_19: Seq[Measure$]
    var tmp1_20: Perm
    var tmp2_20: Perm
    var tmp1_21: Ref
    var tmp2_21: Ref
    var tmp1_22: Perm
    var tmp2_22: Perm
    if (p1_1) {
      tmp1_18 := _cthread_147
      tmp1_19 := _method_measures_147
      tmp1_20 := _residue_147
      tmp1_21 := _checkDefined(l, 108)
    }
    if (p2_1) {
      tmp2_18 := _cthread_147_0
      tmp2_19 := _method_measures_147_0
      tmp2_20 := _residue_147_0
      tmp2_21 := l_0
    }
    tmp1_22, tmp2_22 := Lock_release(p1_1, p2_1, tmp1_18, tmp2_18, tmp1_19, tmp2_19, tmp1_20, tmp2_20, tmp1_21, tmp2_21)
    if (p1_1) {
      _cwl_147 := tmp1_22
    }
    if (p2_1) {
      _cwl_147_0 := tmp2_22
    }
  }
  // Method call: Lock_acquire
  if (p1_1 || p2_1) {
    var tmp1_23: Ref
    var tmp2_23: Ref
    var tmp1_24: Seq[Measure$]
    var tmp2_24: Seq[Measure$]
    var tmp1_25: Perm
    var tmp2_25: Perm
    var tmp1_26: Ref
    var tmp2_26: Ref
    var tmp1_27: Perm
    var tmp2_27: Perm
    if (p1_1) {
      tmp1_23 := _cthread_147
      tmp1_24 := _method_measures_147
      tmp1_25 := _residue_147
      tmp1_26 := _checkDefined(l, 108)
    }
    if (p2_1) {
      tmp2_23 := _cthread_147_0
      tmp2_24 := _method_measures_147_0
      tmp2_25 := _residue_147_0
      tmp2_26 := l_0
    }
    tmp1_27, tmp2_27 := Lock_acquire(p1_1, p2_1, tmp1_23, tmp2_23, tmp1_24, tmp2_24, tmp1_25, tmp2_25, tmp1_26, tmp2_26)
    if (p1_1) {
      _cwl_147 := tmp1_27
    }
    if (p2_1) {
      _cwl_147_0 := tmp2_27
    }
  }
  assert p1_1 && p2_1 ==> perm(Lock_invariant(_checkDefined(l, 108))) >= write && perm(Lock_invariant_0(l_0)) >= write ==> Lock_invariant_low(_checkDefined(l, 108), l_0)
  if (p1_1) {
    unfold acc(Lock_invariant(_checkDefined(l, 108)), write)
  }
  if (p2_1) {
    unfold acc(Lock_invariant_0(l_0), write)
  }
  var p1_2: Bool
  var p2_2: Bool
  var p3_1: Bool
  var p4_1: Bool
  p1_2 := p1 && perm(_MaySet(_checkDefined(c, 99), 5353397235643131551055373635)) > none
  p2_2 := p2 && perm(_MaySet_0(c_0, 5353397235643131551055373635)) > none
  p3_1 := p1 && !(perm(_MaySet(_checkDefined(c, 99), 5353397235643131551055373635)) > none)
  p4_1 := p2 && !(perm(_MaySet_0(c_0, 5353397235643131551055373635)) > none)
  if (p1_2) {
    exhale acc(_MaySet(_checkDefined(c, 99), 5353397235643131551055373635), write)
    inhale acc(_checkDefined(c, 99).Cell_value, write)
  }
  if (p2_2) {
    exhale acc(_MaySet_0(c_0, 5353397235643131551055373635), write)
    inhale acc(c_0.Cell_valuep, write)
  }
  if (p1) {
    _checkDefined(c, 99).Cell_value := __prim__int___box__(5)
  }
  if (p2) {
    c_0.Cell_valuep := __prim__int___box__(5)
  }
  if (p1) {
    fold acc(Lock_invariant(_checkDefined(l, 108)), write)
  }
  if (p2) {
    fold acc(Lock_invariant_0(l_0), write)
  }
  assert p1 && p2 ==> Lock_invariant_low(_checkDefined(l, 108), l_0)
  // Method call: Lock_release
  if (p1 || p2) {
    var tmp1_28: Ref
    var tmp2_28: Ref
    var tmp1_29: Seq[Measure$]
    var tmp2_29: Seq[Measure$]
    var tmp1_30: Perm
    var tmp2_30: Perm
    var tmp1_31: Ref
    var tmp2_31: Ref
    var tmp1_32: Perm
    var tmp2_32: Perm
    if (p1) {
      tmp1_28 := _cthread_147
      tmp1_29 := _method_measures_147
      tmp1_30 := _residue_147
      tmp1_31 := _checkDefined(l, 108)
    }
    if (p2) {
      tmp2_28 := _cthread_147_0
      tmp2_29 := _method_measures_147_0
      tmp2_30 := _residue_147_0
      tmp2_31 := l_0
    }
    tmp1_32, tmp2_32 := Lock_release(p1, p2, tmp1_28, tmp2_28, tmp1_29, tmp2_29, tmp1_30, tmp2_30, tmp1_31, tmp2_31)
    if (p1) {
      _cwl_147 := tmp1_32
    }
    if (p2) {
      _cwl_147_0 := tmp2_32
    }
  }
  assert true
}

method Cell___init__(p1_3: Bool, p2_3: Bool, _cthread_145: Ref, _cthread_145_0: Ref, _caller_measures_145: Seq[Measure$], _caller_measures_145_0: Seq[Measure$], _residue_145: Perm, _residue_145_0: Perm, self: Ref, self_0: Ref, val: Ref, val_1: Ref) returns (_current_wait_level_145: Perm, _current_wait_level_145_0: Perm)
  requires (p1_3 ==> _cthread_145 != null) && (p2_3 ==> _cthread_145_0 != null)
  requires (p1_3 ==> issubtype(typeof(_cthread_145), Thread_0())) && (p2_3 ==> issubtype(typeof(_cthread_145_0), Thread_0()))
  requires (p1_3 ==> self != null) && (p2_3 ==> self_0 != null)
  requires (p1_3 ==> acc(_MaySet(self, 5353397235643131551055373635), write)) && (p2_3 ==> acc(_MaySet_0(self_0, 5353397235643131551055373635), write))
  requires (p1_3 ==> issubtype(typeof(self), Cell())) && (p2_3 ==> issubtype(typeof(self_0), Cell()))
  requires (p1_3 ==> issubtype(typeof(val), int())) && (p2_3 ==> issubtype(typeof(val_1), int()))
  requires (p1_3 ==> self != null) && (p2_3 ==> self_0 != null)
  requires (p1_3 ==> [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]) && (p2_3 ==> [true, perm(MustTerminate_0(_cthread_145_0)) == none && ((forperm _r_4: Ref [MustInvokeBounded_0(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded_0(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBoundedp] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnboundedp] :: false))))])
  ensures (p1_3 ==> [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_145) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]) && (p2_3 ==> [(forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: Level(_r_2) <= _current_wait_level_145_0) && ((forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: Level(_r_2) <= _current_wait_level_145_0) && _residue_145_0 <= _current_wait_level_145_0), true])
  ensures (p1_3 ==> acc(self.Cell_value, write)) && (p2_3 ==> acc(self_0.Cell_valuep, write)) && ((p1_3 ==> issubtype(typeof(self.Cell_value), int())) && (p2_3 ==> issubtype(typeof(self_0.Cell_valuep), int()))) && ((p1_3 ==> int___eq__(self.Cell_value, val)) && (p2_3 ==> int___eq__(self_0.Cell_valuep, val_1)))
  ensures (p1_3 ==> [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]) && (p2_3 ==> [true, (forperm _r_3: Ref [MustInvokeBounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBoundedp] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_3
  var _err: Ref
  var _err_1: Ref
  var self_6: Ref
  var self_6_0: Ref
  var val_0: Ref
  var val_0_0: Ref
  var _cwl_145: Perm
  var _cwl_145_0: Perm
  var _method_measures_145: Seq[Measure$]
  var _method_measures_145_0: Seq[Measure$]
  if (p1_3) {
    _method_measures_145 := Seq[Measure$]()
    inhale typeof(self) == Cell()
    _err := null
    self_6 := self
    val_0 := val
  }
  if (p2_3) {
    _method_measures_145_0 := Seq[Measure$]()
    inhale typeof(self_0) == Cell()
    _err_1 := null
    self_6_0 := self_0
    val_0_0 := val_1
  }
  var p1_4: Bool
  var p2_4: Bool
  var p3_2: Bool
  var p4_2: Bool
  p1_4 := p1_3 && perm(_MaySet(self_6, 5353397235643131551055373635)) > none
  p2_4 := p2_3 && perm(_MaySet_0(self_6_0, 5353397235643131551055373635)) > none
  p3_2 := p1_3 && !(perm(_MaySet(self_6, 5353397235643131551055373635)) > none)
  p4_2 := p2_3 && !(perm(_MaySet_0(self_6_0, 5353397235643131551055373635)) > none)
  if (p1_4) {
    exhale acc(_MaySet(self_6, 5353397235643131551055373635), write)
    inhale acc(self_6.Cell_value, write)
  }
  if (p2_4) {
    exhale acc(_MaySet_0(self_6_0, 5353397235643131551055373635), write)
    inhale acc(self_6_0.Cell_valuep, write)
  }
  if (p1_3) {
    self_6.Cell_value := val_0
  }
  if (p2_3) {
    self_6_0.Cell_valuep := val_0_0
  }
  assert true
}

method Lock___init__(p1_5: Bool, p2_5: Bool, _cthread_149: Ref, _cthread_149_0: Ref, _caller_measures_149: Seq[Measure$], _caller_measures_149_0: Seq[Measure$], _residue_149: Perm, _residue_149_0: Perm, self_2: Ref, self_2_0: Ref, locked_object: Ref, locked_object_0: Ref, above: Ref, above_0: Ref, below: Ref, below_0: Ref) returns (_current_wait_level_149: Perm, _current_wait_level_149_0: Perm)
  requires (p1_5 ==> _cthread_149 != null) && (p2_5 ==> _cthread_149_0 != null)
  requires (p1_5 ==> issubtype(typeof(_cthread_149), Thread_0())) && (p2_5 ==> issubtype(typeof(_cthread_149_0), Thread_0()))
  requires (p1_5 ==> self_2 != null) && (p2_5 ==> self_2_0 != null)
  requires (p1_5 ==> issubtype(typeof(self_2), Lock(Lock_arg(typeof(self_2), 0)))) && (p2_5 ==> issubtype(typeof(self_2_0), Lock(Lock_arg(typeof(self_2_0), 0))))
  requires (p1_5 ==> issubtype(typeof(locked_object), Lock_arg(typeof(self_2), 0))) && (p2_5 ==> issubtype(typeof(locked_object_0), Lock_arg(typeof(self_2_0), 0)))
  requires (p1_5 ==> above == null || issubtype(typeof(above), BaseLock())) && (p2_5 ==> above_0 == null || issubtype(typeof(above_0), BaseLock()))
  requires (p1_5 ==> below == null || issubtype(typeof(below), BaseLock())) && (p2_5 ==> below_0 == null || issubtype(typeof(below_0), BaseLock()))
  requires (p1_5 ==> issubtype(Lock_arg(typeof(self_2), 0), object())) && (p2_5 ==> issubtype(Lock_arg(typeof(self_2_0), 0), object()))
  requires (p1_5 ==> self_2 != null) && (p2_5 ==> self_2_0 != null)
  requires (p1_5 ==> [acc(MustTerminate(_cthread_149), write), true]) && (p2_5 ==> [acc(MustTerminate_0(_cthread_149_0), write), true])
  requires (p1_5 ==> above == null && below != null ==> [_residue_149 < Level(below), true]) && (p2_5 ==> above_0 == null && below_0 != null ==> [_residue_149_0 < Level(below_0), true])
  requires (p1_5 ==> above != null && below != null ==> Level(above) < Level(below)) && (p2_5 ==> above_0 != null && below_0 != null ==> Level(above_0) < Level(below_0))
  requires (p1_5 ==> acc(Lock_invariant(self_2), write)) && (p2_5 ==> acc(Lock_invariant_0(self_2_0), write)) && (p1_5 && p2_5 ==> Lock_invariant_low(self_2, self_2_0))
  requires (p1_5 ==> [true, above == null && below != null ==> (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) < Level(below)) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) < Level(below)) && _residue_149 < Level(below))]) && (p2_5 ==> [true, above_0 == null && below_0 != null ==> (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: Level(_r_5) < Level(below_0)) && ((forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: Level(_r_5) < Level(below_0)) && _residue_149_0 < Level(below_0))])
  requires (p1_5 ==> [true, Measure$check(_caller_measures_149, _cthread_149, 1) || perm(MustTerminate(_cthread_149)) == none && ((forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false))))]) && (p2_5 ==> [true, Measure$check(_caller_measures_149_0, _cthread_149_0, 1) || perm(MustTerminate_0(_cthread_149_0)) == none && ((forperm _r_8: Ref [MustInvokeBounded_0(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded_0(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: false))))])
  ensures (p1_5 ==> [(forperm _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <= _current_wait_level_149) && ((forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]) && (p2_5 ==> [(forperm _r_7: Ref [_r_7.MustReleaseBoundedp] :: Level(_r_7) <= _current_wait_level_149_0) && ((forperm _r_7: Ref [_r_7.MustReleaseUnboundedp] :: Level(_r_7) <= _current_wait_level_149_0) && _residue_149_0 <= _current_wait_level_149_0), true])
  ensures (p1_5 ==> above == null ==> [_current_wait_level_149 < Level(self_2), true]) && (p2_5 ==> above_0 == null ==> [_current_wait_level_149_0 < Level(self_2_0), true])
  ensures (p1_5 ==> above != null ==> Level(above) < Level(self_2)) && (p2_5 ==> above_0 != null ==> Level(above_0) < Level(self_2_0))
  ensures (p1_5 ==> below != null ==> Level(self_2) < Level(below)) && (p2_5 ==> below_0 != null ==> Level(self_2_0) < Level(below_0))
{
  inhale p1_5
  var _cwl_149: Perm
  var _cwl_149_0: Perm
  if (p1_5) {
    inhale typeof(self_2) == Lock(Lock_arg(typeof(self_2), 0))
    inhale false
  }
  if (p2_5) {
    inhale typeof(self_2_0) == Lock(Lock_arg(typeof(self_2_0), 0))
    inhale false
  }
}

method Lock_acquire(p1_6: Bool, p2_6: Bool, _cthread_150: Ref, _cthread_150_0: Ref, _caller_measures_150: Seq[Measure$], _caller_measures_150_0: Seq[Measure$], _residue_150: Perm, _residue_150_0: Perm, self_3: Ref, self_3_0: Ref) returns (_current_wait_level_150: Perm, _current_wait_level_150_0: Perm)
  requires (p1_6 ==> _cthread_150 != null) && (p2_6 ==> _cthread_150_0 != null)
  requires (p1_6 ==> issubtype(typeof(_cthread_150), Thread_0())) && (p2_6 ==> issubtype(typeof(_cthread_150_0), Thread_0()))
  requires (p1_6 ==> issubtype(typeof(self_3), Lock(Lock_arg(typeof(self_3), 0)))) && (p2_6 ==> issubtype(typeof(self_3_0), Lock(Lock_arg(typeof(self_3_0), 0))))
  requires (p1_6 ==> issubtype(Lock_arg(typeof(self_3), 0), object())) && (p2_6 ==> issubtype(Lock_arg(typeof(self_3_0), 0), object()))
  requires (p1_6 ==> self_3 != null) && (p2_6 ==> self_3_0 != null)
  requires (p1_6 ==> [acc(MustTerminate(_cthread_150), write), true]) && (p2_6 ==> [acc(MustTerminate_0(_cthread_150_0), write), true])
  requires (p1_6 ==> [_residue_150 < Level(self_3), true]) && (p2_6 ==> [_residue_150_0 < Level(self_3_0), true])
  requires p1_6 && p2_6 ==> self_3 == self_3_0
  requires p1_6 == p2_6 && (p1_6 ==> typeof(self_3) == typeof(self_3_0))
  requires (p1_6 ==> [true, (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) < Level(self_3)) && ((forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) < Level(self_3)) && _residue_150 < Level(self_3))]) && (p2_6 ==> [true, (forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: Level(_r_9) < Level(self_3_0)) && ((forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: Level(_r_9) < Level(self_3_0)) && _residue_150_0 < Level(self_3_0))])
  requires (p1_6 ==> [true, Measure$check(_caller_measures_150, _cthread_150, 1) || perm(MustTerminate(_cthread_150)) == none && ((forperm _r_11: Ref [MustInvokeBounded(_r_11)] :: false) && ((forperm _r_11: Ref [MustInvokeUnbounded(_r_11)] :: false) && ((forperm _r_11: Ref [_r_11.MustReleaseBounded] :: false) && (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: false))))]) && (p2_6 ==> [true, Measure$check(_caller_measures_150_0, _cthread_150_0, 1) || perm(MustTerminate_0(_cthread_150_0)) == none && ((forperm _r_11: Ref [MustInvokeBounded_0(_r_11)] :: false) && ((forperm _r_11: Ref [MustInvokeUnbounded_0(_r_11)] :: false) && ((forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: false) && (forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: false))))])
  ensures (p1_6 ==> [(forperm _r_10: Ref [_r_10.MustReleaseBounded] :: Level(_r_10) <= _current_wait_level_150) && ((forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: Level(_r_10) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]) && (p2_6 ==> [(forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: Level(_r_10) <= _current_wait_level_150_0) && ((forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: Level(_r_10) <= _current_wait_level_150_0) && _residue_150_0 <= _current_wait_level_150_0), true])
  ensures (p1_6 ==> acc(Lock_invariant(self_3), write)) && (p2_6 ==> acc(Lock_invariant_0(self_3_0), write)) && [typeof(self_3) == typeof(self_3_0) ==> p1_6 && p2_6 ==> Lock_invariant_low(self_3, self_3_0), p1_6 && p2_6 ==> Lock_invariant_low(self_3, self_3_0)]
  ensures (p1_6 ==> [acc(self_3.MustReleaseUnbounded, write), acc(self_3.MustReleaseUnbounded, write)]) && (p2_6 ==> [acc(self_3_0.MustReleaseUnboundedp, write), acc(self_3_0.MustReleaseUnboundedp, write)])
{
  inhale p1_6
  var _cwl_150: Perm
  var _cwl_150_0: Perm
  if (p1_6) {
    inhale typeof(self_3) == Lock(Lock_arg(typeof(self_3), 0))
    inhale false
  }
  if (p2_6) {
    inhale typeof(self_3_0) == Lock(Lock_arg(typeof(self_3_0), 0))
    inhale false
  }
}

method Lock_release(p1_7: Bool, p2_7: Bool, _cthread_151: Ref, _cthread_151_0: Ref, _caller_measures_151: Seq[Measure$], _caller_measures_151_0: Seq[Measure$], _residue_151: Perm, _residue_151_0: Perm, self_4: Ref, self_4_0: Ref) returns (_current_wait_level_151: Perm, _current_wait_level_151_0: Perm)
  requires (p1_7 ==> _cthread_151 != null) && (p2_7 ==> _cthread_151_0 != null)
  requires (p1_7 ==> issubtype(typeof(_cthread_151), Thread_0())) && (p2_7 ==> issubtype(typeof(_cthread_151_0), Thread_0()))
  requires (p1_7 ==> issubtype(typeof(self_4), Lock(Lock_arg(typeof(self_4), 0)))) && (p2_7 ==> issubtype(typeof(self_4_0), Lock(Lock_arg(typeof(self_4_0), 0))))
  requires (p1_7 ==> issubtype(Lock_arg(typeof(self_4), 0), object())) && (p2_7 ==> issubtype(Lock_arg(typeof(self_4_0), 0), object()))
  requires (p1_7 ==> self_4 != null) && (p2_7 ==> self_4_0 != null)
  requires (p1_7 ==> [acc(MustTerminate(_cthread_151), write), true]) && (p2_7 ==> [acc(MustTerminate_0(_cthread_151_0), write), true])
  requires (p1_7 ==> [acc(self_4.MustReleaseBounded, write), (perm(self_4.MustReleaseBounded) > none && Measure$check(_caller_measures_151, self_4, 1) ? acc(self_4.MustReleaseBounded, write) : acc(self_4.MustReleaseUnbounded, write))]) && (p2_7 ==> [acc(self_4_0.MustReleaseBoundedp, write), (perm(self_4_0.MustReleaseBoundedp) > none && Measure$check(_caller_measures_151_0, self_4_0, 1) ? acc(self_4_0.MustReleaseBoundedp, write) : acc(self_4_0.MustReleaseUnboundedp, write))])
  requires (p1_7 ==> acc(Lock_invariant(self_4), write)) && (p2_7 ==> acc(Lock_invariant_0(self_4_0), write)) && (p1_7 && p2_7 ==> Lock_invariant_low(self_4, self_4_0))
  requires p1_7 && p2_7 ==> self_4 == self_4_0
  requires p1_7 == p2_7 && (p1_7 ==> typeof(self_4) == typeof(self_4_0))
  requires (p1_7 ==> [true, Measure$check(_caller_measures_151, _cthread_151, 1) || perm(MustTerminate(_cthread_151)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]) && (p2_7 ==> [true, Measure$check(_caller_measures_151_0, _cthread_151_0, 1) || perm(MustTerminate_0(_cthread_151_0)) == none && ((forperm _r_13: Ref [MustInvokeBounded_0(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded_0(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBoundedp] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnboundedp] :: false))))])
  ensures (p1_7 ==> [(forperm _r_12: Ref [_r_12.MustReleaseBounded] :: Level(_r_12) <= _current_wait_level_151) && ((forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: Level(_r_12) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]) && (p2_7 ==> [(forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: Level(_r_12) <= _current_wait_level_151_0) && ((forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: Level(_r_12) <= _current_wait_level_151_0) && _residue_151_0 <= _current_wait_level_151_0), true])
{
  inhale p1_7
  var _cwl_151: Perm
  var _cwl_151_0: Perm
  if (p1_7) {
    inhale typeof(self_4) == Lock(Lock_arg(typeof(self_4), 0))
    inhale false
  }
  if (p2_7) {
    inhale typeof(self_4_0) == Lock(Lock_arg(typeof(self_4_0), 0))
    inhale false
  }
}

method main(p1_8: Bool, p2_8: Bool, _cthread_153: Ref, _cthread_153_0: Ref, _caller_measures_153: Seq[Measure$], _caller_measures_153_0: Seq[Measure$], _residue_153: Perm, _residue_153_0: Perm) returns (_current_wait_level_153: Perm, _current_wait_level_153_0: Perm)
  requires (p1_8 ==> _cthread_153 != null) && (p2_8 ==> _cthread_153_0 != null)
  requires (p1_8 ==> issubtype(typeof(_cthread_153), Thread_0())) && (p2_8 ==> issubtype(typeof(_cthread_153_0), Thread_0()))
  requires (p1_8 ==> [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]) && (p2_8 ==> [true, perm(MustTerminate_0(_cthread_153_0)) == none && ((forperm _r_16: Ref [MustInvokeBounded_0(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded_0(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBoundedp] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnboundedp] :: false))))])
  ensures (p1_8 ==> [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_153) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]) && (p2_8 ==> [(forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _current_wait_level_153_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _current_wait_level_153_0) && _residue_153_0 <= _current_wait_level_153_0), true])
  ensures (p1_8 ==> [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]) && (p2_8 ==> [true, (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_8
  var module_defined_0: Bool
  var module_defined_0_0: Bool
  var module_names_0: Set[_Name]
  var module_names_0_0: Set[_Name]
  var module_defined_1: Bool
  var module_defined_1_0: Bool
  var module_names_1: Set[_Name]
  var module_names_1_0: Set[_Name]
  var _err: Ref
  var _err_2: Ref
  var _cwl_153: Perm
  var _cwl_153_0: Perm
  var _method_measures_153: Seq[Measure$]
  var _method_measures_153_0: Seq[Measure$]
  if (p1_8) {
    _method_measures_153 := Seq[Measure$]()
    module_defined_0 := true
    module_names_0 := Set[_Name]()
    module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
    module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
    module_defined_1 := false
    module_names_1 := Set[_Name]()
    module_names_1 := (module_names_1 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file___0()._val, 99 / 100) && issubtype(typeof(__file___0()._val), str()) && issubtype(typeof(__file___0()._val), str())
    module_names_1 := (module_names_1 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name___0()._val, 99 / 100) && issubtype(typeof(__name___0()._val), str()) && issubtype(typeof(__name___0()._val), str()) && !str___eq__(str___create__(8, 2489249333222104298408468319), __name___0()._val)
    _err := null
  }
  if (p2_8) {
    _method_measures_153_0 := Seq[Measure$]()
    module_defined_0_0 := true
    module_names_0_0 := Set[_Name]()
    module_names_0_0 := (module_names_0_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file__()._valp, 99 / 100) && issubtype(typeof(__file__()._valp), str()) && issubtype(typeof(__file__()._valp), str())
    module_names_0_0 := (module_names_0_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name__()._valp, 99 / 100) && issubtype(typeof(__name__()._valp), str()) && issubtype(typeof(__name__()._valp), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._valp)
    module_defined_1_0 := false
    module_names_1_0 := Set[_Name]()
    module_names_1_0 := (module_names_1_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file___0()._valp, 99 / 100) && issubtype(typeof(__file___0()._valp), str()) && issubtype(typeof(__file___0()._valp), str())
    module_names_1_0 := (module_names_1_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name___0()._valp, 99 / 100) && issubtype(typeof(__name___0()._valp), str()) && issubtype(typeof(__name___0()._valp), str()) && !str___eq__(str___create__(8, 2489249333222104298408468319), __name___0()._valp)
    _err_2 := null
  }
  var p1_9: Bool
  var p2_9: Bool
  var p3_3: Bool
  var p4_3: Bool
  p1_9 := p1_8 && !module_defined_1
  p2_9 := p2_8 && !module_defined_1_0
  p3_3 := p1_8 && !!module_defined_1
  p4_3 := p2_8 && !!module_defined_1_0
  if (p1_9) {
    module_defined_1 := true
    module_names_1 := (module_names_1 union Set(_single(3682427259782798009)))
    module_names_1 := (module_names_1 union Set(_single(5123216512802524336881954895)))
    module_names_1 := (module_names_1 union Set(_single(3686932966091490988)))
    module_names_1 := (module_names_1 union Set(_single(11116006324067352974226974112924930237)))
    module_names_1 := (module_names_1 union Set(_single(4264095844347449787)))
    module_names_1 := (module_names_1 union Set(_single(3939413879042314935)))
    module_names_1 := (module_names_1 union Set(_single(7827276)))
    module_names_1 := (module_names_1 union Set(_single(3584533797388877637428408140)))
    module_names_1 := (module_names_1 union Set(_single(5969745018335918569738826320)))
    module_names_1 := (module_names_1 union Set(_single(1701999952)))
    module_names_1 := (module_names_1 union Set(_single(7136376649266381199951095122)))
    module_names_1 := (module_names_1 union Set(_single(4659879962334230944322642242)))
    module_names_1 := (module_names_1 union Set(_single(3655571673241459380)))
    module_names_1 := (module_names_1 union Set(_single(5020080360567004017642927437)))
    module_names_1 := (module_names_1 union Set(_single(5460990052674857173734662115181759155)))
    module_names_1 := (module_names_1 union Set(_single(4900434677047853433511043415)))
  }
  if (p2_9) {
    module_defined_1_0 := true
    module_names_1_0 := (module_names_1_0 union Set(_single(3682427259782798009)))
    module_names_1_0 := (module_names_1_0 union Set(_single(5123216512802524336881954895)))
    module_names_1_0 := (module_names_1_0 union Set(_single(3686932966091490988)))
    module_names_1_0 := (module_names_1_0 union Set(_single(11116006324067352974226974112924930237)))
    module_names_1_0 := (module_names_1_0 union Set(_single(4264095844347449787)))
    module_names_1_0 := (module_names_1_0 union Set(_single(3939413879042314935)))
    module_names_1_0 := (module_names_1_0 union Set(_single(7827276)))
    module_names_1_0 := (module_names_1_0 union Set(_single(3584533797388877637428408140)))
    module_names_1_0 := (module_names_1_0 union Set(_single(5969745018335918569738826320)))
    module_names_1_0 := (module_names_1_0 union Set(_single(1701999952)))
    module_names_1_0 := (module_names_1_0 union Set(_single(7136376649266381199951095122)))
    module_names_1_0 := (module_names_1_0 union Set(_single(4659879962334230944322642242)))
    module_names_1_0 := (module_names_1_0 union Set(_single(3655571673241459380)))
    module_names_1_0 := (module_names_1_0 union Set(_single(5020080360567004017642927437)))
    module_names_1_0 := (module_names_1_0 union Set(_single(5460990052674857173734662115181759155)))
    module_names_1_0 := (module_names_1_0 union Set(_single(4900434677047853433511043415)))
  }
  assert (p1_9 ==> true) && (p2_9 ==> true) && ((p1_9 ==> (_single(4659879962334230944322642242) in module_names_1)) && (p2_9 ==> (_single(4659879962334230944322642242) in module_names_1_0))) && ((p1_9 ==> (_single(4659879962334230944322642242) in module_names_1)) && (p2_9 ==> (_single(4659879962334230944322642242) in module_names_1_0)))
  assert (p1_9 ==> true) && (p2_9 ==> true) && ((p1_9 ==> (_single(4659879962334230944322642242) in module_names_1)) && (p2_9 ==> (_single(4659879962334230944322642242) in module_names_1_0)))
  if (p1_9) {
    module_names_1 := (module_names_1 union Set(_single(3493880855485680332086796127)))
    module_names_1 := (module_names_1 union Set(_single(4196433967405385533277627751)))
    module_names_1 := (module_names_1 union Set(_single(4259881987508968607)))
    module_names_1 := (module_names_1 union Set(_single(3682719749203270286)))
    module_names_1 := (module_names_1 union Set(_single(1801678668)))
  }
  if (p2_9) {
    module_names_1_0 := (module_names_1_0 union Set(_single(3493880855485680332086796127)))
    module_names_1_0 := (module_names_1_0 union Set(_single(4196433967405385533277627751)))
    module_names_1_0 := (module_names_1_0 union Set(_single(4259881987508968607)))
    module_names_1_0 := (module_names_1_0 union Set(_single(3682719749203270286)))
    module_names_1_0 := (module_names_1_0 union Set(_single(1801678668)))
  }
  assert (p1_8 ==> (_single(1801678668) in module_names_1)) && (p2_8 ==> (_single(1801678668) in module_names_1_0))
  if (p1_8) {
    module_names_0 := (module_names_0 union Set(_single(1801678668)))
    module_names_0 := (module_names_0 union Set(_single(3655571673241459380)))
    module_names_0 := (module_names_0 union Set(_single(4900434677047853433511043415)))
  }
  if (p2_8) {
    module_names_0_0 := (module_names_0_0 union Set(_single(1801678668)))
    module_names_0_0 := (module_names_0_0 union Set(_single(3655571673241459380)))
    module_names_0_0 := (module_names_0_0 union Set(_single(4900434677047853433511043415)))
  }
  assert (p1_8 ==> true) && (p2_8 ==> true)
  if (p1_8) {
    module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
    module_names_0 := (module_names_0 union Set(_single(1819043139)))
  }
  if (p2_8) {
    module_names_0_0 := (module_names_0_0 union Set(_single(3493880855485680332086796127)))
    module_names_0_0 := (module_names_0_0 union Set(_single(1819043139)))
  }
  assert (p1_8 ==> true) && (p2_8 ==> true)
  assert (p1_8 ==> true) && (p2_8 ==> true) && ((p1_8 ==> (_single(1801678668) in module_names_0)) && (p2_8 ==> (_single(1801678668) in module_names_0_0)))
  if (p1_8) {
    module_names_0 := (module_names_0 union Set(_single(5199367835812990865954858307)))
  }
  if (p2_8) {
    module_names_0_0 := (module_names_0_0 union Set(_single(5199367835812990865954858307)))
  }
  assert (p1_8 ==> true) && (p2_8 ==> true)
  if (p1_8) {
    module_names_0 := (module_names_0 union Set(_single(3653873535515267997)))
  }
  if (p2_8) {
    module_names_0_0 := (module_names_0_0 union Set(_single(3653873535515267997)))
  }
  assert true
}