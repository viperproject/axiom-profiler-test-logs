domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getMethod_0(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getArg_0(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
  
  function getOld_0(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function m1_threading(): ThreadingID
  
  unique function m2_threading(): ThreadingID
  
  unique function m3_threading(): ThreadingID
  
  unique function next_leapyear_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field _valp: Ref

field __container: Ref

field __containerp: Ref

field __iter_index: Int

field __iter_indexp: Int

field __previous: Seq[Ref]

field __previousp: Seq[Ref]

field list_acc: Seq[Ref]

field list_accp: Seq[Ref]

field set_acc: Set[Ref]

field set_accp: Set[Ref]

field dict_acc: Set[Ref]

field dict_accp: Set[Ref]

field Measure$acc: Seq[Ref]

field Measure$accp: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseBoundedp: Int

field MustReleaseUnbounded: Int

field MustReleaseUnboundedp: Int

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function int___gt__(self: Int, other: Int): Bool 
{
  self > other
}

function int___le__(self: Int, other: Int): Bool 
{
  self <= other
}

function int___lt__(self: Int, other: Int): Bool 
{
  self < other
}

function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function int___mul__(self: Int, other: Int): Int 
{
  self * other
}

function int___mod__(self: Int, other: Int): Int
  requires other != 0 
{
  self % other
}

function Level(r: Ref): Perm 


function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustTerminate_0(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeBounded_0(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeUnbounded_0(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate MustInvokeCredit_0(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_start_0(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _thread_post_0(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate _MaySet_0(rec: Ref, id: Int) 

method m1(p1: Bool, p2: Bool, _cthread_145: Ref, _cthread_145_0: Ref, _caller_measures_145: Seq[Measure$], _caller_measures_145_0: Seq[Measure$], _residue_145: Perm, _residue_145_0: Perm, x_0: Ref, x_0_0: Ref) returns (_current_wait_level_145: Perm, _current_wait_level_145_0: Perm, _res: Ref, _res_0: Ref)
  requires (p1 ==> _cthread_145 != null) && (p2 ==> _cthread_145_0 != null)
  requires (p1 ==> issubtype(typeof(_cthread_145), Thread_0())) && (p2 ==> issubtype(typeof(_cthread_145_0), Thread_0()))
  requires (p1 ==> issubtype(typeof(x_0), int())) && (p2 ==> issubtype(typeof(x_0_0), int()))
  requires p1 && p2 ==> x_0 == x_0_0
  requires (p1 ==> [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))]) && (p2 ==> [true, perm(MustTerminate_0(_cthread_145_0)) == none && ((forperm _r_3: Ref [MustInvokeBounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBoundedp] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnboundedp] :: false))))])
  ensures (p1 ==> [(forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_145) && ((forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]) && (p2 ==> [(forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: Level(_r_1) <= _current_wait_level_145_0) && ((forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: Level(_r_1) <= _current_wait_level_145_0) && _residue_145_0 <= _current_wait_level_145_0), true])
  ensures (p1 ==> issubtype(typeof(_res), int())) && (p2 ==> issubtype(typeof(_res_0), int()))
  ensures p1 && p2 ==> _res == _res_0
  ensures (p1 ==> [true, (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))]) && (p2 ==> [true, (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)))])
{
  var ret1: Bool
  var ret2: Bool
  inhale p1
  ret1 := false
  ret2 := false
  var _err: Ref
  var _err_0: Ref
  var res: Ref
  var res_2: Ref
  var x_3: Ref
  var x_3_0: Ref
  var _loop_measures: Seq[Measure$]
  var _loop_measures_3: Seq[Measure$]
  var _loop_check_before: Bool
  var _loop_check_before_3: Bool
  var _loop_termination_flag: Bool
  var _loop_termination_flag_3: Bool
  var _loop_original_must_terminate: Perm
  var _loop_original_must_terminate_3: Perm
  var _residue_149: Perm
  var _residue_149_0: Perm
  var _cwl_145: Perm
  var _cwl_145_0: Perm
  var _method_measures_145: Seq[Measure$]
  var _method_measures_145_0: Seq[Measure$]
  if (p1 && !ret1) {
    _method_measures_145 := Seq[Measure$]()
    _res := null
    _err := null
    x_3 := x_0
    res := __prim__int___box__(1)
    inhale _isDefined(7562610)
    // Save current MustTerminate amount._loop_original_must_terminate := perm(MustTerminate(_cthread_145))
    // Save loop termination promise._loop_termination_flag := false
    // We are before loop._loop_check_before := true
  }
  if (p2 && !ret2) {
    _method_measures_145_0 := Seq[Measure$]()
    _res_0 := null
    _err_0 := null
    x_3_0 := x_0_0
    res_2 := __prim__int___box__(1)
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_3 := perm(MustTerminate_0(_cthread_145_0))
    // Save loop termination promise._loop_termination_flag_3 := false
    // We are before loop._loop_check_before_3 := true
  }
  var bypass1: Bool
  var bypass2: Bool
  var tmp1: Seq[Measure$]
  var tmp2: Seq[Measure$]
  var tmp1_0: Ref
  var tmp2_0: Ref
  var tmp1_1: Bool
  var tmp2_1: Bool
  var tmp1_2: Bool
  var tmp2_2: Bool
  var oldret1: Bool
  var oldret2: Bool
  var p1_0: Bool
  var p2_0: Bool
  var idle1: Bool
  var idle2: Bool
  bypass1 := !(p1 && !ret1)
  bypass2 := !(p2 && !ret2)
  if (bypass1) {
    tmp1 := _loop_measures
    tmp1_0 := res
    tmp1_1 := ret1
    tmp1_2 := _loop_check_before
  }
  if (bypass2) {
    tmp2 := _loop_measures_3
    tmp2_0 := res_2
    tmp2_1 := ret2
    tmp2_2 := _loop_check_before_3
  }
  oldret1 := ret1
  oldret2 := ret2
  idle1 := false
  idle2 := false
  while (p1 && !ret1 && !bypass1 && int___lt__(int___unbox__(_checkDefined(res, 7562610)), int___unbox__(x_3)) || p2 && !ret2 && !bypass2 && int___lt__(int___unbox__(res_2), int___unbox__(x_3_0)))
    invariant (p1 && !ret1 ==> [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_149) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_149) && _residue_145 <= _residue_149), true]) && (p2 && !ret2 ==> [(forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _residue_149_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _residue_149_0) && _residue_145_0 <= _residue_149_0), true])
    invariant (p1 && !ret1 ==> issubtype(typeof(res), int())) && (p2 && !ret2 ==> issubtype(typeof(res_2), int()))
    invariant p1 && !ret1 && (p2 && !ret2) ==> _checkDefined(res, 7562610) == res_2
    invariant (p1 && !ret1 ==> [true, !idle1 ==> _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(res, 7562610)), int___unbox__(x_3)) || perm(MustTerminate(_cthread_145)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))]) && (p2 && !ret2 ==> [true, !idle2 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(res_2), int___unbox__(x_3_0)) || perm(MustTerminate_0(_cthread_145_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))))])
    invariant (p1 && !ret1 ==> [true, !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]) && (p2 && !ret2 ==> [true, !idle2 ==> !_loop_check_before_3 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))])
    invariant bypass1 ==> tmp1 == _loop_measures
    invariant bypass1 ==> tmp1_0 == res
    invariant bypass1 ==> tmp1_1 == ret1
    invariant bypass1 ==> tmp1_2 == _loop_check_before
    invariant bypass2 ==> tmp2 == _loop_measures_3
    invariant bypass2 ==> tmp2_0 == res_2
    invariant bypass2 ==> tmp2_1 == ret2
    invariant bypass2 ==> tmp2_2 == _loop_check_before_3 
  {
    p1_0 := p1 && !ret1 && int___lt__(int___unbox__(_checkDefined(res, 7562610)), int___unbox__(x_3))
    p2_0 := p2 && !ret2 && int___lt__(int___unbox__(res_2), int___unbox__(x_3_0))
    idle1 := p1 && !ret1 && !int___lt__(int___unbox__(_checkDefined(res, 7562610)), int___unbox__(x_3))
    idle2 := p2 && !ret2 && !int___lt__(int___unbox__(res_2), int___unbox__(x_3_0))
    if (p1_0 && !ret1) {
      _loop_measures := Seq[Measure$]()
      res := __prim__int___box__(int___mul__(int___unbox__(_checkDefined(res, 7562610)), 2))
      inhale _isDefined(7562610)
    }
    if (p2_0 && !ret2) {
      _loop_measures_3 := Seq[Measure$]()
      res_2 := __prim__int___box__(int___mul__(int___unbox__(res_2), 2))
      inhale true
    }
    var p1_1: Bool
    var p2_1: Bool
    var p3: Bool
    var p4: Bool
    p1_1 := p1_0 && !ret1 && int___gt__(int___unbox__(_checkDefined(res, 7562610)), 100)
    p2_1 := p2_0 && !ret2 && int___gt__(int___unbox__(res_2), 100)
    p3 := p1_0 && !ret1 && !int___gt__(int___unbox__(_checkDefined(res, 7562610)), 100)
    p4 := p2_0 && !ret2 && !int___gt__(int___unbox__(res_2), 100)
    if (p1_1 && !ret1) {
      _res := _checkDefined(res, 7562610)
      ret1 := true
    }
    if (p2_1 && !ret2) {
      _res_0 := res_2
      ret2 := true
    }
    if (p1_0 && !ret1) {
      res := __prim__int___box__(int___add__(int___unbox__(_checkDefined(res, 7562610)), 4))
      inhale _isDefined(7562610)
      // We are after loop body._loop_check_before := false
    }
    if (p2_0 && !ret2) {
      res_2 := __prim__int___box__(int___add__(int___unbox__(res_2), 4))
      inhale true
      // We are after loop body._loop_check_before_3 := false
    }
    assert (p1_0 && !ret1 ==> _loop_termination_flag ==> !int___lt__(int___unbox__(_checkDefined(res, 7562610)), int___unbox__(x_3))) && (p2_0 && !ret2 ==> _loop_termination_flag_3 ==> !int___lt__(int___unbox__(res_2), int___unbox__(x_3_0)))
    inhale !p1 || !ret1
    inhale !p2 || !ret2
  }
  // Loop Reconstruction.
  if (!bypass1 && ret1 || !bypass2 && ret2) {
    ret1 := oldret1
    ret2 := oldret2
    inhale (p1 && !ret1 ==> [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_149) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_149) && _residue_145 <= _residue_149), true]) && (p2 && !ret2 ==> [(forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _residue_149_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _residue_149_0) && _residue_145_0 <= _residue_149_0), true])
    inhale (p1 && !ret1 ==> issubtype(typeof(res), int())) && (p2 && !ret2 ==> issubtype(typeof(res_2), int()))
    inhale p1 && !ret1 && (p2 && !ret2) ==> _checkDefined(res, 7562610) == res_2
    inhale (p1 && !ret1 ==> [true, !idle1 ==> _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(res, 7562610)), int___unbox__(x_3)) || perm(MustTerminate(_cthread_145)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))]) && (p2 && !ret2 ==> [true, !idle2 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(res_2), int___unbox__(x_3_0)) || perm(MustTerminate_0(_cthread_145_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))))])
    inhale (p1 && !ret1 ==> [true, !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]) && (p2 && !ret2 ==> [true, !idle2 ==> !_loop_check_before_3 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))])
    inhale p1 && !ret1 ==> int___lt__(int___unbox__(_checkDefined(res, 7562610)), int___unbox__(x_3))
    inhale p2 && !ret1 ==> int___lt__(int___unbox__(res_2), int___unbox__(x_3_0))
    p1_0 := p1 && !ret1 && int___lt__(int___unbox__(_checkDefined(res, 7562610)), int___unbox__(x_3))
    p2_0 := p2 && !ret2 && int___lt__(int___unbox__(res_2), int___unbox__(x_3_0))
    idle1 := p1 && !ret1 && !int___lt__(int___unbox__(_checkDefined(res, 7562610)), int___unbox__(x_3))
    idle2 := p2 && !ret2 && !int___lt__(int___unbox__(res_2), int___unbox__(x_3_0))
    if (p1_0 && !ret1) {
      _loop_measures := Seq[Measure$]()
      res := __prim__int___box__(int___mul__(int___unbox__(_checkDefined(res, 7562610)), 2))
      inhale _isDefined(7562610)
    }
    if (p2_0 && !ret2) {
      _loop_measures_3 := Seq[Measure$]()
      res_2 := __prim__int___box__(int___mul__(int___unbox__(res_2), 2))
      inhale true
    }
    var p1_1: Bool
    var p2_1: Bool
    var p3: Bool
    var p4: Bool
    p1_1 := p1_0 && !ret1 && int___gt__(int___unbox__(_checkDefined(res, 7562610)), 100)
    p2_1 := p2_0 && !ret2 && int___gt__(int___unbox__(res_2), 100)
    p3 := p1_0 && !ret1 && !int___gt__(int___unbox__(_checkDefined(res, 7562610)), 100)
    p4 := p2_0 && !ret2 && !int___gt__(int___unbox__(res_2), 100)
    if (p1_1 && !ret1) {
      _res := _checkDefined(res, 7562610)
      ret1 := true
    }
    if (p2_1 && !ret2) {
      _res_0 := res_2
      ret2 := true
    }
    if (p1_0 && !ret1) {
      res := __prim__int___box__(int___add__(int___unbox__(_checkDefined(res, 7562610)), 4))
      inhale _isDefined(7562610)
      // We are after loop body._loop_check_before := false
    }
    if (p2_0 && !ret2) {
      res_2 := __prim__int___box__(int___add__(int___unbox__(res_2), 4))
      inhale true
      // We are after loop body._loop_check_before_3 := false
    }
    assert (p1_0 && !ret1 ==> _loop_termination_flag ==> !int___lt__(int___unbox__(_checkDefined(res, 7562610)), int___unbox__(x_3))) && (p2_0 && !ret2 ==> _loop_termination_flag_3 ==> !int___lt__(int___unbox__(res_2), int___unbox__(x_3_0)))
    inhale !p1_0 || !!ret1
    inhale !p2_0 || !!ret2
  }
  if (p1 && !ret1) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_145)) > none ==> acc(MustTerminate(_cthread_145), perm(MustTerminate(_cthread_145)) - _loop_original_must_terminate)
    _res := null
    _res := _checkDefined(res, 7562610)
    ret1 := true
  }
  if (p2 && !ret2) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_145_0)) > none ==> acc(MustTerminate_0(_cthread_145_0), perm(MustTerminate_0(_cthread_145_0)) - _loop_original_must_terminate_3)
    _res_0 := null
    _res_0 := res_2
    ret2 := true
  }
  assert true
}

method m2(p1_2: Bool, p2_2: Bool, _cthread_146: Ref, _cthread_146_0: Ref, _caller_measures_146: Seq[Measure$], _caller_measures_146_0: Seq[Measure$], _residue_146: Perm, _residue_146_0: Perm, x_1: Ref, x_1_0: Ref) returns (_current_wait_level_146: Perm, _current_wait_level_146_0: Perm, _res: Ref, _res_1: Ref)
  requires (p1_2 ==> _cthread_146 != null) && (p2_2 ==> _cthread_146_0 != null)
  requires (p1_2 ==> issubtype(typeof(_cthread_146), Thread_0())) && (p2_2 ==> issubtype(typeof(_cthread_146_0), Thread_0()))
  requires (p1_2 ==> issubtype(typeof(x_1), int())) && (p2_2 ==> issubtype(typeof(x_1_0), int()))
  requires (p1_2 ==> [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false))))]) && (p2_2 ==> [true, perm(MustTerminate_0(_cthread_146_0)) == none && ((forperm _r_8: Ref [MustInvokeBounded_0(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded_0(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: false))))])
  ensures (p1_2 ==> [(forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_146) && ((forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]) && (p2_2 ==> [(forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: Level(_r_6) <= _current_wait_level_146_0) && ((forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: Level(_r_6) <= _current_wait_level_146_0) && _residue_146_0 <= _current_wait_level_146_0), true])
  ensures (p1_2 ==> issubtype(typeof(_res), int())) && (p2_2 ==> issubtype(typeof(_res_1), int()))
  ensures p1_2 && p2_2 ==> _res == _res_1
  ensures (p1_2 ==> [true, (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))]) && (p2_2 ==> [true, (forperm _r_7: Ref [MustInvokeBounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBoundedp] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnboundedp] :: false)))])
{
  var ret1_0: Bool
  var ret2_0: Bool
  inhale p1_2
  ret1_0 := false
  ret2_0 := false
  var _err: Ref
  var _err_1: Ref
  var res_0: Ref
  var res_0_0: Ref
  var x_4: Ref
  var x_4_0: Ref
  var _loop_measures_0: Seq[Measure$]
  var _loop_measures_0_0: Seq[Measure$]
  var _loop_check_before_0: Bool
  var _loop_check_before_0_0: Bool
  var _loop_termination_flag_0: Bool
  var _loop_termination_flag_0_0: Bool
  var _loop_original_must_terminate_0: Perm
  var _loop_original_must_terminate_0_0: Perm
  var _residue_150: Perm
  var _residue_150_0: Perm
  var _cwl_146: Perm
  var _cwl_146_0: Perm
  var _method_measures_146: Seq[Measure$]
  var _method_measures_146_0: Seq[Measure$]
  if (p1_2 && !ret1_0) {
    _method_measures_146 := Seq[Measure$]()
    _res := null
    _err := null
    x_4 := x_1
    res_0 := __prim__int___box__(1)
    inhale _isDefined(3438976502669810318)
    // Save current MustTerminate amount._loop_original_must_terminate_0 := perm(MustTerminate(_cthread_146))
    // Save loop termination promise._loop_termination_flag_0 := false
    // We are before loop._loop_check_before_0 := true
  }
  if (p2_2 && !ret2_0) {
    _method_measures_146_0 := Seq[Measure$]()
    _res_1 := null
    _err_1 := null
    x_4_0 := x_1_0
    res_0_0 := __prim__int___box__(1)
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_0_0 := perm(MustTerminate_0(_cthread_146_0))
    // Save loop termination promise._loop_termination_flag_0_0 := false
    // We are before loop._loop_check_before_0_0 := true
  }
  var bypass1_0: Bool
  var bypass2_0: Bool
  var tmp1_3: Seq[Measure$]
  var tmp2_3: Seq[Measure$]
  var tmp1_4: Ref
  var tmp2_4: Ref
  var tmp1_5: Bool
  var tmp2_5: Bool
  var tmp1_6: Bool
  var tmp2_6: Bool
  var oldret1_0: Bool
  var oldret2_0: Bool
  var p1_3: Bool
  var p2_3: Bool
  var idle1_0: Bool
  var idle2_0: Bool
  bypass1_0 := !(p1_2 && !ret1_0)
  bypass2_0 := !(p2_2 && !ret2_0)
  if (bypass1_0) {
    tmp1_3 := _loop_measures_0
    tmp1_4 := res_0
    tmp1_5 := ret1_0
    tmp1_6 := _loop_check_before_0
  }
  if (bypass2_0) {
    tmp2_3 := _loop_measures_0_0
    tmp2_4 := res_0_0
    tmp2_5 := ret2_0
    tmp2_6 := _loop_check_before_0_0
  }
  oldret1_0 := ret1_0
  oldret2_0 := ret2_0
  idle1_0 := false
  idle2_0 := false
  while (p1_2 && !ret1_0 && !bypass1_0 && int___lt__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), int___unbox__(x_4)) || p2_2 && !ret2_0 && !bypass2_0 && int___lt__(int___unbox__(res_0_0), int___unbox__(x_4_0)))
    invariant (p1_2 && !ret1_0 ==> [(forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_150) && ((forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_150) && _residue_146 <= _residue_150), true]) && (p2_2 && !ret2_0 ==> [(forperm _r_4: Ref [_r_4.MustReleaseBoundedp] :: Level(_r_4) <= _residue_150_0) && ((forperm _r_4: Ref [_r_4.MustReleaseUnboundedp] :: Level(_r_4) <= _residue_150_0) && _residue_146_0 <= _residue_150_0), true])
    invariant (p1_2 && !ret1_0 ==> issubtype(typeof(res_0), int())) && (p2_2 && !ret2_0 ==> issubtype(typeof(res_0_0), int()))
    invariant p1_2 && !ret1_0 && (p2_2 && !ret2_0) ==> _checkDefined(res_0, 3438976502669810318) == res_0_0
    invariant (p1_2 && !ret1_0 ==> [true, !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), int___unbox__(x_4)) || perm(MustTerminate(_cthread_146)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))]) && (p2_2 && !ret2_0 ==> [true, !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(res_0_0), int___unbox__(x_4_0)) || perm(MustTerminate_0(_cthread_146_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))])
    invariant (p1_2 && !ret1_0 ==> [true, !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))]) && (p2_2 && !ret2_0 ==> [true, !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))])
    invariant bypass1_0 ==> tmp1_3 == _loop_measures_0
    invariant bypass1_0 ==> tmp1_4 == res_0
    invariant bypass1_0 ==> tmp1_5 == ret1_0
    invariant bypass1_0 ==> tmp1_6 == _loop_check_before_0
    invariant bypass2_0 ==> tmp2_3 == _loop_measures_0_0
    invariant bypass2_0 ==> tmp2_4 == res_0_0
    invariant bypass2_0 ==> tmp2_5 == ret2_0
    invariant bypass2_0 ==> tmp2_6 == _loop_check_before_0_0 
  {
    p1_3 := p1_2 && !ret1_0 && int___lt__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), int___unbox__(x_4))
    p2_3 := p2_2 && !ret2_0 && int___lt__(int___unbox__(res_0_0), int___unbox__(x_4_0))
    idle1_0 := p1_2 && !ret1_0 && !int___lt__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), int___unbox__(x_4))
    idle2_0 := p2_2 && !ret2_0 && !int___lt__(int___unbox__(res_0_0), int___unbox__(x_4_0))
    if (p1_3 && !ret1_0) {
      _loop_measures_0 := Seq[Measure$]()
      res_0 := __prim__int___box__(int___mul__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), 2))
      inhale _isDefined(3438976502669810318)
    }
    if (p2_3 && !ret2_0) {
      _loop_measures_0_0 := Seq[Measure$]()
      res_0_0 := __prim__int___box__(int___mul__(int___unbox__(res_0_0), 2))
      inhale true
    }
    var p1_4: Bool
    var p2_4: Bool
    var p3_0: Bool
    var p4_0: Bool
    p1_4 := p1_3 && !ret1_0 && int___gt__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), 100)
    p2_4 := p2_3 && !ret2_0 && int___gt__(int___unbox__(res_0_0), 100)
    p3_0 := p1_3 && !ret1_0 && !int___gt__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), 100)
    p4_0 := p2_3 && !ret2_0 && !int___gt__(int___unbox__(res_0_0), 100)
    if (p1_4 && !ret1_0) {
      _res := _checkDefined(res_0, 3438976502669810318)
      ret1_0 := true
    }
    if (p2_4 && !ret2_0) {
      _res_1 := res_0_0
      ret2_0 := true
    }
    if (p1_3 && !ret1_0) {
      res_0 := __prim__int___box__(int___add__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), 4))
      inhale _isDefined(3438976502669810318)
      // We are after loop body._loop_check_before_0 := false
    }
    if (p2_3 && !ret2_0) {
      res_0_0 := __prim__int___box__(int___add__(int___unbox__(res_0_0), 4))
      inhale true
      // We are after loop body._loop_check_before_0_0 := false
    }
    assert (p1_3 && !ret1_0 ==> _loop_termination_flag_0 ==> !int___lt__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), int___unbox__(x_4))) && (p2_3 && !ret2_0 ==> _loop_termination_flag_0_0 ==> !int___lt__(int___unbox__(res_0_0), int___unbox__(x_4_0)))
    inhale !p1_2 || !ret1_0
    inhale !p2_2 || !ret2_0
  }
  // Loop Reconstruction.
  if (!bypass1_0 && ret1_0 || !bypass2_0 && ret2_0) {
    ret1_0 := oldret1_0
    ret2_0 := oldret2_0
    inhale (p1_2 && !ret1_0 ==> [(forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_150) && ((forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_150) && _residue_146 <= _residue_150), true]) && (p2_2 && !ret2_0 ==> [(forperm _r_4: Ref [_r_4.MustReleaseBoundedp] :: Level(_r_4) <= _residue_150_0) && ((forperm _r_4: Ref [_r_4.MustReleaseUnboundedp] :: Level(_r_4) <= _residue_150_0) && _residue_146_0 <= _residue_150_0), true])
    inhale (p1_2 && !ret1_0 ==> issubtype(typeof(res_0), int())) && (p2_2 && !ret2_0 ==> issubtype(typeof(res_0_0), int()))
    inhale p1_2 && !ret1_0 && (p2_2 && !ret2_0) ==> _checkDefined(res_0, 3438976502669810318) == res_0_0
    inhale (p1_2 && !ret1_0 ==> [true, !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), int___unbox__(x_4)) || perm(MustTerminate(_cthread_146)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))]) && (p2_2 && !ret2_0 ==> [true, !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(res_0_0), int___unbox__(x_4_0)) || perm(MustTerminate_0(_cthread_146_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))])
    inhale (p1_2 && !ret1_0 ==> [true, !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))]) && (p2_2 && !ret2_0 ==> [true, !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))])
    inhale p1_2 && !ret1_0 ==> int___lt__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), int___unbox__(x_4))
    inhale p2_2 && !ret1_0 ==> int___lt__(int___unbox__(res_0_0), int___unbox__(x_4_0))
    p1_3 := p1_2 && !ret1_0 && int___lt__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), int___unbox__(x_4))
    p2_3 := p2_2 && !ret2_0 && int___lt__(int___unbox__(res_0_0), int___unbox__(x_4_0))
    idle1_0 := p1_2 && !ret1_0 && !int___lt__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), int___unbox__(x_4))
    idle2_0 := p2_2 && !ret2_0 && !int___lt__(int___unbox__(res_0_0), int___unbox__(x_4_0))
    if (p1_3 && !ret1_0) {
      _loop_measures_0 := Seq[Measure$]()
      res_0 := __prim__int___box__(int___mul__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), 2))
      inhale _isDefined(3438976502669810318)
    }
    if (p2_3 && !ret2_0) {
      _loop_measures_0_0 := Seq[Measure$]()
      res_0_0 := __prim__int___box__(int___mul__(int___unbox__(res_0_0), 2))
      inhale true
    }
    var p1_4: Bool
    var p2_4: Bool
    var p3_0: Bool
    var p4_0: Bool
    p1_4 := p1_3 && !ret1_0 && int___gt__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), 100)
    p2_4 := p2_3 && !ret2_0 && int___gt__(int___unbox__(res_0_0), 100)
    p3_0 := p1_3 && !ret1_0 && !int___gt__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), 100)
    p4_0 := p2_3 && !ret2_0 && !int___gt__(int___unbox__(res_0_0), 100)
    if (p1_4 && !ret1_0) {
      _res := _checkDefined(res_0, 3438976502669810318)
      ret1_0 := true
    }
    if (p2_4 && !ret2_0) {
      _res_1 := res_0_0
      ret2_0 := true
    }
    if (p1_3 && !ret1_0) {
      res_0 := __prim__int___box__(int___add__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), 4))
      inhale _isDefined(3438976502669810318)
      // We are after loop body._loop_check_before_0 := false
    }
    if (p2_3 && !ret2_0) {
      res_0_0 := __prim__int___box__(int___add__(int___unbox__(res_0_0), 4))
      inhale true
      // We are after loop body._loop_check_before_0_0 := false
    }
    assert (p1_3 && !ret1_0 ==> _loop_termination_flag_0 ==> !int___lt__(int___unbox__(_checkDefined(res_0, 3438976502669810318)), int___unbox__(x_4))) && (p2_3 && !ret2_0 ==> _loop_termination_flag_0_0 ==> !int___lt__(int___unbox__(res_0_0), int___unbox__(x_4_0)))
    inhale !p1_3 || !!ret1_0
    inhale !p2_3 || !!ret2_0
  }
  if (p1_2 && !ret1_0) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_146)) > none ==> acc(MustTerminate(_cthread_146), perm(MustTerminate(_cthread_146)) - _loop_original_must_terminate_0)
    _res := null
    _res := _checkDefined(res_0, 3438976502669810318)
    ret1_0 := true
  }
  if (p2_2 && !ret2_0) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_146_0)) > none ==> acc(MustTerminate_0(_cthread_146_0), perm(MustTerminate_0(_cthread_146_0)) - _loop_original_must_terminate_0_0)
    _res_1 := null
    _res_1 := res_0_0
    ret2_0 := true
  }
  assert true
}

method m3(p1_5: Bool, p2_5: Bool, _cthread_147: Ref, _cthread_147_0: Ref, _caller_measures_147: Seq[Measure$], _caller_measures_147_0: Seq[Measure$], _residue_147: Perm, _residue_147_0: Perm, x_2: Ref, x_2_0: Ref) returns (_current_wait_level_147: Perm, _current_wait_level_147_0: Perm)
  requires (p1_5 ==> _cthread_147 != null) && (p2_5 ==> _cthread_147_0 != null)
  requires (p1_5 ==> issubtype(typeof(_cthread_147), Thread_0())) && (p2_5 ==> issubtype(typeof(_cthread_147_0), Thread_0()))
  requires (p1_5 ==> issubtype(typeof(x_2), int())) && (p2_5 ==> issubtype(typeof(x_2_0), int()))
  requires (p1_5 ==> int___gt__(int___unbox__(x_2), 0)) && (p2_5 ==> int___gt__(int___unbox__(x_2_0), 0))
  requires (p1_5 ==> [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]) && (p2_5 ==> [true, perm(MustTerminate_0(_cthread_147_0)) == none && ((forperm _r_13: Ref [MustInvokeBounded_0(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded_0(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBoundedp] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnboundedp] :: false))))])
  ensures (p1_5 ==> [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_147) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]) && (p2_5 ==> [(forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_147_0) && ((forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_147_0) && _residue_147_0 <= _current_wait_level_147_0), true])
  ensures (p1_5 ==> [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]) && (p2_5 ==> [true, (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_5
  var _err: Ref
  var _err_2: Ref
  var i: Ref
  var i_0: Ref
  var res_1: Ref
  var res_1_0: Ref
  var x_5: Ref
  var x_5_0: Ref
  var _loop_measures_1: Seq[Measure$]
  var _loop_measures_1_0: Seq[Measure$]
  var _loop_check_before_1: Bool
  var _loop_check_before_1_0: Bool
  var _loop_termination_flag_1: Bool
  var _loop_termination_flag_1_0: Bool
  var _loop_original_must_terminate_1: Perm
  var _loop_original_must_terminate_1_0: Perm
  var _residue_151: Perm
  var _residue_151_0: Perm
  var _cwl_147: Perm
  var _cwl_147_0: Perm
  var _method_measures_147: Seq[Measure$]
  var _method_measures_147_0: Seq[Measure$]
  if (p1_5) {
    _method_measures_147 := Seq[Measure$]()
    _err := null
    x_5 := x_2
    i := __prim__int___box__(0)
    inhale _isDefined(105)
    res_1 := __prim__int___box__(0)
    inhale _isDefined(3438976506964777614)
    // Save current MustTerminate amount._loop_original_must_terminate_1 := perm(MustTerminate(_cthread_147))
    // Save loop termination promise._loop_termination_flag_1 := false
    // We are before loop._loop_check_before_1 := true
  }
  if (p2_5) {
    _method_measures_147_0 := Seq[Measure$]()
    _err_2 := null
    x_5_0 := x_2_0
    i_0 := __prim__int___box__(0)
    inhale true
    res_1_0 := __prim__int___box__(0)
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_1_0 := perm(MustTerminate_0(_cthread_147_0))
    // Save loop termination promise._loop_termination_flag_1_0 := false
    // We are before loop._loop_check_before_1_0 := true
  }
  var bypass1_1: Bool
  var bypass2_1: Bool
  var tmp1_7: Seq[Measure$]
  var tmp2_7: Seq[Measure$]
  var tmp1_8: Ref
  var tmp2_8: Ref
  var tmp1_9: Ref
  var tmp2_9: Ref
  var tmp1_10: Bool
  var tmp2_10: Bool
  var p1_6: Bool
  var p2_6: Bool
  var idle1_1: Bool
  var idle2_1: Bool
  bypass1_1 := !p1_5
  bypass2_1 := !p2_5
  if (bypass1_1) {
    tmp1_7 := _loop_measures_1
    tmp1_8 := i
    tmp1_9 := res_1
    tmp1_10 := _loop_check_before_1
  }
  if (bypass2_1) {
    tmp2_7 := _loop_measures_1_0
    tmp2_8 := i_0
    tmp2_9 := res_1_0
    tmp2_10 := _loop_check_before_1_0
  }
  idle1_1 := false
  idle2_1 := false
  while (p1_5 && !bypass1_1 && int___lt__(int___unbox__(_checkDefined(i, 105)), int___unbox__(x_5)) || p2_5 && !bypass2_1 && int___lt__(int___unbox__(i_0), int___unbox__(x_5_0)))
    invariant (p1_5 ==> [(forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _residue_151) && ((forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _residue_151) && _residue_147 <= _residue_151), true]) && (p2_5 ==> [(forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: Level(_r_9) <= _residue_151_0) && ((forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: Level(_r_9) <= _residue_151_0) && _residue_147_0 <= _residue_151_0), true])
    invariant (p1_5 ==> issubtype(typeof(i), int())) && (p2_5 ==> issubtype(typeof(i_0), int()))
    invariant (p1_5 ==> issubtype(typeof(res_1), int())) && (p2_5 ==> issubtype(typeof(res_1_0), int()))
    invariant (p1_5 ==> int___le__(0, int___unbox__(_checkDefined(i, 105)))) && (p2_5 ==> int___le__(0, int___unbox__(i_0))) && ((p1_5 ==> int___le__(int___unbox__(_checkDefined(i, 105)), int___unbox__(x_5))) && (p2_5 ==> int___le__(int___unbox__(i_0), int___unbox__(x_5_0))))
    invariant (p1_5 ==> int___eq__(_checkDefined(res_1, 3438976506964777614), __prim__int___box__(int___mul__(int___unbox__(_checkDefined(i, 105)), 2)))) && (p2_5 ==> int___eq__(res_1_0, __prim__int___box__(int___mul__(int___unbox__(i_0), 2))))
    invariant (p1_5 ==> [true, !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(_checkDefined(i, 105)), int___unbox__(x_5)) || perm(MustTerminate(_cthread_147)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))))]) && (p2_5 ==> [true, !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || (!int___lt__(int___unbox__(i_0), int___unbox__(x_5_0)) || perm(MustTerminate_0(_cthread_147_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))))])
    invariant (p1_5 ==> [true, !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))]) && (p2_5 ==> [true, !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))])
    invariant bypass1_1 ==> tmp1_7 == _loop_measures_1
    invariant bypass1_1 ==> tmp1_8 == i
    invariant bypass1_1 ==> tmp1_9 == res_1
    invariant bypass1_1 ==> tmp1_10 == _loop_check_before_1
    invariant bypass2_1 ==> tmp2_7 == _loop_measures_1_0
    invariant bypass2_1 ==> tmp2_8 == i_0
    invariant bypass2_1 ==> tmp2_9 == res_1_0
    invariant bypass2_1 ==> tmp2_10 == _loop_check_before_1_0 
  {
    p1_6 := p1_5 && int___lt__(int___unbox__(_checkDefined(i, 105)), int___unbox__(x_5))
    p2_6 := p2_5 && int___lt__(int___unbox__(i_0), int___unbox__(x_5_0))
    idle1_1 := p1_5 && !int___lt__(int___unbox__(_checkDefined(i, 105)), int___unbox__(x_5))
    idle2_1 := p2_5 && !int___lt__(int___unbox__(i_0), int___unbox__(x_5_0))
    if (p1_6) {
      _loop_measures_1 := Seq[Measure$]()
      i := __prim__int___box__(int___add__(int___unbox__(_checkDefined(i, 105)), 1))
      inhale _isDefined(105)
      res_1 := __prim__int___box__(int___add__(int___unbox__(_checkDefined(res_1, 3438976506964777614)), 2))
      inhale _isDefined(3438976506964777614)
      // We are after loop body._loop_check_before_1 := false
    }
    if (p2_6) {
      _loop_measures_1_0 := Seq[Measure$]()
      i_0 := __prim__int___box__(int___add__(int___unbox__(i_0), 1))
      inhale true
      res_1_0 := __prim__int___box__(int___add__(int___unbox__(res_1_0), 2))
      inhale true
      // We are after loop body._loop_check_before_1_0 := false
    }
    assert (p1_6 ==> _loop_termination_flag_1 ==> !int___lt__(int___unbox__(_checkDefined(i, 105)), int___unbox__(x_5))) && (p2_6 ==> _loop_termination_flag_1_0 ==> !int___lt__(int___unbox__(i_0), int___unbox__(x_5_0)))
    inhale !p1_5 || true
    inhale !p2_5 || true
  }
  if (p1_5) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_147)) > none ==> acc(MustTerminate(_cthread_147), perm(MustTerminate(_cthread_147)) - _loop_original_must_terminate_1)
  }
  if (p2_5) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_147_0)) > none ==> acc(MustTerminate_0(_cthread_147_0), perm(MustTerminate_0(_cthread_147_0)) - _loop_original_must_terminate_1_0)
  }
  assert (p1_5 ==> int___eq__(_checkDefined(res_1, 3438976506964777614), __prim__int___box__(int___mul__(2, int___unbox__(x_5))))) && (p2_5 ==> int___eq__(res_1_0, __prim__int___box__(int___mul__(2, int___unbox__(x_5_0)))))
  assert true
}

method next_leapyear(p1_7: Bool, p2_7: Bool, _cthread_148: Ref, _cthread_148_0: Ref, _caller_measures_148: Seq[Measure$], _caller_measures_148_0: Seq[Measure$], _residue_148: Perm, _residue_148_0: Perm, start: Ref, start_1: Ref) returns (_current_wait_level_148: Perm, _current_wait_level_148_0: Perm, _res: Ref, _res_2: Ref)
  requires (p1_7 ==> _cthread_148 != null) && (p2_7 ==> _cthread_148_0 != null)
  requires (p1_7 ==> issubtype(typeof(_cthread_148), Thread_0())) && (p2_7 ==> issubtype(typeof(_cthread_148_0), Thread_0()))
  requires (p1_7 ==> issubtype(typeof(start), int())) && (p2_7 ==> issubtype(typeof(start_1), int()))
  requires p1_7 && p2_7 ==> start == start_1
  requires (p1_7 ==> [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false))))]) && (p2_7 ==> [true, perm(MustTerminate_0(_cthread_148_0)) == none && ((forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false))))])
  ensures (p1_7 ==> [(forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_148) && ((forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]) && (p2_7 ==> [(forperm _r_16: Ref [_r_16.MustReleaseBoundedp] :: Level(_r_16) <= _current_wait_level_148_0) && ((forperm _r_16: Ref [_r_16.MustReleaseUnboundedp] :: Level(_r_16) <= _current_wait_level_148_0) && _residue_148_0 <= _current_wait_level_148_0), true])
  ensures (p1_7 ==> issubtype(typeof(_res), int())) && (p2_7 ==> issubtype(typeof(_res_2), int()))
  ensures p1_7 && p2_7 ==> _res == _res_2
  ensures (p1_7 ==> int___gt__(int___unbox__(_res), int___unbox__(start))) && (p2_7 ==> int___gt__(int___unbox__(_res_2), int___unbox__(start_1)))
  ensures (p1_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(_res), 4)), __prim__int___box__(0))) && (p2_7 ==> int___eq__(__prim__int___box__(int___mod__(int___unbox__(_res_2), 4)), __prim__int___box__(0)))
  ensures (p1_7 ==> !int___eq__(__prim__int___box__(int___mod__(int___unbox__(_res), 100)), __prim__int___box__(0)) || int___eq__(__prim__int___box__(int___mod__(int___unbox__(_res), 400)), __prim__int___box__(0))) && (p2_7 ==> !int___eq__(__prim__int___box__(int___mod__(int___unbox__(_res_2), 100)), __prim__int___box__(0)) || int___eq__(__prim__int___box__(int___mod__(int___unbox__(_res_2), 400)), __prim__int___box__(0)))
  ensures (p1_7 ==> [true, (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)))]) && (p2_7 ==> [true, (forperm _r_17: Ref [MustInvokeBounded_0(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded_0(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: false)))])
{
  var ret1_1: Bool
  var ret2_1: Bool
  var break1: Bool
  var break2: Bool
  var cont1: Bool
  var cont2: Bool
  inhale p1_7
  ret1_1 := false
  ret2_1 := false
  break1 := false
  break2 := false
  cont1 := false
  cont2 := false
  var _err: Ref
  var _err_3: Ref
  var next_ly: Ref
  var next_ly_0: Ref
  var start_0: Ref
  var start_0_0: Ref
  var _loop_measures_2: Seq[Measure$]
  var _loop_measures_2_0: Seq[Measure$]
  var _loop_check_before_2: Bool
  var _loop_check_before_2_0: Bool
  var _loop_termination_flag_2: Bool
  var _loop_termination_flag_2_0: Bool
  var _loop_original_must_terminate_2: Perm
  var _loop_original_must_terminate_2_0: Perm
  var _residue_152: Perm
  var _residue_152_0: Perm
  var _cwl_148: Perm
  var _cwl_148_0: Perm
  var _method_measures_148: Seq[Measure$]
  var _method_measures_148_0: Seq[Measure$]
  if (p1_7 && (!ret1_1 && (!break1 && !cont1))) {
    _method_measures_148 := Seq[Measure$]()
    _res := null
    _err := null
    start_0 := start
    next_ly := __prim__int___box__(int___add__(int___unbox__(start_0), 1))
    inhale _isDefined(4230462339868498578)
    // Save current MustTerminate amount._loop_original_must_terminate_2 := perm(MustTerminate(_cthread_148))
    // Save loop termination promise._loop_termination_flag_2 := false
    // We are before loop._loop_check_before_2 := true
  }
  if (p2_7 && (!ret2_1 && (!break2 && !cont2))) {
    _method_measures_148_0 := Seq[Measure$]()
    _res_2 := null
    _err_3 := null
    start_0_0 := start_1
    next_ly_0 := __prim__int___box__(int___add__(int___unbox__(start_0_0), 1))
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_2_0 := perm(MustTerminate_0(_cthread_148_0))
    // Save loop termination promise._loop_termination_flag_2_0 := false
    // We are before loop._loop_check_before_2_0 := true
  }
  var bypass1_2: Bool
  var bypass2_2: Bool
  var tmp1_11: Seq[Measure$]
  var tmp2_11: Seq[Measure$]
  var tmp1_12: Ref
  var tmp2_12: Ref
  var tmp1_13: Bool
  var tmp2_13: Bool
  var tmp1_14: Bool
  var tmp2_14: Bool
  var tmp1_15: Bool
  var tmp2_15: Bool
  var oldret1_1: Bool
  var oldret2_1: Bool
  var oldbreak1: Bool
  var oldbreak2: Bool
  var oldcont1: Bool
  var oldcont2: Bool
  var p1_8: Bool
  var p2_8: Bool
  var idle1_2: Bool
  var idle2_2: Bool
  bypass1_2 := !(p1_7 && (!ret1_1 && (!break1 && !cont1)))
  bypass2_2 := !(p2_7 && (!ret2_1 && (!break2 && !cont2)))
  if (bypass1_2) {
    tmp1_11 := _loop_measures_2
    tmp1_12 := next_ly
    tmp1_13 := _loop_check_before_2
    tmp1_14 := cont1
    tmp1_15 := break1
  }
  if (bypass2_2) {
    tmp2_11 := _loop_measures_2_0
    tmp2_12 := next_ly_0
    tmp2_13 := _loop_check_before_2_0
    tmp2_14 := cont2
    tmp2_15 := break2
  }
  oldret1_1 := ret1_1
  oldret2_1 := ret2_1
  oldbreak1 := break1
  oldbreak2 := break2
  oldcont1 := cont1
  oldcont2 := cont2
  idle1_2 := false
  idle2_2 := false
  while (p1_7 && (!ret1_1 && !break1) && !bypass1_2 && true || p2_7 && (!ret2_1 && !break2) && !bypass2_2 && true)
    invariant (p1_7 && (!ret1_1 && !break1) ==> [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _residue_152) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _residue_152) && _residue_148 <= _residue_152), true]) && (p2_7 && (!ret2_1 && !break2) ==> [(forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _residue_152_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _residue_152_0) && _residue_148_0 <= _residue_152_0), true])
    invariant (p1_7 && (!ret1_1 && !break1) ==> issubtype(typeof(next_ly), int())) && (p2_7 && (!ret2_1 && !break2) ==> issubtype(typeof(next_ly_0), int()))
    invariant (p1_7 && (!ret1_1 && !break1) ==> int___gt__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), int___unbox__(start_0))) && (p2_7 && (!ret2_1 && !break2) ==> int___gt__(int___unbox__(next_ly_0), int___unbox__(start_0_0)))
    invariant p1_7 && (!ret1_1 && !break1) && (p2_7 && (!ret2_1 && !break2)) ==> _checkDefined(next_ly, 4230462339868498578) == next_ly_0
    invariant (p1_7 && (!ret1_1 && !break1) ==> [true, !idle1_2 ==> _loop_check_before_2 ==> _loop_termination_flag_2 || perm(MustTerminate(_cthread_148)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))]) && (p2_7 && (!ret2_1 && !break2) ==> [true, !idle2_2 ==> _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_148_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))])
    invariant (p1_7 && (!ret1_1 && !break1) ==> [true, !idle1_2 ==> !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]) && (p2_7 && (!ret2_1 && !break2) ==> [true, !idle2_2 ==> !_loop_check_before_2_0 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))])
    invariant bypass1_2 ==> tmp1_12 == next_ly
    invariant bypass1_2 ==> tmp1_13 == _loop_check_before_2
    invariant bypass1_2 ==> tmp1_11 == _loop_measures_2
    invariant bypass1_2 ==> tmp1_15 == break1
    invariant bypass1_2 ==> tmp1_14 == cont1
    invariant bypass2_2 ==> tmp2_12 == next_ly_0
    invariant bypass2_2 ==> tmp2_15 == break2
    invariant bypass2_2 ==> tmp2_11 == _loop_measures_2_0
    invariant bypass2_2 ==> tmp2_14 == cont2
    invariant bypass2_2 ==> tmp2_13 == _loop_check_before_2_0 
  {
    cont1 := false
    cont2 := false
    p1_8 := p1_7 && (!ret1_1 && (!break1 && !cont1)) && true
    p2_8 := p2_7 && (!ret2_1 && (!break2 && !cont2)) && true
    idle1_2 := p1_7 && (!ret1_1 && (!break1 && !cont1)) && !true
    idle2_2 := p2_7 && (!ret2_1 && (!break2 && !cont2)) && !true
    if (p1_8 && (!ret1_1 && (!break1 && !cont1))) {
      _loop_measures_2 := Seq[Measure$]()
    }
    if (p2_8 && (!ret2_1 && (!break2 && !cont2))) {
      _loop_measures_2_0 := Seq[Measure$]()
    }
    var p1_9: Bool
    var p2_9: Bool
    var p3_1: Bool
    var p4_1: Bool
    p1_9 := p1_8 && (!ret1_1 && (!break1 && !cont1)) && !int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), 4)), __prim__int___box__(0))
    p2_9 := p2_8 && (!ret2_1 && (!break2 && !cont2)) && !int___eq__(__prim__int___box__(int___mod__(int___unbox__(next_ly_0), 4)), __prim__int___box__(0))
    p3_1 := p1_8 && (!ret1_1 && (!break1 && !cont1)) && !!int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), 4)), __prim__int___box__(0))
    p4_1 := p2_8 && (!ret2_1 && (!break2 && !cont2)) && !!int___eq__(__prim__int___box__(int___mod__(int___unbox__(next_ly_0), 4)), __prim__int___box__(0))
    if (p1_9 && (!ret1_1 && (!break1 && !cont1))) {
      next_ly := __prim__int___box__(int___add__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), 1))
      inhale _isDefined(4230462339868498578)
      cont1 := true
    }
    if (p2_9 && (!ret2_1 && (!break2 && !cont2))) {
      next_ly_0 := __prim__int___box__(int___add__(int___unbox__(next_ly_0), 1))
      inhale true
      cont2 := true
    }
    var p1_10: Bool
    var p2_10: Bool
    var p3_2: Bool
    var p4_2: Bool
    p1_10 := p1_8 && (!ret1_1 && (!break1 && !cont1)) && int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), 100)), __prim__int___box__(0))
    p2_10 := p2_8 && (!ret2_1 && (!break2 && !cont2)) && int___eq__(__prim__int___box__(int___mod__(int___unbox__(next_ly_0), 100)), __prim__int___box__(0))
    p3_2 := p1_8 && (!ret1_1 && (!break1 && !cont1)) && !int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), 100)), __prim__int___box__(0))
    p4_2 := p2_8 && (!ret2_1 && (!break2 && !cont2)) && !int___eq__(__prim__int___box__(int___mod__(int___unbox__(next_ly_0), 100)), __prim__int___box__(0))
    var p1_11: Bool
    var p2_11: Bool
    var p3_3: Bool
    var p4_3: Bool
    p1_11 := p1_10 && (!ret1_1 && (!break1 && !cont1)) && int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), 400)), __prim__int___box__(0))
    p2_11 := p2_10 && (!ret2_1 && (!break2 && !cont2)) && int___eq__(__prim__int___box__(int___mod__(int___unbox__(next_ly_0), 400)), __prim__int___box__(0))
    p3_3 := p1_10 && (!ret1_1 && (!break1 && !cont1)) && !int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), 400)), __prim__int___box__(0))
    p4_3 := p2_10 && (!ret2_1 && (!break2 && !cont2)) && !int___eq__(__prim__int___box__(int___mod__(int___unbox__(next_ly_0), 400)), __prim__int___box__(0))
    if (p1_11 && (!ret1_1 && (!break1 && !cont1))) {
      break1 := true
    }
    if (p2_11 && (!ret2_1 && (!break2 && !cont2))) {
      break2 := true
    }
    if (p3_3 && (!ret1_1 && (!break1 && !cont1))) {
      next_ly := __prim__int___box__(int___add__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), 4))
      inhale _isDefined(4230462339868498578)
      cont1 := true
    }
    if (p4_3 && (!ret2_1 && (!break2 && !cont2))) {
      next_ly_0 := __prim__int___box__(int___add__(int___unbox__(next_ly_0), 4))
      inhale true
      cont2 := true
    }
    if (p1_8 && (!ret1_1 && (!break1 && !cont1))) {
      break1 := true
    }
    if (p2_8 && (!ret2_1 && (!break2 && !cont2))) {
      break2 := true
    }
    if (p1_8 && (!ret1_1 && (!break1 && !cont1))) {
      // We are after loop body._loop_check_before_2 := false
    }
    if (p2_8 && (!ret2_1 && (!break2 && !cont2))) {
      // We are after loop body._loop_check_before_2_0 := false
    }
    assert (p1_8 && (!ret1_1 && !break1) ==> _loop_termination_flag_2 ==> !true) && (p2_8 && (!ret2_1 && !break2) ==> _loop_termination_flag_2_0 ==> !true)
    inhale !p1_7 || !ret1_1 && !break1
    inhale !p2_7 || !ret2_1 && !break2
  }
  // Loop Reconstruction.
  if (!bypass1_2 && (ret1_1 || break1) || !bypass2_2 && (ret2_1 || break2)) {
    ret1_1 := oldret1_1
    ret2_1 := oldret2_1
    break1 := oldbreak1
    break2 := oldbreak2
    cont1 := oldcont1
    cont2 := oldcont2
    inhale (p1_7 && (!ret1_1 && !break1) ==> [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _residue_152) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _residue_152) && _residue_148 <= _residue_152), true]) && (p2_7 && (!ret2_1 && !break2) ==> [(forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _residue_152_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _residue_152_0) && _residue_148_0 <= _residue_152_0), true])
    inhale (p1_7 && (!ret1_1 && !break1) ==> issubtype(typeof(next_ly), int())) && (p2_7 && (!ret2_1 && !break2) ==> issubtype(typeof(next_ly_0), int()))
    inhale (p1_7 && (!ret1_1 && !break1) ==> int___gt__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), int___unbox__(start_0))) && (p2_7 && (!ret2_1 && !break2) ==> int___gt__(int___unbox__(next_ly_0), int___unbox__(start_0_0)))
    inhale p1_7 && (!ret1_1 && !break1) && (p2_7 && (!ret2_1 && !break2)) ==> _checkDefined(next_ly, 4230462339868498578) == next_ly_0
    inhale (p1_7 && (!ret1_1 && !break1) ==> [true, !idle1_2 ==> _loop_check_before_2 ==> _loop_termination_flag_2 || perm(MustTerminate(_cthread_148)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))]) && (p2_7 && (!ret2_1 && !break2) ==> [true, !idle2_2 ==> _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || perm(MustTerminate_0(_cthread_148_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))])
    inhale (p1_7 && (!ret1_1 && !break1) ==> [true, !idle1_2 ==> !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]) && (p2_7 && (!ret2_1 && !break2) ==> [true, !idle2_2 ==> !_loop_check_before_2_0 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))])
    inhale p1_7 && (!ret1_1 && !break1) ==> true
    inhale p2_7 && (!ret1_1 && !break1) ==> true
    cont1 := false
    cont2 := false
    p1_8 := p1_7 && (!ret1_1 && (!break1 && !cont1)) && true
    p2_8 := p2_7 && (!ret2_1 && (!break2 && !cont2)) && true
    idle1_2 := p1_7 && (!ret1_1 && (!break1 && !cont1)) && !true
    idle2_2 := p2_7 && (!ret2_1 && (!break2 && !cont2)) && !true
    if (p1_8 && (!ret1_1 && (!break1 && !cont1))) {
      _loop_measures_2 := Seq[Measure$]()
    }
    if (p2_8 && (!ret2_1 && (!break2 && !cont2))) {
      _loop_measures_2_0 := Seq[Measure$]()
    }
    var p1_9: Bool
    var p2_9: Bool
    var p3_1: Bool
    var p4_1: Bool
    p1_9 := p1_8 && (!ret1_1 && (!break1 && !cont1)) && !int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), 4)), __prim__int___box__(0))
    p2_9 := p2_8 && (!ret2_1 && (!break2 && !cont2)) && !int___eq__(__prim__int___box__(int___mod__(int___unbox__(next_ly_0), 4)), __prim__int___box__(0))
    p3_1 := p1_8 && (!ret1_1 && (!break1 && !cont1)) && !!int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), 4)), __prim__int___box__(0))
    p4_1 := p2_8 && (!ret2_1 && (!break2 && !cont2)) && !!int___eq__(__prim__int___box__(int___mod__(int___unbox__(next_ly_0), 4)), __prim__int___box__(0))
    if (p1_9 && (!ret1_1 && (!break1 && !cont1))) {
      next_ly := __prim__int___box__(int___add__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), 1))
      inhale _isDefined(4230462339868498578)
      cont1 := true
    }
    if (p2_9 && (!ret2_1 && (!break2 && !cont2))) {
      next_ly_0 := __prim__int___box__(int___add__(int___unbox__(next_ly_0), 1))
      inhale true
      cont2 := true
    }
    var p1_10: Bool
    var p2_10: Bool
    var p3_2: Bool
    var p4_2: Bool
    p1_10 := p1_8 && (!ret1_1 && (!break1 && !cont1)) && int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), 100)), __prim__int___box__(0))
    p2_10 := p2_8 && (!ret2_1 && (!break2 && !cont2)) && int___eq__(__prim__int___box__(int___mod__(int___unbox__(next_ly_0), 100)), __prim__int___box__(0))
    p3_2 := p1_8 && (!ret1_1 && (!break1 && !cont1)) && !int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), 100)), __prim__int___box__(0))
    p4_2 := p2_8 && (!ret2_1 && (!break2 && !cont2)) && !int___eq__(__prim__int___box__(int___mod__(int___unbox__(next_ly_0), 100)), __prim__int___box__(0))
    var p1_11: Bool
    var p2_11: Bool
    var p3_3: Bool
    var p4_3: Bool
    p1_11 := p1_10 && (!ret1_1 && (!break1 && !cont1)) && int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), 400)), __prim__int___box__(0))
    p2_11 := p2_10 && (!ret2_1 && (!break2 && !cont2)) && int___eq__(__prim__int___box__(int___mod__(int___unbox__(next_ly_0), 400)), __prim__int___box__(0))
    p3_3 := p1_10 && (!ret1_1 && (!break1 && !cont1)) && !int___eq__(__prim__int___box__(int___mod__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), 400)), __prim__int___box__(0))
    p4_3 := p2_10 && (!ret2_1 && (!break2 && !cont2)) && !int___eq__(__prim__int___box__(int___mod__(int___unbox__(next_ly_0), 400)), __prim__int___box__(0))
    if (p1_11 && (!ret1_1 && (!break1 && !cont1))) {
      break1 := true
    }
    if (p2_11 && (!ret2_1 && (!break2 && !cont2))) {
      break2 := true
    }
    if (p3_3 && (!ret1_1 && (!break1 && !cont1))) {
      next_ly := __prim__int___box__(int___add__(int___unbox__(_checkDefined(next_ly, 4230462339868498578)), 4))
      inhale _isDefined(4230462339868498578)
      cont1 := true
    }
    if (p4_3 && (!ret2_1 && (!break2 && !cont2))) {
      next_ly_0 := __prim__int___box__(int___add__(int___unbox__(next_ly_0), 4))
      inhale true
      cont2 := true
    }
    if (p1_8 && (!ret1_1 && (!break1 && !cont1))) {
      break1 := true
    }
    if (p2_8 && (!ret2_1 && (!break2 && !cont2))) {
      break2 := true
    }
    if (p1_8 && (!ret1_1 && (!break1 && !cont1))) {
      // We are after loop body._loop_check_before_2 := false
    }
    if (p2_8 && (!ret2_1 && (!break2 && !cont2))) {
      // We are after loop body._loop_check_before_2_0 := false
    }
    assert (p1_8 && (!ret1_1 && !break1) ==> _loop_termination_flag_2 ==> !true) && (p2_8 && (!ret2_1 && !break2) ==> _loop_termination_flag_2_0 ==> !true)
    inhale !p1_8 || !(!ret1_1 && !break1)
    inhale !p2_8 || !(!ret2_1 && !break2)
  }
  if (!bypass1_2) {
    break1 := false
    cont1 := false
  }
  if (!bypass2_2) {
    break2 := false
    cont2 := false
  }
  if (p1_7 && (!ret1_1 && (!break1 && !cont1))) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_148)) > none ==> acc(MustTerminate(_cthread_148), perm(MustTerminate(_cthread_148)) - _loop_original_must_terminate_2)
    _res := null
    _res := _checkDefined(next_ly, 4230462339868498578)
    ret1_1 := true
  }
  if (p2_7 && (!ret2_1 && (!break2 && !cont2))) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_148_0)) > none ==> acc(MustTerminate_0(_cthread_148_0), perm(MustTerminate_0(_cthread_148_0)) - _loop_original_must_terminate_2_0)
    _res_2 := null
    _res_2 := next_ly_0
    ret2_1 := true
  }
  assert true
}

method main(p1_12: Bool, p2_12: Bool, _cthread_149: Ref, _cthread_149_0: Ref, _caller_measures_149: Seq[Measure$], _caller_measures_149_0: Seq[Measure$], _residue_153: Perm, _residue_153_0: Perm) returns (_current_wait_level_149: Perm, _current_wait_level_149_0: Perm)
  requires (p1_12 ==> _cthread_149 != null) && (p2_12 ==> _cthread_149_0 != null)
  requires (p1_12 ==> issubtype(typeof(_cthread_149), Thread_0())) && (p2_12 ==> issubtype(typeof(_cthread_149_0), Thread_0()))
  requires (p1_12 ==> [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))]) && (p2_12 ==> [true, perm(MustTerminate_0(_cthread_149_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))])
  ensures (p1_12 ==> [(forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _current_wait_level_149) && ((forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _current_wait_level_149) && _residue_153 <= _current_wait_level_149), true]) && (p2_12 ==> [(forperm _r_19: Ref [_r_19.MustReleaseBoundedp] :: Level(_r_19) <= _current_wait_level_149_0) && ((forperm _r_19: Ref [_r_19.MustReleaseUnboundedp] :: Level(_r_19) <= _current_wait_level_149_0) && _residue_153_0 <= _current_wait_level_149_0), true])
  ensures (p1_12 ==> [true, (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))]) && (p2_12 ==> [true, (forperm _r_20: Ref [MustInvokeBounded_0(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded_0(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBoundedp] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_12
  var module_defined_0: Bool
  var module_defined_0_0: Bool
  var module_names_0: Set[_Name]
  var module_names_0_0: Set[_Name]
  var _err: Ref
  var _err_4: Ref
  var _cwl_149: Perm
  var _cwl_149_0: Perm
  var _method_measures_149: Seq[Measure$]
  var _method_measures_149_0: Seq[Measure$]
  if (p1_12) {
    _method_measures_149 := Seq[Measure$]()
    module_defined_0 := true
    module_names_0 := Set[_Name]()
    module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
    module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
    _err := null
  }
  if (p2_12) {
    _method_measures_149_0 := Seq[Measure$]()
    module_defined_0_0 := true
    module_names_0_0 := Set[_Name]()
    module_names_0_0 := (module_names_0_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file__()._valp, 99 / 100) && issubtype(typeof(__file__()._valp), str()) && issubtype(typeof(__file__()._valp), str())
    module_names_0_0 := (module_names_0_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name__()._valp, 99 / 100) && issubtype(typeof(__name__()._valp), str()) && issubtype(typeof(__name__()._valp), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._valp)
    _err_4 := null
  }
  assert (p1_12 ==> true) && (p2_12 ==> true)
  if (p1_12) {
    module_names_0 := (module_names_0 union Set(_single(12653)))
  }
  if (p2_12) {
    module_names_0_0 := (module_names_0_0 union Set(_single(12653)))
  }
  assert (p1_12 ==> true) && (p2_12 ==> true)
  if (p1_12) {
    module_names_0 := (module_names_0 union Set(_single(12909)))
  }
  if (p2_12) {
    module_names_0_0 := (module_names_0_0 union Set(_single(12909)))
  }
  assert (p1_12 ==> true) && (p2_12 ==> true)
  if (p1_12) {
    module_names_0 := (module_names_0 union Set(_single(13165)))
  }
  if (p2_12) {
    module_names_0_0 := (module_names_0_0 union Set(_single(13165)))
  }
  assert (p1_12 ==> true) && (p2_12 ==> true)
  if (p1_12) {
    module_names_0 := (module_names_0 union Set(_single(10110151166883988511554227569393375890)))
  }
  if (p2_12) {
    module_names_0_0 := (module_names_0_0 union Set(_single(10110151166883988511554227569393375890)))
  }
  assert true
}