domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getMethod_0(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getArg_0(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
  
  function getOld_0(t: Ref, i: Int): Ref
}

domain Function {
  
  unique function m1_0(): Function
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function test_threading(): ThreadingID
  
  unique function while1_threading(): ThreadingID
  
  unique function while2_threading(): ThreadingID
  
  unique function while3_threading(): ThreadingID
  
  unique function while4_threading(): ThreadingID
  
  unique function while5_threading(): ThreadingID
  
  unique function input_high_threading(): ThreadingID
  
  unique function input_low_threading(): ThreadingID
  
  unique function sif_print_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field _valp: Ref

field __container: Ref

field __containerp: Ref

field __iter_index: Int

field __iter_indexp: Int

field __previous: Seq[Ref]

field __previousp: Seq[Ref]

field list_acc: Seq[Ref]

field list_accp: Seq[Ref]

field set_acc: Set[Ref]

field set_accp: Set[Ref]

field dict_acc: Set[Ref]

field dict_accp: Set[Ref]

field Measure$acc: Seq[Ref]

field Measure$accp: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseBoundedp: Int

field MustReleaseUnbounded: Int

field MustReleaseUnboundedp: Int

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function m1(a: Ref): Ref
  requires issubtype(typeof(a), int())
  ensures issubtype(typeof(result), bool())
  ensures bool___eq__(result, __prim__bool___box__(!int___eq__(a, __prim__int___box__(5)))) 
{
  __prim__bool___box__(!int___eq__(a, __prim__int___box__(5)))
}

function __file__(): Ref 


function __name__(): Ref 


function __file___0(): Ref 


function __name___0(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function bool___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), bool())
  requires issubtype(typeof(other), bool()) 
{
  bool___unbox__(self) == bool___unbox__(other)
}

function int___gt__(self: Int, other: Int): Bool 
{
  self > other
}

function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function int___sub__(self: Int, other: Int): Int 
{
  self - other
}

function Level(r: Ref): Perm 


function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustTerminate_0(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeBounded_0(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeUnbounded_0(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate MustInvokeCredit_0(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_start_0(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _thread_post_0(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate _MaySet_0(rec: Ref, id: Int) 

method test(p1: Bool, p2: Bool, _cthread_146: Ref, _cthread_146_0: Ref, _caller_measures_146: Seq[Measure$], _caller_measures_146_0: Seq[Measure$], _residue_146: Perm, _residue_146_0: Perm, x_0: Ref, x_0_0: Ref) returns (_current_wait_level_146: Perm, _current_wait_level_146_0: Perm, _res: Ref, _res_0: Ref)
  requires (p1 ==> _cthread_146 != null) && (p2 ==> _cthread_146_0 != null)
  requires (p1 ==> issubtype(typeof(_cthread_146), Thread_0())) && (p2 ==> issubtype(typeof(_cthread_146_0), Thread_0()))
  requires (p1 ==> issubtype(typeof(x_0), int())) && (p2 ==> issubtype(typeof(x_0_0), int()))
  requires (p1 ==> [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]) && (p2 ==> [true, perm(MustTerminate_0(_cthread_146_0)) == none && ((forperm _r_1: Ref [MustInvokeBounded_0(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded_0(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: false))))])
  ensures (p1 ==> [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_146) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]) && (p2 ==> [(forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _current_wait_level_146_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _current_wait_level_146_0) && _residue_146_0 <= _current_wait_level_146_0), true])
  ensures (p1 ==> issubtype(typeof(_res), bool())) && (p2 ==> issubtype(typeof(_res_0), bool()))
  ensures (p1 ==> bool___eq__(_res, __prim__bool___box__(int___gt__(int___unbox__(x_0), 5)))) && (p2 ==> bool___eq__(_res_0, __prim__bool___box__(int___gt__(int___unbox__(x_0_0), 5))))
  ensures (p1 ==> [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]) && (p2 ==> [true, (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))])
{
  var ret1: Bool
  var ret2: Bool
  inhale p1
  ret1 := false
  ret2 := false
  var _err: Ref
  var _err_0: Ref
  var x_4: Ref
  var x_4_0: Ref
  var _cwl_146: Perm
  var _cwl_146_0: Perm
  var _method_measures_146: Seq[Measure$]
  var _method_measures_146_0: Seq[Measure$]
  if (p1 && !ret1) {
    _method_measures_146 := Seq[Measure$]()
    _res := null
    _err := null
    x_4 := x_0
    _res := __prim__bool___box__(int___gt__(int___unbox__(x_4), 5))
    ret1 := true
  }
  if (p2 && !ret2) {
    _method_measures_146_0 := Seq[Measure$]()
    _res_0 := null
    _err_0 := null
    x_4_0 := x_0_0
    _res_0 := __prim__bool___box__(int___gt__(int___unbox__(x_4_0), 5))
    ret2 := true
  }
  assert true
}

method while1(p1_0: Bool, p2_0: Bool, _cthread_147: Ref, _cthread_147_0: Ref, _caller_measures_147: Seq[Measure$], _caller_measures_147_0: Seq[Measure$], _residue_147: Perm, _residue_147_0: Perm) returns (_current_wait_level_147: Perm, _current_wait_level_147_0: Perm, _res: Ref, _res_1: Ref)
  requires (p1_0 ==> _cthread_147 != null) && (p2_0 ==> _cthread_147_0 != null)
  requires (p1_0 ==> issubtype(typeof(_cthread_147), Thread_0())) && (p2_0 ==> issubtype(typeof(_cthread_147_0), Thread_0()))
  requires p1_0 == p2_0
  requires (p1_0 ==> [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false))))]) && (p2_0 ==> [true, perm(MustTerminate_0(_cthread_147_0)) == none && ((forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false))))])
  ensures (p1_0 ==> [(forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _current_wait_level_147) && ((forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]) && (p2_0 ==> [(forperm _r_4: Ref [_r_4.MustReleaseBoundedp] :: Level(_r_4) <= _current_wait_level_147_0) && ((forperm _r_4: Ref [_r_4.MustReleaseUnboundedp] :: Level(_r_4) <= _current_wait_level_147_0) && _residue_147_0 <= _current_wait_level_147_0), true])
  ensures (p1_0 ==> issubtype(typeof(_res), int())) && (p2_0 ==> issubtype(typeof(_res_1), int()))
  ensures (p1_0 ==> [true, (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))]) && (p2_0 ==> [true, (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))])
{
  var ret1_0: Bool
  var ret2_0: Bool
  inhale p1_0
  ret1_0 := false
  ret2_0 := false
  var _err: Ref
  var _err_1: Ref
  var i: Ref
  var i_2: Ref
  var sum: Ref
  var sum_1: Ref
  var input_low_res: Ref
  var input_low_res_2: Ref
  var _loop_measures: Seq[Measure$]
  var _loop_measures_5: Seq[Measure$]
  var _loop_check_before: Bool
  var _loop_check_before_5: Bool
  var _loop_termination_flag: Bool
  var _loop_termination_flag_5: Bool
  var _loop_original_must_terminate: Perm
  var _loop_original_must_terminate_5: Perm
  var _residue_155: Perm
  var _residue_155_0: Perm
  var _cwl_147: Perm
  var _cwl_147_0: Perm
  var _method_measures_147: Seq[Measure$]
  var _method_measures_147_0: Seq[Measure$]
  if (p1_0 && !ret1_0) {
    _method_measures_147 := Seq[Measure$]()
    _res := null
    _err := null
  }
  if (p2_0 && !ret2_0) {
    _method_measures_147_0 := Seq[Measure$]()
    _res_1 := null
    _err_1 := null
  }
  // Method call: input_low
  if (p1_0 && !ret1_0 || p2_0 && !ret2_0) {
    var tmp1: Ref
    var tmp2: Ref
    var tmp1_0: Seq[Measure$]
    var tmp2_0: Seq[Measure$]
    var tmp1_1: Perm
    var tmp2_1: Perm
    var tmp1_2: Perm
    var tmp2_2: Perm
    var tmp1_3: Ref
    var tmp2_3: Ref
    if (p1_0 && !ret1_0) {
      tmp1 := _cthread_147
      tmp1_0 := _method_measures_147
      tmp1_1 := _residue_147
    }
    if (p2_0 && !ret2_0) {
      tmp2 := _cthread_147_0
      tmp2_0 := _method_measures_147_0
      tmp2_1 := _residue_147_0
    }
    tmp1_2, tmp2_2, tmp1_3, tmp2_3 := input_low(p1_0 && !ret1_0, p2_0 && !ret2_0, tmp1, tmp2, tmp1_0, tmp2_0, tmp1_1, tmp2_1)
    if (p1_0 && !ret1_0) {
      _cwl_147 := tmp1_2
      input_low_res := tmp1_3
    }
    if (p2_0 && !ret2_0) {
      _cwl_147_0 := tmp2_2
      input_low_res_2 := tmp2_3
    }
  }
  if (p1_0 && !ret1_0) {
    i := input_low_res
    inhale _isDefined(105)
    sum := __prim__int___box__(0)
    inhale _isDefined(7173491)
    // Save current MustTerminate amount._loop_original_must_terminate := perm(MustTerminate(_cthread_147))
    // Save loop termination promise._loop_termination_flag := false
    // We are before loop._loop_check_before := true
  }
  if (p2_0 && !ret2_0) {
    i_2 := input_low_res_2
    inhale true
    sum_1 := __prim__int___box__(0)
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_5 := perm(MustTerminate_0(_cthread_147_0))
    // Save loop termination promise._loop_termination_flag_5 := false
    // We are before loop._loop_check_before_5 := true
  }
  var bypass1: Bool
  var bypass2: Bool
  var tmp1_4: Seq[Measure$]
  var tmp2_4: Seq[Measure$]
  var tmp1_5: Ref
  var tmp2_5: Ref
  var tmp1_6: Ref
  var tmp2_6: Ref
  var tmp1_7: Bool
  var tmp2_7: Bool
  var p1_1: Bool
  var p2_1: Bool
  var idle1: Bool
  var idle2: Bool
  bypass1 := !(p1_0 && !ret1_0)
  bypass2 := !(p2_0 && !ret2_0)
  if (bypass1) {
    tmp1_4 := _loop_measures
    tmp1_5 := sum
    tmp1_6 := i
    tmp1_7 := _loop_check_before
  }
  if (bypass2) {
    tmp2_4 := _loop_measures_5
    tmp2_5 := sum_1
    tmp2_6 := i_2
    tmp2_7 := _loop_check_before_5
  }
  idle1 := false
  idle2 := false
  while (p1_0 && !ret1_0 && !bypass1 && !int___eq__(_checkDefined(i, 105), __prim__int___box__(0)) || p2_0 && !ret2_0 && !bypass2 && !int___eq__(i_2, __prim__int___box__(0)))
    invariant (p1_0 && !ret1_0 ==> [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _residue_155) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _residue_155) && _residue_147 <= _residue_155), true]) && (p2_0 && !ret2_0 ==> [(forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: Level(_r_2) <= _residue_155_0) && ((forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: Level(_r_2) <= _residue_155_0) && _residue_147_0 <= _residue_155_0), true])
    invariant (p1_0 && !ret1_0 ==> issubtype(typeof(sum), int())) && (p2_0 && !ret2_0 ==> issubtype(typeof(sum_1), int()))
    invariant (p1_0 && !ret1_0 ==> issubtype(typeof(i), int())) && (p2_0 && !ret2_0 ==> issubtype(typeof(i_2), int()))
    invariant p1_0 && !ret1_0 && (p2_0 && !ret2_0) ==> _checkDefined(i, 105) == i_2
    invariant p1_0 && !ret1_0 && (p2_0 && !ret2_0) ==> _checkDefined(sum, 7173491) == sum_1
    invariant (p1_0 && !ret1_0 ==> [true, !idle1 ==> _loop_check_before ==> _loop_termination_flag || (int___eq__(_checkDefined(i, 105), __prim__int___box__(0)) || perm(MustTerminate(_cthread_147)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))]) && (p2_0 && !ret2_0 ==> [true, !idle2 ==> _loop_check_before_5 ==> _loop_termination_flag_5 || (int___eq__(i_2, __prim__int___box__(0)) || perm(MustTerminate_0(_cthread_147_0)) == none && ((forperm _r_3: Ref [MustInvokeBounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBoundedp] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnboundedp] :: false)))))])
    invariant (p1_0 && !ret1_0 ==> [true, !idle1 ==> !_loop_check_before ==> (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]) && (p2_0 && !ret2_0 ==> [true, !idle2 ==> !_loop_check_before_5 ==> (forperm _r_3: Ref [MustInvokeBounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBoundedp] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnboundedp] :: false)))])
    invariant bypass1 ==> tmp1_4 == _loop_measures
    invariant bypass1 ==> tmp1_5 == sum
    invariant bypass1 ==> tmp1_6 == i
    invariant bypass1 ==> tmp1_7 == _loop_check_before
    invariant bypass2 ==> tmp2_4 == _loop_measures_5
    invariant bypass2 ==> tmp2_5 == sum_1
    invariant bypass2 ==> tmp2_6 == i_2
    invariant bypass2 ==> tmp2_7 == _loop_check_before_5 
  {
    p1_1 := p1_0 && !ret1_0 && !int___eq__(_checkDefined(i, 105), __prim__int___box__(0))
    p2_1 := p2_0 && !ret2_0 && !int___eq__(i_2, __prim__int___box__(0))
    idle1 := p1_0 && !ret1_0 && !!int___eq__(_checkDefined(i, 105), __prim__int___box__(0))
    idle2 := p2_0 && !ret2_0 && !!int___eq__(i_2, __prim__int___box__(0))
    if (p1_1 && !ret1_0) {
      _loop_measures := Seq[Measure$]()
      sum := __prim__int___box__(int___add__(int___unbox__(_checkDefined(sum, 7173491)), 1))
      inhale _isDefined(7173491)
      i := __prim__int___box__(int___sub__(int___unbox__(_checkDefined(i, 105)), 1))
      inhale _isDefined(105)
      // We are after loop body._loop_check_before := false
    }
    if (p2_1 && !ret2_0) {
      _loop_measures_5 := Seq[Measure$]()
      sum_1 := __prim__int___box__(int___add__(int___unbox__(sum_1), 1))
      inhale true
      i_2 := __prim__int___box__(int___sub__(int___unbox__(i_2), 1))
      inhale true
      // We are after loop body._loop_check_before_5 := false
    }
    assert (p1_1 && !ret1_0 ==> _loop_termination_flag ==> !!int___eq__(_checkDefined(i, 105), __prim__int___box__(0))) && (p2_1 && !ret2_0 ==> _loop_termination_flag_5 ==> !!int___eq__(i_2, __prim__int___box__(0)))
    inhale !p1_0 || !ret1_0
    inhale !p2_0 || !ret2_0
  }
  if (p1_0 && !ret1_0) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_147)) > none ==> acc(MustTerminate(_cthread_147), perm(MustTerminate(_cthread_147)) - _loop_original_must_terminate)
    _res := null
  }
  if (p2_0 && !ret2_0) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_147_0)) > none ==> acc(MustTerminate_0(_cthread_147_0), perm(MustTerminate_0(_cthread_147_0)) - _loop_original_must_terminate_5)
    _res_1 := null
  }
  // Method call: sif_print
  if (p1_0 && !ret1_0 || p2_0 && !ret2_0) {
    var tmp1_8: Ref
    var tmp2_8: Ref
    var tmp1_9: Seq[Measure$]
    var tmp2_9: Seq[Measure$]
    var tmp1_10: Perm
    var tmp2_10: Perm
    var tmp1_11: Ref
    var tmp2_11: Ref
    var tmp1_12: Perm
    var tmp2_12: Perm
    if (p1_0 && !ret1_0) {
      tmp1_8 := _cthread_147
      tmp1_9 := _method_measures_147
      tmp1_10 := _residue_147
      tmp1_11 := _checkDefined(sum, 7173491)
    }
    if (p2_0 && !ret2_0) {
      tmp2_8 := _cthread_147_0
      tmp2_9 := _method_measures_147_0
      tmp2_10 := _residue_147_0
      tmp2_11 := sum_1
    }
    tmp1_12, tmp2_12 := sif_print(p1_0 && !ret1_0, p2_0 && !ret2_0, tmp1_8, tmp2_8, tmp1_9, tmp2_9, tmp1_10, tmp2_10, tmp1_11, tmp2_11)
    if (p1_0 && !ret1_0) {
      _cwl_147 := tmp1_12
    }
    if (p2_0 && !ret2_0) {
      _cwl_147_0 := tmp2_12
    }
  }
  if (p1_0 && !ret1_0) {
    _res := _checkDefined(sum, 7173491)
    ret1_0 := true
  }
  if (p2_0 && !ret2_0) {
    _res_1 := sum_1
    ret2_0 := true
  }
  assert true
}

method while2(p1_2: Bool, p2_2: Bool, _cthread_148: Ref, _cthread_148_0: Ref, _caller_measures_148: Seq[Measure$], _caller_measures_148_0: Seq[Measure$], _residue_148: Perm, _residue_148_0: Perm) returns (_current_wait_level_148: Perm, _current_wait_level_148_0: Perm)
  requires (p1_2 ==> _cthread_148 != null) && (p2_2 ==> _cthread_148_0 != null)
  requires (p1_2 ==> issubtype(typeof(_cthread_148), Thread_0())) && (p2_2 ==> issubtype(typeof(_cthread_148_0), Thread_0()))
  requires p1_2 == p2_2
  requires (p1_2 ==> [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_11: Ref [MustInvokeBounded(_r_11)] :: false) && ((forperm _r_11: Ref [MustInvokeUnbounded(_r_11)] :: false) && ((forperm _r_11: Ref [_r_11.MustReleaseBounded] :: false) && (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: false))))]) && (p2_2 ==> [true, perm(MustTerminate_0(_cthread_148_0)) == none && ((forperm _r_11: Ref [MustInvokeBounded_0(_r_11)] :: false) && ((forperm _r_11: Ref [MustInvokeUnbounded_0(_r_11)] :: false) && ((forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: false) && (forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: false))))])
  ensures (p1_2 ==> [(forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _current_wait_level_148) && ((forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]) && (p2_2 ==> [(forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: Level(_r_9) <= _current_wait_level_148_0) && ((forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: Level(_r_9) <= _current_wait_level_148_0) && _residue_148_0 <= _current_wait_level_148_0), true])
  ensures (p1_2 ==> [true, (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))]) && (p2_2 ==> [true, (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_2
  var _err: Ref
  var _err_2: Ref
  var x_1: Ref
  var x_1_0: Ref
  var input_low_res_0: Ref
  var input_low_res_0_0: Ref
  var _loop_measures_0: Seq[Measure$]
  var _loop_measures_0_0: Seq[Measure$]
  var _loop_check_before_0: Bool
  var _loop_check_before_0_0: Bool
  var _loop_termination_flag_0: Bool
  var _loop_termination_flag_0_0: Bool
  var _loop_original_must_terminate_0: Perm
  var _loop_original_must_terminate_0_0: Perm
  var _residue_156: Perm
  var _residue_156_0: Perm
  var _cwl_148: Perm
  var _cwl_148_0: Perm
  var _method_measures_148: Seq[Measure$]
  var _method_measures_148_0: Seq[Measure$]
  if (p1_2) {
    _method_measures_148 := Seq[Measure$]()
    _err := null
  }
  if (p2_2) {
    _method_measures_148_0 := Seq[Measure$]()
    _err_2 := null
  }
  // Method call: input_low
  if (p1_2 || p2_2) {
    var tmp1_13: Ref
    var tmp2_13: Ref
    var tmp1_14: Seq[Measure$]
    var tmp2_14: Seq[Measure$]
    var tmp1_15: Perm
    var tmp2_15: Perm
    var tmp1_16: Perm
    var tmp2_16: Perm
    var tmp1_17: Ref
    var tmp2_17: Ref
    if (p1_2) {
      tmp1_13 := _cthread_148
      tmp1_14 := _method_measures_148
      tmp1_15 := _residue_148
    }
    if (p2_2) {
      tmp2_13 := _cthread_148_0
      tmp2_14 := _method_measures_148_0
      tmp2_15 := _residue_148_0
    }
    tmp1_16, tmp2_16, tmp1_17, tmp2_17 := input_low(p1_2, p2_2, tmp1_13, tmp2_13, tmp1_14, tmp2_14, tmp1_15, tmp2_15)
    if (p1_2) {
      _cwl_148 := tmp1_16
      input_low_res_0 := tmp1_17
    }
    if (p2_2) {
      _cwl_148_0 := tmp2_16
      input_low_res_0_0 := tmp2_17
    }
  }
  if (p1_2) {
    x_1 := input_low_res_0
    inhale _isDefined(3235704)
    // Save current MustTerminate amount._loop_original_must_terminate_0 := perm(MustTerminate(_cthread_148))
    // Save loop termination promise._loop_termination_flag_0 := false
    // We are before loop._loop_check_before_0 := true
  }
  if (p2_2) {
    x_1_0 := input_low_res_0_0
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_0_0 := perm(MustTerminate_0(_cthread_148_0))
    // Save loop termination promise._loop_termination_flag_0_0 := false
    // We are before loop._loop_check_before_0_0 := true
  }
  var bypass1_0: Bool
  var bypass2_0: Bool
  var tmp1_18: Seq[Measure$]
  var tmp2_18: Seq[Measure$]
  var tmp1_19: Ref
  var tmp2_19: Ref
  var tmp1_20: Bool
  var tmp2_20: Bool
  var p1_3: Bool
  var p2_3: Bool
  var idle1_0: Bool
  var idle2_0: Bool
  bypass1_0 := !p1_2
  bypass2_0 := !p2_2
  if (bypass1_0) {
    tmp1_18 := _loop_measures_0
    tmp1_19 := x_1
    tmp1_20 := _loop_check_before_0
  }
  if (bypass2_0) {
    tmp2_18 := _loop_measures_0_0
    tmp2_19 := x_1_0
    tmp2_20 := _loop_check_before_0_0
  }
  idle1_0 := false
  idle2_0 := false
  while (p1_2 && !bypass1_0 && !int___eq__(_checkDefined(x_1, 3235704), __prim__int___box__(0)) || p2_2 && !bypass2_0 && !int___eq__(x_1_0, __prim__int___box__(0)))
    invariant (p1_2 ==> [(forperm _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <= _residue_156) && ((forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <= _residue_156) && _residue_148 <= _residue_156), true]) && (p2_2 ==> [(forperm _r_7: Ref [_r_7.MustReleaseBoundedp] :: Level(_r_7) <= _residue_156_0) && ((forperm _r_7: Ref [_r_7.MustReleaseUnboundedp] :: Level(_r_7) <= _residue_156_0) && _residue_148_0 <= _residue_156_0), true])
    invariant (p1_2 ==> issubtype(typeof(x_1), int())) && (p2_2 ==> issubtype(typeof(x_1_0), int()))
    invariant (p1_2 ==> [true, !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (int___eq__(_checkDefined(x_1, 3235704), __prim__int___box__(0)) || perm(MustTerminate(_cthread_148)) == none && ((forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false)))))]) && (p2_2 ==> [true, !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (int___eq__(x_1_0, __prim__int___box__(0)) || perm(MustTerminate_0(_cthread_148_0)) == none && ((forperm _r_8: Ref [MustInvokeBounded_0(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded_0(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: false)))))])
    invariant (p1_2 ==> [true, !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false)))]) && (p2_2 ==> [true, !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_8: Ref [MustInvokeBounded_0(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded_0(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: false)))])
    invariant bypass1_0 ==> tmp1_18 == _loop_measures_0
    invariant bypass1_0 ==> tmp1_19 == x_1
    invariant bypass1_0 ==> tmp1_20 == _loop_check_before_0
    invariant bypass2_0 ==> tmp2_18 == _loop_measures_0_0
    invariant bypass2_0 ==> tmp2_19 == x_1_0
    invariant bypass2_0 ==> tmp2_20 == _loop_check_before_0_0 
  {
    p1_3 := p1_2 && !int___eq__(_checkDefined(x_1, 3235704), __prim__int___box__(0))
    p2_3 := p2_2 && !int___eq__(x_1_0, __prim__int___box__(0))
    idle1_0 := p1_2 && !!int___eq__(_checkDefined(x_1, 3235704), __prim__int___box__(0))
    idle2_0 := p2_2 && !!int___eq__(x_1_0, __prim__int___box__(0))
    if (p1_3) {
      _loop_measures_0 := Seq[Measure$]()
      x_1 := __prim__int___box__(int___sub__(int___unbox__(_checkDefined(x_1, 3235704)), 1))
      inhale _isDefined(3235704)
      // We are after loop body._loop_check_before_0 := false
    }
    if (p2_3) {
      _loop_measures_0_0 := Seq[Measure$]()
      x_1_0 := __prim__int___box__(int___sub__(int___unbox__(x_1_0), 1))
      inhale true
      // We are after loop body._loop_check_before_0_0 := false
    }
    assert (p1_3 ==> _loop_termination_flag_0 ==> !!int___eq__(_checkDefined(x_1, 3235704), __prim__int___box__(0))) && (p2_3 ==> _loop_termination_flag_0_0 ==> !!int___eq__(x_1_0, __prim__int___box__(0)))
    inhale !p1_2 || true
    inhale !p2_2 || true
  }
  if (p1_2) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_148)) > none ==> acc(MustTerminate(_cthread_148), perm(MustTerminate(_cthread_148)) - _loop_original_must_terminate_0)
  }
  if (p2_2) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_148_0)) > none ==> acc(MustTerminate_0(_cthread_148_0), perm(MustTerminate_0(_cthread_148_0)) - _loop_original_must_terminate_0_0)
  }
  // Method call: sif_print
  if (p1_2 || p2_2) {
    var tmp1_21: Ref
    var tmp2_21: Ref
    var tmp1_22: Seq[Measure$]
    var tmp2_22: Seq[Measure$]
    var tmp1_23: Perm
    var tmp2_23: Perm
    var tmp1_24: Ref
    var tmp2_24: Ref
    var tmp1_25: Perm
    var tmp2_25: Perm
    if (p1_2) {
      tmp1_21 := _cthread_148
      tmp1_22 := _method_measures_148
      tmp1_23 := _residue_148
      tmp1_24 := __prim__int___box__(1)
    }
    if (p2_2) {
      tmp2_21 := _cthread_148_0
      tmp2_22 := _method_measures_148_0
      tmp2_23 := _residue_148_0
      tmp2_24 := __prim__int___box__(1)
    }
    tmp1_25, tmp2_25 := sif_print(p1_2, p2_2, tmp1_21, tmp2_21, tmp1_22, tmp2_22, tmp1_23, tmp2_23, tmp1_24, tmp2_24)
    if (p1_2) {
      _cwl_148 := tmp1_25
    }
    if (p2_2) {
      _cwl_148_0 := tmp2_25
    }
  }
  assert true
}

method while3(p1_4: Bool, p2_4: Bool, _cthread_149: Ref, _cthread_149_0: Ref, _caller_measures_149: Seq[Measure$], _caller_measures_149_0: Seq[Measure$], _residue_149: Perm, _residue_149_0: Perm) returns (_current_wait_level_149: Perm, _current_wait_level_149_0: Perm)
  requires (p1_4 ==> _cthread_149 != null) && (p2_4 ==> _cthread_149_0 != null)
  requires (p1_4 ==> issubtype(typeof(_cthread_149), Thread_0())) && (p2_4 ==> issubtype(typeof(_cthread_149_0), Thread_0()))
  requires (p1_4 ==> [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]) && (p2_4 ==> [true, perm(MustTerminate_0(_cthread_149_0)) == none && ((forperm _r_16: Ref [MustInvokeBounded_0(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded_0(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBoundedp] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnboundedp] :: false))))])
  ensures (p1_4 ==> [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_149) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]) && (p2_4 ==> [(forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _current_wait_level_149_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _current_wait_level_149_0) && _residue_149_0 <= _current_wait_level_149_0), true])
  ensures (p1_4 ==> [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]) && (p2_4 ==> [true, (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_4
  var _err: Ref
  var _err_3: Ref
  var x_2: Ref
  var x_2_0: Ref
  var input_high_res: Ref
  var input_high_res_1: Ref
  var _loop_measures_1: Seq[Measure$]
  var _loop_measures_1_0: Seq[Measure$]
  var _loop_check_before_1: Bool
  var _loop_check_before_1_0: Bool
  var _loop_termination_flag_1: Bool
  var _loop_termination_flag_1_0: Bool
  var _loop_original_must_terminate_1: Perm
  var _loop_original_must_terminate_1_0: Perm
  var _residue_157: Perm
  var _residue_157_0: Perm
  var _cwl_149: Perm
  var _cwl_149_0: Perm
  var _method_measures_149: Seq[Measure$]
  var _method_measures_149_0: Seq[Measure$]
  if (p1_4) {
    _method_measures_149 := Seq[Measure$]()
    _err := null
  }
  if (p2_4) {
    _method_measures_149_0 := Seq[Measure$]()
    _err_3 := null
  }
  // Method call: input_high
  if (p1_4 || p2_4) {
    var tmp1_26: Ref
    var tmp2_26: Ref
    var tmp1_27: Seq[Measure$]
    var tmp2_27: Seq[Measure$]
    var tmp1_28: Perm
    var tmp2_28: Perm
    var tmp1_29: Perm
    var tmp2_29: Perm
    var tmp1_30: Ref
    var tmp2_30: Ref
    if (p1_4) {
      tmp1_26 := _cthread_149
      tmp1_27 := _method_measures_149
      tmp1_28 := _residue_149
    }
    if (p2_4) {
      tmp2_26 := _cthread_149_0
      tmp2_27 := _method_measures_149_0
      tmp2_28 := _residue_149_0
    }
    tmp1_29, tmp2_29, tmp1_30, tmp2_30 := input_high(p1_4, p2_4, tmp1_26, tmp2_26, tmp1_27, tmp2_27, tmp1_28, tmp2_28)
    if (p1_4) {
      _cwl_149 := tmp1_29
      input_high_res := tmp1_30
    }
    if (p2_4) {
      _cwl_149_0 := tmp2_29
      input_high_res_1 := tmp2_30
    }
  }
  if (p1_4) {
    x_2 := input_high_res
    inhale _isDefined(3301240)
    // Save current MustTerminate amount._loop_original_must_terminate_1 := perm(MustTerminate(_cthread_149))
    // Save loop termination promise._loop_termination_flag_1 := false
    // We are before loop._loop_check_before_1 := true
  }
  if (p2_4) {
    x_2_0 := input_high_res_1
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_1_0 := perm(MustTerminate_0(_cthread_149_0))
    // Save loop termination promise._loop_termination_flag_1_0 := false
    // We are before loop._loop_check_before_1_0 := true
  }
  var bypass1_1: Bool
  var bypass2_1: Bool
  var tmp1_31: Seq[Measure$]
  var tmp2_31: Seq[Measure$]
  var tmp1_32: Ref
  var tmp2_32: Ref
  var tmp1_33: Bool
  var tmp2_33: Bool
  var p1_5: Bool
  var p2_5: Bool
  var idle1_1: Bool
  var idle2_1: Bool
  bypass1_1 := !p1_4
  bypass2_1 := !p2_4
  if (bypass1_1) {
    tmp1_31 := _loop_measures_1
    tmp1_32 := x_2
    tmp1_33 := _loop_check_before_1
  }
  if (bypass2_1) {
    tmp2_31 := _loop_measures_1_0
    tmp2_32 := x_2_0
    tmp2_33 := _loop_check_before_1_0
  }
  idle1_1 := false
  idle2_1 := false
  while (p1_4 && !bypass1_1 && !int___eq__(_checkDefined(x_2, 3301240), __prim__int___box__(0)) || p2_4 && !bypass2_1 && !int___eq__(x_2_0, __prim__int___box__(0)))
    invariant (p1_4 ==> [(forperm _r_12: Ref [_r_12.MustReleaseBounded] :: Level(_r_12) <= _residue_157) && ((forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: Level(_r_12) <= _residue_157) && _residue_149 <= _residue_157), true]) && (p2_4 ==> [(forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: Level(_r_12) <= _residue_157_0) && ((forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: Level(_r_12) <= _residue_157_0) && _residue_149_0 <= _residue_157_0), true])
    invariant (p1_4 ==> issubtype(typeof(x_2), int())) && (p2_4 ==> issubtype(typeof(x_2_0), int()))
    invariant (p1_4 ==> [true, !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || (int___eq__(_checkDefined(x_2, 3301240), __prim__int___box__(0)) || perm(MustTerminate(_cthread_149)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)))))]) && (p2_4 ==> [true, !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || (int___eq__(x_2_0, __prim__int___box__(0)) || perm(MustTerminate_0(_cthread_149_0)) == none && ((forperm _r_13: Ref [MustInvokeBounded_0(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded_0(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBoundedp] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnboundedp] :: false)))))])
    invariant (p1_4 ==> [true, !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)))]) && (p2_4 ==> [true, !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_13: Ref [MustInvokeBounded_0(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded_0(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBoundedp] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnboundedp] :: false)))])
    invariant bypass1_1 ==> tmp1_31 == _loop_measures_1
    invariant bypass1_1 ==> tmp1_32 == x_2
    invariant bypass1_1 ==> tmp1_33 == _loop_check_before_1
    invariant bypass2_1 ==> tmp2_31 == _loop_measures_1_0
    invariant bypass2_1 ==> tmp2_32 == x_2_0
    invariant bypass2_1 ==> tmp2_33 == _loop_check_before_1_0 
  {
    p1_5 := p1_4 && !int___eq__(_checkDefined(x_2, 3301240), __prim__int___box__(0))
    p2_5 := p2_4 && !int___eq__(x_2_0, __prim__int___box__(0))
    idle1_1 := p1_4 && !!int___eq__(_checkDefined(x_2, 3301240), __prim__int___box__(0))
    idle2_1 := p2_4 && !!int___eq__(x_2_0, __prim__int___box__(0))
    if (p1_5) {
      _loop_measures_1 := Seq[Measure$]()
      x_2 := __prim__int___box__(int___sub__(int___unbox__(_checkDefined(x_2, 3301240)), 1))
      inhale _isDefined(3301240)
      // We are after loop body._loop_check_before_1 := false
    }
    if (p2_5) {
      _loop_measures_1_0 := Seq[Measure$]()
      x_2_0 := __prim__int___box__(int___sub__(int___unbox__(x_2_0), 1))
      inhale true
      // We are after loop body._loop_check_before_1_0 := false
    }
    assert (p1_5 ==> _loop_termination_flag_1 ==> !!int___eq__(_checkDefined(x_2, 3301240), __prim__int___box__(0))) && (p2_5 ==> _loop_termination_flag_1_0 ==> !!int___eq__(x_2_0, __prim__int___box__(0)))
    inhale !p1_4 || true
    inhale !p2_4 || true
  }
  if (p1_4) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_149)) > none ==> acc(MustTerminate(_cthread_149), perm(MustTerminate(_cthread_149)) - _loop_original_must_terminate_1)
  }
  if (p2_4) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_149_0)) > none ==> acc(MustTerminate_0(_cthread_149_0), perm(MustTerminate_0(_cthread_149_0)) - _loop_original_must_terminate_1_0)
  }
  // Method call: sif_print
  if (p1_4 || p2_4) {
    var tmp1_34: Ref
    var tmp2_34: Ref
    var tmp1_35: Seq[Measure$]
    var tmp2_35: Seq[Measure$]
    var tmp1_36: Perm
    var tmp2_36: Perm
    var tmp1_37: Ref
    var tmp2_37: Ref
    var tmp1_38: Perm
    var tmp2_38: Perm
    if (p1_4) {
      tmp1_34 := _cthread_149
      tmp1_35 := _method_measures_149
      tmp1_36 := _residue_149
      tmp1_37 := __prim__int___box__(1)
    }
    if (p2_4) {
      tmp2_34 := _cthread_149_0
      tmp2_35 := _method_measures_149_0
      tmp2_36 := _residue_149_0
      tmp2_37 := __prim__int___box__(1)
    }
    tmp1_38, tmp2_38 := sif_print(p1_4, p2_4, tmp1_34, tmp2_34, tmp1_35, tmp2_35, tmp1_36, tmp2_36, tmp1_37, tmp2_37)
    if (p1_4) {
      _cwl_149 := tmp1_38
    }
    if (p2_4) {
      _cwl_149_0 := tmp2_38
    }
  }
  assert true
}

method while4(p1_6: Bool, p2_6: Bool, _cthread_150: Ref, _cthread_150_0: Ref, _caller_measures_150: Seq[Measure$], _caller_measures_150_0: Seq[Measure$], _residue_150: Perm, _residue_150_0: Perm) returns (_current_wait_level_150: Perm, _current_wait_level_150_0: Perm, _res: Ref, _res_2: Ref)
  requires (p1_6 ==> _cthread_150 != null) && (p2_6 ==> _cthread_150_0 != null)
  requires (p1_6 ==> issubtype(typeof(_cthread_150), Thread_0())) && (p2_6 ==> issubtype(typeof(_cthread_150_0), Thread_0()))
  requires p1_6 == p2_6
  requires (p1_6 ==> [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))]) && (p2_6 ==> [true, perm(MustTerminate_0(_cthread_150_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))])
  ensures (p1_6 ==> [(forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _current_wait_level_150) && ((forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]) && (p2_6 ==> [(forperm _r_19: Ref [_r_19.MustReleaseBoundedp] :: Level(_r_19) <= _current_wait_level_150_0) && ((forperm _r_19: Ref [_r_19.MustReleaseUnboundedp] :: Level(_r_19) <= _current_wait_level_150_0) && _residue_150_0 <= _current_wait_level_150_0), true])
  ensures (p1_6 ==> issubtype(typeof(_res), int())) && (p2_6 ==> issubtype(typeof(_res_2), int()))
  ensures (p1_6 ==> int___eq__(_res, __prim__int___box__(10))) && (p2_6 ==> int___eq__(_res_2, __prim__int___box__(10)))
  ensures (p1_6 ==> [true, (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))]) && (p2_6 ==> [true, (forperm _r_20: Ref [MustInvokeBounded_0(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded_0(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBoundedp] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnboundedp] :: false)))])
{
  var ret1_1: Bool
  var ret2_1: Bool
  inhale p1_6
  ret1_1 := false
  ret2_1 := false
  var _err: Ref
  var _err_4: Ref
  var i_0: Ref
  var i_0_0: Ref
  var sum_0: Ref
  var sum_0_0: Ref
  var _loop_measures_2: Seq[Measure$]
  var _loop_measures_2_0: Seq[Measure$]
  var _loop_check_before_2: Bool
  var _loop_check_before_2_0: Bool
  var _loop_termination_flag_2: Bool
  var _loop_termination_flag_2_0: Bool
  var _loop_original_must_terminate_2: Perm
  var _loop_original_must_terminate_2_0: Perm
  var _residue_158: Perm
  var _residue_158_0: Perm
  var _cwl_150: Perm
  var _cwl_150_0: Perm
  var _method_measures_150: Seq[Measure$]
  var _method_measures_150_0: Seq[Measure$]
  if (p1_6 && !ret1_1) {
    _method_measures_150 := Seq[Measure$]()
    _res := null
    _err := null
    i_0 := __prim__int___box__(15)
    inhale _isDefined(3170153)
    sum_0 := __prim__int___box__(0)
    inhale _isDefined(3438140875980573325)
    // Save current MustTerminate amount._loop_original_must_terminate_2 := perm(MustTerminate(_cthread_150))
    // Save loop termination promise._loop_termination_flag_2 := false
    // We are before loop._loop_check_before_2 := true
  }
  if (p2_6 && !ret2_1) {
    _method_measures_150_0 := Seq[Measure$]()
    _res_2 := null
    _err_4 := null
    i_0_0 := __prim__int___box__(15)
    inhale true
    sum_0_0 := __prim__int___box__(0)
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_2_0 := perm(MustTerminate_0(_cthread_150_0))
    // Save loop termination promise._loop_termination_flag_2_0 := false
    // We are before loop._loop_check_before_2_0 := true
  }
  var bypass1_2: Bool
  var bypass2_2: Bool
  var tmp1_39: Seq[Measure$]
  var tmp2_39: Seq[Measure$]
  var tmp1_40: Ref
  var tmp2_40: Ref
  var tmp1_41: Ref
  var tmp2_41: Ref
  var tmp1_42: Bool
  var tmp2_42: Bool
  var p1_7: Bool
  var p2_7: Bool
  var idle1_2: Bool
  var idle2_2: Bool
  bypass1_2 := !(p1_6 && !ret1_1)
  bypass2_2 := !(p2_6 && !ret2_1)
  if (bypass1_2) {
    tmp1_39 := _loop_measures_2
    tmp1_40 := sum_0
    tmp1_41 := i_0
    tmp1_42 := _loop_check_before_2
  }
  if (bypass2_2) {
    tmp2_39 := _loop_measures_2_0
    tmp2_40 := sum_0_0
    tmp2_41 := i_0_0
    tmp2_42 := _loop_check_before_2_0
  }
  idle1_2 := false
  idle2_2 := false
  while (p1_6 && !ret1_1 && !bypass1_2 && bool___unbox__(m1(_checkDefined(i_0, 3170153))) || p2_6 && !ret2_1 && !bypass2_2 && bool___unbox__(m1(i_0_0)))
    invariant (p1_6 && !ret1_1 ==> [(forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _residue_158) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _residue_158) && _residue_150 <= _residue_158), true]) && (p2_6 && !ret2_1 ==> [(forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: Level(_r_17) <= _residue_158_0) && ((forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: Level(_r_17) <= _residue_158_0) && _residue_150_0 <= _residue_158_0), true])
    invariant (p1_6 && !ret1_1 ==> issubtype(typeof(sum_0), int())) && (p2_6 && !ret2_1 ==> issubtype(typeof(sum_0_0), int()))
    invariant (p1_6 && !ret1_1 ==> issubtype(typeof(i_0), int())) && (p2_6 && !ret2_1 ==> issubtype(typeof(i_0_0), int()))
    invariant (p1_6 && !ret1_1 ==> int___eq__(_checkDefined(sum_0, 3438140875980573325), __prim__int___box__(int___sub__(15, int___unbox__(_checkDefined(i_0, 3170153)))))) && (p2_6 && !ret2_1 ==> int___eq__(sum_0_0, __prim__int___box__(int___sub__(15, int___unbox__(i_0_0)))))
    invariant p1_6 && !ret1_1 && (p2_6 && !ret2_1) ==> _checkDefined(i_0, 3170153) == i_0_0
    invariant p1_6 && !ret1_1 && (p2_6 && !ret2_1) ==> m1(_checkDefined(i_0, 3170153)) == m1(i_0_0)
    invariant p1_6 && !ret1_1 && (p2_6 && !ret2_1) ==> _checkDefined(sum_0, 3438140875980573325) == sum_0_0
    invariant (p1_6 && !ret1_1 ==> [true, !idle1_2 ==> _loop_check_before_2 ==> _loop_termination_flag_2 || (!bool___unbox__(m1(_checkDefined(i_0, 3170153))) || perm(MustTerminate(_cthread_150)) == none && ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))))]) && (p2_6 && !ret2_1 ==> [true, !idle2_2 ==> _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || (!bool___unbox__(m1(i_0_0)) || perm(MustTerminate_0(_cthread_150_0)) == none && ((forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)))))])
    invariant (p1_6 && !ret1_1 ==> [true, !idle1_2 ==> !_loop_check_before_2 ==> (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))]) && (p2_6 && !ret2_1 ==> [true, !idle2_2 ==> !_loop_check_before_2_0 ==> (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)))])
    invariant bypass1_2 ==> tmp1_39 == _loop_measures_2
    invariant bypass1_2 ==> tmp1_40 == sum_0
    invariant bypass1_2 ==> tmp1_41 == i_0
    invariant bypass1_2 ==> tmp1_42 == _loop_check_before_2
    invariant bypass2_2 ==> tmp2_39 == _loop_measures_2_0
    invariant bypass2_2 ==> tmp2_40 == sum_0_0
    invariant bypass2_2 ==> tmp2_41 == i_0_0
    invariant bypass2_2 ==> tmp2_42 == _loop_check_before_2_0 
  {
    p1_7 := p1_6 && !ret1_1 && bool___unbox__(m1(_checkDefined(i_0, 3170153)))
    p2_7 := p2_6 && !ret2_1 && bool___unbox__(m1(i_0_0))
    idle1_2 := p1_6 && !ret1_1 && !bool___unbox__(m1(_checkDefined(i_0, 3170153)))
    idle2_2 := p2_6 && !ret2_1 && !bool___unbox__(m1(i_0_0))
    if (p1_7 && !ret1_1) {
      _loop_measures_2 := Seq[Measure$]()
      sum_0 := __prim__int___box__(int___add__(int___unbox__(_checkDefined(sum_0, 3438140875980573325)), 1))
      inhale _isDefined(3438140875980573325)
      i_0 := __prim__int___box__(int___sub__(int___unbox__(_checkDefined(i_0, 3170153)), 1))
      inhale _isDefined(3170153)
      // We are after loop body._loop_check_before_2 := false
    }
    if (p2_7 && !ret2_1) {
      _loop_measures_2_0 := Seq[Measure$]()
      sum_0_0 := __prim__int___box__(int___add__(int___unbox__(sum_0_0), 1))
      inhale true
      i_0_0 := __prim__int___box__(int___sub__(int___unbox__(i_0_0), 1))
      inhale true
      // We are after loop body._loop_check_before_2_0 := false
    }
    assert (p1_7 && !ret1_1 ==> _loop_termination_flag_2 ==> !bool___unbox__(m1(_checkDefined(i_0, 3170153)))) && (p2_7 && !ret2_1 ==> _loop_termination_flag_2_0 ==> !bool___unbox__(m1(i_0_0)))
    inhale !p1_6 || !ret1_1
    inhale !p2_6 || !ret2_1
  }
  if (p1_6 && !ret1_1) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_150)) > none ==> acc(MustTerminate(_cthread_150), perm(MustTerminate(_cthread_150)) - _loop_original_must_terminate_2)
    _res := null
  }
  if (p2_6 && !ret2_1) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_150_0)) > none ==> acc(MustTerminate_0(_cthread_150_0), perm(MustTerminate_0(_cthread_150_0)) - _loop_original_must_terminate_2_0)
    _res_2 := null
  }
  // Method call: sif_print
  if (p1_6 && !ret1_1 || p2_6 && !ret2_1) {
    var tmp1_43: Ref
    var tmp2_43: Ref
    var tmp1_44: Seq[Measure$]
    var tmp2_44: Seq[Measure$]
    var tmp1_45: Perm
    var tmp2_45: Perm
    var tmp1_46: Ref
    var tmp2_46: Ref
    var tmp1_47: Perm
    var tmp2_47: Perm
    if (p1_6 && !ret1_1) {
      tmp1_43 := _cthread_150
      tmp1_44 := _method_measures_150
      tmp1_45 := _residue_150
      tmp1_46 := _checkDefined(sum_0, 3438140875980573325)
    }
    if (p2_6 && !ret2_1) {
      tmp2_43 := _cthread_150_0
      tmp2_44 := _method_measures_150_0
      tmp2_45 := _residue_150_0
      tmp2_46 := sum_0_0
    }
    tmp1_47, tmp2_47 := sif_print(p1_6 && !ret1_1, p2_6 && !ret2_1, tmp1_43, tmp2_43, tmp1_44, tmp2_44, tmp1_45, tmp2_45, tmp1_46, tmp2_46)
    if (p1_6 && !ret1_1) {
      _cwl_150 := tmp1_47
    }
    if (p2_6 && !ret2_1) {
      _cwl_150_0 := tmp2_47
    }
  }
  if (p1_6 && !ret1_1) {
    _res := _checkDefined(sum_0, 3438140875980573325)
    ret1_1 := true
  }
  if (p2_6 && !ret2_1) {
    _res_2 := sum_0_0
    ret2_1 := true
  }
  assert true
}

method while5(p1_8: Bool, p2_8: Bool, _cthread_151: Ref, _cthread_151_0: Ref, _caller_measures_151: Seq[Measure$], _caller_measures_151_0: Seq[Measure$], _residue_151: Perm, _residue_151_0: Perm) returns (_current_wait_level_151: Perm, _current_wait_level_151_0: Perm)
  requires (p1_8 ==> _cthread_151 != null) && (p2_8 ==> _cthread_151_0 != null)
  requires (p1_8 ==> issubtype(typeof(_cthread_151), Thread_0())) && (p2_8 ==> issubtype(typeof(_cthread_151_0), Thread_0()))
  requires (p1_8 ==> [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false))))]) && (p2_8 ==> [true, perm(MustTerminate_0(_cthread_151_0)) == none && ((forperm _r_28: Ref [MustInvokeBounded_0(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded_0(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBoundedp] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnboundedp] :: false))))])
  ensures (p1_8 ==> [(forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_151) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]) && (p2_8 ==> [(forperm _r_26: Ref [_r_26.MustReleaseBoundedp] :: Level(_r_26) <= _current_wait_level_151_0) && ((forperm _r_26: Ref [_r_26.MustReleaseUnboundedp] :: Level(_r_26) <= _current_wait_level_151_0) && _residue_151_0 <= _current_wait_level_151_0), true])
  ensures (p1_8 ==> [true, (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))]) && (p2_8 ==> [true, (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_8
  var _err: Ref
  var _err_5: Ref
  var h: Ref
  var h_0: Ref
  var l: Ref
  var l_0: Ref
  var i_1: Ref
  var i_1_0: Ref
  var input_high_res_0: Ref
  var input_high_res_0_0: Ref
  var input_low_res_1: Ref
  var input_low_res_1_0: Ref
  var _loop_measures_3: Seq[Measure$]
  var _loop_measures_3_0: Seq[Measure$]
  var _loop_check_before_3: Bool
  var _loop_check_before_3_0: Bool
  var _loop_termination_flag_3: Bool
  var _loop_termination_flag_3_0: Bool
  var _loop_original_must_terminate_3: Perm
  var _loop_original_must_terminate_3_0: Perm
  var _residue_159: Perm
  var _residue_159_0: Perm
  var _loop_measures_4: Seq[Measure$]
  var _loop_measures_4_0: Seq[Measure$]
  var _loop_check_before_4: Bool
  var _loop_check_before_4_0: Bool
  var _loop_termination_flag_4: Bool
  var _loop_termination_flag_4_0: Bool
  var _loop_original_must_terminate_4: Perm
  var _loop_original_must_terminate_4_0: Perm
  var _residue_160: Perm
  var _residue_160_0: Perm
  var _cwl_151: Perm
  var _cwl_151_0: Perm
  var _method_measures_151: Seq[Measure$]
  var _method_measures_151_0: Seq[Measure$]
  if (p1_8) {
    _method_measures_151 := Seq[Measure$]()
    _err := null
  }
  if (p2_8) {
    _method_measures_151_0 := Seq[Measure$]()
    _err_5 := null
  }
  // Method call: input_high
  if (p1_8 || p2_8) {
    var tmp1_48: Ref
    var tmp2_48: Ref
    var tmp1_49: Seq[Measure$]
    var tmp2_49: Seq[Measure$]
    var tmp1_50: Perm
    var tmp2_50: Perm
    var tmp1_51: Perm
    var tmp2_51: Perm
    var tmp1_52: Ref
    var tmp2_52: Ref
    if (p1_8) {
      tmp1_48 := _cthread_151
      tmp1_49 := _method_measures_151
      tmp1_50 := _residue_151
    }
    if (p2_8) {
      tmp2_48 := _cthread_151_0
      tmp2_49 := _method_measures_151_0
      tmp2_50 := _residue_151_0
    }
    tmp1_51, tmp2_51, tmp1_52, tmp2_52 := input_high(p1_8, p2_8, tmp1_48, tmp2_48, tmp1_49, tmp2_49, tmp1_50, tmp2_50)
    if (p1_8) {
      _cwl_151 := tmp1_51
      input_high_res_0 := tmp1_52
    }
    if (p2_8) {
      _cwl_151_0 := tmp2_51
      input_high_res_0_0 := tmp2_52
    }
  }
  if (p1_8) {
    h := input_high_res_0
    inhale _isDefined(104)
  }
  if (p2_8) {
    h_0 := input_high_res_0_0
    inhale true
  }
  // Method call: input_low
  if (p1_8 || p2_8) {
    var tmp1_53: Ref
    var tmp2_53: Ref
    var tmp1_54: Seq[Measure$]
    var tmp2_54: Seq[Measure$]
    var tmp1_55: Perm
    var tmp2_55: Perm
    var tmp1_56: Perm
    var tmp2_56: Perm
    var tmp1_57: Ref
    var tmp2_57: Ref
    if (p1_8) {
      tmp1_53 := _cthread_151
      tmp1_54 := _method_measures_151
      tmp1_55 := _residue_151
    }
    if (p2_8) {
      tmp2_53 := _cthread_151_0
      tmp2_54 := _method_measures_151_0
      tmp2_55 := _residue_151_0
    }
    tmp1_56, tmp2_56, tmp1_57, tmp2_57 := input_low(p1_8, p2_8, tmp1_53, tmp2_53, tmp1_54, tmp2_54, tmp1_55, tmp2_55)
    if (p1_8) {
      _cwl_151 := tmp1_56
      input_low_res_1 := tmp1_57
    }
    if (p2_8) {
      _cwl_151_0 := tmp2_56
      input_low_res_1_0 := tmp2_57
    }
  }
  if (p1_8) {
    l := input_low_res_1
    inhale _isDefined(108)
    i_1 := __prim__int___box__(0)
    inhale _isDefined(3235689)
    // Save current MustTerminate amount._loop_original_must_terminate_3 := perm(MustTerminate(_cthread_151))
    // Save loop termination promise._loop_termination_flag_3 := false
    // We are before loop._loop_check_before_3 := true
  }
  if (p2_8) {
    l_0 := input_low_res_1_0
    inhale true
    i_1_0 := __prim__int___box__(0)
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_3_0 := perm(MustTerminate_0(_cthread_151_0))
    // Save loop termination promise._loop_termination_flag_3_0 := false
    // We are before loop._loop_check_before_3_0 := true
  }
  var bypass1_3: Bool
  var bypass2_3: Bool
  var tmp1_58: Seq[Measure$]
  var tmp2_58: Seq[Measure$]
  var tmp1_59: Perm
  var tmp2_59: Perm
  var tmp1_60: Bool
  var tmp2_60: Bool
  var tmp1_61: Bool
  var tmp2_61: Bool
  var tmp1_62: Seq[Measure$]
  var tmp2_62: Seq[Measure$]
  var tmp1_63: Ref
  var tmp2_63: Ref
  var tmp1_64: Ref
  var tmp2_64: Ref
  var tmp1_65: Ref
  var tmp2_65: Ref
  var tmp1_66: Bool
  var tmp2_66: Bool
  var p1_9: Bool
  var p2_9: Bool
  var idle1_3: Bool
  var idle2_3: Bool
  bypass1_3 := !p1_8
  bypass2_3 := !p2_8
  if (bypass1_3) {
    tmp1_58 := _loop_measures_3
    tmp1_59 := _loop_original_must_terminate_4
    tmp1_60 := _loop_termination_flag_4
    tmp1_61 := _loop_check_before_4
    tmp1_62 := _loop_measures_4
    tmp1_63 := i_1
    tmp1_64 := h
    tmp1_65 := l
    tmp1_66 := _loop_check_before_3
  }
  if (bypass2_3) {
    tmp2_58 := _loop_measures_3_0
    tmp2_59 := _loop_original_must_terminate_4_0
    tmp2_60 := _loop_termination_flag_4_0
    tmp2_61 := _loop_check_before_4_0
    tmp2_62 := _loop_measures_4_0
    tmp2_63 := i_1_0
    tmp2_64 := h_0
    tmp2_65 := l_0
    tmp2_66 := _loop_check_before_3_0
  }
  idle1_3 := false
  idle2_3 := false
  while (p1_8 && !bypass1_3 && !int___eq__(_checkDefined(l, 108), __prim__int___box__(0)) || p2_8 && !bypass2_3 && !int___eq__(l_0, __prim__int___box__(0)))
    invariant (p1_8 ==> [(forperm _r_24: Ref [_r_24.MustReleaseBounded] :: Level(_r_24) <= _residue_159) && ((forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: Level(_r_24) <= _residue_159) && _residue_151 <= _residue_159), true]) && (p2_8 ==> [(forperm _r_24: Ref [_r_24.MustReleaseBoundedp] :: Level(_r_24) <= _residue_159_0) && ((forperm _r_24: Ref [_r_24.MustReleaseUnboundedp] :: Level(_r_24) <= _residue_159_0) && _residue_151_0 <= _residue_159_0), true])
    invariant (p1_8 ==> issubtype(typeof(i_1), int())) && (p2_8 ==> issubtype(typeof(i_1_0), int()))
    invariant (p1_8 ==> issubtype(typeof(h), int())) && (p2_8 ==> issubtype(typeof(h_0), int()))
    invariant (p1_8 ==> issubtype(typeof(l), int())) && (p2_8 ==> issubtype(typeof(l_0), int()))
    invariant (p1_8 ==> [true, !idle1_3 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || (int___eq__(_checkDefined(l, 108), __prim__int___box__(0)) || perm(MustTerminate(_cthread_151)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false)))))]) && (p2_8 ==> [true, !idle2_3 ==> _loop_check_before_3_0 ==> _loop_termination_flag_3_0 || (int___eq__(l_0, __prim__int___box__(0)) || perm(MustTerminate_0(_cthread_151_0)) == none && ((forperm _r_25: Ref [MustInvokeBounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBoundedp] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnboundedp] :: false)))))])
    invariant (p1_8 ==> [true, !idle1_3 ==> !_loop_check_before_3 ==> (forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false)))]) && (p2_8 ==> [true, !idle2_3 ==> !_loop_check_before_3_0 ==> (forperm _r_25: Ref [MustInvokeBounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBoundedp] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnboundedp] :: false)))])
    invariant bypass1_3 ==> tmp1_65 == l
    invariant bypass1_3 ==> tmp1_66 == _loop_check_before_3
    invariant bypass1_3 ==> tmp1_60 == _loop_termination_flag_4
    invariant bypass1_3 ==> tmp1_64 == h
    invariant bypass1_3 ==> tmp1_62 == _loop_measures_4
    invariant bypass1_3 ==> tmp1_59 == _loop_original_must_terminate_4
    invariant bypass1_3 ==> tmp1_63 == i_1
    invariant bypass1_3 ==> tmp1_58 == _loop_measures_3
    invariant bypass1_3 ==> tmp1_61 == _loop_check_before_4
    invariant bypass2_3 ==> tmp2_62 == _loop_measures_4_0
    invariant bypass2_3 ==> tmp2_66 == _loop_check_before_3_0
    invariant bypass2_3 ==> tmp2_58 == _loop_measures_3_0
    invariant bypass2_3 ==> tmp2_64 == h_0
    invariant bypass2_3 ==> tmp2_65 == l_0
    invariant bypass2_3 ==> tmp2_63 == i_1_0
    invariant bypass2_3 ==> tmp2_61 == _loop_check_before_4_0
    invariant bypass2_3 ==> tmp2_59 == _loop_original_must_terminate_4_0
    invariant bypass2_3 ==> tmp2_60 == _loop_termination_flag_4_0 
  {
    p1_9 := p1_8 && !int___eq__(_checkDefined(l, 108), __prim__int___box__(0))
    p2_9 := p2_8 && !int___eq__(l_0, __prim__int___box__(0))
    idle1_3 := p1_8 && !!int___eq__(_checkDefined(l, 108), __prim__int___box__(0))
    idle2_3 := p2_8 && !!int___eq__(l_0, __prim__int___box__(0))
    if (p1_9) {
      _loop_measures_3 := Seq[Measure$]()
      // Save current MustTerminate amount._loop_original_must_terminate_4 := perm(MustTerminate(_cthread_151))
      // Save loop termination promise._loop_termination_flag_4 := false
      // We are before loop._loop_check_before_4 := true
    }
    if (p2_9) {
      _loop_measures_3_0 := Seq[Measure$]()
      // Save current MustTerminate amount._loop_original_must_terminate_4_0 := perm(MustTerminate_0(_cthread_151_0))
      // Save loop termination promise._loop_termination_flag_4_0 := false
      // We are before loop._loop_check_before_4_0 := true
    }
    var bypass1_4: Bool
    var bypass2_4: Bool
    var tmp1_67: Seq[Measure$]
    var tmp2_67: Seq[Measure$]
    var tmp1_68: Ref
    var tmp2_68: Ref
    var tmp1_69: Ref
    var tmp2_69: Ref
    var tmp1_70: Bool
    var tmp2_70: Bool
    var p1_10: Bool
    var p2_10: Bool
    var idle1_4: Bool
    var idle2_4: Bool
    bypass1_4 := !p1_9
    bypass2_4 := !p2_9
    if (bypass1_4) {
      tmp1_67 := _loop_measures_4
      tmp1_68 := i_1
      tmp1_69 := h
      tmp1_70 := _loop_check_before_4
    }
    if (bypass2_4) {
      tmp2_67 := _loop_measures_4_0
      tmp2_68 := i_1_0
      tmp2_69 := h_0
      tmp2_70 := _loop_check_before_4_0
    }
    idle1_4 := false
    idle2_4 := false
    while (p1_9 && !bypass1_4 && !int___eq__(_checkDefined(h, 104), __prim__int___box__(0)) || p2_9 && !bypass2_4 && !int___eq__(h_0, __prim__int___box__(0)))
      invariant (p1_9 ==> [(forperm _r_22: Ref [_r_22.MustReleaseBounded] :: Level(_r_22) <= _residue_160) && ((forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: Level(_r_22) <= _residue_160) && _residue_159 <= _residue_160), true]) && (p2_9 ==> [(forperm _r_22: Ref [_r_22.MustReleaseBoundedp] :: Level(_r_22) <= _residue_160_0) && ((forperm _r_22: Ref [_r_22.MustReleaseUnboundedp] :: Level(_r_22) <= _residue_160_0) && _residue_159_0 <= _residue_160_0), true])
      invariant (p1_9 ==> issubtype(typeof(i_1), int())) && (p2_9 ==> issubtype(typeof(i_1_0), int()))
      invariant (p1_9 ==> issubtype(typeof(h), int())) && (p2_9 ==> issubtype(typeof(h_0), int()))
      invariant (p1_9 ==> [true, !idle1_4 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || (int___eq__(_checkDefined(h, 104), __prim__int___box__(0)) || perm(MustTerminate(_cthread_151)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))]) && (p2_9 ==> [true, !idle2_4 ==> _loop_check_before_4_0 ==> _loop_termination_flag_4_0 || (int___eq__(h_0, __prim__int___box__(0)) || perm(MustTerminate_0(_cthread_151_0)) == none && ((forperm _r_23: Ref [MustInvokeBounded_0(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded_0(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBoundedp] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnboundedp] :: false)))))])
      invariant (p1_9 ==> [true, !idle1_4 ==> !_loop_check_before_4 ==> (forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))]) && (p2_9 ==> [true, !idle2_4 ==> !_loop_check_before_4_0 ==> (forperm _r_23: Ref [MustInvokeBounded_0(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded_0(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBoundedp] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnboundedp] :: false)))])
      invariant bypass1_4 ==> tmp1_67 == _loop_measures_4
      invariant bypass1_4 ==> tmp1_68 == i_1
      invariant bypass1_4 ==> tmp1_69 == h
      invariant bypass1_4 ==> tmp1_70 == _loop_check_before_4
      invariant bypass2_4 ==> tmp2_67 == _loop_measures_4_0
      invariant bypass2_4 ==> tmp2_68 == i_1_0
      invariant bypass2_4 ==> tmp2_69 == h_0
      invariant bypass2_4 ==> tmp2_70 == _loop_check_before_4_0 
    {
      p1_10 := p1_9 && !int___eq__(_checkDefined(h, 104), __prim__int___box__(0))
      p2_10 := p2_9 && !int___eq__(h_0, __prim__int___box__(0))
      idle1_4 := p1_9 && !!int___eq__(_checkDefined(h, 104), __prim__int___box__(0))
      idle2_4 := p2_9 && !!int___eq__(h_0, __prim__int___box__(0))
      if (p1_10) {
        _loop_measures_4 := Seq[Measure$]()
        i_1 := __prim__int___box__(int___add__(int___unbox__(_checkDefined(i_1, 3235689)), 1))
        inhale _isDefined(3235689)
        h := __prim__int___box__(int___sub__(int___unbox__(_checkDefined(h, 104)), 1))
        inhale _isDefined(104)
        // We are after loop body._loop_check_before_4 := false
      }
      if (p2_10) {
        _loop_measures_4_0 := Seq[Measure$]()
        i_1_0 := __prim__int___box__(int___add__(int___unbox__(i_1_0), 1))
        inhale true
        h_0 := __prim__int___box__(int___sub__(int___unbox__(h_0), 1))
        inhale true
        // We are after loop body._loop_check_before_4_0 := false
      }
      assert (p1_10 ==> _loop_termination_flag_4 ==> !!int___eq__(_checkDefined(h, 104), __prim__int___box__(0))) && (p2_10 ==> _loop_termination_flag_4_0 ==> !!int___eq__(h_0, __prim__int___box__(0)))
      inhale !p1_9 || true
      inhale !p2_9 || true
    }
    if (p1_9) {
      // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_151)) > none ==> acc(MustTerminate(_cthread_151), perm(MustTerminate(_cthread_151)) - _loop_original_must_terminate_4)
      l := __prim__int___box__(int___sub__(int___unbox__(_checkDefined(l, 108)), 1))
      inhale _isDefined(108)
      // We are after loop body._loop_check_before_3 := false
    }
    if (p2_9) {
      // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_151_0)) > none ==> acc(MustTerminate_0(_cthread_151_0), perm(MustTerminate_0(_cthread_151_0)) - _loop_original_must_terminate_4_0)
      l_0 := __prim__int___box__(int___sub__(int___unbox__(l_0), 1))
      inhale true
      // We are after loop body._loop_check_before_3_0 := false
    }
    assert (p1_9 ==> _loop_termination_flag_3 ==> !!int___eq__(_checkDefined(l, 108), __prim__int___box__(0))) && (p2_9 ==> _loop_termination_flag_3_0 ==> !!int___eq__(l_0, __prim__int___box__(0)))
    inhale !p1_8 || true
    inhale !p2_8 || true
  }
  if (p1_8) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_151)) > none ==> acc(MustTerminate(_cthread_151), perm(MustTerminate(_cthread_151)) - _loop_original_must_terminate_3)
  }
  if (p2_8) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_151_0)) > none ==> acc(MustTerminate_0(_cthread_151_0), perm(MustTerminate_0(_cthread_151_0)) - _loop_original_must_terminate_3_0)
  }
  // Method call: sif_print
  if (p1_8 || p2_8) {
    var tmp1_71: Ref
    var tmp2_71: Ref
    var tmp1_72: Seq[Measure$]
    var tmp2_72: Seq[Measure$]
    var tmp1_73: Perm
    var tmp2_73: Perm
    var tmp1_74: Ref
    var tmp2_74: Ref
    var tmp1_75: Perm
    var tmp2_75: Perm
    if (p1_8) {
      tmp1_71 := _cthread_151
      tmp1_72 := _method_measures_151
      tmp1_73 := _residue_151
      tmp1_74 := _checkDefined(i_1, 3235689)
    }
    if (p2_8) {
      tmp2_71 := _cthread_151_0
      tmp2_72 := _method_measures_151_0
      tmp2_73 := _residue_151_0
      tmp2_74 := i_1_0
    }
    tmp1_75, tmp2_75 := sif_print(p1_8, p2_8, tmp1_71, tmp2_71, tmp1_72, tmp2_72, tmp1_73, tmp2_73, tmp1_74, tmp2_74)
    if (p1_8) {
      _cwl_151 := tmp1_75
    }
    if (p2_8) {
      _cwl_151_0 := tmp2_75
    }
  }
  assert true
}

method input_high(p1_11: Bool, p2_11: Bool, _cthread_152: Ref, _cthread_152_0: Ref, _caller_measures_152: Seq[Measure$], _caller_measures_152_0: Seq[Measure$], _residue_152: Perm, _residue_152_0: Perm) returns (_current_wait_level_152: Perm, _current_wait_level_152_0: Perm, _res: Ref, _res_3: Ref)
  requires (p1_11 ==> _cthread_152 != null) && (p2_11 ==> _cthread_152_0 != null)
  requires (p1_11 ==> issubtype(typeof(_cthread_152), Thread_0())) && (p2_11 ==> issubtype(typeof(_cthread_152_0), Thread_0()))
  requires (p1_11 ==> [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false))))]) && (p2_11 ==> [true, perm(MustTerminate_0(_cthread_152_0)) == none && ((forperm _r_30: Ref [MustInvokeBounded_0(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded_0(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBoundedp] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnboundedp] :: false))))])
  ensures (p1_11 ==> [(forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_152) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]) && (p2_11 ==> [(forperm _r_29: Ref [_r_29.MustReleaseBoundedp] :: Level(_r_29) <= _current_wait_level_152_0) && ((forperm _r_29: Ref [_r_29.MustReleaseUnboundedp] :: Level(_r_29) <= _current_wait_level_152_0) && _residue_152_0 <= _current_wait_level_152_0), true])
  ensures (p1_11 ==> issubtype(typeof(_res), int())) && (p2_11 ==> issubtype(typeof(_res_3), int()))
{
  inhale p1_11
  var _cwl_152: Perm
  var _cwl_152_0: Perm
  if (p1_11) {
    _res := null
    inhale false
  }
  if (p2_11) {
    _res_3 := null
    inhale false
  }
}

method input_low(p1_12: Bool, p2_12: Bool, _cthread_153: Ref, _cthread_153_0: Ref, _caller_measures_153: Seq[Measure$], _caller_measures_153_0: Seq[Measure$], _residue_153: Perm, _residue_153_0: Perm) returns (_current_wait_level_153: Perm, _current_wait_level_153_0: Perm, _res: Ref, _res_4: Ref)
  requires (p1_12 ==> _cthread_153 != null) && (p2_12 ==> _cthread_153_0 != null)
  requires (p1_12 ==> issubtype(typeof(_cthread_153), Thread_0())) && (p2_12 ==> issubtype(typeof(_cthread_153_0), Thread_0()))
  requires (p1_12 ==> [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_32: Ref [MustInvokeBounded(_r_32)] :: false) && ((forperm _r_32: Ref [MustInvokeUnbounded(_r_32)] :: false) && ((forperm _r_32: Ref [_r_32.MustReleaseBounded] :: false) && (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: false))))]) && (p2_12 ==> [true, perm(MustTerminate_0(_cthread_153_0)) == none && ((forperm _r_32: Ref [MustInvokeBounded_0(_r_32)] :: false) && ((forperm _r_32: Ref [MustInvokeUnbounded_0(_r_32)] :: false) && ((forperm _r_32: Ref [_r_32.MustReleaseBoundedp] :: false) && (forperm _r_32: Ref [_r_32.MustReleaseUnboundedp] :: false))))])
  ensures (p1_12 ==> [(forperm _r_31: Ref [_r_31.MustReleaseBounded] :: Level(_r_31) <= _current_wait_level_153) && ((forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: Level(_r_31) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]) && (p2_12 ==> [(forperm _r_31: Ref [_r_31.MustReleaseBoundedp] :: Level(_r_31) <= _current_wait_level_153_0) && ((forperm _r_31: Ref [_r_31.MustReleaseUnboundedp] :: Level(_r_31) <= _current_wait_level_153_0) && _residue_153_0 <= _current_wait_level_153_0), true])
  ensures (p1_12 ==> issubtype(typeof(_res), int())) && (p2_12 ==> issubtype(typeof(_res_4), int()))
  ensures p1_12 && p2_12 ==> _res == _res_4
{
  inhale p1_12
  var _cwl_153: Perm
  var _cwl_153_0: Perm
  if (p1_12) {
    _res := null
    inhale false
  }
  if (p2_12) {
    _res_4 := null
    inhale false
  }
}

method sif_print(p1_13: Bool, p2_13: Bool, _cthread_154: Ref, _cthread_154_0: Ref, _caller_measures_154: Seq[Measure$], _caller_measures_154_0: Seq[Measure$], _residue_154: Perm, _residue_154_0: Perm, x_3: Ref, x_3_0: Ref) returns (_current_wait_level_154: Perm, _current_wait_level_154_0: Perm)
  requires (p1_13 ==> _cthread_154 != null) && (p2_13 ==> _cthread_154_0 != null)
  requires (p1_13 ==> issubtype(typeof(_cthread_154), Thread_0())) && (p2_13 ==> issubtype(typeof(_cthread_154_0), Thread_0()))
  requires (p1_13 ==> issubtype(typeof(x_3), int())) && (p2_13 ==> issubtype(typeof(x_3_0), int()))
  requires p1_13 == p2_13
  requires p1_13 && p2_13 ==> x_3 == x_3_0
  requires (p1_13 ==> [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))]) && (p2_13 ==> [true, perm(MustTerminate_0(_cthread_154_0)) == none && ((forperm _r_34: Ref [MustInvokeBounded_0(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded_0(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBoundedp] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnboundedp] :: false))))])
  ensures (p1_13 ==> [(forperm _r_33: Ref [_r_33.MustReleaseBounded] :: Level(_r_33) <= _current_wait_level_154) && ((forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: Level(_r_33) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]) && (p2_13 ==> [(forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: Level(_r_33) <= _current_wait_level_154_0) && ((forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: Level(_r_33) <= _current_wait_level_154_0) && _residue_154_0 <= _current_wait_level_154_0), true])
{
  inhale p1_13
  var _cwl_154: Perm
  var _cwl_154_0: Perm
  if (p1_13) {
    inhale false
  }
  if (p2_13) {
    inhale false
  }
}

method main(p1_14: Bool, p2_14: Bool, _cthread_155: Ref, _cthread_155_0: Ref, _caller_measures_155: Seq[Measure$], _caller_measures_155_0: Seq[Measure$], _residue_161: Perm, _residue_161_0: Perm) returns (_current_wait_level_155: Perm, _current_wait_level_155_0: Perm)
  requires (p1_14 ==> _cthread_155 != null) && (p2_14 ==> _cthread_155_0 != null)
  requires (p1_14 ==> issubtype(typeof(_cthread_155), Thread_0())) && (p2_14 ==> issubtype(typeof(_cthread_155_0), Thread_0()))
  requires (p1_14 ==> [true, perm(MustTerminate(_cthread_155)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))]) && (p2_14 ==> [true, perm(MustTerminate_0(_cthread_155_0)) == none && ((forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false))))])
  ensures (p1_14 ==> [(forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_155) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_155) && _residue_161 <= _current_wait_level_155), true]) && (p2_14 ==> [(forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: Level(_r_35) <= _current_wait_level_155_0) && ((forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: Level(_r_35) <= _current_wait_level_155_0) && _residue_161_0 <= _current_wait_level_155_0), true])
  ensures (p1_14 ==> [true, (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))]) && (p2_14 ==> [true, (forperm _r_36: Ref [MustInvokeBounded_0(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded_0(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBoundedp] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_14
  var module_defined_0: Bool
  var module_defined_0_0: Bool
  var module_names_0: Set[_Name]
  var module_names_0_0: Set[_Name]
  var module_defined_1: Bool
  var module_defined_1_0: Bool
  var module_names_1: Set[_Name]
  var module_names_1_0: Set[_Name]
  var _err: Ref
  var _err_6: Ref
  var _cwl_155: Perm
  var _cwl_155_0: Perm
  var _method_measures_155: Seq[Measure$]
  var _method_measures_155_0: Seq[Measure$]
  if (p1_14) {
    _method_measures_155 := Seq[Measure$]()
    module_defined_0 := true
    module_names_0 := Set[_Name]()
    module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
    module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
    module_defined_1 := false
    module_names_1 := Set[_Name]()
    module_names_1 := (module_names_1 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file___0()._val, 99 / 100) && issubtype(typeof(__file___0()._val), str()) && issubtype(typeof(__file___0()._val), str())
    module_names_1 := (module_names_1 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name___0()._val, 99 / 100) && issubtype(typeof(__name___0()._val), str()) && issubtype(typeof(__name___0()._val), str()) && !str___eq__(str___create__(8, 2489249333222104298408468319), __name___0()._val)
    _err := null
  }
  if (p2_14) {
    _method_measures_155_0 := Seq[Measure$]()
    module_defined_0_0 := true
    module_names_0_0 := Set[_Name]()
    module_names_0_0 := (module_names_0_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file__()._valp, 99 / 100) && issubtype(typeof(__file__()._valp), str()) && issubtype(typeof(__file__()._valp), str())
    module_names_0_0 := (module_names_0_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name__()._valp, 99 / 100) && issubtype(typeof(__name__()._valp), str()) && issubtype(typeof(__name__()._valp), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._valp)
    module_defined_1_0 := false
    module_names_1_0 := Set[_Name]()
    module_names_1_0 := (module_names_1_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file___0()._valp, 99 / 100) && issubtype(typeof(__file___0()._valp), str()) && issubtype(typeof(__file___0()._valp), str())
    module_names_1_0 := (module_names_1_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name___0()._valp, 99 / 100) && issubtype(typeof(__name___0()._valp), str()) && issubtype(typeof(__name___0()._valp), str()) && !str___eq__(str___create__(8, 2489249333222104298408468319), __name___0()._valp)
    _err_6 := null
  }
  var p1_15: Bool
  var p2_15: Bool
  var p3: Bool
  var p4: Bool
  p1_15 := p1_14 && !module_defined_1
  p2_15 := p2_14 && !module_defined_1_0
  p3 := p1_14 && !!module_defined_1
  p4 := p2_14 && !!module_defined_1_0
  if (p1_15) {
    module_defined_1 := true
    module_names_1 := (module_names_1 union Set(_single(4264095844347449787)))
    module_names_1 := (module_names_1 union Set(_single(7827276)))
    module_names_1 := (module_names_1 union Set(_single(3584533797388877637428408140)))
    module_names_1 := (module_names_1 union Set(_single(7136376649266381199951095122)))
    module_names_1 := (module_names_1 union Set(_single(4231737769045301934)))
  }
  if (p2_15) {
    module_defined_1_0 := true
    module_names_1_0 := (module_names_1_0 union Set(_single(4264095844347449787)))
    module_names_1_0 := (module_names_1_0 union Set(_single(7827276)))
    module_names_1_0 := (module_names_1_0 union Set(_single(3584533797388877637428408140)))
    module_names_1_0 := (module_names_1_0 union Set(_single(7136376649266381199951095122)))
    module_names_1_0 := (module_names_1_0 union Set(_single(4231737769045301934)))
  }
  assert (p1_15 ==> true) && (p2_15 ==> true)
  if (p1_15) {
    module_names_1 := (module_names_1 union Set(_single(5590921754651926041799454313)))
  }
  if (p2_15) {
    module_names_1_0 := (module_names_1_0 union Set(_single(5590921754651926041799454313)))
  }
  assert (p1_15 ==> true) && (p2_15 ==> true)
  if (p1_15) {
    module_names_1 := (module_names_1 union Set(_single(6521303804355405778439401065)))
  }
  if (p2_15) {
    module_names_1_0 := (module_names_1_0 union Set(_single(6521303804355405778439401065)))
  }
  assert (p1_15 ==> true) && (p2_15 ==> true)
  if (p1_15) {
    module_names_1 := (module_names_1 union Set(_single(4659596957216468757958257011)))
  }
  if (p2_15) {
    module_names_1_0 := (module_names_1_0 union Set(_single(4659596957216468757958257011)))
  }
  assert (p1_14 ==> (_single(5590921754651926041799454313) in module_names_1)) && (p2_14 ==> (_single(5590921754651926041799454313) in module_names_1_0))
  if (p1_14) {
    module_names_0 := (module_names_0 union Set(_single(5590921754651926041799454313)))
  }
  if (p2_14) {
    module_names_0_0 := (module_names_0_0 union Set(_single(5590921754651926041799454313)))
  }
  assert (p1_14 ==> (_single(6521303804355405778439401065) in module_names_1)) && (p2_14 ==> (_single(6521303804355405778439401065) in module_names_1_0))
  if (p1_14) {
    module_names_0 := (module_names_0 union Set(_single(6521303804355405778439401065)))
  }
  if (p2_14) {
    module_names_0_0 := (module_names_0_0 union Set(_single(6521303804355405778439401065)))
  }
  assert (p1_14 ==> (_single(4659596957216468757958257011) in module_names_1)) && (p2_14 ==> (_single(4659596957216468757958257011) in module_names_1_0))
  if (p1_14) {
    module_names_0 := (module_names_0 union Set(_single(4659596957216468757958257011)))
  }
  if (p2_14) {
    module_names_0_0 := (module_names_0_0 union Set(_single(4659596957216468757958257011)))
  }
  assert (p1_14 ==> true) && (p2_14 ==> true)
  if (p1_14) {
    module_names_0 := (module_names_0 union Set(_single(1953719668)))
  }
  if (p2_14) {
    module_names_0_0 := (module_names_0_0 union Set(_single(1953719668)))
  }
  assert (p1_14 ==> true) && (p2_14 ==> true)
  if (p1_14) {
    module_names_0 := (module_names_0 union Set(_single(3905999252523227017)))
  }
  if (p2_14) {
    module_names_0_0 := (module_names_0_0 union Set(_single(3905999252523227017)))
  }
  assert (p1_14 ==> true) && (p2_14 ==> true)
  if (p1_14) {
    module_names_0 := (module_names_0 union Set(_single(3906000352034854793)))
  }
  if (p2_14) {
    module_names_0_0 := (module_names_0_0 union Set(_single(3906000352034854793)))
  }
  assert (p1_14 ==> true) && (p2_14 ==> true)
  if (p1_14) {
    module_names_0 := (module_names_0 union Set(_single(3906001451546482569)))
  }
  if (p2_14) {
    module_names_0_0 := (module_names_0_0 union Set(_single(3906001451546482569)))
  }
  assert (p1_14 ==> true) && (p2_14 ==> true)
  if (p1_14) {
    module_names_0 := (module_names_0 union Set(_single(12653)))
  }
  if (p2_14) {
    module_names_0_0 := (module_names_0_0 union Set(_single(12653)))
  }
  assert (p1_14 ==> true) && (p2_14 ==> true)
  if (p1_14) {
    module_names_0 := (module_names_0 union Set(_single(3906002551058110345)))
  }
  if (p2_14) {
    module_names_0_0 := (module_names_0_0 union Set(_single(3906002551058110345)))
  }
  assert (p1_14 ==> true) && (p2_14 ==> true)
  if (p1_14) {
    module_names_0 := (module_names_0 union Set(_single(3906003650569738121)))
  }
  if (p2_14) {
    module_names_0_0 := (module_names_0_0 union Set(_single(3906003650569738121)))
  }
  assert true
}