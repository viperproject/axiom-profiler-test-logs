domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getMethod_0(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getArg_0(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
  
  function getOld_0(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function high_ref_threading(): ThreadingID
  
  unique function low_ref_threading(): ThreadingID
  
  unique function test_high_data_threading(): ThreadingID
  
  unique function test_contains_threading(): ThreadingID
  
  unique function test_contains_2_threading(): ThreadingID
  
  unique function test_high_ref_threading(): ThreadingID
  
  unique function test_high_index_threading(): ThreadingID
  
  unique function input_high_threading(): ThreadingID
  
  unique function input_low_threading(): ThreadingID
  
  unique function sif_print_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field _valp: Ref

field __container: Ref

field __containerp: Ref

field __iter_index: Int

field __iter_indexp: Int

field __previous: Seq[Ref]

field __previousp: Seq[Ref]

field list_acc: Seq[Ref]

field list_accp: Seq[Ref]

field set_acc: Set[Ref]

field set_accp: Set[Ref]

field dict_acc: Set[Ref]

field dict_accp: Set[Ref]

field Measure$acc: Seq[Ref]

field Measure$accp: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseBoundedp: Int

field MustReleaseUnbounded: Int

field MustReleaseUnboundedp: Int

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __file___0(): Ref 


function __name___0(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___ge__(self: Int, other: Int): Bool 
{
  self >= other
}

function int___lt__(self: Int, other: Int): Bool 
{
  self < other
}

function list___contains__(self: Ref, item: Ref): Bool
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_acc, wildcard)
  ensures result == (item in self.list_acc) 


function list___contains___0(self: Ref, item: Ref): Bool
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_accp, wildcard)
  ensures result == (item in self.list_accp) 


function list___len__(self: Ref): Int
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_acc, wildcard) 
{
  |self.list_acc|
}

function list___len___0(self: Ref): Int
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_accp, wildcard) 
{
  |self.list_accp|
}

function list___getitem__(self: Ref, key: Ref): Ref
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires issubtype(typeof(key), int())
  requires acc(self.list_acc, wildcard)
  requires (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
  ensures result == (int___unbox__(key) >= 0 ? self.list_acc[int___unbox__(key)] : self.list_acc[list___len__(self) + int___unbox__(key)])
  ensures [issubtype(typeof(result), list_arg(typeof(self), 0)), true] 


function list___getitem___0(self: Ref, key: Ref): Ref
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires issubtype(typeof(key), int())
  requires acc(self.list_accp, wildcard)
  requires (let ln == (list___len___0(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
  ensures result == (int___unbox__(key) >= 0 ? self.list_accp[int___unbox__(key)] : self.list_accp[list___len___0(self) + int___unbox__(key)])
  ensures [issubtype(typeof(result), list_arg(typeof(self), 0)), true] 


function list___sil_seq__(self: Ref): Seq[Ref]
  requires acc(self.list_acc, wildcard) 
{
  self.list_acc
}

function list___sil_seq___0(self: Ref): Seq[Ref]
  requires acc(self.list_accp, wildcard) 
{
  self.list_accp
}

function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustTerminate_0(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeBounded_0(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeUnbounded_0(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate MustInvokeCredit_0(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_start_0(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _thread_post_0(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate _MaySet_0(rec: Ref, id: Int) 

method high_ref(p1: Bool, p2: Bool, _cthread_145: Ref, _cthread_145_0: Ref, _caller_measures_145: Seq[Measure$], _caller_measures_145_0: Seq[Measure$], _residue_145: Perm, _residue_145_0: Perm) returns (_current_wait_level_145: Perm, _current_wait_level_145_0: Perm, _res: Ref, _res_0: Ref)
  requires (p1 ==> _cthread_145 != null) && (p2 ==> _cthread_145_0 != null)
  requires (p1 ==> issubtype(typeof(_cthread_145), Thread_0())) && (p2 ==> issubtype(typeof(_cthread_145_0), Thread_0()))
  requires (p1 ==> [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]) && (p2 ==> [true, perm(MustTerminate_0(_cthread_145_0)) == none && ((forperm _r_1: Ref [MustInvokeBounded_0(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded_0(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: false))))])
  ensures (p1 ==> [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_145) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]) && (p2 ==> [(forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _current_wait_level_145_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _current_wait_level_145_0) && _residue_145_0 <= _current_wait_level_145_0), true])
  ensures (p1 ==> issubtype(typeof(_res), list(int()))) && (p2 ==> issubtype(typeof(_res_0), list(int())))
  ensures (p1 ==> acc(_res.list_acc, write)) && (p2 ==> acc(_res_0.list_accp, write))
  ensures (p1 ==> [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]) && (p2 ==> [true, (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))])
{
  var ret1: Bool
  var ret2: Bool
  inhale p1
  ret1 := false
  ret2 := false
  var _err: Ref
  var _err_0: Ref
  var list_0: Ref
  var list_0_0: Ref
  var _cwl_145: Perm
  var _cwl_145_0: Perm
  var _method_measures_145: Seq[Measure$]
  var _method_measures_145_0: Seq[Measure$]
  if (p1 && !ret1) {
    _method_measures_145 := Seq[Measure$]()
    _res := null
    _err := null
  }
  if (p2 && !ret2) {
    _method_measures_145_0 := Seq[Measure$]()
    _res_0 := null
    _err_0 := null
  }
  // Method call: list___init__
  if (p1 && !ret1 || p2 && !ret2) {
    var tmp1: Ref
    var tmp2: Ref
    var tmp1_0: Seq[Measure$]
    var tmp2_0: Seq[Measure$]
    var tmp1_1: Perm
    var tmp2_1: Perm
    var tmp1_2: Perm
    var tmp2_2: Perm
    var tmp1_3: Ref
    var tmp2_3: Ref
    if (p1 && !ret1) {
      tmp1 := _cthread_145
      tmp1_0 := _method_measures_145
      tmp1_1 := _residue_145
    }
    if (p2 && !ret2) {
      tmp2 := _cthread_145_0
      tmp2_0 := _method_measures_145_0
      tmp2_1 := _residue_145_0
    }
    tmp1_2, tmp2_2, tmp1_3, tmp2_3 := list___init__(p1 && !ret1, p2 && !ret2, tmp1, tmp2, tmp1_0, tmp2_0, tmp1_1, tmp2_1)
    if (p1 && !ret1) {
      _cwl_145 := tmp1_2
      list_0 := tmp1_3
    }
    if (p2 && !ret2) {
      _cwl_145_0 := tmp2_2
      list_0_0 := tmp2_3
    }
  }
  if (p1 && !ret1) {
    inhale issubtype(typeof(list_0), list(int()))
  }
  if (p2 && !ret2) {
    inhale issubtype(typeof(list_0_0), list(int()))
  }
  assert (p1 && !ret1 ==> issubtype(typeof(__prim__int___box__(1)), int())) && (p2 && !ret2 ==> issubtype(typeof(__prim__int___box__(1)), int()))
  if (p1 && !ret1) {
    list_0.list_acc := Seq(__prim__int___box__(1))
  }
  if (p2 && !ret2) {
    list_0_0.list_accp := Seq(__prim__int___box__(1))
  }
  if (p1 && !ret1) {
    _res := list_0
    ret1 := true
  }
  if (p2 && !ret2) {
    _res_0 := list_0_0
    ret2 := true
  }
  assert true
}

method low_ref(p1_0: Bool, p2_0: Bool, _cthread_146: Ref, _cthread_146_0: Ref, _caller_measures_146: Seq[Measure$], _caller_measures_146_0: Seq[Measure$], _residue_146: Perm, _residue_146_0: Perm) returns (_current_wait_level_146: Perm, _current_wait_level_146_0: Perm, _res: Ref, _res_1: Ref)
  requires (p1_0 ==> _cthread_146 != null) && (p2_0 ==> _cthread_146_0 != null)
  requires (p1_0 ==> issubtype(typeof(_cthread_146), Thread_0())) && (p2_0 ==> issubtype(typeof(_cthread_146_0), Thread_0()))
  requires (p1_0 ==> [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]) && (p2_0 ==> [true, perm(MustTerminate_0(_cthread_146_0)) == none && ((forperm _r_4: Ref [MustInvokeBounded_0(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded_0(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBoundedp] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnboundedp] :: false))))])
  ensures (p1_0 ==> [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_146) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]) && (p2_0 ==> [(forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: Level(_r_2) <= _current_wait_level_146_0) && ((forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: Level(_r_2) <= _current_wait_level_146_0) && _residue_146_0 <= _current_wait_level_146_0), true])
  ensures (p1_0 ==> issubtype(typeof(_res), list(int()))) && (p2_0 ==> issubtype(typeof(_res_1), list(int())))
  ensures (p1_0 ==> acc(_res.list_acc, write)) && (p2_0 ==> acc(_res_1.list_accp, write))
  ensures p1_0 && p2_0 ==> _res == _res_1
  ensures (p1_0 ==> [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]) && (p2_0 ==> [true, (forperm _r_3: Ref [MustInvokeBounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBoundedp] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnboundedp] :: false)))])
{
  var ret1_0: Bool
  var ret2_0: Bool
  inhale p1_0
  ret1_0 := false
  ret2_0 := false
  var _err: Ref
  var _err_1: Ref
  var list_1: Ref
  var list_1_0: Ref
  var _cwl_146: Perm
  var _cwl_146_0: Perm
  var _method_measures_146: Seq[Measure$]
  var _method_measures_146_0: Seq[Measure$]
  if (p1_0 && !ret1_0) {
    _method_measures_146 := Seq[Measure$]()
    _res := null
    _err := null
  }
  if (p2_0 && !ret2_0) {
    _method_measures_146_0 := Seq[Measure$]()
    _res_1 := null
    _err_1 := null
  }
  // Method call: list___init__
  if (p1_0 && !ret1_0 || p2_0 && !ret2_0) {
    var tmp1_4: Ref
    var tmp2_4: Ref
    var tmp1_5: Seq[Measure$]
    var tmp2_5: Seq[Measure$]
    var tmp1_6: Perm
    var tmp2_6: Perm
    var tmp1_7: Perm
    var tmp2_7: Perm
    var tmp1_8: Ref
    var tmp2_8: Ref
    if (p1_0 && !ret1_0) {
      tmp1_4 := _cthread_146
      tmp1_5 := _method_measures_146
      tmp1_6 := _residue_146
    }
    if (p2_0 && !ret2_0) {
      tmp2_4 := _cthread_146_0
      tmp2_5 := _method_measures_146_0
      tmp2_6 := _residue_146_0
    }
    tmp1_7, tmp2_7, tmp1_8, tmp2_8 := list___init__(p1_0 && !ret1_0, p2_0 && !ret2_0, tmp1_4, tmp2_4, tmp1_5, tmp2_5, tmp1_6, tmp2_6)
    if (p1_0 && !ret1_0) {
      _cwl_146 := tmp1_7
      list_1 := tmp1_8
    }
    if (p2_0 && !ret2_0) {
      _cwl_146_0 := tmp2_7
      list_1_0 := tmp2_8
    }
  }
  if (p1_0 && !ret1_0) {
    inhale issubtype(typeof(list_1), list(int()))
  }
  if (p2_0 && !ret2_0) {
    inhale issubtype(typeof(list_1_0), list(int()))
  }
  assert (p1_0 && !ret1_0 ==> issubtype(typeof(__prim__int___box__(2)), int())) && (p2_0 && !ret2_0 ==> issubtype(typeof(__prim__int___box__(2)), int()))
  if (p1_0 && !ret1_0) {
    list_1.list_acc := Seq(__prim__int___box__(2))
  }
  if (p2_0 && !ret2_0) {
    list_1_0.list_accp := Seq(__prim__int___box__(2))
  }
  if (p1_0 && !ret1_0) {
    _res := list_1
    ret1_0 := true
  }
  if (p2_0 && !ret2_0) {
    _res_1 := list_1_0
    ret2_0 := true
  }
  assert true
}

method test_high_data(p1_1: Bool, p2_1: Bool, _cthread_147: Ref, _cthread_147_0: Ref, _caller_measures_147: Seq[Measure$], _caller_measures_147_0: Seq[Measure$], _residue_147: Perm, _residue_147_0: Perm) returns (_current_wait_level_147: Perm, _current_wait_level_147_0: Perm)
  requires (p1_1 ==> _cthread_147 != null) && (p2_1 ==> _cthread_147_0 != null)
  requires (p1_1 ==> issubtype(typeof(_cthread_147), Thread_0())) && (p2_1 ==> issubtype(typeof(_cthread_147_0), Thread_0()))
  requires p1_1 == p2_1
  requires (p1_1 ==> [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]) && (p2_1 ==> [true, perm(MustTerminate_0(_cthread_147_0)) == none && ((forperm _r_7: Ref [MustInvokeBounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBoundedp] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnboundedp] :: false))))])
  ensures (p1_1 ==> [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_147) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]) && (p2_1 ==> [(forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: Level(_r_5) <= _current_wait_level_147_0) && ((forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: Level(_r_5) <= _current_wait_level_147_0) && _residue_147_0 <= _current_wait_level_147_0), true])
  ensures (p1_1 ==> [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]) && (p2_1 ==> [true, (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_1
  var _err: Ref
  var _err_2: Ref
  var x_0: Ref
  var x_0_0: Ref
  var y: Ref
  var y_1: Ref
  var l: Ref
  var l_4: Ref
  var input_high_res: Ref
  var input_high_res_2: Ref
  var input_low_res: Ref
  var input_low_res_1: Ref
  var list_2: Ref
  var list_2_0: Ref
  var _cwl_147: Perm
  var _cwl_147_0: Perm
  var _method_measures_147: Seq[Measure$]
  var _method_measures_147_0: Seq[Measure$]
  if (p1_1) {
    _method_measures_147 := Seq[Measure$]()
    _err := null
  }
  if (p2_1) {
    _method_measures_147_0 := Seq[Measure$]()
    _err_2 := null
  }
  // Method call: input_high
  if (p1_1 || p2_1) {
    var tmp1_9: Ref
    var tmp2_9: Ref
    var tmp1_10: Seq[Measure$]
    var tmp2_10: Seq[Measure$]
    var tmp1_11: Perm
    var tmp2_11: Perm
    var tmp1_12: Perm
    var tmp2_12: Perm
    var tmp1_13: Ref
    var tmp2_13: Ref
    if (p1_1) {
      tmp1_9 := _cthread_147
      tmp1_10 := _method_measures_147
      tmp1_11 := _residue_147
    }
    if (p2_1) {
      tmp2_9 := _cthread_147_0
      tmp2_10 := _method_measures_147_0
      tmp2_11 := _residue_147_0
    }
    tmp1_12, tmp2_12, tmp1_13, tmp2_13 := input_high(p1_1, p2_1, tmp1_9, tmp2_9, tmp1_10, tmp2_10, tmp1_11, tmp2_11)
    if (p1_1) {
      _cwl_147 := tmp1_12
      input_high_res := tmp1_13
    }
    if (p2_1) {
      _cwl_147_0 := tmp2_12
      input_high_res_2 := tmp2_13
    }
  }
  if (p1_1) {
    x_0 := input_high_res
    inhale _isDefined(3170168)
  }
  if (p2_1) {
    x_0_0 := input_high_res_2
    inhale true
  }
  // Method call: input_low
  if (p1_1 || p2_1) {
    var tmp1_14: Ref
    var tmp2_14: Ref
    var tmp1_15: Seq[Measure$]
    var tmp2_15: Seq[Measure$]
    var tmp1_16: Perm
    var tmp2_16: Perm
    var tmp1_17: Perm
    var tmp2_17: Perm
    var tmp1_18: Ref
    var tmp2_18: Ref
    if (p1_1) {
      tmp1_14 := _cthread_147
      tmp1_15 := _method_measures_147
      tmp1_16 := _residue_147
    }
    if (p2_1) {
      tmp2_14 := _cthread_147_0
      tmp2_15 := _method_measures_147_0
      tmp2_16 := _residue_147_0
    }
    tmp1_17, tmp2_17, tmp1_18, tmp2_18 := input_low(p1_1, p2_1, tmp1_14, tmp2_14, tmp1_15, tmp2_15, tmp1_16, tmp2_16)
    if (p1_1) {
      _cwl_147 := tmp1_17
      input_low_res := tmp1_18
    }
    if (p2_1) {
      _cwl_147_0 := tmp2_17
      input_low_res_1 := tmp2_18
    }
  }
  if (p1_1) {
    y := input_low_res
    inhale _isDefined(121)
  }
  if (p2_1) {
    y_1 := input_low_res_1
    inhale true
  }
  // Method call: list___init__
  if (p1_1 || p2_1) {
    var tmp1_19: Ref
    var tmp2_19: Ref
    var tmp1_20: Seq[Measure$]
    var tmp2_20: Seq[Measure$]
    var tmp1_21: Perm
    var tmp2_21: Perm
    var tmp1_22: Perm
    var tmp2_22: Perm
    var tmp1_23: Ref
    var tmp2_23: Ref
    if (p1_1) {
      tmp1_19 := _cthread_147
      tmp1_20 := _method_measures_147
      tmp1_21 := _residue_147
    }
    if (p2_1) {
      tmp2_19 := _cthread_147_0
      tmp2_20 := _method_measures_147_0
      tmp2_21 := _residue_147_0
    }
    tmp1_22, tmp2_22, tmp1_23, tmp2_23 := list___init__(p1_1, p2_1, tmp1_19, tmp2_19, tmp1_20, tmp2_20, tmp1_21, tmp2_21)
    if (p1_1) {
      _cwl_147 := tmp1_22
      list_2 := tmp1_23
    }
    if (p2_1) {
      _cwl_147_0 := tmp2_22
      list_2_0 := tmp2_23
    }
  }
  if (p1_1) {
    inhale issubtype(typeof(list_2), list(int()))
  }
  if (p2_1) {
    inhale issubtype(typeof(list_2_0), list(int()))
  }
  assert (p1_1 ==> issubtype(typeof(__prim__int___box__(1)), int())) && (p2_1 ==> issubtype(typeof(__prim__int___box__(1)), int()))
  assert (p1_1 ==> issubtype(typeof(_checkDefined(y, 121)), int())) && (p2_1 ==> issubtype(typeof(y_1), int()))
  if (p1_1) {
    list_2.list_acc := Seq(__prim__int___box__(1), _checkDefined(y, 121))
  }
  if (p2_1) {
    list_2_0.list_accp := Seq(__prim__int___box__(1), y_1)
  }
  if (p1_1) {
    l := list_2
    inhale _isDefined(108)
  }
  if (p2_1) {
    l_4 := list_2_0
    inhale true
  }
  // Method call: list_append
  if (p1_1 || p2_1) {
    var tmp1_24: Ref
    var tmp2_24: Ref
    var tmp1_25: Seq[Measure$]
    var tmp2_25: Seq[Measure$]
    var tmp1_26: Perm
    var tmp2_26: Perm
    var tmp1_27: Ref
    var tmp2_27: Ref
    var tmp1_28: Ref
    var tmp2_28: Ref
    var tmp1_29: Perm
    var tmp2_29: Perm
    if (p1_1) {
      tmp1_24 := _cthread_147
      tmp1_25 := _method_measures_147
      tmp1_26 := _residue_147
      tmp1_27 := _checkDefined(l, 108)
      tmp1_28 := _checkDefined(x_0, 3170168)
    }
    if (p2_1) {
      tmp2_24 := _cthread_147_0
      tmp2_25 := _method_measures_147_0
      tmp2_26 := _residue_147_0
      tmp2_27 := l_4
      tmp2_28 := x_0_0
    }
    tmp1_29, tmp2_29 := list_append(p1_1, p2_1, tmp1_24, tmp2_24, tmp1_25, tmp2_25, tmp1_26, tmp2_26, tmp1_27, tmp2_27, tmp1_28, tmp2_28)
    if (p1_1) {
      _cwl_147 := tmp1_29
    }
    if (p2_1) {
      _cwl_147_0 := tmp2_29
    }
  }
  // Method call: sif_print
  if (p1_1 || p2_1) {
    var tmp1_30: Ref
    var tmp2_30: Ref
    var tmp1_31: Seq[Measure$]
    var tmp2_31: Seq[Measure$]
    var tmp1_32: Perm
    var tmp2_32: Perm
    var tmp1_33: Ref
    var tmp2_33: Ref
    var tmp1_34: Perm
    var tmp2_34: Perm
    if (p1_1) {
      tmp1_30 := _cthread_147
      tmp1_31 := _method_measures_147
      tmp1_32 := _residue_147
      tmp1_33 := list___getitem__(_checkDefined(l, 108), __prim__int___box__(1))
    }
    if (p2_1) {
      tmp2_30 := _cthread_147_0
      tmp2_31 := _method_measures_147_0
      tmp2_32 := _residue_147_0
      tmp2_33 := list___getitem___0(l_4, __prim__int___box__(1))
    }
    tmp1_34, tmp2_34 := sif_print(p1_1, p2_1, tmp1_30, tmp2_30, tmp1_31, tmp2_31, tmp1_32, tmp2_32, tmp1_33, tmp2_33)
    if (p1_1) {
      _cwl_147 := tmp1_34
    }
    if (p2_1) {
      _cwl_147_0 := tmp2_34
    }
  }
  // Method call: sif_print
  if (p1_1 || p2_1) {
    var tmp1_35: Ref
    var tmp2_35: Ref
    var tmp1_36: Seq[Measure$]
    var tmp2_36: Seq[Measure$]
    var tmp1_37: Perm
    var tmp2_37: Perm
    var tmp1_38: Ref
    var tmp2_38: Ref
    var tmp1_39: Perm
    var tmp2_39: Perm
    if (p1_1) {
      tmp1_35 := _cthread_147
      tmp1_36 := _method_measures_147
      tmp1_37 := _residue_147
      tmp1_38 := list___getitem__(_checkDefined(l, 108), __prim__int___box__(2))
    }
    if (p2_1) {
      tmp2_35 := _cthread_147_0
      tmp2_36 := _method_measures_147_0
      tmp2_37 := _residue_147_0
      tmp2_38 := list___getitem___0(l_4, __prim__int___box__(2))
    }
    tmp1_39, tmp2_39 := sif_print(p1_1, p2_1, tmp1_35, tmp2_35, tmp1_36, tmp2_36, tmp1_37, tmp2_37, tmp1_38, tmp2_38)
    if (p1_1) {
      _cwl_147 := tmp1_39
    }
    if (p2_1) {
      _cwl_147_0 := tmp2_39
    }
  }
  assert true
}

method test_contains(p1_2: Bool, p2_2: Bool, _cthread_148: Ref, _cthread_148_0: Ref, _caller_measures_148: Seq[Measure$], _caller_measures_148_0: Seq[Measure$], _residue_148: Perm, _residue_148_0: Perm) returns (_current_wait_level_148: Perm, _current_wait_level_148_0: Perm)
  requires (p1_2 ==> _cthread_148 != null) && (p2_2 ==> _cthread_148_0 != null)
  requires (p1_2 ==> issubtype(typeof(_cthread_148), Thread_0())) && (p2_2 ==> issubtype(typeof(_cthread_148_0), Thread_0()))
  requires p1_2 == p2_2
  requires (p1_2 ==> [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]) && (p2_2 ==> [true, perm(MustTerminate_0(_cthread_148_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false))))])
  ensures (p1_2 ==> [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_148) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]) && (p2_2 ==> [(forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: Level(_r_8) <= _current_wait_level_148_0) && ((forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: Level(_r_8) <= _current_wait_level_148_0) && _residue_148_0 <= _current_wait_level_148_0), true])
  ensures (p1_2 ==> [true, (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]) && (p2_2 ==> [true, (forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_2
  var _err: Ref
  var _err_3: Ref
  var x_1: Ref
  var x_1_0: Ref
  var y_0: Ref
  var y_0_0: Ref
  var l_0: Ref
  var l_0_0: Ref
  var input_high_res_0: Ref
  var input_high_res_0_0: Ref
  var input_low_res_0: Ref
  var input_low_res_0_0: Ref
  var list_3: Ref
  var list_3_0: Ref
  var _cwl_148: Perm
  var _cwl_148_0: Perm
  var _method_measures_148: Seq[Measure$]
  var _method_measures_148_0: Seq[Measure$]
  if (p1_2) {
    _method_measures_148 := Seq[Measure$]()
    _err := null
  }
  if (p2_2) {
    _method_measures_148_0 := Seq[Measure$]()
    _err_3 := null
  }
  // Method call: input_high
  if (p1_2 || p2_2) {
    var tmp1_40: Ref
    var tmp2_40: Ref
    var tmp1_41: Seq[Measure$]
    var tmp2_41: Seq[Measure$]
    var tmp1_42: Perm
    var tmp2_42: Perm
    var tmp1_43: Perm
    var tmp2_43: Perm
    var tmp1_44: Ref
    var tmp2_44: Ref
    if (p1_2) {
      tmp1_40 := _cthread_148
      tmp1_41 := _method_measures_148
      tmp1_42 := _residue_148
    }
    if (p2_2) {
      tmp2_40 := _cthread_148_0
      tmp2_41 := _method_measures_148_0
      tmp2_42 := _residue_148_0
    }
    tmp1_43, tmp2_43, tmp1_44, tmp2_44 := input_high(p1_2, p2_2, tmp1_40, tmp2_40, tmp1_41, tmp2_41, tmp1_42, tmp2_42)
    if (p1_2) {
      _cwl_148 := tmp1_43
      input_high_res_0 := tmp1_44
    }
    if (p2_2) {
      _cwl_148_0 := tmp2_43
      input_high_res_0_0 := tmp2_44
    }
  }
  if (p1_2) {
    x_1 := input_high_res_0
    inhale _isDefined(3235704)
  }
  if (p2_2) {
    x_1_0 := input_high_res_0_0
    inhale true
  }
  // Method call: input_low
  if (p1_2 || p2_2) {
    var tmp1_45: Ref
    var tmp2_45: Ref
    var tmp1_46: Seq[Measure$]
    var tmp2_46: Seq[Measure$]
    var tmp1_47: Perm
    var tmp2_47: Perm
    var tmp1_48: Perm
    var tmp2_48: Perm
    var tmp1_49: Ref
    var tmp2_49: Ref
    if (p1_2) {
      tmp1_45 := _cthread_148
      tmp1_46 := _method_measures_148
      tmp1_47 := _residue_148
    }
    if (p2_2) {
      tmp2_45 := _cthread_148_0
      tmp2_46 := _method_measures_148_0
      tmp2_47 := _residue_148_0
    }
    tmp1_48, tmp2_48, tmp1_49, tmp2_49 := input_low(p1_2, p2_2, tmp1_45, tmp2_45, tmp1_46, tmp2_46, tmp1_47, tmp2_47)
    if (p1_2) {
      _cwl_148 := tmp1_48
      input_low_res_0 := tmp1_49
    }
    if (p2_2) {
      _cwl_148_0 := tmp2_48
      input_low_res_0_0 := tmp2_49
    }
  }
  if (p1_2) {
    y_0 := input_low_res_0
    inhale _isDefined(3170169)
  }
  if (p2_2) {
    y_0_0 := input_low_res_0_0
    inhale true
  }
  // Method call: list___init__
  if (p1_2 || p2_2) {
    var tmp1_50: Ref
    var tmp2_50: Ref
    var tmp1_51: Seq[Measure$]
    var tmp2_51: Seq[Measure$]
    var tmp1_52: Perm
    var tmp2_52: Perm
    var tmp1_53: Perm
    var tmp2_53: Perm
    var tmp1_54: Ref
    var tmp2_54: Ref
    if (p1_2) {
      tmp1_50 := _cthread_148
      tmp1_51 := _method_measures_148
      tmp1_52 := _residue_148
    }
    if (p2_2) {
      tmp2_50 := _cthread_148_0
      tmp2_51 := _method_measures_148_0
      tmp2_52 := _residue_148_0
    }
    tmp1_53, tmp2_53, tmp1_54, tmp2_54 := list___init__(p1_2, p2_2, tmp1_50, tmp2_50, tmp1_51, tmp2_51, tmp1_52, tmp2_52)
    if (p1_2) {
      _cwl_148 := tmp1_53
      list_3 := tmp1_54
    }
    if (p2_2) {
      _cwl_148_0 := tmp2_53
      list_3_0 := tmp2_54
    }
  }
  if (p1_2) {
    inhale issubtype(typeof(list_3), list(int()))
  }
  if (p2_2) {
    inhale issubtype(typeof(list_3_0), list(int()))
  }
  assert (p1_2 ==> issubtype(typeof(__prim__int___box__(1)), int())) && (p2_2 ==> issubtype(typeof(__prim__int___box__(1)), int()))
  assert (p1_2 ==> issubtype(typeof(__prim__int___box__(2)), int())) && (p2_2 ==> issubtype(typeof(__prim__int___box__(2)), int()))
  assert (p1_2 ==> issubtype(typeof(__prim__int___box__(3)), int())) && (p2_2 ==> issubtype(typeof(__prim__int___box__(3)), int()))
  if (p1_2) {
    list_3.list_acc := Seq(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
  }
  if (p2_2) {
    list_3_0.list_accp := Seq(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
  }
  if (p1_2) {
    l_0 := list_3
    inhale _isDefined(3170156)
  }
  if (p2_2) {
    l_0_0 := list_3_0
    inhale true
  }
  var p1_3: Bool
  var p2_3: Bool
  var p3: Bool
  var p4: Bool
  p1_3 := p1_2 && list___contains__(_checkDefined(l_0, 3170156), _checkDefined(y_0, 3170169))
  p2_3 := p2_2 && list___contains___0(l_0_0, y_0_0)
  p3 := p1_2 && !list___contains__(_checkDefined(l_0, 3170156), _checkDefined(y_0, 3170169))
  p4 := p2_2 && !list___contains___0(l_0_0, y_0_0)
  // Method call: sif_print
  if (p1_3 || p2_3) {
    var tmp1_55: Ref
    var tmp2_55: Ref
    var tmp1_56: Seq[Measure$]
    var tmp2_56: Seq[Measure$]
    var tmp1_57: Perm
    var tmp2_57: Perm
    var tmp1_58: Ref
    var tmp2_58: Ref
    var tmp1_59: Perm
    var tmp2_59: Perm
    if (p1_3) {
      tmp1_55 := _cthread_148
      tmp1_56 := _method_measures_148
      tmp1_57 := _residue_148
      tmp1_58 := __prim__int___box__(0)
    }
    if (p2_3) {
      tmp2_55 := _cthread_148_0
      tmp2_56 := _method_measures_148_0
      tmp2_57 := _residue_148_0
      tmp2_58 := __prim__int___box__(0)
    }
    tmp1_59, tmp2_59 := sif_print(p1_3, p2_3, tmp1_55, tmp2_55, tmp1_56, tmp2_56, tmp1_57, tmp2_57, tmp1_58, tmp2_58)
    if (p1_3) {
      _cwl_148 := tmp1_59
    }
    if (p2_3) {
      _cwl_148_0 := tmp2_59
    }
  }
  var p1_4: Bool
  var p2_4: Bool
  var p3_0: Bool
  var p4_0: Bool
  p1_4 := p1_2 && list___contains__(_checkDefined(l_0, 3170156), _checkDefined(x_1, 3235704))
  p2_4 := p2_2 && list___contains___0(l_0_0, x_1_0)
  p3_0 := p1_2 && !list___contains__(_checkDefined(l_0, 3170156), _checkDefined(x_1, 3235704))
  p4_0 := p2_2 && !list___contains___0(l_0_0, x_1_0)
  // Method call: sif_print
  if (p1_4 || p2_4) {
    var tmp1_60: Ref
    var tmp2_60: Ref
    var tmp1_61: Seq[Measure$]
    var tmp2_61: Seq[Measure$]
    var tmp1_62: Perm
    var tmp2_62: Perm
    var tmp1_63: Ref
    var tmp2_63: Ref
    var tmp1_64: Perm
    var tmp2_64: Perm
    if (p1_4) {
      tmp1_60 := _cthread_148
      tmp1_61 := _method_measures_148
      tmp1_62 := _residue_148
      tmp1_63 := __prim__int___box__(1)
    }
    if (p2_4) {
      tmp2_60 := _cthread_148_0
      tmp2_61 := _method_measures_148_0
      tmp2_62 := _residue_148_0
      tmp2_63 := __prim__int___box__(1)
    }
    tmp1_64, tmp2_64 := sif_print(p1_4, p2_4, tmp1_60, tmp2_60, tmp1_61, tmp2_61, tmp1_62, tmp2_62, tmp1_63, tmp2_63)
    if (p1_4) {
      _cwl_148 := tmp1_64
    }
    if (p2_4) {
      _cwl_148_0 := tmp2_64
    }
  }
  assert true
}

method test_contains_2(p1_5: Bool, p2_5: Bool, _cthread_149: Ref, _cthread_149_0: Ref, _caller_measures_149: Seq[Measure$], _caller_measures_149_0: Seq[Measure$], _residue_149: Perm, _residue_149_0: Perm) returns (_current_wait_level_149: Perm, _current_wait_level_149_0: Perm)
  requires (p1_5 ==> _cthread_149 != null) && (p2_5 ==> _cthread_149_0 != null)
  requires (p1_5 ==> issubtype(typeof(_cthread_149), Thread_0())) && (p2_5 ==> issubtype(typeof(_cthread_149_0), Thread_0()))
  requires p1_5 == p2_5
  requires (p1_5 ==> [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]) && (p2_5 ==> [true, perm(MustTerminate_0(_cthread_149_0)) == none && ((forperm _r_13: Ref [MustInvokeBounded_0(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded_0(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBoundedp] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnboundedp] :: false))))])
  ensures (p1_5 ==> [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_149) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]) && (p2_5 ==> [(forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_149_0) && ((forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_149_0) && _residue_149_0 <= _current_wait_level_149_0), true])
  ensures (p1_5 ==> [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]) && (p2_5 ==> [true, (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_5
  var _err: Ref
  var _err_4: Ref
  var x_2: Ref
  var x_2_0: Ref
  var l_1: Ref
  var l_1_0: Ref
  var b: Ref
  var b_0: Ref
  var input_high_res_1: Ref
  var input_high_res_1_0: Ref
  var list_4: Ref
  var list_4_0: Ref
  var _cwl_149: Perm
  var _cwl_149_0: Perm
  var _method_measures_149: Seq[Measure$]
  var _method_measures_149_0: Seq[Measure$]
  if (p1_5) {
    _method_measures_149 := Seq[Measure$]()
    _err := null
  }
  if (p2_5) {
    _method_measures_149_0 := Seq[Measure$]()
    _err_4 := null
  }
  // Method call: input_high
  if (p1_5 || p2_5) {
    var tmp1_65: Ref
    var tmp2_65: Ref
    var tmp1_66: Seq[Measure$]
    var tmp2_66: Seq[Measure$]
    var tmp1_67: Perm
    var tmp2_67: Perm
    var tmp1_68: Perm
    var tmp2_68: Perm
    var tmp1_69: Ref
    var tmp2_69: Ref
    if (p1_5) {
      tmp1_65 := _cthread_149
      tmp1_66 := _method_measures_149
      tmp1_67 := _residue_149
    }
    if (p2_5) {
      tmp2_65 := _cthread_149_0
      tmp2_66 := _method_measures_149_0
      tmp2_67 := _residue_149_0
    }
    tmp1_68, tmp2_68, tmp1_69, tmp2_69 := input_high(p1_5, p2_5, tmp1_65, tmp2_65, tmp1_66, tmp2_66, tmp1_67, tmp2_67)
    if (p1_5) {
      _cwl_149 := tmp1_68
      input_high_res_1 := tmp1_69
    }
    if (p2_5) {
      _cwl_149_0 := tmp2_68
      input_high_res_1_0 := tmp2_69
    }
  }
  if (p1_5) {
    x_2 := input_high_res_1
    inhale _isDefined(3301240)
  }
  if (p2_5) {
    x_2_0 := input_high_res_1_0
    inhale true
  }
  // Method call: list___init__
  if (p1_5 || p2_5) {
    var tmp1_70: Ref
    var tmp2_70: Ref
    var tmp1_71: Seq[Measure$]
    var tmp2_71: Seq[Measure$]
    var tmp1_72: Perm
    var tmp2_72: Perm
    var tmp1_73: Perm
    var tmp2_73: Perm
    var tmp1_74: Ref
    var tmp2_74: Ref
    if (p1_5) {
      tmp1_70 := _cthread_149
      tmp1_71 := _method_measures_149
      tmp1_72 := _residue_149
    }
    if (p2_5) {
      tmp2_70 := _cthread_149_0
      tmp2_71 := _method_measures_149_0
      tmp2_72 := _residue_149_0
    }
    tmp1_73, tmp2_73, tmp1_74, tmp2_74 := list___init__(p1_5, p2_5, tmp1_70, tmp2_70, tmp1_71, tmp2_71, tmp1_72, tmp2_72)
    if (p1_5) {
      _cwl_149 := tmp1_73
      list_4 := tmp1_74
    }
    if (p2_5) {
      _cwl_149_0 := tmp2_73
      list_4_0 := tmp2_74
    }
  }
  if (p1_5) {
    inhale issubtype(typeof(list_4), list(int()))
  }
  if (p2_5) {
    inhale issubtype(typeof(list_4_0), list(int()))
  }
  assert (p1_5 ==> issubtype(typeof(__prim__int___box__(1)), int())) && (p2_5 ==> issubtype(typeof(__prim__int___box__(1)), int()))
  assert (p1_5 ==> issubtype(typeof(__prim__int___box__(2)), int())) && (p2_5 ==> issubtype(typeof(__prim__int___box__(2)), int()))
  assert (p1_5 ==> issubtype(typeof(__prim__int___box__(3)), int())) && (p2_5 ==> issubtype(typeof(__prim__int___box__(3)), int()))
  if (p1_5) {
    list_4.list_acc := Seq(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
  }
  if (p2_5) {
    list_4_0.list_accp := Seq(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
  }
  if (p1_5) {
    l_1 := list_4
    inhale _isDefined(3235692)
    b := __prim__bool___box__(list___contains__(_checkDefined(l_1, 3235692), _checkDefined(x_2, 3301240)))
    inhale _isDefined(98)
  }
  if (p2_5) {
    l_1_0 := list_4_0
    inhale true
    b_0 := __prim__bool___box__(list___contains___0(l_1_0, x_2_0))
    inhale true
  }
  // Method call: sif_print
  if (p1_5 || p2_5) {
    var tmp1_75: Ref
    var tmp2_75: Ref
    var tmp1_76: Seq[Measure$]
    var tmp2_76: Seq[Measure$]
    var tmp1_77: Perm
    var tmp2_77: Perm
    var tmp1_78: Ref
    var tmp2_78: Ref
    var tmp1_79: Perm
    var tmp2_79: Perm
    if (p1_5) {
      tmp1_75 := _cthread_149
      tmp1_76 := _method_measures_149
      tmp1_77 := _residue_149
      tmp1_78 := list___getitem__(_checkDefined(l_1, 3235692), __prim__int___box__(0))
    }
    if (p2_5) {
      tmp2_75 := _cthread_149_0
      tmp2_76 := _method_measures_149_0
      tmp2_77 := _residue_149_0
      tmp2_78 := list___getitem___0(l_1_0, __prim__int___box__(0))
    }
    tmp1_79, tmp2_79 := sif_print(p1_5, p2_5, tmp1_75, tmp2_75, tmp1_76, tmp2_76, tmp1_77, tmp2_77, tmp1_78, tmp2_78)
    if (p1_5) {
      _cwl_149 := tmp1_79
    }
    if (p2_5) {
      _cwl_149_0 := tmp2_79
    }
  }
  assert true
}

method test_high_ref(p1_6: Bool, p2_6: Bool, _cthread_150: Ref, _cthread_150_0: Ref, _caller_measures_150: Seq[Measure$], _caller_measures_150_0: Seq[Measure$], _residue_150: Perm, _residue_150_0: Perm) returns (_current_wait_level_150: Perm, _current_wait_level_150_0: Perm)
  requires (p1_6 ==> _cthread_150 != null) && (p2_6 ==> _cthread_150_0 != null)
  requires (p1_6 ==> issubtype(typeof(_cthread_150), Thread_0())) && (p2_6 ==> issubtype(typeof(_cthread_150_0), Thread_0()))
  requires p1_6 == p2_6
  requires (p1_6 ==> [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]) && (p2_6 ==> [true, perm(MustTerminate_0(_cthread_150_0)) == none && ((forperm _r_16: Ref [MustInvokeBounded_0(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded_0(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBoundedp] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnboundedp] :: false))))])
  ensures (p1_6 ==> [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_150) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]) && (p2_6 ==> [(forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _current_wait_level_150_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _current_wait_level_150_0) && _residue_150_0 <= _current_wait_level_150_0), true])
  ensures (p1_6 ==> [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]) && (p2_6 ==> [true, (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_6
  var _err: Ref
  var _err_5: Ref
  var h: Ref
  var h_0: Ref
  var l_2: Ref
  var l_2_0: Ref
  var high_ref_res: Ref
  var high_ref_res_0: Ref
  var low_ref_res: Ref
  var low_ref_res_0: Ref
  var _cwl_150: Perm
  var _cwl_150_0: Perm
  var _method_measures_150: Seq[Measure$]
  var _method_measures_150_0: Seq[Measure$]
  if (p1_6) {
    _method_measures_150 := Seq[Measure$]()
    _err := null
  }
  if (p2_6) {
    _method_measures_150_0 := Seq[Measure$]()
    _err_5 := null
  }
  // Method call: high_ref
  if (p1_6 || p2_6) {
    var tmp1_80: Ref
    var tmp2_80: Ref
    var tmp1_81: Seq[Measure$]
    var tmp2_81: Seq[Measure$]
    var tmp1_82: Perm
    var tmp2_82: Perm
    var tmp1_83: Perm
    var tmp2_83: Perm
    var tmp1_84: Ref
    var tmp2_84: Ref
    if (p1_6) {
      tmp1_80 := _cthread_150
      tmp1_81 := _method_measures_150
      tmp1_82 := _residue_150
    }
    if (p2_6) {
      tmp2_80 := _cthread_150_0
      tmp2_81 := _method_measures_150_0
      tmp2_82 := _residue_150_0
    }
    tmp1_83, tmp2_83, tmp1_84, tmp2_84 := high_ref(p1_6, p2_6, tmp1_80, tmp2_80, tmp1_81, tmp2_81, tmp1_82, tmp2_82)
    if (p1_6) {
      _cwl_150 := tmp1_83
      high_ref_res := tmp1_84
    }
    if (p2_6) {
      _cwl_150_0 := tmp2_83
      high_ref_res_0 := tmp2_84
    }
  }
  if (p1_6) {
    h := high_ref_res
    inhale _isDefined(104)
  }
  if (p2_6) {
    h_0 := high_ref_res_0
    inhale true
  }
  // Method call: low_ref
  if (p1_6 || p2_6) {
    var tmp1_85: Ref
    var tmp2_85: Ref
    var tmp1_86: Seq[Measure$]
    var tmp2_86: Seq[Measure$]
    var tmp1_87: Perm
    var tmp2_87: Perm
    var tmp1_88: Perm
    var tmp2_88: Perm
    var tmp1_89: Ref
    var tmp2_89: Ref
    if (p1_6) {
      tmp1_85 := _cthread_150
      tmp1_86 := _method_measures_150
      tmp1_87 := _residue_150
    }
    if (p2_6) {
      tmp2_85 := _cthread_150_0
      tmp2_86 := _method_measures_150_0
      tmp2_87 := _residue_150_0
    }
    tmp1_88, tmp2_88, tmp1_89, tmp2_89 := low_ref(p1_6, p2_6, tmp1_85, tmp2_85, tmp1_86, tmp2_86, tmp1_87, tmp2_87)
    if (p1_6) {
      _cwl_150 := tmp1_88
      low_ref_res := tmp1_89
    }
    if (p2_6) {
      _cwl_150_0 := tmp2_88
      low_ref_res_0 := tmp2_89
    }
  }
  if (p1_6) {
    l_2 := low_ref_res
    inhale _isDefined(3301228)
  }
  if (p2_6) {
    l_2_0 := low_ref_res_0
    inhale true
  }
  // Method call: list_append
  if (p1_6 || p2_6) {
    var tmp1_90: Ref
    var tmp2_90: Ref
    var tmp1_91: Seq[Measure$]
    var tmp2_91: Seq[Measure$]
    var tmp1_92: Perm
    var tmp2_92: Perm
    var tmp1_93: Ref
    var tmp2_93: Ref
    var tmp1_94: Ref
    var tmp2_94: Ref
    var tmp1_95: Perm
    var tmp2_95: Perm
    if (p1_6) {
      tmp1_90 := _cthread_150
      tmp1_91 := _method_measures_150
      tmp1_92 := _residue_150
      tmp1_93 := _checkDefined(l_2, 3301228)
      tmp1_94 := __prim__int___box__(1)
    }
    if (p2_6) {
      tmp2_90 := _cthread_150_0
      tmp2_91 := _method_measures_150_0
      tmp2_92 := _residue_150_0
      tmp2_93 := l_2_0
      tmp2_94 := __prim__int___box__(1)
    }
    tmp1_95, tmp2_95 := list_append(p1_6, p2_6, tmp1_90, tmp2_90, tmp1_91, tmp2_91, tmp1_92, tmp2_92, tmp1_93, tmp2_93, tmp1_94, tmp2_94)
    if (p1_6) {
      _cwl_150 := tmp1_95
    }
    if (p2_6) {
      _cwl_150_0 := tmp2_95
    }
  }
  // Method call: sif_print
  if (p1_6 || p2_6) {
    var tmp1_96: Ref
    var tmp2_96: Ref
    var tmp1_97: Seq[Measure$]
    var tmp2_97: Seq[Measure$]
    var tmp1_98: Perm
    var tmp2_98: Perm
    var tmp1_99: Ref
    var tmp2_99: Ref
    var tmp1_100: Perm
    var tmp2_100: Perm
    if (p1_6) {
      tmp1_96 := _cthread_150
      tmp1_97 := _method_measures_150
      tmp1_98 := _residue_150
      tmp1_99 := __prim__int___box__(1)
    }
    if (p2_6) {
      tmp2_96 := _cthread_150_0
      tmp2_97 := _method_measures_150_0
      tmp2_98 := _residue_150_0
      tmp2_99 := __prim__int___box__(1)
    }
    tmp1_100, tmp2_100 := sif_print(p1_6, p2_6, tmp1_96, tmp2_96, tmp1_97, tmp2_97, tmp1_98, tmp2_98, tmp1_99, tmp2_99)
    if (p1_6) {
      _cwl_150 := tmp1_100
    }
    if (p2_6) {
      _cwl_150_0 := tmp2_100
    }
  }
  // Method call: list_append
  if (p1_6 || p2_6) {
    var tmp1_101: Ref
    var tmp2_101: Ref
    var tmp1_102: Seq[Measure$]
    var tmp2_102: Seq[Measure$]
    var tmp1_103: Perm
    var tmp2_103: Perm
    var tmp1_104: Ref
    var tmp2_104: Ref
    var tmp1_105: Ref
    var tmp2_105: Ref
    var tmp1_106: Perm
    var tmp2_106: Perm
    if (p1_6) {
      tmp1_101 := _cthread_150
      tmp1_102 := _method_measures_150
      tmp1_103 := _residue_150
      tmp1_104 := _checkDefined(h, 104)
      tmp1_105 := __prim__int___box__(2)
    }
    if (p2_6) {
      tmp2_101 := _cthread_150_0
      tmp2_102 := _method_measures_150_0
      tmp2_103 := _residue_150_0
      tmp2_104 := h_0
      tmp2_105 := __prim__int___box__(2)
    }
    tmp1_106, tmp2_106 := list_append(p1_6, p2_6, tmp1_101, tmp2_101, tmp1_102, tmp2_102, tmp1_103, tmp2_103, tmp1_104, tmp2_104, tmp1_105, tmp2_105)
    if (p1_6) {
      _cwl_150 := tmp1_106
    }
    if (p2_6) {
      _cwl_150_0 := tmp2_106
    }
  }
  // Method call: sif_print
  if (p1_6 || p2_6) {
    var tmp1_107: Ref
    var tmp2_107: Ref
    var tmp1_108: Seq[Measure$]
    var tmp2_108: Seq[Measure$]
    var tmp1_109: Perm
    var tmp2_109: Perm
    var tmp1_110: Ref
    var tmp2_110: Ref
    var tmp1_111: Perm
    var tmp2_111: Perm
    if (p1_6) {
      tmp1_107 := _cthread_150
      tmp1_108 := _method_measures_150
      tmp1_109 := _residue_150
      tmp1_110 := __prim__int___box__(2)
    }
    if (p2_6) {
      tmp2_107 := _cthread_150_0
      tmp2_108 := _method_measures_150_0
      tmp2_109 := _residue_150_0
      tmp2_110 := __prim__int___box__(2)
    }
    tmp1_111, tmp2_111 := sif_print(p1_6, p2_6, tmp1_107, tmp2_107, tmp1_108, tmp2_108, tmp1_109, tmp2_109, tmp1_110, tmp2_110)
    if (p1_6) {
      _cwl_150 := tmp1_111
    }
    if (p2_6) {
      _cwl_150_0 := tmp2_111
    }
  }
  assert true
}

method test_high_index(p1_7: Bool, p2_7: Bool, _cthread_151: Ref, _cthread_151_0: Ref, _caller_measures_151: Seq[Measure$], _caller_measures_151_0: Seq[Measure$], _residue_151: Perm, _residue_151_0: Perm, low_idx: Ref, low_idx_1: Ref, high_idx: Ref, high_idx_1: Ref) returns (_current_wait_level_151: Perm, _current_wait_level_151_0: Perm)
  requires (p1_7 ==> _cthread_151 != null) && (p2_7 ==> _cthread_151_0 != null)
  requires (p1_7 ==> issubtype(typeof(_cthread_151), Thread_0())) && (p2_7 ==> issubtype(typeof(_cthread_151_0), Thread_0()))
  requires (p1_7 ==> issubtype(typeof(low_idx), int())) && (p2_7 ==> issubtype(typeof(low_idx_1), int()))
  requires (p1_7 ==> issubtype(typeof(high_idx), int())) && (p2_7 ==> issubtype(typeof(high_idx_1), int()))
  requires p1_7 == p2_7
  requires (p1_7 ==> int___ge__(int___unbox__(low_idx), 0)) && (p2_7 ==> int___ge__(int___unbox__(low_idx_1), 0)) && ((p1_7 ==> int___lt__(int___unbox__(low_idx), 3)) && (p2_7 ==> int___lt__(int___unbox__(low_idx_1), 3)))
  requires p1_7 && p2_7 ==> low_idx == low_idx_1
  requires (p1_7 ==> int___ge__(int___unbox__(high_idx), 0)) && (p2_7 ==> int___ge__(int___unbox__(high_idx_1), 0)) && ((p1_7 ==> int___lt__(int___unbox__(high_idx), 3)) && (p2_7 ==> int___lt__(int___unbox__(high_idx_1), 3)))
  requires p1_7 && p2_7 ==> __prim__bool___box__(int___ge__(int___unbox__(high_idx), 0) && int___lt__(int___unbox__(high_idx), 3)) == __prim__bool___box__(int___ge__(int___unbox__(high_idx_1), 0) && int___lt__(int___unbox__(high_idx_1), 3))
  requires (p1_7 ==> [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_19: Ref [MustInvokeBounded(_r_19)] :: false) && ((forperm _r_19: Ref [MustInvokeUnbounded(_r_19)] :: false) && ((forperm _r_19: Ref [_r_19.MustReleaseBounded] :: false) && (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: false))))]) && (p2_7 ==> [true, perm(MustTerminate_0(_cthread_151_0)) == none && ((forperm _r_19: Ref [MustInvokeBounded_0(_r_19)] :: false) && ((forperm _r_19: Ref [MustInvokeUnbounded_0(_r_19)] :: false) && ((forperm _r_19: Ref [_r_19.MustReleaseBoundedp] :: false) && (forperm _r_19: Ref [_r_19.MustReleaseUnboundedp] :: false))))])
  ensures (p1_7 ==> [(forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_151) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]) && (p2_7 ==> [(forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: Level(_r_17) <= _current_wait_level_151_0) && ((forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: Level(_r_17) <= _current_wait_level_151_0) && _residue_151_0 <= _current_wait_level_151_0), true])
  ensures (p1_7 ==> [true, (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))]) && (p2_7 ==> [true, (forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_7
  var _err: Ref
  var _err_6: Ref
  var l_3: Ref
  var l_3_0: Ref
  var low_idx_0: Ref
  var low_idx_0_0: Ref
  var high_idx_0: Ref
  var high_idx_0_0: Ref
  var list_5: Ref
  var list_5_0: Ref
  var _cwl_151: Perm
  var _cwl_151_0: Perm
  var _method_measures_151: Seq[Measure$]
  var _method_measures_151_0: Seq[Measure$]
  if (p1_7) {
    _method_measures_151 := Seq[Measure$]()
    _err := null
    low_idx_0 := low_idx
    high_idx_0 := high_idx
  }
  if (p2_7) {
    _method_measures_151_0 := Seq[Measure$]()
    _err_6 := null
    low_idx_0_0 := low_idx_1
    high_idx_0_0 := high_idx_1
  }
  // Method call: list___init__
  if (p1_7 || p2_7) {
    var tmp1_112: Ref
    var tmp2_112: Ref
    var tmp1_113: Seq[Measure$]
    var tmp2_113: Seq[Measure$]
    var tmp1_114: Perm
    var tmp2_114: Perm
    var tmp1_115: Perm
    var tmp2_115: Perm
    var tmp1_116: Ref
    var tmp2_116: Ref
    if (p1_7) {
      tmp1_112 := _cthread_151
      tmp1_113 := _method_measures_151
      tmp1_114 := _residue_151
    }
    if (p2_7) {
      tmp2_112 := _cthread_151_0
      tmp2_113 := _method_measures_151_0
      tmp2_114 := _residue_151_0
    }
    tmp1_115, tmp2_115, tmp1_116, tmp2_116 := list___init__(p1_7, p2_7, tmp1_112, tmp2_112, tmp1_113, tmp2_113, tmp1_114, tmp2_114)
    if (p1_7) {
      _cwl_151 := tmp1_115
      list_5 := tmp1_116
    }
    if (p2_7) {
      _cwl_151_0 := tmp2_115
      list_5_0 := tmp2_116
    }
  }
  if (p1_7) {
    inhale issubtype(typeof(list_5), list(int()))
  }
  if (p2_7) {
    inhale issubtype(typeof(list_5_0), list(int()))
  }
  assert (p1_7 ==> issubtype(typeof(__prim__int___box__(1)), int())) && (p2_7 ==> issubtype(typeof(__prim__int___box__(1)), int()))
  assert (p1_7 ==> issubtype(typeof(__prim__int___box__(2)), int())) && (p2_7 ==> issubtype(typeof(__prim__int___box__(2)), int()))
  assert (p1_7 ==> issubtype(typeof(__prim__int___box__(3)), int())) && (p2_7 ==> issubtype(typeof(__prim__int___box__(3)), int()))
  if (p1_7) {
    list_5.list_acc := Seq(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
  }
  if (p2_7) {
    list_5_0.list_accp := Seq(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
  }
  if (p1_7) {
    l_3 := list_5
    inhale _isDefined(3366764)
  }
  if (p2_7) {
    l_3_0 := list_5_0
    inhale true
  }
  // Method call: sif_print
  if (p1_7 || p2_7) {
    var tmp1_117: Ref
    var tmp2_117: Ref
    var tmp1_118: Seq[Measure$]
    var tmp2_118: Seq[Measure$]
    var tmp1_119: Perm
    var tmp2_119: Perm
    var tmp1_120: Ref
    var tmp2_120: Ref
    var tmp1_121: Perm
    var tmp2_121: Perm
    if (p1_7) {
      tmp1_117 := _cthread_151
      tmp1_118 := _method_measures_151
      tmp1_119 := _residue_151
      tmp1_120 := list___getitem__(_checkDefined(l_3, 3366764), low_idx_0)
    }
    if (p2_7) {
      tmp2_117 := _cthread_151_0
      tmp2_118 := _method_measures_151_0
      tmp2_119 := _residue_151_0
      tmp2_120 := list___getitem___0(l_3_0, low_idx_0_0)
    }
    tmp1_121, tmp2_121 := sif_print(p1_7, p2_7, tmp1_117, tmp2_117, tmp1_118, tmp2_118, tmp1_119, tmp2_119, tmp1_120, tmp2_120)
    if (p1_7) {
      _cwl_151 := tmp1_121
    }
    if (p2_7) {
      _cwl_151_0 := tmp2_121
    }
  }
  // Method call: sif_print
  if (p1_7 || p2_7) {
    var tmp1_122: Ref
    var tmp2_122: Ref
    var tmp1_123: Seq[Measure$]
    var tmp2_123: Seq[Measure$]
    var tmp1_124: Perm
    var tmp2_124: Perm
    var tmp1_125: Ref
    var tmp2_125: Ref
    var tmp1_126: Perm
    var tmp2_126: Perm
    if (p1_7) {
      tmp1_122 := _cthread_151
      tmp1_123 := _method_measures_151
      tmp1_124 := _residue_151
      tmp1_125 := list___getitem__(_checkDefined(l_3, 3366764), high_idx_0)
    }
    if (p2_7) {
      tmp2_122 := _cthread_151_0
      tmp2_123 := _method_measures_151_0
      tmp2_124 := _residue_151_0
      tmp2_125 := list___getitem___0(l_3_0, high_idx_0_0)
    }
    tmp1_126, tmp2_126 := sif_print(p1_7, p2_7, tmp1_122, tmp2_122, tmp1_123, tmp2_123, tmp1_124, tmp2_124, tmp1_125, tmp2_125)
    if (p1_7) {
      _cwl_151 := tmp1_126
    }
    if (p2_7) {
      _cwl_151_0 := tmp2_126
    }
  }
  assert true
}

method input_high(p1_8: Bool, p2_8: Bool, _cthread_152: Ref, _cthread_152_0: Ref, _caller_measures_152: Seq[Measure$], _caller_measures_152_0: Seq[Measure$], _residue_152: Perm, _residue_152_0: Perm) returns (_current_wait_level_152: Perm, _current_wait_level_152_0: Perm, _res: Ref, _res_2: Ref)
  requires (p1_8 ==> _cthread_152 != null) && (p2_8 ==> _cthread_152_0 != null)
  requires (p1_8 ==> issubtype(typeof(_cthread_152), Thread_0())) && (p2_8 ==> issubtype(typeof(_cthread_152_0), Thread_0()))
  requires (p1_8 ==> [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))]) && (p2_8 ==> [true, perm(MustTerminate_0(_cthread_152_0)) == none && ((forperm _r_21: Ref [MustInvokeBounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded_0(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: false))))])
  ensures (p1_8 ==> [(forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_152) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]) && (p2_8 ==> [(forperm _r_20: Ref [_r_20.MustReleaseBoundedp] :: Level(_r_20) <= _current_wait_level_152_0) && ((forperm _r_20: Ref [_r_20.MustReleaseUnboundedp] :: Level(_r_20) <= _current_wait_level_152_0) && _residue_152_0 <= _current_wait_level_152_0), true])
  ensures (p1_8 ==> issubtype(typeof(_res), int())) && (p2_8 ==> issubtype(typeof(_res_2), int()))
{
  inhale p1_8
  var _cwl_152: Perm
  var _cwl_152_0: Perm
  if (p1_8) {
    _res := null
    inhale false
  }
  if (p2_8) {
    _res_2 := null
    inhale false
  }
}

method input_low(p1_9: Bool, p2_9: Bool, _cthread_153: Ref, _cthread_153_0: Ref, _caller_measures_153: Seq[Measure$], _caller_measures_153_0: Seq[Measure$], _residue_153: Perm, _residue_153_0: Perm) returns (_current_wait_level_153: Perm, _current_wait_level_153_0: Perm, _res: Ref, _res_3: Ref)
  requires (p1_9 ==> _cthread_153 != null) && (p2_9 ==> _cthread_153_0 != null)
  requires (p1_9 ==> issubtype(typeof(_cthread_153), Thread_0())) && (p2_9 ==> issubtype(typeof(_cthread_153_0), Thread_0()))
  requires (p1_9 ==> [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false))))]) && (p2_9 ==> [true, perm(MustTerminate_0(_cthread_153_0)) == none && ((forperm _r_23: Ref [MustInvokeBounded_0(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded_0(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBoundedp] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnboundedp] :: false))))])
  ensures (p1_9 ==> [(forperm _r_22: Ref [_r_22.MustReleaseBounded] :: Level(_r_22) <= _current_wait_level_153) && ((forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: Level(_r_22) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]) && (p2_9 ==> [(forperm _r_22: Ref [_r_22.MustReleaseBoundedp] :: Level(_r_22) <= _current_wait_level_153_0) && ((forperm _r_22: Ref [_r_22.MustReleaseUnboundedp] :: Level(_r_22) <= _current_wait_level_153_0) && _residue_153_0 <= _current_wait_level_153_0), true])
  ensures (p1_9 ==> issubtype(typeof(_res), int())) && (p2_9 ==> issubtype(typeof(_res_3), int()))
  ensures p1_9 && p2_9 ==> _res == _res_3
{
  inhale p1_9
  var _cwl_153: Perm
  var _cwl_153_0: Perm
  if (p1_9) {
    _res := null
    inhale false
  }
  if (p2_9) {
    _res_3 := null
    inhale false
  }
}

method sif_print(p1_10: Bool, p2_10: Bool, _cthread_154: Ref, _cthread_154_0: Ref, _caller_measures_154: Seq[Measure$], _caller_measures_154_0: Seq[Measure$], _residue_154: Perm, _residue_154_0: Perm, x_3: Ref, x_3_0: Ref) returns (_current_wait_level_154: Perm, _current_wait_level_154_0: Perm)
  requires (p1_10 ==> _cthread_154 != null) && (p2_10 ==> _cthread_154_0 != null)
  requires (p1_10 ==> issubtype(typeof(_cthread_154), Thread_0())) && (p2_10 ==> issubtype(typeof(_cthread_154_0), Thread_0()))
  requires (p1_10 ==> issubtype(typeof(x_3), int())) && (p2_10 ==> issubtype(typeof(x_3_0), int()))
  requires p1_10 == p2_10
  requires p1_10 && p2_10 ==> x_3 == x_3_0
  requires (p1_10 ==> [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false))))]) && (p2_10 ==> [true, perm(MustTerminate_0(_cthread_154_0)) == none && ((forperm _r_25: Ref [MustInvokeBounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBoundedp] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnboundedp] :: false))))])
  ensures (p1_10 ==> [(forperm _r_24: Ref [_r_24.MustReleaseBounded] :: Level(_r_24) <= _current_wait_level_154) && ((forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: Level(_r_24) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]) && (p2_10 ==> [(forperm _r_24: Ref [_r_24.MustReleaseBoundedp] :: Level(_r_24) <= _current_wait_level_154_0) && ((forperm _r_24: Ref [_r_24.MustReleaseUnboundedp] :: Level(_r_24) <= _current_wait_level_154_0) && _residue_154_0 <= _current_wait_level_154_0), true])
{
  inhale p1_10
  var _cwl_154: Perm
  var _cwl_154_0: Perm
  if (p1_10) {
    inhale false
  }
  if (p2_10) {
    inhale false
  }
}

method main(p1_11: Bool, p2_11: Bool, _cthread_155: Ref, _cthread_155_0: Ref, _caller_measures_155: Seq[Measure$], _caller_measures_155_0: Seq[Measure$], _residue_155: Perm, _residue_155_0: Perm) returns (_current_wait_level_155: Perm, _current_wait_level_155_0: Perm)
  requires (p1_11 ==> _cthread_155 != null) && (p2_11 ==> _cthread_155_0 != null)
  requires (p1_11 ==> issubtype(typeof(_cthread_155), Thread_0())) && (p2_11 ==> issubtype(typeof(_cthread_155_0), Thread_0()))
  requires (p1_11 ==> [true, perm(MustTerminate(_cthread_155)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false))))]) && (p2_11 ==> [true, perm(MustTerminate_0(_cthread_155_0)) == none && ((forperm _r_28: Ref [MustInvokeBounded_0(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded_0(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBoundedp] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnboundedp] :: false))))])
  ensures (p1_11 ==> [(forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_155) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_155) && _residue_155 <= _current_wait_level_155), true]) && (p2_11 ==> [(forperm _r_26: Ref [_r_26.MustReleaseBoundedp] :: Level(_r_26) <= _current_wait_level_155_0) && ((forperm _r_26: Ref [_r_26.MustReleaseUnboundedp] :: Level(_r_26) <= _current_wait_level_155_0) && _residue_155_0 <= _current_wait_level_155_0), true])
  ensures (p1_11 ==> [true, (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))]) && (p2_11 ==> [true, (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_11
  var module_defined_0: Bool
  var module_defined_0_0: Bool
  var module_names_0: Set[_Name]
  var module_names_0_0: Set[_Name]
  var module_defined_1: Bool
  var module_defined_1_0: Bool
  var module_names_1: Set[_Name]
  var module_names_1_0: Set[_Name]
  var _err: Ref
  var _err_7: Ref
  var _cwl_155: Perm
  var _cwl_155_0: Perm
  var _method_measures_155: Seq[Measure$]
  var _method_measures_155_0: Seq[Measure$]
  if (p1_11) {
    _method_measures_155 := Seq[Measure$]()
    module_defined_0 := true
    module_names_0 := Set[_Name]()
    module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
    module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
    module_defined_1 := false
    module_names_1 := Set[_Name]()
    module_names_1 := (module_names_1 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file___0()._val, 99 / 100) && issubtype(typeof(__file___0()._val), str()) && issubtype(typeof(__file___0()._val), str())
    module_names_1 := (module_names_1 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name___0()._val, 99 / 100) && issubtype(typeof(__name___0()._val), str()) && issubtype(typeof(__name___0()._val), str()) && !str___eq__(str___create__(8, 2489249333222104298408468319), __name___0()._val)
    _err := null
  }
  if (p2_11) {
    _method_measures_155_0 := Seq[Measure$]()
    module_defined_0_0 := true
    module_names_0_0 := Set[_Name]()
    module_names_0_0 := (module_names_0_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file__()._valp, 99 / 100) && issubtype(typeof(__file__()._valp), str()) && issubtype(typeof(__file__()._valp), str())
    module_names_0_0 := (module_names_0_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name__()._valp, 99 / 100) && issubtype(typeof(__name__()._valp), str()) && issubtype(typeof(__name__()._valp), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._valp)
    module_defined_1_0 := false
    module_names_1_0 := Set[_Name]()
    module_names_1_0 := (module_names_1_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file___0()._valp, 99 / 100) && issubtype(typeof(__file___0()._valp), str()) && issubtype(typeof(__file___0()._valp), str())
    module_names_1_0 := (module_names_1_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name___0()._valp, 99 / 100) && issubtype(typeof(__name___0()._valp), str()) && issubtype(typeof(__name___0()._valp), str()) && !str___eq__(str___create__(8, 2489249333222104298408468319), __name___0()._valp)
    _err_7 := null
  }
  var p1_12: Bool
  var p2_12: Bool
  var p3_1: Bool
  var p4_1: Bool
  p1_12 := p1_11 && !module_defined_1
  p2_12 := p2_11 && !module_defined_1_0
  p3_1 := p1_11 && !!module_defined_1
  p4_1 := p2_11 && !!module_defined_1_0
  if (p1_12) {
    module_defined_1 := true
    module_names_1 := (module_names_1 union Set(_single(4264095844347449787)))
    module_names_1 := (module_names_1 union Set(_single(7827276)))
    module_names_1 := (module_names_1 union Set(_single(3584533797388877637428408140)))
    module_names_1 := (module_names_1 union Set(_single(7136376649266381199951095122)))
    module_names_1 := (module_names_1 union Set(_single(4231737769045301934)))
  }
  if (p2_12) {
    module_defined_1_0 := true
    module_names_1_0 := (module_names_1_0 union Set(_single(4264095844347449787)))
    module_names_1_0 := (module_names_1_0 union Set(_single(7827276)))
    module_names_1_0 := (module_names_1_0 union Set(_single(3584533797388877637428408140)))
    module_names_1_0 := (module_names_1_0 union Set(_single(7136376649266381199951095122)))
    module_names_1_0 := (module_names_1_0 union Set(_single(4231737769045301934)))
  }
  assert (p1_12 ==> true) && (p2_12 ==> true)
  if (p1_12) {
    module_names_1 := (module_names_1 union Set(_single(5590921754651926041799454313)))
  }
  if (p2_12) {
    module_names_1_0 := (module_names_1_0 union Set(_single(5590921754651926041799454313)))
  }
  assert (p1_12 ==> true) && (p2_12 ==> true)
  if (p1_12) {
    module_names_1 := (module_names_1 union Set(_single(6521303804355405778439401065)))
  }
  if (p2_12) {
    module_names_1_0 := (module_names_1_0 union Set(_single(6521303804355405778439401065)))
  }
  assert (p1_12 ==> true) && (p2_12 ==> true)
  if (p1_12) {
    module_names_1 := (module_names_1 union Set(_single(4659596957216468757958257011)))
  }
  if (p2_12) {
    module_names_1_0 := (module_names_1_0 union Set(_single(4659596957216468757958257011)))
  }
  assert (p1_11 ==> (_single(5590921754651926041799454313) in module_names_1)) && (p2_11 ==> (_single(5590921754651926041799454313) in module_names_1_0))
  if (p1_11) {
    module_names_0 := (module_names_0 union Set(_single(5590921754651926041799454313)))
  }
  if (p2_11) {
    module_names_0_0 := (module_names_0_0 union Set(_single(5590921754651926041799454313)))
  }
  assert (p1_11 ==> (_single(6521303804355405778439401065) in module_names_1)) && (p2_11 ==> (_single(6521303804355405778439401065) in module_names_1_0))
  if (p1_11) {
    module_names_0 := (module_names_0 union Set(_single(6521303804355405778439401065)))
  }
  if (p2_11) {
    module_names_0_0 := (module_names_0_0 union Set(_single(6521303804355405778439401065)))
  }
  assert (p1_11 ==> (_single(4659596957216468757958257011) in module_names_1)) && (p2_11 ==> (_single(4659596957216468757958257011) in module_names_1_0))
  if (p1_11) {
    module_names_0 := (module_names_0 union Set(_single(4659596957216468757958257011)))
    module_names_0 := (module_names_0 union Set(_single(1953720652)))
  }
  if (p2_11) {
    module_names_0_0 := (module_names_0_0 union Set(_single(4659596957216468757958257011)))
    module_names_0_0 := (module_names_0_0 union Set(_single(1953720652)))
  }
  assert (p1_11 ==> true) && (p2_11 ==> true)
  if (p1_11) {
    module_names_0 := (module_names_0 union Set(_single(4115880222425392858396060008)))
  }
  if (p2_11) {
    module_names_0_0 := (module_names_0_0 union Set(_single(4115880222425392858396060008)))
  }
  assert (p1_11 ==> true) && (p2_11 ==> true)
  if (p1_11) {
    module_names_0 := (module_names_0 union Set(_single(3468366719062937748)))
  }
  if (p2_11) {
    module_names_0_0 := (module_names_0_0 union Set(_single(3468366719062937748)))
  }
  assert (p1_11 ==> true) && (p2_11 ==> true)
  if (p1_11) {
    module_names_0 := (module_names_0 union Set(_single(12105027462560083784697224426989329036)))
  }
  if (p2_11) {
    module_names_0_0 := (module_names_0_0 union Set(_single(12105027462560083784697224426989329036)))
  }
  assert (p1_11 ==> true) && (p2_11 ==> true)
  if (p1_11) {
    module_names_0 := (module_names_0 union Set(_single(1822307637975559026007499292961184396)))
  }
  if (p2_11) {
    module_names_0_0 := (module_names_0_0 union Set(_single(1822307637975559026007499292961184396)))
  }
  assert (p1_11 ==> true) && (p2_11 ==> true)
  if (p1_11) {
    module_names_0 := (module_names_0 union Set(_single(2083849309814647316124299098294360716)))
  }
  if (p2_11) {
    module_names_0_0 := (module_names_0_0 union Set(_single(2083849309814647316124299098294360716)))
  }
  assert (p1_11 ==> true) && (p2_11 ==> true)
  if (p1_11) {
    module_names_0 := (module_names_0 union Set(_single(14797861027958964911412717745519499916)))
  }
  if (p2_11) {
    module_names_0_0 := (module_names_0_0 union Set(_single(14797861027958964911412717745519499916)))
  }
  assert (p1_11 ==> true) && (p2_11 ==> true)
  if (p1_11) {
    module_names_0 := (module_names_0 union Set(_single(113497755442924931908532968385976972)))
  }
  if (p2_11) {
    module_names_0_0 := (module_names_0_0 union Set(_single(113497755442924931908532968385976972)))
  }
  assert true
}

method list___init__(p1_13: Bool, p2_13: Bool, _cthread_9: Ref, _cthread_9_0: Ref, _caller_measures_9: Seq[Measure$], _caller_measures_9_0: Seq[Measure$], _residue_9: Perm, _residue_9_0: Perm) returns (_current_wait_level_9: Perm, _current_wait_level_9_0: Perm, res: Ref, res_0: Ref)
  requires (p1_13 ==> _cthread_9 != null) && (p2_13 ==> _cthread_9_0 != null)
  requires (p1_13 ==> Measure$check(_caller_measures_9, _cthread_9, 1)) && (p2_13 ==> Measure$check(_caller_measures_9_0, _cthread_9_0, 1))
  requires (p1_13 ==> issubtype(typeof(_cthread_9), Thread_0())) && (p2_13 ==> issubtype(typeof(_cthread_9_0), Thread_0()))
  requires (p1_13 ==> [true, Measure$check(_caller_measures_9, _cthread_9, 1)]) && (p2_13 ==> [true, Measure$check(_caller_measures_9_0, _cthread_9_0, 1)])
  ensures (p1_13 ==> [(forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_9) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_9) && _residue_9 <= _current_wait_level_9), true]) && (p2_13 ==> [(forperm _r_29: Ref [_r_29.MustReleaseBoundedp] :: Level(_r_29) <= _current_wait_level_9_0) && ((forperm _r_29: Ref [_r_29.MustReleaseUnboundedp] :: Level(_r_29) <= _current_wait_level_9_0) && _residue_9_0 <= _current_wait_level_9_0), true])
  ensures (p1_13 ==> acc(res.list_acc, write)) && (p2_13 ==> acc(res_0.list_accp, write))
  ensures (p1_13 ==> res.list_acc == Seq[Ref]()) && (p2_13 ==> res_0.list_accp == Seq[Ref]())
  ensures (p1_13 ==> typeof(res) == list(list_arg(typeof(res), 0))) && (p2_13 ==> typeof(res_0) == list(list_arg(typeof(res_0), 0)))
  ensures p1_13 && p2_13 ==> res == res_0
{
  inhale p1_13
  var _cwl_9: Perm
  var _cwl_9_0: Perm
  if (p1_13) {
    inhale false
  }
  if (p2_13) {
    inhale false
  }
}

method list_append(p1_14: Bool, p2_14: Bool, _cthread_10: Ref, _cthread_10_0: Ref, _caller_measures_10: Seq[Measure$], _caller_measures_10_0: Seq[Measure$], _residue_10: Perm, _residue_10_0: Perm, self: Ref, self_0: Ref, item: Ref, item_0: Ref) returns (_current_wait_level_10: Perm, _current_wait_level_10_0: Perm)
  requires (p1_14 ==> _cthread_10 != null) && (p2_14 ==> _cthread_10_0 != null)
  requires (p1_14 ==> Measure$check(_caller_measures_10, _cthread_10, 1)) && (p2_14 ==> Measure$check(_caller_measures_10_0, _cthread_10_0, 1))
  requires (p1_14 ==> issubtype(typeof(_cthread_10), Thread_0())) && (p2_14 ==> issubtype(typeof(_cthread_10_0), Thread_0()))
  requires (p1_14 ==> issubtype(typeof(self), list(list_arg(typeof(self), 0)))) && (p2_14 ==> issubtype(typeof(self_0), list(list_arg(typeof(self_0), 0))))
  requires (p1_14 ==> acc(self.list_acc, write)) && (p2_14 ==> acc(self_0.list_accp, write))
  requires (p1_14 ==> issubtype(typeof(item), list_arg(typeof(self), 0))) && (p2_14 ==> issubtype(typeof(item_0), list_arg(typeof(self_0), 0)))
  requires (p1_14 ==> [true, Measure$check(_caller_measures_10, _cthread_10, 1)]) && (p2_14 ==> [true, Measure$check(_caller_measures_10_0, _cthread_10_0, 1)])
  ensures (p1_14 ==> [(forperm _r_31: Ref [_r_31.MustReleaseBounded] :: Level(_r_31) <= _current_wait_level_10) && ((forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: Level(_r_31) <= _current_wait_level_10) && _residue_10 <= _current_wait_level_10), true]) && (p2_14 ==> [(forperm _r_31: Ref [_r_31.MustReleaseBoundedp] :: Level(_r_31) <= _current_wait_level_10_0) && ((forperm _r_31: Ref [_r_31.MustReleaseUnboundedp] :: Level(_r_31) <= _current_wait_level_10_0) && _residue_10_0 <= _current_wait_level_10_0), true])
  ensures (p1_14 ==> acc(self.list_acc, write)) && (p2_14 ==> acc(self_0.list_accp, write))
  ensures (p1_14 ==> self.list_acc == old(self.list_acc) ++ Seq(item)) && (p2_14 ==> self_0.list_accp == old(self_0.list_accp) ++ Seq(item_0))
{
  inhale p1_14
  var _cwl_10: Perm
  var _cwl_10_0: Perm
  if (p1_14) {
    inhale false
  }
  if (p2_14) {
    inhale false
  }
}