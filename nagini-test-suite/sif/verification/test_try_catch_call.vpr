domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function MyZeroDivException(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_MyZeroDivException {
    extends_(MyZeroDivException(), Exception()) && get_basic(MyZeroDivException()) == MyZeroDivException()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getMethod_0(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getArg_0(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
  
  function getOld_0(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function divide_threading(): ThreadingID
  
  unique function m1_threading(): ThreadingID
  
  unique function m2_threading(): ThreadingID
  
  unique function raiseOnZero_threading(): ThreadingID
  
  unique function m3_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field _valp: Ref

field __container: Ref

field __containerp: Ref

field __iter_index: Int

field __iter_indexp: Int

field __previous: Seq[Ref]

field __previousp: Seq[Ref]

field list_acc: Seq[Ref]

field list_accp: Seq[Ref]

field set_acc: Set[Ref]

field set_accp: Set[Ref]

field dict_acc: Set[Ref]

field dict_accp: Set[Ref]

field Measure$acc: Seq[Ref]

field Measure$accp: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseBoundedp: Int

field MustReleaseUnbounded: Int

field MustReleaseUnboundedp: Int

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function int___gt__(self: Int, other: Int): Bool 
{
  self > other
}

function int___sub__(self: Int, other: Int): Int 
{
  self - other
}

function int___floordiv__(self: Int, other: Int): Int
  requires other != 0 
{
  self \ other
}

function Level(r: Ref): Perm 


function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustTerminate_0(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeBounded_0(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeUnbounded_0(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate MustInvokeCredit_0(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_start_0(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _thread_post_0(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate _MaySet_0(rec: Ref, id: Int) 

method divide(p1: Bool, p2: Bool, _cthread_145: Ref, _cthread_145_0: Ref, _caller_measures_145: Seq[Measure$], _caller_measures_145_0: Seq[Measure$], _residue_145: Perm, _residue_145_0: Perm, n: Ref, n_1: Ref, d: Ref, d_1: Ref) returns (_current_wait_level_145: Perm, _current_wait_level_145_0: Perm, _res: Ref, _res_0: Ref, _err: Ref, _err_0: Ref)
  requires (p1 ==> _cthread_145 != null) && (p2 ==> _cthread_145_0 != null)
  requires (p1 ==> issubtype(typeof(_cthread_145), Thread_0())) && (p2 ==> issubtype(typeof(_cthread_145_0), Thread_0()))
  requires (p1 ==> issubtype(typeof(n), int())) && (p2 ==> issubtype(typeof(n_1), int()))
  requires (p1 ==> issubtype(typeof(d), int())) && (p2 ==> issubtype(typeof(d_1), int()))
  requires (p1 ==> [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]) && (p2 ==> [true, perm(MustTerminate_0(_cthread_145_0)) == none && ((forperm _r_1: Ref [MustInvokeBounded_0(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded_0(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: false))))])
  ensures (p1 ==> [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_145) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]) && (p2 ==> [(forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _current_wait_level_145_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _current_wait_level_145_0) && _residue_145_0 <= _current_wait_level_145_0), true])
  ensures (p1 ==> _err == null ==> issubtype(typeof(_res), int())) && (p2 ==> _err_0 == null ==> issubtype(typeof(_res_0), int()))
  ensures (p1 ==> _err == null) && (p2 ==> _err_0 == null) ==> (p1 && p2 ==> n == n_1) && (p1 && p2 ==> d == d_1) ==> p1 && p2 ==> _res == _res_0
  ensures (p1 ==> _err == null ==> !int___eq__(d, __prim__int___box__(0)) && int___eq__(_res, __prim__int___box__(int___floordiv__(int___unbox__(n), int___unbox__(d))))) && (p2 ==> _err_0 == null ==> !int___eq__(d_1, __prim__int___box__(0)) && int___eq__(_res_0, __prim__int___box__(int___floordiv__(int___unbox__(n_1), int___unbox__(d_1)))))
  ensures (p1 ==> _err != null && issubtype(typeof(_err), MyZeroDivException()) ==> int___eq__(d, __prim__int___box__(0))) && (p2 ==> _err_0 != null && issubtype(typeof(_err_0), MyZeroDivException()) ==> int___eq__(d_1, __prim__int___box__(0)))
  ensures (p1 ==> _err != null ==> issubtype(typeof(_err), MyZeroDivException())) && (p2 ==> _err_0 != null ==> issubtype(typeof(_err_0), MyZeroDivException()))
  ensures (p1 ==> [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]) && (p2 ==> [true, (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))])
{
  var ret1: Bool
  var ret2: Bool
  var except1: Bool
  var except2: Bool
  inhale p1
  ret1 := false
  ret2 := false
  except1 := false
  except2 := false
  var n_0: Ref
  var n_0_0: Ref
  var d_0: Ref
  var d_0_0: Ref
  var MyZeroDivException_res: Ref
  var MyZeroDivException_res_0: Ref
  var _cwl_145: Perm
  var _cwl_145_0: Perm
  var _method_measures_145: Seq[Measure$]
  var _method_measures_145_0: Seq[Measure$]
  if (p1 && (!ret1 && !except1)) {
    _method_measures_145 := Seq[Measure$]()
    _res := null
    _err := null
    n_0 := n
    d_0 := d
  }
  if (p2 && (!ret2 && !except2)) {
    _method_measures_145_0 := Seq[Measure$]()
    _res_0 := null
    _err_0 := null
    n_0_0 := n_1
    d_0_0 := d_1
  }
  var p1_0: Bool
  var p2_0: Bool
  var p3: Bool
  var p4: Bool
  p1_0 := p1 && (!ret1 && !except1) && !int___eq__(d_0, __prim__int___box__(0))
  p2_0 := p2 && (!ret2 && !except2) && !int___eq__(d_0_0, __prim__int___box__(0))
  p3 := p1 && (!ret1 && !except1) && !!int___eq__(d_0, __prim__int___box__(0))
  p4 := p2 && (!ret2 && !except2) && !!int___eq__(d_0_0, __prim__int___box__(0))
  if (p1_0 && (!ret1 && !except1)) {
    _res := __prim__int___box__(int___floordiv__(int___unbox__(n_0), int___unbox__(d_0)))
    ret1 := true
  }
  if (p2_0 && (!ret2 && !except2)) {
    _res_0 := __prim__int___box__(int___floordiv__(int___unbox__(n_0_0), int___unbox__(d_0_0)))
    ret2 := true
  }
  var tmp: Ref
  tmp := new()
  if (p3 && (!ret1 && !except1)) {
    MyZeroDivException_res := tmp
  }
  if (p4 && (!ret2 && !except2)) {
    MyZeroDivException_res_0 := tmp
  }
  if (p3 && (!ret1 && !except1)) {
    inhale typeof(MyZeroDivException_res) == MyZeroDivException()
  }
  if (p4 && (!ret2 && !except2)) {
    inhale typeof(MyZeroDivException_res_0) == MyZeroDivException()
  }
  if (p3 && (!ret1 && !except1)) {
    _err := MyZeroDivException_res
    except1 := true
  }
  if (p4 && (!ret2 && !except2)) {
    _err_0 := MyZeroDivException_res_0
    except2 := true
  }
}

method m1(p1_1: Bool, p2_1: Bool, _cthread_146: Ref, _cthread_146_0: Ref, _caller_measures_146: Seq[Measure$], _caller_measures_146_0: Seq[Measure$], _residue_146: Perm, _residue_146_0: Perm, x_0: Ref, x_0_0: Ref, y: Ref, y_1: Ref) returns (_current_wait_level_146: Perm, _current_wait_level_146_0: Perm, _res: Ref, _res_1: Ref)
  requires (p1_1 ==> _cthread_146 != null) && (p2_1 ==> _cthread_146_0 != null)
  requires (p1_1 ==> issubtype(typeof(_cthread_146), Thread_0())) && (p2_1 ==> issubtype(typeof(_cthread_146_0), Thread_0()))
  requires (p1_1 ==> issubtype(typeof(x_0), int())) && (p2_1 ==> issubtype(typeof(x_0_0), int()))
  requires (p1_1 ==> issubtype(typeof(y), int())) && (p2_1 ==> issubtype(typeof(y_1), int()))
  requires (p1_1 && p2_1 ==> x_0 == x_0_0) && (p1_1 && p2_1 ==> y == y_1)
  requires (p1_1 ==> [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]) && (p2_1 ==> [true, perm(MustTerminate_0(_cthread_146_0)) == none && ((forperm _r_4: Ref [MustInvokeBounded_0(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded_0(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBoundedp] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnboundedp] :: false))))])
  ensures (p1_1 ==> [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_146) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]) && (p2_1 ==> [(forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: Level(_r_2) <= _current_wait_level_146_0) && ((forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: Level(_r_2) <= _current_wait_level_146_0) && _residue_146_0 <= _current_wait_level_146_0), true])
  ensures (p1_1 ==> issubtype(typeof(_res), int())) && (p2_1 ==> issubtype(typeof(_res_1), int()))
  ensures p1_1 && p2_1 ==> _res == _res_1
  ensures (p1_1 ==> int___eq__(y, __prim__int___box__(0)) ==> int___eq__(_res, __prim__int___box__(0))) && (p2_1 ==> int___eq__(y_1, __prim__int___box__(0)) ==> int___eq__(_res_1, __prim__int___box__(0)))
  ensures (p1_1 ==> !int___eq__(y, __prim__int___box__(0)) ==> int___eq__(_res, __prim__int___box__(int___floordiv__(int___unbox__(x_0), int___unbox__(y))))) && (p2_1 ==> !int___eq__(y_1, __prim__int___box__(0)) ==> int___eq__(_res_1, __prim__int___box__(int___floordiv__(int___unbox__(x_0_0), int___unbox__(y_1)))))
  ensures (p1_1 ==> [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]) && (p2_1 ==> [true, (forperm _r_3: Ref [MustInvokeBounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBoundedp] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnboundedp] :: false)))])
{
  var ret1_0: Bool
  var ret2_0: Bool
  var except1_0: Bool
  var except2_0: Bool
  inhale p1_1
  ret1_0 := false
  ret2_0 := false
  except1_0 := false
  except2_0 := false
  var _err: Ref
  var _err_1: Ref
  var error: Ref
  var error_1: Ref
  var try_finally_0: Int
  var try_finally_0_0: Int
  var x_3: Ref
  var x_3_0: Ref
  var y_0: Ref
  var y_0_0: Ref
  var divide_res: Ref
  var divide_res_1: Ref
  var _cwl_146: Perm
  var _cwl_146_0: Perm
  var _method_measures_146: Seq[Measure$]
  var _method_measures_146_0: Seq[Measure$]
  if (p1_1 && (!ret1_0 && !except1_0)) {
    _method_measures_146 := Seq[Measure$]()
    _res := null
    _err := null
    x_3 := x_0
    y_0 := y
  }
  if (p2_1 && (!ret2_0 && !except2_0)) {
    _method_measures_146_0 := Seq[Measure$]()
    _res_1 := null
    _err_1 := null
    x_3_0 := x_0_0
    y_0_0 := y_1
  }
  // Try/catch block
  var bypass1: Bool
  var bypass2: Bool
  var thisexcept1: Bool
  var thisexcept2: Bool
  var p1_3: Bool
  var p2_3: Bool
  bypass1 := !(p1_1 && (!ret1_0 && !except1_0))
  bypass2 := !(p2_1 && (!ret2_0 && !except2_0))
  // Method call: divide
  if (p1_1 && (!ret1_0 && !except1_0) || p2_1 && (!ret2_0 && !except2_0)) {
    var tmp1: Ref
    var tmp2: Ref
    var tmp1_0: Seq[Measure$]
    var tmp2_0: Seq[Measure$]
    var tmp1_1: Perm
    var tmp2_1: Perm
    var tmp1_2: Ref
    var tmp2_2: Ref
    var tmp1_3: Ref
    var tmp2_3: Ref
    var tmp1_4: Perm
    var tmp2_4: Perm
    var tmp1_5: Ref
    var tmp2_5: Ref
    var tmp1_6: Ref
    var tmp2_6: Ref
    if (p1_1 && (!ret1_0 && !except1_0)) {
      tmp1 := _cthread_146
      tmp1_0 := _method_measures_146
      tmp1_1 := _residue_146
      tmp1_2 := x_3
      tmp1_3 := y_0
    }
    if (p2_1 && (!ret2_0 && !except2_0)) {
      tmp2 := _cthread_146_0
      tmp2_0 := _method_measures_146_0
      tmp2_1 := _residue_146_0
      tmp2_2 := x_3_0
      tmp2_3 := y_0_0
    }
    tmp1_4, tmp2_4, tmp1_5, tmp2_5, tmp1_6, tmp2_6 := divide(p1_1 && (!ret1_0 && !except1_0), p2_1 && (!ret2_0 && !except2_0), tmp1, tmp2, tmp1_0, tmp2_0, tmp1_1, tmp2_1, tmp1_2, tmp2_2, tmp1_3, tmp2_3)
    if (p1_1 && (!ret1_0 && !except1_0)) {
      _cwl_146 := tmp1_4
      divide_res := tmp1_5
      _err := tmp1_6
    }
    if (p2_1 && (!ret2_0 && !except2_0)) {
      _cwl_146_0 := tmp2_4
      divide_res_1 := tmp2_5
      _err_1 := tmp2_6
    }
  }
  var p1_2: Bool
  var p2_2: Bool
  var p3_0: Bool
  var p4_0: Bool
  p1_2 := p1_1 && (!ret1_0 && !except1_0) && _err != null
  p2_2 := p2_1 && (!ret2_0 && !except2_0) && _err_1 != null
  p3_0 := p1_1 && (!ret1_0 && !except1_0) && !(_err != null)
  p4_0 := p2_1 && (!ret2_0 && !except2_0) && !(_err_1 != null)
  if (p1_2 && (!ret1_0 && !except1_0)) {
    except1_0 := true
  }
  if (p2_2 && (!ret2_0 && !except2_0)) {
    except2_0 := true
  }
  if (p1_1 && (!ret1_0 && !except1_0)) {
    _res := divide_res
    ret1_0 := true
  }
  if (p2_1 && (!ret2_0 && !except2_0)) {
    _res_1 := divide_res_1
    ret2_0 := true
  }
  thisexcept1 := except1_0 && !bypass1
  thisexcept2 := except2_0 && !bypass2
  p1_3 := p1_1 && (thisexcept1 && issubtype(typeof(_err), MyZeroDivException()))
  p2_3 := p2_1 && (thisexcept2 && issubtype(typeof(_err_1), MyZeroDivException()))
  if (p1_3) {
    except1_0 := false
  }
  if (p2_3) {
    except2_0 := false
  }
  if (p1_3 && (!ret1_0 && !except1_0)) {
    _res := __prim__int___box__(0)
    ret1_0 := true
  }
  if (p2_3 && (!ret2_0 && !except2_0)) {
    _res_1 := __prim__int___box__(0)
    ret2_0 := true
  }
  if (p1_1 && (!ret1_0 && !except1_0)) {
    _err := null
  }
  if (p2_1 && (!ret2_0 && !except2_0)) {
    _err_1 := null
  }
  assert (p1_1 ==> !except1_0) && (p2_1 ==> !except2_0)
}

method m2(p1_4: Bool, p2_4: Bool, _cthread_147: Ref, _cthread_147_0: Ref, _caller_measures_147: Seq[Measure$], _caller_measures_147_0: Seq[Measure$], _residue_147: Perm, _residue_147_0: Perm, x_1: Ref, x_1_0: Ref) returns (_current_wait_level_147: Perm, _current_wait_level_147_0: Perm, _err: Ref, _err_2: Ref)
  requires (p1_4 ==> _cthread_147 != null) && (p2_4 ==> _cthread_147_0 != null)
  requires (p1_4 ==> issubtype(typeof(_cthread_147), Thread_0())) && (p2_4 ==> issubtype(typeof(_cthread_147_0), Thread_0()))
  requires (p1_4 ==> issubtype(typeof(x_1), int())) && (p2_4 ==> issubtype(typeof(x_1_0), int()))
  requires (p1_4 ==> int___gt__(int___unbox__(x_1), 0)) && (p2_4 ==> int___gt__(int___unbox__(x_1_0), 0))
  requires (p1_4 ==> [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false))))]) && (p2_4 ==> [true, perm(MustTerminate_0(_cthread_147_0)) == none && ((forperm _r_9: Ref [MustInvokeBounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded_0(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: false))))])
  ensures (p1_4 ==> [(forperm _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <= _current_wait_level_147) && ((forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]) && (p2_4 ==> [(forperm _r_7: Ref [_r_7.MustReleaseBoundedp] :: Level(_r_7) <= _current_wait_level_147_0) && ((forperm _r_7: Ref [_r_7.MustReleaseUnboundedp] :: Level(_r_7) <= _current_wait_level_147_0) && _residue_147_0 <= _current_wait_level_147_0), true])
  ensures (p1_4 ==> _err == null ==> false) && (p2_4 ==> _err_2 == null ==> false)
  ensures (p1_4 ==> _err != null && issubtype(typeof(_err), MyZeroDivException()) ==> true) && (p2_4 ==> _err_2 != null && issubtype(typeof(_err_2), MyZeroDivException()) ==> true)
  ensures (p1_4 ==> _err != null ==> issubtype(typeof(_err), MyZeroDivException())) && (p2_4 ==> _err_2 != null ==> issubtype(typeof(_err_2), MyZeroDivException()))
  ensures (p1_4 ==> [true, (forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false)))]) && (p2_4 ==> [true, (forperm _r_8: Ref [MustInvokeBounded_0(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded_0(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: false)))])
{
  var except1_1: Bool
  var except2_1: Bool
  inhale p1_4
  except1_1 := false
  except2_1 := false
  var x_4: Ref
  var x_4_0: Ref
  var _loop_measures: Seq[Measure$]
  var _loop_measures_0: Seq[Measure$]
  var _loop_check_before: Bool
  var _loop_check_before_0: Bool
  var _loop_termination_flag: Bool
  var _loop_termination_flag_0: Bool
  var _loop_original_must_terminate: Perm
  var _loop_original_must_terminate_0: Perm
  var _residue_150: Perm
  var _residue_150_0: Perm
  var divide_res_0: Ref
  var divide_res_0_0: Ref
  var expr_res: Ref
  var expr_res_0: Ref
  var _cwl_147: Perm
  var _cwl_147_0: Perm
  var _method_measures_147: Seq[Measure$]
  var _method_measures_147_0: Seq[Measure$]
  if (p1_4 && !except1_1) {
    _method_measures_147 := Seq[Measure$]()
    _err := null
    x_4 := x_1
    // Save current MustTerminate amount._loop_original_must_terminate := perm(MustTerminate(_cthread_147))
    // Save loop termination promise._loop_termination_flag := false
    // We are before loop._loop_check_before := true
  }
  if (p2_4 && !except2_1) {
    _method_measures_147_0 := Seq[Measure$]()
    _err_2 := null
    x_4_0 := x_1_0
    // Save current MustTerminate amount._loop_original_must_terminate_0 := perm(MustTerminate_0(_cthread_147_0))
    // Save loop termination promise._loop_termination_flag_0 := false
    // We are before loop._loop_check_before_0 := true
  }
  var bypass1_0: Bool
  var bypass2_0: Bool
  var tmp1_7: Seq[Measure$]
  var tmp2_7: Seq[Measure$]
  var tmp1_8: Perm
  var tmp2_8: Perm
  var tmp1_9: Ref
  var tmp2_9: Ref
  var tmp1_10: Ref
  var tmp2_10: Ref
  var tmp1_11: Bool
  var tmp2_11: Bool
  var tmp1_12: Ref
  var tmp2_12: Ref
  var tmp1_13: Ref
  var tmp2_13: Ref
  var tmp1_14: Bool
  var tmp2_14: Bool
  var oldexcept1_1: Bool
  var oldexcept2_1: Bool
  var p1_5: Bool
  var p2_5: Bool
  var idle1: Bool
  var idle2: Bool
  bypass1_0 := !(p1_4 && !except1_1)
  bypass2_0 := !(p2_4 && !except2_1)
  if (bypass1_0) {
    tmp1_7 := _loop_measures
    tmp1_8 := _cwl_147
    tmp1_9 := divide_res_0
    tmp1_10 := _err
    tmp1_11 := except1_1
    tmp1_12 := expr_res
    tmp1_13 := x_4
    tmp1_14 := _loop_check_before
  }
  if (bypass2_0) {
    tmp2_7 := _loop_measures_0
    tmp2_8 := _cwl_147_0
    tmp2_9 := divide_res_0_0
    tmp2_10 := _err_2
    tmp2_11 := except2_1
    tmp2_12 := expr_res_0
    tmp2_13 := x_4_0
    tmp2_14 := _loop_check_before_0
  }
  oldexcept1_1 := except1_1
  oldexcept2_1 := except2_1
  idle1 := false
  idle2 := false
  while (p1_4 && !except1_1 && !bypass1_0 && true || p2_4 && !except2_1 && !bypass2_0 && true)
    invariant (p1_4 && !except1_1 ==> [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _residue_150) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _residue_150) && _residue_147 <= _residue_150), true]) && (p2_4 && !except2_1 ==> [(forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: Level(_r_5) <= _residue_150_0) && ((forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: Level(_r_5) <= _residue_150_0) && _residue_147_0 <= _residue_150_0), true])
    invariant (p1_4 && !except1_1 ==> issubtype(typeof(x_4), int())) && (p2_4 && !except2_1 ==> issubtype(typeof(x_4_0), int()))
    invariant (p1_4 && !except1_1 ==> [true, !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_147)) == none && ((forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false))))]) && (p2_4 && !except2_1 ==> [true, !idle2 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate_0(_cthread_147_0)) == none && ((forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false))))])
    invariant (p1_4 && !except1_1 ==> [true, !idle1 ==> !_loop_check_before ==> (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]) && (p2_4 && !except2_1 ==> [true, !idle2 ==> !_loop_check_before_0 ==> (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)))])
    invariant bypass1_0 ==> tmp1_7 == _loop_measures
    invariant bypass1_0 ==> tmp1_8 == _cwl_147
    invariant bypass1_0 ==> tmp1_14 == _loop_check_before
    invariant bypass1_0 ==> tmp1_9 == divide_res_0
    invariant bypass1_0 ==> tmp1_12 == expr_res
    invariant bypass1_0 ==> tmp1_11 == except1_1
    invariant bypass1_0 ==> tmp1_10 == _err
    invariant bypass1_0 ==> tmp1_13 == x_4
    invariant bypass2_0 ==> tmp2_11 == except2_1
    invariant bypass2_0 ==> tmp2_10 == _err_2
    invariant bypass2_0 ==> tmp2_13 == x_4_0
    invariant bypass2_0 ==> tmp2_14 == _loop_check_before_0
    invariant bypass2_0 ==> tmp2_9 == divide_res_0_0
    invariant bypass2_0 ==> tmp2_8 == _cwl_147_0
    invariant bypass2_0 ==> tmp2_12 == expr_res_0
    invariant bypass2_0 ==> tmp2_7 == _loop_measures_0 
  {
    p1_5 := p1_4 && !except1_1 && true
    p2_5 := p2_4 && !except2_1 && true
    idle1 := p1_4 && !except1_1 && !true
    idle2 := p2_4 && !except2_1 && !true
    if (p1_5 && !except1_1) {
      _loop_measures := Seq[Measure$]()
    }
    if (p2_5 && !except2_1) {
      _loop_measures_0 := Seq[Measure$]()
    }
    // Method call: divide
  if (p1_5 && !except1_1 || p2_5 && !except2_1) {
      var tmp1_15: Ref
      var tmp2_15: Ref
      var tmp1_16: Seq[Measure$]
      var tmp2_16: Seq[Measure$]
      var tmp1_17: Perm
      var tmp2_17: Perm
      var tmp1_18: Ref
      var tmp2_18: Ref
      var tmp1_19: Ref
      var tmp2_19: Ref
      var tmp1_20: Perm
      var tmp2_20: Perm
      var tmp1_21: Ref
      var tmp2_21: Ref
      var tmp1_22: Ref
      var tmp2_22: Ref
      if (p1_5 && !except1_1) {
        tmp1_15 := _cthread_147
        tmp1_16 := _method_measures_147
        tmp1_17 := _residue_150
        tmp1_18 := __prim__int___box__(10)
        tmp1_19 := x_4
      }
      if (p2_5 && !except2_1) {
        tmp2_15 := _cthread_147_0
        tmp2_16 := _method_measures_147_0
        tmp2_17 := _residue_150_0
        tmp2_18 := __prim__int___box__(10)
        tmp2_19 := x_4_0
      }
      tmp1_20, tmp2_20, tmp1_21, tmp2_21, tmp1_22, tmp2_22 := divide(p1_5 && !except1_1, p2_5 && !except2_1, tmp1_15, tmp2_15, tmp1_16, tmp2_16, tmp1_17, tmp2_17, tmp1_18, tmp2_18, tmp1_19, tmp2_19)
      if (p1_5 && !except1_1) {
        _cwl_147 := tmp1_20
        divide_res_0 := tmp1_21
        _err := tmp1_22
      }
      if (p2_5 && !except2_1) {
        _cwl_147_0 := tmp2_20
        divide_res_0_0 := tmp2_21
        _err_2 := tmp2_22
      }
    }
    var p1_6: Bool
    var p2_6: Bool
    var p3_1: Bool
    var p4_1: Bool
    p1_6 := p1_5 && !except1_1 && _err != null
    p2_6 := p2_5 && !except2_1 && _err_2 != null
    p3_1 := p1_5 && !except1_1 && !(_err != null)
    p4_1 := p2_5 && !except2_1 && !(_err_2 != null)
    if (p1_6 && !except1_1) {
      except1_1 := true
    }
    if (p2_6 && !except2_1) {
      except2_1 := true
    }
    if (p1_5 && !except1_1) {
      expr_res := divide_res_0
      x_4 := __prim__int___box__(int___sub__(int___unbox__(x_4), 1))
      // We are after loop body._loop_check_before := false
    }
    if (p2_5 && !except2_1) {
      expr_res_0 := divide_res_0_0
      x_4_0 := __prim__int___box__(int___sub__(int___unbox__(x_4_0), 1))
      // We are after loop body._loop_check_before_0 := false
    }
    assert (p1_5 && !except1_1 ==> _loop_termination_flag ==> !true) && (p2_5 && !except2_1 ==> _loop_termination_flag_0 ==> !true)
    inhale !p1_4 || !except1_1
    inhale !p2_4 || !except2_1
  }
  // Loop Reconstruction.
  if (!bypass1_0 && except1_1 || !bypass2_0 && except2_1) {
    except1_1 := oldexcept1_1
    except2_1 := oldexcept2_1
    inhale (p1_4 && !except1_1 ==> [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _residue_150) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _residue_150) && _residue_147 <= _residue_150), true]) && (p2_4 && !except2_1 ==> [(forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: Level(_r_5) <= _residue_150_0) && ((forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: Level(_r_5) <= _residue_150_0) && _residue_147_0 <= _residue_150_0), true])
    inhale (p1_4 && !except1_1 ==> issubtype(typeof(x_4), int())) && (p2_4 && !except2_1 ==> issubtype(typeof(x_4_0), int()))
    inhale (p1_4 && !except1_1 ==> [true, !idle1 ==> _loop_check_before ==> _loop_termination_flag || perm(MustTerminate(_cthread_147)) == none && ((forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false))))]) && (p2_4 && !except2_1 ==> [true, !idle2 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || perm(MustTerminate_0(_cthread_147_0)) == none && ((forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false))))])
    inhale (p1_4 && !except1_1 ==> [true, !idle1 ==> !_loop_check_before ==> (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]) && (p2_4 && !except2_1 ==> [true, !idle2 ==> !_loop_check_before_0 ==> (forperm _r_6: Ref [MustInvokeBounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded_0(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: false)))])
    inhale p1_4 && !except1_1 ==> true
    inhale p2_4 && !except1_1 ==> true
    p1_5 := p1_4 && !except1_1 && true
    p2_5 := p2_4 && !except2_1 && true
    idle1 := p1_4 && !except1_1 && !true
    idle2 := p2_4 && !except2_1 && !true
    if (p1_5 && !except1_1) {
      _loop_measures := Seq[Measure$]()
    }
    if (p2_5 && !except2_1) {
      _loop_measures_0 := Seq[Measure$]()
    }
    // Method call: divide
  if (p1_5 && !except1_1 || p2_5 && !except2_1) {
      var tmp1_15: Ref
      var tmp2_15: Ref
      var tmp1_16: Seq[Measure$]
      var tmp2_16: Seq[Measure$]
      var tmp1_17: Perm
      var tmp2_17: Perm
      var tmp1_18: Ref
      var tmp2_18: Ref
      var tmp1_19: Ref
      var tmp2_19: Ref
      var tmp1_20: Perm
      var tmp2_20: Perm
      var tmp1_21: Ref
      var tmp2_21: Ref
      var tmp1_22: Ref
      var tmp2_22: Ref
      if (p1_5 && !except1_1) {
        tmp1_15 := _cthread_147
        tmp1_16 := _method_measures_147
        tmp1_17 := _residue_150
        tmp1_18 := __prim__int___box__(10)
        tmp1_19 := x_4
      }
      if (p2_5 && !except2_1) {
        tmp2_15 := _cthread_147_0
        tmp2_16 := _method_measures_147_0
        tmp2_17 := _residue_150_0
        tmp2_18 := __prim__int___box__(10)
        tmp2_19 := x_4_0
      }
      tmp1_20, tmp2_20, tmp1_21, tmp2_21, tmp1_22, tmp2_22 := divide(p1_5 && !except1_1, p2_5 && !except2_1, tmp1_15, tmp2_15, tmp1_16, tmp2_16, tmp1_17, tmp2_17, tmp1_18, tmp2_18, tmp1_19, tmp2_19)
      if (p1_5 && !except1_1) {
        _cwl_147 := tmp1_20
        divide_res_0 := tmp1_21
        _err := tmp1_22
      }
      if (p2_5 && !except2_1) {
        _cwl_147_0 := tmp2_20
        divide_res_0_0 := tmp2_21
        _err_2 := tmp2_22
      }
    }
    var p1_6: Bool
    var p2_6: Bool
    var p3_1: Bool
    var p4_1: Bool
    p1_6 := p1_5 && !except1_1 && _err != null
    p2_6 := p2_5 && !except2_1 && _err_2 != null
    p3_1 := p1_5 && !except1_1 && !(_err != null)
    p4_1 := p2_5 && !except2_1 && !(_err_2 != null)
    if (p1_6 && !except1_1) {
      except1_1 := true
    }
    if (p2_6 && !except2_1) {
      except2_1 := true
    }
    if (p1_5 && !except1_1) {
      expr_res := divide_res_0
      x_4 := __prim__int___box__(int___sub__(int___unbox__(x_4), 1))
      // We are after loop body._loop_check_before := false
    }
    if (p2_5 && !except2_1) {
      expr_res_0 := divide_res_0_0
      x_4_0 := __prim__int___box__(int___sub__(int___unbox__(x_4_0), 1))
      // We are after loop body._loop_check_before_0 := false
    }
    assert (p1_5 && !except1_1 ==> _loop_termination_flag ==> !true) && (p2_5 && !except2_1 ==> _loop_termination_flag_0 ==> !true)
    inhale !p1_5 || !!except1_1
    inhale !p2_5 || !!except2_1
  }
  if (p1_4 && !except1_1) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_147)) > none ==> acc(MustTerminate(_cthread_147), perm(MustTerminate(_cthread_147)) - _loop_original_must_terminate)
    _err := null
  }
  if (p2_4 && !except2_1) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_147_0)) > none ==> acc(MustTerminate_0(_cthread_147_0), perm(MustTerminate_0(_cthread_147_0)) - _loop_original_must_terminate_0)
    _err_2 := null
  }
}

method raiseOnZero(p1_7: Bool, p2_7: Bool, _cthread_148: Ref, _cthread_148_0: Ref, _caller_measures_148: Seq[Measure$], _caller_measures_148_0: Seq[Measure$], _residue_148: Perm, _residue_148_0: Perm, x_2: Ref, x_2_0: Ref) returns (_current_wait_level_148: Perm, _current_wait_level_148_0: Perm, _err: Ref, _err_3: Ref)
  requires (p1_7 ==> _cthread_148 != null) && (p2_7 ==> _cthread_148_0 != null)
  requires (p1_7 ==> issubtype(typeof(_cthread_148), Thread_0())) && (p2_7 ==> issubtype(typeof(_cthread_148_0), Thread_0()))
  requires (p1_7 ==> issubtype(typeof(x_2), int())) && (p2_7 ==> issubtype(typeof(x_2_0), int()))
  requires (p1_7 ==> [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false))))]) && (p2_7 ==> [true, perm(MustTerminate_0(_cthread_148_0)) == none && ((forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false))))])
  ensures (p1_7 ==> [(forperm _r_10: Ref [_r_10.MustReleaseBounded] :: Level(_r_10) <= _current_wait_level_148) && ((forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: Level(_r_10) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]) && (p2_7 ==> [(forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: Level(_r_10) <= _current_wait_level_148_0) && ((forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: Level(_r_10) <= _current_wait_level_148_0) && _residue_148_0 <= _current_wait_level_148_0), true])
  ensures (p1_7 ==> _err == null ==> !int___eq__(x_2, __prim__int___box__(0))) && (p2_7 ==> _err_3 == null ==> !int___eq__(x_2_0, __prim__int___box__(0)))
  ensures (p1_7 ==> _err != null && issubtype(typeof(_err), Exception()) ==> int___eq__(x_2, __prim__int___box__(0))) && (p2_7 ==> _err_3 != null && issubtype(typeof(_err_3), Exception()) ==> int___eq__(x_2_0, __prim__int___box__(0)))
  ensures (p1_7 ==> _err != null ==> issubtype(typeof(_err), Exception())) && (p2_7 ==> _err_3 != null ==> issubtype(typeof(_err_3), Exception()))
  ensures (p1_7 ==> [true, (forperm _r_11: Ref [MustInvokeBounded(_r_11)] :: false) && ((forperm _r_11: Ref [MustInvokeUnbounded(_r_11)] :: false) && ((forperm _r_11: Ref [_r_11.MustReleaseBounded] :: false) && (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: false)))]) && (p2_7 ==> [true, (forperm _r_11: Ref [MustInvokeBounded_0(_r_11)] :: false) && ((forperm _r_11: Ref [MustInvokeUnbounded_0(_r_11)] :: false) && ((forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: false) && (forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: false)))])
{
  var except1_2: Bool
  var except2_2: Bool
  inhale p1_7
  except1_2 := false
  except2_2 := false
  var x_5: Ref
  var x_5_0: Ref
  var Exception_res: Ref
  var Exception_res_0: Ref
  var _cwl_148: Perm
  var _cwl_148_0: Perm
  var _method_measures_148: Seq[Measure$]
  var _method_measures_148_0: Seq[Measure$]
  if (p1_7 && !except1_2) {
    _method_measures_148 := Seq[Measure$]()
    _err := null
    x_5 := x_2
  }
  if (p2_7 && !except2_2) {
    _method_measures_148_0 := Seq[Measure$]()
    _err_3 := null
    x_5_0 := x_2_0
  }
  var p1_8: Bool
  var p2_8: Bool
  var p3_2: Bool
  var p4_2: Bool
  p1_8 := p1_7 && !except1_2 && int___eq__(x_5, __prim__int___box__(0))
  p2_8 := p2_7 && !except2_2 && int___eq__(x_5_0, __prim__int___box__(0))
  p3_2 := p1_7 && !except1_2 && !int___eq__(x_5, __prim__int___box__(0))
  p4_2 := p2_7 && !except2_2 && !int___eq__(x_5_0, __prim__int___box__(0))
  var tmp_0: Ref
  tmp_0 := new()
  if (p1_8 && !except1_2) {
    Exception_res := tmp_0
  }
  if (p2_8 && !except2_2) {
    Exception_res_0 := tmp_0
  }
  if (p1_8 && !except1_2) {
    inhale typeof(Exception_res) == Exception()
  }
  if (p2_8 && !except2_2) {
    inhale typeof(Exception_res_0) == Exception()
  }
  if (p1_8 && !except1_2) {
    _err := Exception_res
    except1_2 := true
  }
  if (p2_8 && !except2_2) {
    _err_3 := Exception_res_0
    except2_2 := true
  }
}

method m3(p1_9: Bool, p2_9: Bool, _cthread_149: Ref, _cthread_149_0: Ref, _caller_measures_149: Seq[Measure$], _caller_measures_149_0: Seq[Measure$], _residue_149: Perm, _residue_149_0: Perm, secret: Ref, secret_1: Ref) returns (_current_wait_level_149: Perm, _current_wait_level_149_0: Perm, _res: Ref, _res_2: Ref)
  requires (p1_9 ==> _cthread_149 != null) && (p2_9 ==> _cthread_149_0 != null)
  requires (p1_9 ==> issubtype(typeof(_cthread_149), Thread_0())) && (p2_9 ==> issubtype(typeof(_cthread_149_0), Thread_0()))
  requires (p1_9 ==> issubtype(typeof(secret), int())) && (p2_9 ==> issubtype(typeof(secret_1), int()))
  requires (p1_9 ==> [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))]) && (p2_9 ==> [true, perm(MustTerminate_0(_cthread_149_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false))))])
  ensures (p1_9 ==> [(forperm _r_13: Ref [_r_13.MustReleaseBounded] :: Level(_r_13) <= _current_wait_level_149) && ((forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: Level(_r_13) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]) && (p2_9 ==> [(forperm _r_13: Ref [_r_13.MustReleaseBoundedp] :: Level(_r_13) <= _current_wait_level_149_0) && ((forperm _r_13: Ref [_r_13.MustReleaseUnboundedp] :: Level(_r_13) <= _current_wait_level_149_0) && _residue_149_0 <= _current_wait_level_149_0), true])
  ensures (p1_9 ==> issubtype(typeof(_res), int())) && (p2_9 ==> issubtype(typeof(_res_2), int()))
  ensures p1_9 && p2_9 ==> _res == _res_2
  ensures (p1_9 ==> [true, (forperm _r_14: Ref [MustInvokeBounded(_r_14)] :: false) && ((forperm _r_14: Ref [MustInvokeUnbounded(_r_14)] :: false) && ((forperm _r_14: Ref [_r_14.MustReleaseBounded] :: false) && (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: false)))]) && (p2_9 ==> [true, (forperm _r_14: Ref [MustInvokeBounded_0(_r_14)] :: false) && ((forperm _r_14: Ref [MustInvokeUnbounded_0(_r_14)] :: false) && ((forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: false) && (forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: false)))])
{
  var ret1_1: Bool
  var ret2_1: Bool
  var except1_3: Bool
  var except2_3: Bool
  inhale p1_9
  ret1_1 := false
  ret2_1 := false
  except1_3 := false
  except2_3 := false
  var _err: Ref
  var _err_4: Ref
  var r: Ref
  var r_4: Ref
  var error_0: Ref
  var error_0_0: Ref
  var try_finally_1: Int
  var try_finally_1_0: Int
  var secret_0: Ref
  var secret_0_0: Ref
  var _cwl_149: Perm
  var _cwl_149_0: Perm
  var _method_measures_149: Seq[Measure$]
  var _method_measures_149_0: Seq[Measure$]
  if (p1_9 && (!ret1_1 && !except1_3)) {
    _method_measures_149 := Seq[Measure$]()
    _res := null
    _err := null
    secret_0 := secret
    r := __prim__int___box__(34)
    inhale _isDefined(114)
  }
  if (p2_9 && (!ret2_1 && !except2_3)) {
    _method_measures_149_0 := Seq[Measure$]()
    _res_2 := null
    _err_4 := null
    secret_0_0 := secret_1
    r_4 := __prim__int___box__(34)
    inhale true
  }
  // Try/catch block
  var bypass1_1: Bool
  var bypass2_1: Bool
  var oldret1: Bool
  var oldret2: Bool
  var oldexcept1: Bool
  var oldexcept2: Bool
  var thisexcept1_0: Bool
  var thisexcept2_0: Bool
  var p1_11: Bool
  var p2_11: Bool
  var tmp_ret1: Bool
  var tmp_ret2: Bool
  var tmp_break1: Bool
  var tmp_break2: Bool
  var tmp_cont1: Bool
  var tmp_cont2: Bool
  var tmp_except1: Bool
  var tmp_except2: Bool
  bypass1_1 := !(p1_9 && (!ret1_1 && !except1_3))
  bypass2_1 := !(p2_9 && (!ret2_1 && !except2_3))
  oldret1 := ret1_1
  oldret2 := ret2_1
  oldexcept1 := except1_3
  oldexcept2 := except2_3
  // Method call: raiseOnZero
  if (p1_9 && (!ret1_1 && !except1_3) || p2_9 && (!ret2_1 && !except2_3)) {
    var tmp1_23: Ref
    var tmp2_23: Ref
    var tmp1_24: Seq[Measure$]
    var tmp2_24: Seq[Measure$]
    var tmp1_25: Perm
    var tmp2_25: Perm
    var tmp1_26: Ref
    var tmp2_26: Ref
    var tmp1_27: Perm
    var tmp2_27: Perm
    var tmp1_28: Ref
    var tmp2_28: Ref
    if (p1_9 && (!ret1_1 && !except1_3)) {
      tmp1_23 := _cthread_149
      tmp1_24 := _method_measures_149
      tmp1_25 := _residue_149
      tmp1_26 := secret_0
    }
    if (p2_9 && (!ret2_1 && !except2_3)) {
      tmp2_23 := _cthread_149_0
      tmp2_24 := _method_measures_149_0
      tmp2_25 := _residue_149_0
      tmp2_26 := secret_0_0
    }
    tmp1_27, tmp2_27, tmp1_28, tmp2_28 := raiseOnZero(p1_9 && (!ret1_1 && !except1_3), p2_9 && (!ret2_1 && !except2_3), tmp1_23, tmp2_23, tmp1_24, tmp2_24, tmp1_25, tmp2_25, tmp1_26, tmp2_26)
    if (p1_9 && (!ret1_1 && !except1_3)) {
      _cwl_149 := tmp1_27
      _err := tmp1_28
    }
    if (p2_9 && (!ret2_1 && !except2_3)) {
      _cwl_149_0 := tmp2_27
      _err_4 := tmp2_28
    }
  }
  var p1_10: Bool
  var p2_10: Bool
  var p3_3: Bool
  var p4_3: Bool
  p1_10 := p1_9 && (!ret1_1 && !except1_3) && _err != null
  p2_10 := p2_9 && (!ret2_1 && !except2_3) && _err_4 != null
  p3_3 := p1_9 && (!ret1_1 && !except1_3) && !(_err != null)
  p4_3 := p2_9 && (!ret2_1 && !except2_3) && !(_err_4 != null)
  if (p1_10 && (!ret1_1 && !except1_3)) {
    except1_3 := true
  }
  if (p2_10 && (!ret2_1 && !except2_3)) {
    except2_3 := true
  }
  thisexcept1_0 := except1_3 && !bypass1_1
  thisexcept2_0 := except2_3 && !bypass2_1
  p1_11 := p1_9 && (thisexcept1_0 && issubtype(typeof(_err), Exception()))
  p2_11 := p2_9 && (thisexcept2_0 && issubtype(typeof(_err_4), Exception()))
  if (p1_11) {
    except1_3 := false
  }
  if (p2_11) {
    except2_3 := false
  }
  if (p1_11 && (!ret1_1 && !except1_3)) {
    inhale _isDefined(1920099679)
    r := __prim__int___box__(35)
    inhale _isDefined(114)
  }
  if (p2_11 && (!ret2_1 && !except2_3)) {
    inhale true
    r_4 := __prim__int___box__(35)
    inhale true
  }
  if (p1_9 && (!ret1_1 && !except1_3)) {
    _err := null
  }
  if (p2_9 && (!ret2_1 && !except2_3)) {
    _err_4 := null
  }
  if (p1_9) {
    tmp_ret1 := ret1_1
    ret1_1 := oldret1
    tmp_except1 := except1_3
    except1_3 := oldexcept1
  }
  if (p2_9) {
    tmp_ret2 := ret2_1
    ret2_1 := oldret2
    tmp_except2 := except2_3
    except2_3 := oldexcept2
  }
  if (p1_9 && (!ret1_1 && !except1_3)) {
    r := __prim__int___box__(36)
    inhale _isDefined(114)
  }
  if (p2_9 && (!ret2_1 && !except2_3)) {
    r_4 := __prim__int___box__(36)
    inhale true
  }
  if (p1_9) {
    ret1_1 := ret1_1 || tmp_ret1
    except1_3 := except1_3 || tmp_except1
  }
  if (p2_9) {
    ret2_1 := ret2_1 || tmp_ret2
    except2_3 := except2_3 || tmp_except2
  }
  if (p1_9 && (!ret1_1 && !except1_3)) {
    _res := _checkDefined(r, 114)
    ret1_1 := true
  }
  if (p2_9 && (!ret2_1 && !except2_3)) {
    _res_2 := r_4
    ret2_1 := true
  }
  assert (p1_9 ==> !except1_3) && (p2_9 ==> !except2_3)
}

method main(p1_12: Bool, p2_12: Bool, _cthread_150: Ref, _cthread_150_0: Ref, _caller_measures_150: Seq[Measure$], _caller_measures_150_0: Seq[Measure$], _residue_151: Perm, _residue_151_0: Perm) returns (_current_wait_level_150: Perm, _current_wait_level_150_0: Perm)
  requires (p1_12 ==> _cthread_150 != null) && (p2_12 ==> _cthread_150_0 != null)
  requires (p1_12 ==> issubtype(typeof(_cthread_150), Thread_0())) && (p2_12 ==> issubtype(typeof(_cthread_150_0), Thread_0()))
  requires (p1_12 ==> [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false))))]) && (p2_12 ==> [true, perm(MustTerminate_0(_cthread_150_0)) == none && ((forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false))))])
  ensures (p1_12 ==> [(forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_150) && ((forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_150) && _residue_151 <= _current_wait_level_150), true]) && (p2_12 ==> [(forperm _r_16: Ref [_r_16.MustReleaseBoundedp] :: Level(_r_16) <= _current_wait_level_150_0) && ((forperm _r_16: Ref [_r_16.MustReleaseUnboundedp] :: Level(_r_16) <= _current_wait_level_150_0) && _residue_151_0 <= _current_wait_level_150_0), true])
  ensures (p1_12 ==> [true, (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)))]) && (p2_12 ==> [true, (forperm _r_17: Ref [MustInvokeBounded_0(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded_0(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_12
  var module_defined_0: Bool
  var module_defined_0_0: Bool
  var module_names_0: Set[_Name]
  var module_names_0_0: Set[_Name]
  var _err: Ref
  var _err_5: Ref
  var _cwl_150: Perm
  var _cwl_150_0: Perm
  var _method_measures_150: Seq[Measure$]
  var _method_measures_150_0: Seq[Measure$]
  if (p1_12) {
    _method_measures_150 := Seq[Measure$]()
    module_defined_0 := true
    module_names_0 := Set[_Name]()
    module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
    module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
    _err := null
  }
  if (p2_12) {
    _method_measures_150_0 := Seq[Measure$]()
    module_defined_0_0 := true
    module_names_0_0 := Set[_Name]()
    module_names_0_0 := (module_names_0_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file__()._valp, 99 / 100) && issubtype(typeof(__file__()._valp), str()) && issubtype(typeof(__file__()._valp), str())
    module_names_0_0 := (module_names_0_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name__()._valp, 99 / 100) && issubtype(typeof(__name__()._valp), str()) && issubtype(typeof(__name__()._valp), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._valp)
    _err_5 := null
  }
  assert (p1_12 ==> true) && (p2_12 ==> true)
  if (p1_12) {
    module_names_0 := (module_names_0 union Set(_single(6220297292069383709487359270173467037937596749)))
  }
  if (p2_12) {
    module_names_0_0 := (module_names_0_0 union Set(_single(6220297292069383709487359270173467037937596749)))
  }
  assert (p1_12 ==> true) && (p2_12 ==> true)
  if (p1_12) {
    module_names_0 := (module_names_0 union Set(_single(3799800128127735452)))
  }
  if (p2_12) {
    module_names_0_0 := (module_names_0_0 union Set(_single(3799800128127735452)))
  }
  assert (p1_12 ==> true) && (p2_12 ==> true)
  if (p1_12) {
    module_names_0 := (module_names_0 union Set(_single(12653)))
  }
  if (p2_12) {
    module_names_0_0 := (module_names_0_0 union Set(_single(12653)))
  }
  assert (p1_12 ==> true) && (p2_12 ==> true)
  if (p1_12) {
    module_names_0 := (module_names_0 union Set(_single(12909)))
  }
  if (p2_12) {
    module_names_0_0 := (module_names_0_0 union Set(_single(12909)))
  }
  assert (p1_12 ==> true) && (p2_12 ==> true)
  if (p1_12) {
    module_names_0 := (module_names_0 union Set(_single(3250737563861201980605686130)))
  }
  if (p2_12) {
    module_names_0_0 := (module_names_0_0 union Set(_single(3250737563861201980605686130)))
  }
  assert (p1_12 ==> true) && (p2_12 ==> true)
  if (p1_12) {
    module_names_0 := (module_names_0 union Set(_single(13165)))
  }
  if (p2_12) {
    module_names_0_0 := (module_names_0_0 union Set(_single(13165)))
  }
  assert true
}