domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getMethod_0(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getArg_0(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
  
  function getOld_0(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function loop_no_lowevent_threading(): ThreadingID
  
  unique function loop_termcond_high_threading(): ThreadingID
  
  unique function loop_termcond_not_tight_threading(): ThreadingID
  
  unique function loop_fixed_threading(): ThreadingID
  
  unique function continue_infinite_threading(): ThreadingID
  
  unique function return_ok_threading(): ThreadingID
  
  unique function nested_threading(): ThreadingID
  
  unique function terminates_threading(): ThreadingID
  
  unique function recursion_threading(): ThreadingID
  
  unique function recursion_fixed_threading(): ThreadingID
  
  unique function test_recursion_threading(): ThreadingID
  
  unique function cycle_1_threading(): ThreadingID
  
  unique function cycle_2_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field _valp: Ref

field __container: Ref

field __containerp: Ref

field __iter_index: Int

field __iter_indexp: Int

field __previous: Seq[Ref]

field __previousp: Seq[Ref]

field list_acc: Seq[Ref]

field list_accp: Seq[Ref]

field set_acc: Set[Ref]

field set_accp: Set[Ref]

field dict_acc: Set[Ref]

field dict_accp: Set[Ref]

field Measure$acc: Seq[Ref]

field Measure$accp: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseBoundedp: Int

field MustReleaseUnbounded: Int

field MustReleaseUnboundedp: Int

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function int___ge__(self: Int, other: Int): Bool 
{
  self >= other
}

function int___gt__(self: Int, other: Int): Bool 
{
  self > other
}

function int___le__(self: Int, other: Int): Bool 
{
  self <= other
}

function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function int___sub__(self: Int, other: Int): Int 
{
  self - other
}

function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustTerminate_0(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeBounded_0(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeUnbounded_0(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate MustInvokeCredit_0(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_start_0(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _thread_post_0(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate _MaySet_0(rec: Ref, id: Int) 

method loop_no_lowevent(p1: Bool, p2: Bool, _cthread_145: Ref, _cthread_145_0: Ref, _caller_measures_145: Seq[Measure$], _caller_measures_145_0: Seq[Measure$], _residue_145: Perm, _residue_145_0: Perm, h: Ref, h_15: Ref) returns (_current_wait_level_145: Perm, _current_wait_level_145_0: Perm)
  requires (p1 ==> _cthread_145 != null) && (p2 ==> _cthread_145_0 != null)
  requires (p1 ==> issubtype(typeof(_cthread_145), Thread_0())) && (p2 ==> issubtype(typeof(_cthread_145_0), Thread_0()))
  requires (p1 ==> issubtype(typeof(h), int())) && (p2 ==> issubtype(typeof(h_15), int()))
  requires p1 && p2 ==> h == h_15
  requires (p1 ==> [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))]) && (p2 ==> [true, perm(MustTerminate_0(_cthread_145_0)) == none && ((forperm _r_3: Ref [MustInvokeBounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded_0(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBoundedp] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnboundedp] :: false))))])
  ensures (p1 ==> [(forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_145) && ((forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]) && (p2 ==> [(forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: Level(_r_1) <= _current_wait_level_145_0) && ((forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: Level(_r_1) <= _current_wait_level_145_0) && _residue_145_0 <= _current_wait_level_145_0), true])
  ensures (p1 ==> [true, (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))]) && (p2 ==> [true, (forperm _r_2: Ref [MustInvokeBounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded_0(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBoundedp] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnboundedp] :: false)))])
{
  inhale p1
  var _err: Ref
  var _err_0: Ref
  var x_0: Ref
  var x_0_0: Ref
  var h_7: Ref
  var h_7_0: Ref
  var _loop_measures: Seq[Measure$]
  var _loop_measures_7: Seq[Measure$]
  var _loop_check_before: Bool
  var _loop_check_before_7: Bool
  var _loop_termination_flag: Bool
  var _loop_termination_flag_7: Bool
  var _loop_original_must_terminate: Perm
  var _loop_original_must_terminate_7: Perm
  var _residue_158: Perm
  var _residue_158_0: Perm
  var _cwl_145: Perm
  var _cwl_145_0: Perm
  var _method_measures_145: Seq[Measure$]
  var _method_measures_145_0: Seq[Measure$]
  if (p1) {
    _method_measures_145 := Seq[Measure$]()
    _err := null
    h_7 := h
    x_0 := h_7
    inhale _isDefined(3170168)
    // Save current MustTerminate amount._loop_original_must_terminate := perm(MustTerminate(_cthread_145))
    // Save loop termination promise._loop_termination_flag := int___ge__(int___unbox__(h_7), 0)
    // We are before loop._loop_check_before := true
  }
  if (p2) {
    _method_measures_145_0 := Seq[Measure$]()
    _err_0 := null
    h_7_0 := h_15
    x_0_0 := h_7_0
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_7 := perm(MustTerminate_0(_cthread_145_0))
    // Save loop termination promise._loop_termination_flag_7 := int___ge__(int___unbox__(h_7_0), 0)
    // We are before loop._loop_check_before_7 := true
  }
  var bypass1: Bool
  var bypass2: Bool
  var tmp1: Seq[Measure$]
  var tmp2: Seq[Measure$]
  var tmp1_0: Ref
  var tmp2_0: Ref
  var tmp1_1: Bool
  var tmp2_1: Bool
  var p1_0: Bool
  var p2_0: Bool
  var idle1: Bool
  var idle2: Bool
  var cond: Bool
  var cond_0: Bool
  bypass1 := !p1
  bypass2 := !p2
  if (bypass1) {
    tmp1 := _loop_measures
    tmp1_0 := x_0
    tmp1_1 := _loop_check_before
  }
  if (bypass2) {
    tmp2 := _loop_measures_7
    tmp2_0 := x_0_0
    tmp2_1 := _loop_check_before_7
  }
  idle1 := false
  idle2 := false
  assert (p1 ==> !int___ge__(int___unbox__(h_7), 0)) && (p2 ==> !int___ge__(int___unbox__(h_7_0), 0)) ==> p1 == p2
  assert p1 && p2 ==> int___ge__(int___unbox__(h_7), 0) == int___ge__(int___unbox__(h_7_0), 0)
  if (p1) {
    cond := int___ge__(int___unbox__(h_7), 0)
  }
  if (p2) {
    cond_0 := int___ge__(int___unbox__(h_7_0), 0)
  }
  while (p1 && !bypass1 && !int___eq__(_checkDefined(x_0, 3170168), __prim__int___box__(0)) || p2 && !bypass2 && !int___eq__(x_0_0, __prim__int___box__(0)))
    invariant (p1 ==> [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_158) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_158) && _residue_145 <= _residue_158), true]) && (p2 ==> [(forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _residue_158_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _residue_158_0) && _residue_145_0 <= _residue_158_0), true])
    invariant (p1 ==> issubtype(typeof(x_0), int())) && (p2 ==> issubtype(typeof(x_0_0), int()))
    invariant (p1 ==> int___le__(int___unbox__(_checkDefined(x_0, 3170168)), int___unbox__(h_7))) && (p2 ==> int___le__(int___unbox__(x_0_0), int___unbox__(h_7_0)))
    invariant (p1 ==> int___ge__(int___unbox__(h_7), 0) ==> int___ge__(int___unbox__(_checkDefined(x_0, 3170168)), 0)) && (p2 ==> int___ge__(int___unbox__(h_7_0), 0) ==> int___ge__(int___unbox__(x_0_0), 0))
    invariant (p1 ==> int___ge__(int___unbox__(h_7), 0) ==> (!int___eq__(_checkDefined(x_0, 3170168), __prim__int___box__(0)) ==> int___unbox__(_checkDefined(x_0, 3170168)) > 0) && [acc(MustTerminate(_cthread_145), write), true]) && (p2 ==> int___ge__(int___unbox__(h_7_0), 0) ==> (!int___eq__(x_0_0, __prim__int___box__(0)) ==> int___unbox__(x_0_0) > 0) && [acc(MustTerminate_0(_cthread_145_0), write), true]) && true
    invariant (p1 ==> [true, !idle1 ==> _loop_check_before ==> _loop_termination_flag || (int___eq__(_checkDefined(x_0, 3170168), __prim__int___box__(0)) || perm(MustTerminate(_cthread_145)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))]) && (p2 ==> [true, !idle2 ==> _loop_check_before_7 ==> _loop_termination_flag_7 || (int___eq__(x_0_0, __prim__int___box__(0)) || perm(MustTerminate_0(_cthread_145_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))))])
    invariant (p1 ==> [true, !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]) && (p2 ==> [true, !idle2 ==> !_loop_check_before_7 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))])
    invariant (p1 ==> !cond ==> !int___eq__(_checkDefined(x_0, 3170168), __prim__int___box__(0))) && (p2 ==> !cond_0 ==> !int___eq__(x_0_0, __prim__int___box__(0)))
    invariant bypass1 ==> tmp1 == _loop_measures
    invariant bypass1 ==> tmp1_0 == x_0
    invariant bypass1 ==> tmp1_1 == _loop_check_before
    invariant bypass2 ==> tmp2 == _loop_measures_7
    invariant bypass2 ==> tmp2_0 == x_0_0
    invariant bypass2 ==> tmp2_1 == _loop_check_before_7 
  {
    p1_0 := p1 && !int___eq__(_checkDefined(x_0, 3170168), __prim__int___box__(0))
    p2_0 := p2 && !int___eq__(x_0_0, __prim__int___box__(0))
    idle1 := p1 && !!int___eq__(_checkDefined(x_0, 3170168), __prim__int___box__(0))
    idle2 := p2 && !!int___eq__(x_0_0, __prim__int___box__(0))
    if (p1_0) {
      _loop_measures := Seq(Measure$create(int___ge__(int___unbox__(h_7), 0), _cthread_145, int___unbox__(_checkDefined(x_0, 3170168))))
      x_0 := __prim__int___box__(int___sub__(int___unbox__(x_0), 1))
      inhale _isDefined(3170168)
      // We are after loop body._loop_check_before := false
    }
    if (p2_0) {
      _loop_measures_7 := Seq(Measure$create(int___ge__(int___unbox__(h_7_0), 0), _cthread_145_0, int___unbox__(x_0_0)))
      x_0_0 := __prim__int___box__(int___sub__(int___unbox__(x_0_0), 1))
      inhale true
      // We are after loop body._loop_check_before_7 := false
    }
    assert (p1_0 ==> _loop_termination_flag ==> !!int___eq__(_checkDefined(x_0, 3170168), __prim__int___box__(0)) || int___ge__(int___unbox__(h_7), 0) && Measure$check(_loop_measures, _cthread_145, int___unbox__(_checkDefined(x_0, 3170168)))) && (p2_0 ==> _loop_termination_flag_7 ==> !!int___eq__(x_0_0, __prim__int___box__(0)) || int___ge__(int___unbox__(h_7_0), 0) && Measure$check(_loop_measures_7, _cthread_145_0, int___unbox__(x_0_0)))
    inhale !p1 || true
    inhale !p2 || true
  }
  if (p1) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_145)) > none ==> acc(MustTerminate(_cthread_145), perm(MustTerminate(_cthread_145)) - _loop_original_must_terminate)
  }
  if (p2) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_145_0)) > none ==> acc(MustTerminate_0(_cthread_145_0), perm(MustTerminate_0(_cthread_145_0)) - _loop_original_must_terminate_7)
  }
  assert true
}

method loop_termcond_high(p1_1: Bool, p2_1: Bool, _cthread_146: Ref, _cthread_146_0: Ref, _caller_measures_146: Seq[Measure$], _caller_measures_146_0: Seq[Measure$], _residue_146: Perm, _residue_146_0: Perm, h_0: Ref, h_0_0: Ref) returns (_current_wait_level_146: Perm, _current_wait_level_146_0: Perm)
  requires (p1_1 ==> _cthread_146 != null) && (p2_1 ==> _cthread_146_0 != null)
  requires (p1_1 ==> issubtype(typeof(_cthread_146), Thread_0())) && (p2_1 ==> issubtype(typeof(_cthread_146_0), Thread_0()))
  requires (p1_1 ==> issubtype(typeof(h_0), int())) && (p2_1 ==> issubtype(typeof(h_0_0), int()))
  requires p1_1 == p2_1
  requires (p1_1 ==> [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false))))]) && (p2_1 ==> [true, perm(MustTerminate_0(_cthread_146_0)) == none && ((forperm _r_8: Ref [MustInvokeBounded_0(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded_0(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBoundedp] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnboundedp] :: false))))])
  ensures (p1_1 ==> [(forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_146) && ((forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]) && (p2_1 ==> [(forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: Level(_r_6) <= _current_wait_level_146_0) && ((forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: Level(_r_6) <= _current_wait_level_146_0) && _residue_146_0 <= _current_wait_level_146_0), true])
  ensures (p1_1 ==> [true, (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))]) && (p2_1 ==> [true, (forperm _r_7: Ref [MustInvokeBounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBoundedp] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_1
  var _err: Ref
  var _err_1: Ref
  var x_1: Ref
  var x_1_0: Ref
  var h_8: Ref
  var h_8_0: Ref
  var _loop_measures_0: Seq[Measure$]
  var _loop_measures_0_0: Seq[Measure$]
  var _loop_check_before_0: Bool
  var _loop_check_before_0_0: Bool
  var _loop_termination_flag_0: Bool
  var _loop_termination_flag_0_0: Bool
  var _loop_original_must_terminate_0: Perm
  var _loop_original_must_terminate_0_0: Perm
  var _residue_159: Perm
  var _residue_159_0: Perm
  var _cwl_146: Perm
  var _cwl_146_0: Perm
  var _method_measures_146: Seq[Measure$]
  var _method_measures_146_0: Seq[Measure$]
  if (p1_1) {
    _method_measures_146 := Seq[Measure$]()
    _err := null
    h_8 := h_0
    x_1 := h_8
    inhale _isDefined(3235704)
    // Save current MustTerminate amount._loop_original_must_terminate_0 := perm(MustTerminate(_cthread_146))
    // Save loop termination promise._loop_termination_flag_0 := int___ge__(int___unbox__(h_8), 0)
    // We are before loop._loop_check_before_0 := true
  }
  if (p2_1) {
    _method_measures_146_0 := Seq[Measure$]()
    _err_1 := null
    h_8_0 := h_0_0
    x_1_0 := h_8_0
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_0_0 := perm(MustTerminate_0(_cthread_146_0))
    // Save loop termination promise._loop_termination_flag_0_0 := int___ge__(int___unbox__(h_8_0), 0)
    // We are before loop._loop_check_before_0_0 := true
  }
  var bypass1_0: Bool
  var bypass2_0: Bool
  var tmp1_2: Seq[Measure$]
  var tmp2_2: Seq[Measure$]
  var tmp1_3: Ref
  var tmp2_3: Ref
  var tmp1_4: Bool
  var tmp2_4: Bool
  var p1_2: Bool
  var p2_2: Bool
  var idle1_0: Bool
  var idle2_0: Bool
  var cond_1: Bool
  var cond_2: Bool
  bypass1_0 := !p1_1
  bypass2_0 := !p2_1
  if (bypass1_0) {
    tmp1_2 := _loop_measures_0
    tmp1_3 := x_1
    tmp1_4 := _loop_check_before_0
  }
  if (bypass2_0) {
    tmp2_2 := _loop_measures_0_0
    tmp2_3 := x_1_0
    tmp2_4 := _loop_check_before_0_0
  }
  idle1_0 := false
  idle2_0 := false
  assert (p1_1 ==> !int___ge__(int___unbox__(h_8), 0)) && (p2_1 ==> !int___ge__(int___unbox__(h_8_0), 0)) ==> p1_1 == p2_1
  assert p1_1 && p2_1 ==> int___ge__(int___unbox__(h_8), 0) == int___ge__(int___unbox__(h_8_0), 0)
  if (p1_1) {
    cond_1 := int___ge__(int___unbox__(h_8), 0)
  }
  if (p2_1) {
    cond_2 := int___ge__(int___unbox__(h_8_0), 0)
  }
  while (p1_1 && !bypass1_0 && !int___eq__(_checkDefined(x_1, 3235704), __prim__int___box__(0)) || p2_1 && !bypass2_0 && !int___eq__(x_1_0, __prim__int___box__(0)))
    invariant (p1_1 ==> [(forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_159) && ((forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_159) && _residue_146 <= _residue_159), true]) && (p2_1 ==> [(forperm _r_4: Ref [_r_4.MustReleaseBoundedp] :: Level(_r_4) <= _residue_159_0) && ((forperm _r_4: Ref [_r_4.MustReleaseUnboundedp] :: Level(_r_4) <= _residue_159_0) && _residue_146_0 <= _residue_159_0), true])
    invariant (p1_1 ==> issubtype(typeof(x_1), int())) && (p2_1 ==> issubtype(typeof(x_1_0), int()))
    invariant (p1_1 ==> int___le__(int___unbox__(_checkDefined(x_1, 3235704)), int___unbox__(h_8))) && (p2_1 ==> int___le__(int___unbox__(x_1_0), int___unbox__(h_8_0)))
    invariant (p1_1 ==> int___ge__(int___unbox__(h_8), 0) ==> int___ge__(int___unbox__(_checkDefined(x_1, 3235704)), 0)) && (p2_1 ==> int___ge__(int___unbox__(h_8_0), 0) ==> int___ge__(int___unbox__(x_1_0), 0))
    invariant (p1_1 ==> int___ge__(int___unbox__(h_8), 0) ==> (!int___eq__(_checkDefined(x_1, 3235704), __prim__int___box__(0)) ==> int___unbox__(_checkDefined(x_1, 3235704)) > 0) && [acc(MustTerminate(_cthread_146), write), true]) && (p2_1 ==> int___ge__(int___unbox__(h_8_0), 0) ==> (!int___eq__(x_1_0, __prim__int___box__(0)) ==> int___unbox__(x_1_0) > 0) && [acc(MustTerminate_0(_cthread_146_0), write), true]) && true
    invariant (p1_1 ==> [true, !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (int___eq__(_checkDefined(x_1, 3235704), __prim__int___box__(0)) || perm(MustTerminate(_cthread_146)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))]) && (p2_1 ==> [true, !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (int___eq__(x_1_0, __prim__int___box__(0)) || perm(MustTerminate_0(_cthread_146_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))])
    invariant (p1_1 ==> [true, !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))]) && (p2_1 ==> [true, !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))])
    invariant (p1_1 ==> !cond_1 ==> !int___eq__(_checkDefined(x_1, 3235704), __prim__int___box__(0))) && (p2_1 ==> !cond_2 ==> !int___eq__(x_1_0, __prim__int___box__(0)))
    invariant bypass1_0 ==> tmp1_2 == _loop_measures_0
    invariant bypass1_0 ==> tmp1_3 == x_1
    invariant bypass1_0 ==> tmp1_4 == _loop_check_before_0
    invariant bypass2_0 ==> tmp2_2 == _loop_measures_0_0
    invariant bypass2_0 ==> tmp2_3 == x_1_0
    invariant bypass2_0 ==> tmp2_4 == _loop_check_before_0_0 
  {
    p1_2 := p1_1 && !int___eq__(_checkDefined(x_1, 3235704), __prim__int___box__(0))
    p2_2 := p2_1 && !int___eq__(x_1_0, __prim__int___box__(0))
    idle1_0 := p1_1 && !!int___eq__(_checkDefined(x_1, 3235704), __prim__int___box__(0))
    idle2_0 := p2_1 && !!int___eq__(x_1_0, __prim__int___box__(0))
    if (p1_2) {
      _loop_measures_0 := Seq(Measure$create(int___ge__(int___unbox__(h_8), 0), _cthread_146, int___unbox__(_checkDefined(x_1, 3235704))))
      x_1 := __prim__int___box__(int___sub__(int___unbox__(x_1), 1))
      inhale _isDefined(3235704)
      // We are after loop body._loop_check_before_0 := false
    }
    if (p2_2) {
      _loop_measures_0_0 := Seq(Measure$create(int___ge__(int___unbox__(h_8_0), 0), _cthread_146_0, int___unbox__(x_1_0)))
      x_1_0 := __prim__int___box__(int___sub__(int___unbox__(x_1_0), 1))
      inhale true
      // We are after loop body._loop_check_before_0_0 := false
    }
    assert (p1_2 ==> _loop_termination_flag_0 ==> !!int___eq__(_checkDefined(x_1, 3235704), __prim__int___box__(0)) || int___ge__(int___unbox__(h_8), 0) && Measure$check(_loop_measures_0, _cthread_146, int___unbox__(_checkDefined(x_1, 3235704)))) && (p2_2 ==> _loop_termination_flag_0_0 ==> !!int___eq__(x_1_0, __prim__int___box__(0)) || int___ge__(int___unbox__(h_8_0), 0) && Measure$check(_loop_measures_0_0, _cthread_146_0, int___unbox__(x_1_0)))
    inhale !p1_1 || true
    inhale !p2_1 || true
  }
  if (p1_1) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_146)) > none ==> acc(MustTerminate(_cthread_146), perm(MustTerminate(_cthread_146)) - _loop_original_must_terminate_0)
  }
  if (p2_1) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_146_0)) > none ==> acc(MustTerminate_0(_cthread_146_0), perm(MustTerminate_0(_cthread_146_0)) - _loop_original_must_terminate_0_0)
  }
  assert true
}

method loop_termcond_not_tight(p1_3: Bool, p2_3: Bool, _cthread_147: Ref, _cthread_147_0: Ref, _caller_measures_147: Seq[Measure$], _caller_measures_147_0: Seq[Measure$], _residue_147: Perm, _residue_147_0: Perm, h_1: Ref, h_1_0: Ref) returns (_current_wait_level_147: Perm, _current_wait_level_147_0: Perm)
  requires (p1_3 ==> _cthread_147 != null) && (p2_3 ==> _cthread_147_0 != null)
  requires (p1_3 ==> issubtype(typeof(_cthread_147), Thread_0())) && (p2_3 ==> issubtype(typeof(_cthread_147_0), Thread_0()))
  requires (p1_3 ==> issubtype(typeof(h_1), int())) && (p2_3 ==> issubtype(typeof(h_1_0), int()))
  requires p1_3 == p2_3
  requires p1_3 && p2_3 ==> h_1 == h_1_0
  requires (p1_3 ==> [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]) && (p2_3 ==> [true, perm(MustTerminate_0(_cthread_147_0)) == none && ((forperm _r_13: Ref [MustInvokeBounded_0(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded_0(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBoundedp] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnboundedp] :: false))))])
  ensures (p1_3 ==> [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_147) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]) && (p2_3 ==> [(forperm _r_11: Ref [_r_11.MustReleaseBoundedp] :: Level(_r_11) <= _current_wait_level_147_0) && ((forperm _r_11: Ref [_r_11.MustReleaseUnboundedp] :: Level(_r_11) <= _current_wait_level_147_0) && _residue_147_0 <= _current_wait_level_147_0), true])
  ensures (p1_3 ==> [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]) && (p2_3 ==> [true, (forperm _r_12: Ref [MustInvokeBounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded_0(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBoundedp] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_3
  var _err: Ref
  var _err_2: Ref
  var x_2: Ref
  var x_2_0: Ref
  var h_9: Ref
  var h_9_0: Ref
  var _loop_measures_1: Seq[Measure$]
  var _loop_measures_1_0: Seq[Measure$]
  var _loop_check_before_1: Bool
  var _loop_check_before_1_0: Bool
  var _loop_termination_flag_1: Bool
  var _loop_termination_flag_1_0: Bool
  var _loop_original_must_terminate_1: Perm
  var _loop_original_must_terminate_1_0: Perm
  var _residue_160: Perm
  var _residue_160_0: Perm
  var _cwl_147: Perm
  var _cwl_147_0: Perm
  var _method_measures_147: Seq[Measure$]
  var _method_measures_147_0: Seq[Measure$]
  if (p1_3) {
    _method_measures_147 := Seq[Measure$]()
    _err := null
    h_9 := h_1
    x_2 := h_9
    inhale _isDefined(3301240)
    // Save current MustTerminate amount._loop_original_must_terminate_1 := perm(MustTerminate(_cthread_147))
    // Save loop termination promise._loop_termination_flag_1 := int___gt__(int___unbox__(h_9), 0)
    // We are before loop._loop_check_before_1 := true
  }
  if (p2_3) {
    _method_measures_147_0 := Seq[Measure$]()
    _err_2 := null
    h_9_0 := h_1_0
    x_2_0 := h_9_0
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_1_0 := perm(MustTerminate_0(_cthread_147_0))
    // Save loop termination promise._loop_termination_flag_1_0 := int___gt__(int___unbox__(h_9_0), 0)
    // We are before loop._loop_check_before_1_0 := true
  }
  var bypass1_1: Bool
  var bypass2_1: Bool
  var tmp1_5: Seq[Measure$]
  var tmp2_5: Seq[Measure$]
  var tmp1_6: Ref
  var tmp2_6: Ref
  var tmp1_7: Bool
  var tmp2_7: Bool
  var p1_4: Bool
  var p2_4: Bool
  var idle1_1: Bool
  var idle2_1: Bool
  var cond_3: Bool
  var cond_4: Bool
  bypass1_1 := !p1_3
  bypass2_1 := !p2_3
  if (bypass1_1) {
    tmp1_5 := _loop_measures_1
    tmp1_6 := x_2
    tmp1_7 := _loop_check_before_1
  }
  if (bypass2_1) {
    tmp2_5 := _loop_measures_1_0
    tmp2_6 := x_2_0
    tmp2_7 := _loop_check_before_1_0
  }
  idle1_1 := false
  idle2_1 := false
  assert (p1_3 ==> !int___gt__(int___unbox__(h_9), 0)) && (p2_3 ==> !int___gt__(int___unbox__(h_9_0), 0)) ==> p1_3 == p2_3
  assert p1_3 && p2_3 ==> int___gt__(int___unbox__(h_9), 0) == int___gt__(int___unbox__(h_9_0), 0)
  if (p1_3) {
    cond_3 := int___gt__(int___unbox__(h_9), 0)
  }
  if (p2_3) {
    cond_4 := int___gt__(int___unbox__(h_9_0), 0)
  }
  while (p1_3 && !bypass1_1 && !int___eq__(_checkDefined(x_2, 3301240), __prim__int___box__(0)) || p2_3 && !bypass2_1 && !int___eq__(x_2_0, __prim__int___box__(0)))
    invariant (p1_3 ==> [(forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _residue_160) && ((forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _residue_160) && _residue_147 <= _residue_160), true]) && (p2_3 ==> [(forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: Level(_r_9) <= _residue_160_0) && ((forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: Level(_r_9) <= _residue_160_0) && _residue_147_0 <= _residue_160_0), true])
    invariant (p1_3 ==> issubtype(typeof(x_2), int())) && (p2_3 ==> issubtype(typeof(x_2_0), int()))
    invariant (p1_3 ==> int___le__(int___unbox__(_checkDefined(x_2, 3301240)), int___unbox__(h_9))) && (p2_3 ==> int___le__(int___unbox__(x_2_0), int___unbox__(h_9_0)))
    invariant (p1_3 ==> int___gt__(int___unbox__(h_9), 0) ==> int___ge__(int___unbox__(_checkDefined(x_2, 3301240)), 0)) && (p2_3 ==> int___gt__(int___unbox__(h_9_0), 0) ==> int___ge__(int___unbox__(x_2_0), 0))
    invariant (p1_3 ==> int___gt__(int___unbox__(h_9), 0) ==> (!int___eq__(_checkDefined(x_2, 3301240), __prim__int___box__(0)) ==> int___unbox__(_checkDefined(x_2, 3301240)) > 0) && [acc(MustTerminate(_cthread_147), write), true]) && (p2_3 ==> int___gt__(int___unbox__(h_9_0), 0) ==> (!int___eq__(x_2_0, __prim__int___box__(0)) ==> int___unbox__(x_2_0) > 0) && [acc(MustTerminate_0(_cthread_147_0), write), true]) && true
    invariant (p1_3 ==> [true, !idle1_1 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || (int___eq__(_checkDefined(x_2, 3301240), __prim__int___box__(0)) || perm(MustTerminate(_cthread_147)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))))]) && (p2_3 ==> [true, !idle2_1 ==> _loop_check_before_1_0 ==> _loop_termination_flag_1_0 || (int___eq__(x_2_0, __prim__int___box__(0)) || perm(MustTerminate_0(_cthread_147_0)) == none && ((forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))))])
    invariant (p1_3 ==> [true, !idle1_1 ==> !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))]) && (p2_3 ==> [true, !idle2_1 ==> !_loop_check_before_1_0 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))])
    invariant (p1_3 ==> !cond_3 ==> !int___eq__(_checkDefined(x_2, 3301240), __prim__int___box__(0))) && (p2_3 ==> !cond_4 ==> !int___eq__(x_2_0, __prim__int___box__(0)))
    invariant bypass1_1 ==> tmp1_5 == _loop_measures_1
    invariant bypass1_1 ==> tmp1_6 == x_2
    invariant bypass1_1 ==> tmp1_7 == _loop_check_before_1
    invariant bypass2_1 ==> tmp2_5 == _loop_measures_1_0
    invariant bypass2_1 ==> tmp2_6 == x_2_0
    invariant bypass2_1 ==> tmp2_7 == _loop_check_before_1_0 
  {
    p1_4 := p1_3 && !int___eq__(_checkDefined(x_2, 3301240), __prim__int___box__(0))
    p2_4 := p2_3 && !int___eq__(x_2_0, __prim__int___box__(0))
    idle1_1 := p1_3 && !!int___eq__(_checkDefined(x_2, 3301240), __prim__int___box__(0))
    idle2_1 := p2_3 && !!int___eq__(x_2_0, __prim__int___box__(0))
    if (p1_4) {
      _loop_measures_1 := Seq(Measure$create(int___gt__(int___unbox__(h_9), 0), _cthread_147, int___unbox__(_checkDefined(x_2, 3301240))))
      x_2 := __prim__int___box__(int___sub__(int___unbox__(x_2), 1))
      inhale _isDefined(3301240)
      // We are after loop body._loop_check_before_1 := false
    }
    if (p2_4) {
      _loop_measures_1_0 := Seq(Measure$create(int___gt__(int___unbox__(h_9_0), 0), _cthread_147_0, int___unbox__(x_2_0)))
      x_2_0 := __prim__int___box__(int___sub__(int___unbox__(x_2_0), 1))
      inhale true
      // We are after loop body._loop_check_before_1_0 := false
    }
    assert (p1_4 ==> _loop_termination_flag_1 ==> !!int___eq__(_checkDefined(x_2, 3301240), __prim__int___box__(0)) || int___gt__(int___unbox__(h_9), 0) && Measure$check(_loop_measures_1, _cthread_147, int___unbox__(_checkDefined(x_2, 3301240)))) && (p2_4 ==> _loop_termination_flag_1_0 ==> !!int___eq__(x_2_0, __prim__int___box__(0)) || int___gt__(int___unbox__(h_9_0), 0) && Measure$check(_loop_measures_1_0, _cthread_147_0, int___unbox__(x_2_0)))
    inhale !p1_3 || true
    inhale !p2_3 || true
  }
  if (p1_3) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_147)) > none ==> acc(MustTerminate(_cthread_147), perm(MustTerminate(_cthread_147)) - _loop_original_must_terminate_1)
  }
  if (p2_3) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_147_0)) > none ==> acc(MustTerminate_0(_cthread_147_0), perm(MustTerminate_0(_cthread_147_0)) - _loop_original_must_terminate_1_0)
  }
  assert true
}

method loop_fixed(p1_5: Bool, p2_5: Bool, _cthread_148: Ref, _cthread_148_0: Ref, _caller_measures_148: Seq[Measure$], _caller_measures_148_0: Seq[Measure$], _residue_148: Perm, _residue_148_0: Perm, l: Ref, l_1: Ref) returns (_current_wait_level_148: Perm, _current_wait_level_148_0: Perm)
  requires (p1_5 ==> _cthread_148 != null) && (p2_5 ==> _cthread_148_0 != null)
  requires (p1_5 ==> issubtype(typeof(_cthread_148), Thread_0())) && (p2_5 ==> issubtype(typeof(_cthread_148_0), Thread_0()))
  requires (p1_5 ==> issubtype(typeof(l), int())) && (p2_5 ==> issubtype(typeof(l_1), int()))
  requires p1_5 == p2_5
  requires p1_5 && p2_5 ==> l == l_1
  requires (p1_5 ==> [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false))))]) && (p2_5 ==> [true, perm(MustTerminate_0(_cthread_148_0)) == none && ((forperm _r_18: Ref [MustInvokeBounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded_0(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBoundedp] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnboundedp] :: false))))])
  ensures (p1_5 ==> [(forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_148) && ((forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]) && (p2_5 ==> [(forperm _r_16: Ref [_r_16.MustReleaseBoundedp] :: Level(_r_16) <= _current_wait_level_148_0) && ((forperm _r_16: Ref [_r_16.MustReleaseUnboundedp] :: Level(_r_16) <= _current_wait_level_148_0) && _residue_148_0 <= _current_wait_level_148_0), true])
  ensures (p1_5 ==> [true, (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)))]) && (p2_5 ==> [true, (forperm _r_17: Ref [MustInvokeBounded_0(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded_0(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBoundedp] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_5
  var _err: Ref
  var _err_3: Ref
  var x_3: Ref
  var x_3_0: Ref
  var l_0: Ref
  var l_0_0: Ref
  var _loop_measures_2: Seq[Measure$]
  var _loop_measures_2_0: Seq[Measure$]
  var _loop_check_before_2: Bool
  var _loop_check_before_2_0: Bool
  var _loop_termination_flag_2: Bool
  var _loop_termination_flag_2_0: Bool
  var _loop_original_must_terminate_2: Perm
  var _loop_original_must_terminate_2_0: Perm
  var _residue_161: Perm
  var _residue_161_0: Perm
  var _cwl_148: Perm
  var _cwl_148_0: Perm
  var _method_measures_148: Seq[Measure$]
  var _method_measures_148_0: Seq[Measure$]
  if (p1_5) {
    _method_measures_148 := Seq[Measure$]()
    _err := null
    l_0 := l
    x_3 := l_0
    inhale _isDefined(3366776)
    // Save current MustTerminate amount._loop_original_must_terminate_2 := perm(MustTerminate(_cthread_148))
    // Save loop termination promise._loop_termination_flag_2 := int___ge__(int___unbox__(l_0), 0)
    // We are before loop._loop_check_before_2 := true
  }
  if (p2_5) {
    _method_measures_148_0 := Seq[Measure$]()
    _err_3 := null
    l_0_0 := l_1
    x_3_0 := l_0_0
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_2_0 := perm(MustTerminate_0(_cthread_148_0))
    // Save loop termination promise._loop_termination_flag_2_0 := int___ge__(int___unbox__(l_0_0), 0)
    // We are before loop._loop_check_before_2_0 := true
  }
  var bypass1_2: Bool
  var bypass2_2: Bool
  var tmp1_8: Seq[Measure$]
  var tmp2_8: Seq[Measure$]
  var tmp1_9: Ref
  var tmp2_9: Ref
  var tmp1_10: Bool
  var tmp2_10: Bool
  var p1_6: Bool
  var p2_6: Bool
  var idle1_2: Bool
  var idle2_2: Bool
  var cond_5: Bool
  var cond_6: Bool
  bypass1_2 := !p1_5
  bypass2_2 := !p2_5
  if (bypass1_2) {
    tmp1_8 := _loop_measures_2
    tmp1_9 := x_3
    tmp1_10 := _loop_check_before_2
  }
  if (bypass2_2) {
    tmp2_8 := _loop_measures_2_0
    tmp2_9 := x_3_0
    tmp2_10 := _loop_check_before_2_0
  }
  idle1_2 := false
  idle2_2 := false
  assert (p1_5 ==> !int___ge__(int___unbox__(l_0), 0)) && (p2_5 ==> !int___ge__(int___unbox__(l_0_0), 0)) ==> p1_5 == p2_5
  assert p1_5 && p2_5 ==> int___ge__(int___unbox__(l_0), 0) == int___ge__(int___unbox__(l_0_0), 0)
  if (p1_5) {
    cond_5 := int___ge__(int___unbox__(l_0), 0)
  }
  if (p2_5) {
    cond_6 := int___ge__(int___unbox__(l_0_0), 0)
  }
  while (p1_5 && !bypass1_2 && !int___eq__(_checkDefined(x_3, 3366776), __prim__int___box__(0)) || p2_5 && !bypass2_2 && !int___eq__(x_3_0, __prim__int___box__(0)))
    invariant (p1_5 ==> [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _residue_161) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _residue_161) && _residue_148 <= _residue_161), true]) && (p2_5 ==> [(forperm _r_14: Ref [_r_14.MustReleaseBoundedp] :: Level(_r_14) <= _residue_161_0) && ((forperm _r_14: Ref [_r_14.MustReleaseUnboundedp] :: Level(_r_14) <= _residue_161_0) && _residue_148_0 <= _residue_161_0), true])
    invariant (p1_5 ==> issubtype(typeof(x_3), int())) && (p2_5 ==> issubtype(typeof(x_3_0), int()))
    invariant (p1_5 ==> int___le__(int___unbox__(_checkDefined(x_3, 3366776)), int___unbox__(l_0))) && (p2_5 ==> int___le__(int___unbox__(x_3_0), int___unbox__(l_0_0)))
    invariant (p1_5 ==> int___ge__(int___unbox__(l_0), 0) ==> int___ge__(int___unbox__(_checkDefined(x_3, 3366776)), 0)) && (p2_5 ==> int___ge__(int___unbox__(l_0_0), 0) ==> int___ge__(int___unbox__(x_3_0), 0))
    invariant (p1_5 ==> int___ge__(int___unbox__(l_0), 0) ==> (!int___eq__(_checkDefined(x_3, 3366776), __prim__int___box__(0)) ==> int___unbox__(_checkDefined(x_3, 3366776)) > 0) && [acc(MustTerminate(_cthread_148), write), true]) && (p2_5 ==> int___ge__(int___unbox__(l_0_0), 0) ==> (!int___eq__(x_3_0, __prim__int___box__(0)) ==> int___unbox__(x_3_0) > 0) && [acc(MustTerminate_0(_cthread_148_0), write), true]) && true
    invariant (p1_5 ==> [true, !idle1_2 ==> _loop_check_before_2 ==> _loop_termination_flag_2 || (int___eq__(_checkDefined(x_3, 3366776), __prim__int___box__(0)) || perm(MustTerminate(_cthread_148)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))))]) && (p2_5 ==> [true, !idle2_2 ==> _loop_check_before_2_0 ==> _loop_termination_flag_2_0 || (int___eq__(x_3_0, __prim__int___box__(0)) || perm(MustTerminate_0(_cthread_148_0)) == none && ((forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))))])
    invariant (p1_5 ==> [true, !idle1_2 ==> !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]) && (p2_5 ==> [true, !idle2_2 ==> !_loop_check_before_2_0 ==> (forperm _r_15: Ref [MustInvokeBounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded_0(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBoundedp] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnboundedp] :: false)))])
    invariant (p1_5 ==> !cond_5 ==> !int___eq__(_checkDefined(x_3, 3366776), __prim__int___box__(0))) && (p2_5 ==> !cond_6 ==> !int___eq__(x_3_0, __prim__int___box__(0)))
    invariant bypass1_2 ==> tmp1_8 == _loop_measures_2
    invariant bypass1_2 ==> tmp1_9 == x_3
    invariant bypass1_2 ==> tmp1_10 == _loop_check_before_2
    invariant bypass2_2 ==> tmp2_8 == _loop_measures_2_0
    invariant bypass2_2 ==> tmp2_9 == x_3_0
    invariant bypass2_2 ==> tmp2_10 == _loop_check_before_2_0 
  {
    p1_6 := p1_5 && !int___eq__(_checkDefined(x_3, 3366776), __prim__int___box__(0))
    p2_6 := p2_5 && !int___eq__(x_3_0, __prim__int___box__(0))
    idle1_2 := p1_5 && !!int___eq__(_checkDefined(x_3, 3366776), __prim__int___box__(0))
    idle2_2 := p2_5 && !!int___eq__(x_3_0, __prim__int___box__(0))
    if (p1_6) {
      _loop_measures_2 := Seq(Measure$create(int___ge__(int___unbox__(l_0), 0), _cthread_148, int___unbox__(_checkDefined(x_3, 3366776))))
      x_3 := __prim__int___box__(int___sub__(int___unbox__(x_3), 1))
      inhale _isDefined(3366776)
      // We are after loop body._loop_check_before_2 := false
    }
    if (p2_6) {
      _loop_measures_2_0 := Seq(Measure$create(int___ge__(int___unbox__(l_0_0), 0), _cthread_148_0, int___unbox__(x_3_0)))
      x_3_0 := __prim__int___box__(int___sub__(int___unbox__(x_3_0), 1))
      inhale true
      // We are after loop body._loop_check_before_2_0 := false
    }
    assert (p1_6 ==> _loop_termination_flag_2 ==> !!int___eq__(_checkDefined(x_3, 3366776), __prim__int___box__(0)) || int___ge__(int___unbox__(l_0), 0) && Measure$check(_loop_measures_2, _cthread_148, int___unbox__(_checkDefined(x_3, 3366776)))) && (p2_6 ==> _loop_termination_flag_2_0 ==> !!int___eq__(x_3_0, __prim__int___box__(0)) || int___ge__(int___unbox__(l_0_0), 0) && Measure$check(_loop_measures_2_0, _cthread_148_0, int___unbox__(x_3_0)))
    inhale !p1_5 || true
    inhale !p2_5 || true
  }
  if (p1_5) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_148)) > none ==> acc(MustTerminate(_cthread_148), perm(MustTerminate(_cthread_148)) - _loop_original_must_terminate_2)
  }
  if (p2_5) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_148_0)) > none ==> acc(MustTerminate_0(_cthread_148_0), perm(MustTerminate_0(_cthread_148_0)) - _loop_original_must_terminate_2_0)
  }
  assert true
}

method continue_infinite(p1_7: Bool, p2_7: Bool, _cthread_149: Ref, _cthread_149_0: Ref, _caller_measures_149: Seq[Measure$], _caller_measures_149_0: Seq[Measure$], _residue_149: Perm, _residue_149_0: Perm) returns (_current_wait_level_149: Perm, _current_wait_level_149_0: Perm)
  requires (p1_7 ==> _cthread_149 != null) && (p2_7 ==> _cthread_149_0 != null)
  requires (p1_7 ==> issubtype(typeof(_cthread_149), Thread_0())) && (p2_7 ==> issubtype(typeof(_cthread_149_0), Thread_0()))
  requires (p1_7 ==> [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false))))]) && (p2_7 ==> [true, perm(MustTerminate_0(_cthread_149_0)) == none && ((forperm _r_23: Ref [MustInvokeBounded_0(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded_0(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBoundedp] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnboundedp] :: false))))])
  ensures (p1_7 ==> [(forperm _r_21: Ref [_r_21.MustReleaseBounded] :: Level(_r_21) <= _current_wait_level_149) && ((forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: Level(_r_21) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]) && (p2_7 ==> [(forperm _r_21: Ref [_r_21.MustReleaseBoundedp] :: Level(_r_21) <= _current_wait_level_149_0) && ((forperm _r_21: Ref [_r_21.MustReleaseUnboundedp] :: Level(_r_21) <= _current_wait_level_149_0) && _residue_149_0 <= _current_wait_level_149_0), true])
  ensures (p1_7 ==> [true, (forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false)))]) && (p2_7 ==> [true, (forperm _r_22: Ref [MustInvokeBounded_0(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded_0(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBoundedp] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnboundedp] :: false)))])
{
  var cont1: Bool
  var cont2: Bool
  inhale p1_7
  cont1 := false
  cont2 := false
  var _err: Ref
  var _err_4: Ref
  var x_4: Ref
  var x_4_0: Ref
  var _loop_measures_3: Seq[Measure$]
  var _loop_measures_3_0: Seq[Measure$]
  var _loop_check_before_3: Bool
  var _loop_check_before_3_0: Bool
  var _loop_termination_flag_3: Bool
  var _loop_termination_flag_3_0: Bool
  var _loop_original_must_terminate_3: Perm
  var _loop_original_must_terminate_3_0: Perm
  var _residue_162: Perm
  var _residue_162_0: Perm
  var _cwl_149: Perm
  var _cwl_149_0: Perm
  var _method_measures_149: Seq[Measure$]
  var _method_measures_149_0: Seq[Measure$]
  if (p1_7 && !cont1) {
    _method_measures_149 := Seq[Measure$]()
    _err := null
    x_4 := __prim__int___box__(10)
    inhale _isDefined(3432312)
    // Save current MustTerminate amount._loop_original_must_terminate_3 := perm(MustTerminate(_cthread_149))
    // Save loop termination promise._loop_termination_flag_3 := true
    // We are before loop._loop_check_before_3 := true
  }
  if (p2_7 && !cont2) {
    _method_measures_149_0 := Seq[Measure$]()
    _err_4 := null
    x_4_0 := __prim__int___box__(10)
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_3_0 := perm(MustTerminate_0(_cthread_149_0))
    // Save loop termination promise._loop_termination_flag_3_0 := true
    // We are before loop._loop_check_before_3_0 := true
  }
  var bypass1_3: Bool
  var bypass2_3: Bool
  var tmp1_11: Seq[Measure$]
  var tmp2_11: Seq[Measure$]
  var tmp1_12: Ref
  var tmp2_12: Ref
  var tmp1_13: Bool
  var tmp2_13: Bool
  var tmp1_14: Bool
  var tmp2_14: Bool
  var p1_8: Bool
  var p2_8: Bool
  var idle1_3: Bool
  var idle2_3: Bool
  var cond_7: Bool
  var cond_8: Bool
  bypass1_3 := !(p1_7 && !cont1)
  bypass2_3 := !(p2_7 && !cont2)
  if (bypass1_3) {
    tmp1_11 := _loop_measures_3
    tmp1_12 := x_4
    tmp1_13 := _loop_check_before_3
    tmp1_14 := cont1
  }
  if (bypass2_3) {
    tmp2_11 := _loop_measures_3_0
    tmp2_12 := x_4_0
    tmp2_13 := _loop_check_before_3_0
    tmp2_14 := cont2
  }
  idle1_3 := false
  idle2_3 := false
  assert (p1_7 ==> !true) && (p2_7 ==> !true) ==> (p1_7 && !cont1) == (p2_7 && !cont2)
  assert p1_7 && p2_7 ==> true == true
  if (p1_7) {
    cond_7 := true
  }
  if (p2_7) {
    cond_8 := true
  }
  while (p1_7 && !bypass1_3 && int___gt__(int___unbox__(_checkDefined(x_4, 3432312)), 0) || p2_7 && !bypass2_3 && int___gt__(int___unbox__(x_4_0), 0))
    invariant (p1_7 ==> [(forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _residue_162) && ((forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _residue_162) && _residue_149 <= _residue_162), true]) && (p2_7 ==> [(forperm _r_19: Ref [_r_19.MustReleaseBoundedp] :: Level(_r_19) <= _residue_162_0) && ((forperm _r_19: Ref [_r_19.MustReleaseUnboundedp] :: Level(_r_19) <= _residue_162_0) && _residue_149_0 <= _residue_162_0), true])
    invariant (p1_7 ==> issubtype(typeof(x_4), int())) && (p2_7 ==> issubtype(typeof(x_4_0), int()))
    invariant (p1_7 ==> int___ge__(int___unbox__(_checkDefined(x_4, 3432312)), 0)) && (p2_7 ==> int___ge__(int___unbox__(x_4_0), 0)) && ((p1_7 ==> int___le__(int___unbox__(_checkDefined(x_4, 3432312)), 10)) && (p2_7 ==> int___le__(int___unbox__(x_4_0), 10)))
    invariant (p1_7 ==> true ==> (int___gt__(int___unbox__(_checkDefined(x_4, 3432312)), 0) ==> int___unbox__(_checkDefined(x_4, 3432312)) > 0) && [acc(MustTerminate(_cthread_149), write), true]) && (p2_7 ==> true ==> (int___gt__(int___unbox__(x_4_0), 0) ==> int___unbox__(x_4_0) > 0) && [acc(MustTerminate_0(_cthread_149_0), write), true]) && true
    invariant (p1_7 ==> [true, !idle1_3 ==> _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___gt__(int___unbox__(_checkDefined(x_4, 3432312)), 0) || perm(MustTerminate(_cthread_149)) == none && ((forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))))]) && (p2_7 ==> [true, !idle2_3 ==> _loop_check_before_3_0 ==> _loop_termination_flag_3_0 || (!int___gt__(int___unbox__(x_4_0), 0) || perm(MustTerminate_0(_cthread_149_0)) == none && ((forperm _r_20: Ref [MustInvokeBounded_0(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded_0(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBoundedp] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnboundedp] :: false)))))])
    invariant (p1_7 ==> [true, !idle1_3 ==> !_loop_check_before_3 ==> (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))]) && (p2_7 ==> [true, !idle2_3 ==> !_loop_check_before_3_0 ==> (forperm _r_20: Ref [MustInvokeBounded_0(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded_0(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBoundedp] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnboundedp] :: false)))])
    invariant (p1_7 ==> !cond_7 ==> int___gt__(int___unbox__(_checkDefined(x_4, 3432312)), 0)) && (p2_7 ==> !cond_8 ==> int___gt__(int___unbox__(x_4_0), 0))
    invariant bypass1_3 ==> tmp1_11 == _loop_measures_3
    invariant bypass1_3 ==> tmp1_12 == x_4
    invariant bypass1_3 ==> tmp1_13 == _loop_check_before_3
    invariant bypass1_3 ==> tmp1_14 == cont1
    invariant bypass2_3 ==> tmp2_11 == _loop_measures_3_0
    invariant bypass2_3 ==> tmp2_12 == x_4_0
    invariant bypass2_3 ==> tmp2_13 == _loop_check_before_3_0
    invariant bypass2_3 ==> tmp2_14 == cont2 
  {
    cont1 := false
    cont2 := false
    p1_8 := p1_7 && !cont1 && int___gt__(int___unbox__(_checkDefined(x_4, 3432312)), 0)
    p2_8 := p2_7 && !cont2 && int___gt__(int___unbox__(x_4_0), 0)
    idle1_3 := p1_7 && !cont1 && !int___gt__(int___unbox__(_checkDefined(x_4, 3432312)), 0)
    idle2_3 := p2_7 && !cont2 && !int___gt__(int___unbox__(x_4_0), 0)
    if (p1_8 && !cont1) {
      _loop_measures_3 := Seq(Measure$create(true, _cthread_149, int___unbox__(_checkDefined(x_4, 3432312))))
    }
    if (p2_8 && !cont2) {
      _loop_measures_3_0 := Seq(Measure$create(true, _cthread_149_0, int___unbox__(x_4_0)))
    }
    var p1_9: Bool
    var p2_9: Bool
    var p3: Bool
    var p4: Bool
    p1_9 := p1_8 && !cont1 && true
    p2_9 := p2_8 && !cont2 && true
    p3 := p1_8 && !cont1 && !true
    p4 := p2_8 && !cont2 && !true
    if (p1_9 && !cont1) {
      cont1 := true
    }
    if (p2_9 && !cont2) {
      cont2 := true
    }
    if (p1_8 && !cont1) {
      x_4 := __prim__int___box__(int___sub__(int___unbox__(x_4), 1))
      inhale _isDefined(3432312)
      // We are after loop body._loop_check_before_3 := false
    }
    if (p2_8 && !cont2) {
      x_4_0 := __prim__int___box__(int___sub__(int___unbox__(x_4_0), 1))
      inhale true
      // We are after loop body._loop_check_before_3_0 := false
    }
    assert (p1_8 ==> _loop_termination_flag_3 ==> !int___gt__(int___unbox__(_checkDefined(x_4, 3432312)), 0) || true && Measure$check(_loop_measures_3, _cthread_149, int___unbox__(_checkDefined(x_4, 3432312)))) && (p2_8 ==> _loop_termination_flag_3_0 ==> !int___gt__(int___unbox__(x_4_0), 0) || true && Measure$check(_loop_measures_3_0, _cthread_149_0, int___unbox__(x_4_0)))
    inhale !p1_7 || true
    inhale !p2_7 || true
  }
  if (!bypass1_3) {
    cont1 := false
  }
  if (!bypass2_3) {
    cont2 := false
  }
  if (p1_7 && !cont1) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_149)) > none ==> acc(MustTerminate(_cthread_149), perm(MustTerminate(_cthread_149)) - _loop_original_must_terminate_3)
  }
  if (p2_7 && !cont2) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_149_0)) > none ==> acc(MustTerminate_0(_cthread_149_0), perm(MustTerminate_0(_cthread_149_0)) - _loop_original_must_terminate_3_0)
  }
  assert true
}

method return_ok(p1_10: Bool, p2_10: Bool, _cthread_150: Ref, _cthread_150_0: Ref, _caller_measures_150: Seq[Measure$], _caller_measures_150_0: Seq[Measure$], _residue_150: Perm, _residue_150_0: Perm) returns (_current_wait_level_150: Perm, _current_wait_level_150_0: Perm)
  requires (p1_10 ==> _cthread_150 != null) && (p2_10 ==> _cthread_150_0 != null)
  requires (p1_10 ==> issubtype(typeof(_cthread_150), Thread_0())) && (p2_10 ==> issubtype(typeof(_cthread_150_0), Thread_0()))
  requires p1_10 == p2_10
  requires (p1_10 ==> [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false))))]) && (p2_10 ==> [true, perm(MustTerminate_0(_cthread_150_0)) == none && ((forperm _r_28: Ref [MustInvokeBounded_0(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded_0(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBoundedp] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnboundedp] :: false))))])
  ensures (p1_10 ==> [(forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_150) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]) && (p2_10 ==> [(forperm _r_26: Ref [_r_26.MustReleaseBoundedp] :: Level(_r_26) <= _current_wait_level_150_0) && ((forperm _r_26: Ref [_r_26.MustReleaseUnboundedp] :: Level(_r_26) <= _current_wait_level_150_0) && _residue_150_0 <= _current_wait_level_150_0), true])
  ensures (p1_10 ==> [true, (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))]) && (p2_10 ==> [true, (forperm _r_27: Ref [MustInvokeBounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded_0(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBoundedp] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnboundedp] :: false)))])
{
  var ret1: Bool
  var ret2: Bool
  inhale p1_10
  ret1 := false
  ret2 := false
  var _err: Ref
  var _err_5: Ref
  var x_5: Ref
  var x_5_0: Ref
  var _loop_measures_4: Seq[Measure$]
  var _loop_measures_4_0: Seq[Measure$]
  var _loop_check_before_4: Bool
  var _loop_check_before_4_0: Bool
  var _loop_termination_flag_4: Bool
  var _loop_termination_flag_4_0: Bool
  var _loop_original_must_terminate_4: Perm
  var _loop_original_must_terminate_4_0: Perm
  var _residue_163: Perm
  var _residue_163_0: Perm
  var _cwl_150: Perm
  var _cwl_150_0: Perm
  var _method_measures_150: Seq[Measure$]
  var _method_measures_150_0: Seq[Measure$]
  if (p1_10 && !ret1) {
    _method_measures_150 := Seq[Measure$]()
    _err := null
    x_5 := __prim__int___box__(10)
    inhale _isDefined(3497848)
    // Save current MustTerminate amount._loop_original_must_terminate_4 := perm(MustTerminate(_cthread_150))
    // Save loop termination promise._loop_termination_flag_4 := true
    // We are before loop._loop_check_before_4 := true
  }
  if (p2_10 && !ret2) {
    _method_measures_150_0 := Seq[Measure$]()
    _err_5 := null
    x_5_0 := __prim__int___box__(10)
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_4_0 := perm(MustTerminate_0(_cthread_150_0))
    // Save loop termination promise._loop_termination_flag_4_0 := true
    // We are before loop._loop_check_before_4_0 := true
  }
  var bypass1_4: Bool
  var bypass2_4: Bool
  var tmp1_15: Seq[Measure$]
  var tmp2_15: Seq[Measure$]
  var tmp1_16: Bool
  var tmp2_16: Bool
  var tmp1_17: Ref
  var tmp2_17: Ref
  var tmp1_18: Bool
  var tmp2_18: Bool
  var oldret1: Bool
  var oldret2: Bool
  var p1_11: Bool
  var p2_11: Bool
  var idle1_4: Bool
  var idle2_4: Bool
  var cond_9: Bool
  var cond_10: Bool
  bypass1_4 := !(p1_10 && !ret1)
  bypass2_4 := !(p2_10 && !ret2)
  if (bypass1_4) {
    tmp1_15 := _loop_measures_4
    tmp1_16 := ret1
    tmp1_17 := x_5
    tmp1_18 := _loop_check_before_4
  }
  if (bypass2_4) {
    tmp2_15 := _loop_measures_4_0
    tmp2_16 := ret2
    tmp2_17 := x_5_0
    tmp2_18 := _loop_check_before_4_0
  }
  oldret1 := ret1
  oldret2 := ret2
  idle1_4 := false
  idle2_4 := false
  assert (p1_10 ==> !true) && (p2_10 ==> !true) ==> (p1_10 && !ret1) == (p2_10 && !ret2)
  assert p1_10 && p2_10 ==> true == true
  if (p1_10) {
    cond_9 := true
  }
  if (p2_10) {
    cond_10 := true
  }
  while (p1_10 && !ret1 && !bypass1_4 && true || p2_10 && !ret2 && !bypass2_4 && true)
    invariant (p1_10 && !ret1 ==> [(forperm _r_24: Ref [_r_24.MustReleaseBounded] :: Level(_r_24) <= _residue_163) && ((forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: Level(_r_24) <= _residue_163) && _residue_150 <= _residue_163), true]) && (p2_10 && !ret2 ==> [(forperm _r_24: Ref [_r_24.MustReleaseBoundedp] :: Level(_r_24) <= _residue_163_0) && ((forperm _r_24: Ref [_r_24.MustReleaseUnboundedp] :: Level(_r_24) <= _residue_163_0) && _residue_150_0 <= _residue_163_0), true])
    invariant (p1_10 && !ret1 ==> issubtype(typeof(x_5), int())) && (p2_10 && !ret2 ==> issubtype(typeof(x_5_0), int()))
    invariant (p1_10 && !ret1 ==> int___ge__(int___unbox__(_checkDefined(x_5, 3497848)), 0)) && (p2_10 && !ret2 ==> int___ge__(int___unbox__(x_5_0), 0)) && ((p1_10 && !ret1 ==> int___le__(int___unbox__(_checkDefined(x_5, 3497848)), 10)) && (p2_10 && !ret2 ==> int___le__(int___unbox__(x_5_0), 10)))
    invariant (p1_10 && !ret1 ==> true ==> int___add__(int___unbox__(_checkDefined(x_5, 3497848)), 1) > 0 && [acc(MustTerminate(_cthread_150), write), true]) && (p2_10 && !ret2 ==> true ==> int___add__(int___unbox__(x_5_0), 1) > 0 && [acc(MustTerminate_0(_cthread_150_0), write), true]) && true
    invariant (p1_10 && !ret1 ==> [true, !idle1_4 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate(_cthread_150)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false))))]) && (p2_10 && !ret2 ==> [true, !idle2_4 ==> _loop_check_before_4_0 ==> _loop_termination_flag_4_0 || perm(MustTerminate_0(_cthread_150_0)) == none && ((forperm _r_25: Ref [MustInvokeBounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBoundedp] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnboundedp] :: false))))])
    invariant (p1_10 && !ret1 ==> [true, !idle1_4 ==> !_loop_check_before_4 ==> (forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false)))]) && (p2_10 && !ret2 ==> [true, !idle2_4 ==> !_loop_check_before_4_0 ==> (forperm _r_25: Ref [MustInvokeBounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBoundedp] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnboundedp] :: false)))])
    invariant bypass1_4 ==> tmp1_15 == _loop_measures_4
    invariant bypass1_4 ==> tmp1_16 == ret1
    invariant bypass1_4 ==> tmp1_17 == x_5
    invariant bypass1_4 ==> tmp1_18 == _loop_check_before_4
    invariant bypass2_4 ==> tmp2_15 == _loop_measures_4_0
    invariant bypass2_4 ==> tmp2_16 == ret2
    invariant bypass2_4 ==> tmp2_17 == x_5_0
    invariant bypass2_4 ==> tmp2_18 == _loop_check_before_4_0 
  {
    p1_11 := p1_10 && !ret1 && true
    p2_11 := p2_10 && !ret2 && true
    idle1_4 := p1_10 && !ret1 && !true
    idle2_4 := p2_10 && !ret2 && !true
    if (p1_11 && !ret1) {
      _loop_measures_4 := Seq(Measure$create(true, _cthread_150, int___add__(int___unbox__(_checkDefined(x_5, 3497848)), 1)))
    }
    if (p2_11 && !ret2) {
      _loop_measures_4_0 := Seq(Measure$create(true, _cthread_150_0, int___add__(int___unbox__(x_5_0), 1)))
    }
    var p1_12: Bool
    var p2_12: Bool
    var p3_0: Bool
    var p4_0: Bool
    p1_12 := p1_11 && !ret1 && int___eq__(_checkDefined(x_5, 3497848), __prim__int___box__(0))
    p2_12 := p2_11 && !ret2 && int___eq__(x_5_0, __prim__int___box__(0))
    p3_0 := p1_11 && !ret1 && !int___eq__(_checkDefined(x_5, 3497848), __prim__int___box__(0))
    p4_0 := p2_11 && !ret2 && !int___eq__(x_5_0, __prim__int___box__(0))
    if (p1_12 && !ret1) {
      ret1 := true
    }
    if (p2_12 && !ret2) {
      ret2 := true
    }
    if (p1_11 && !ret1) {
      x_5 := __prim__int___box__(int___sub__(int___unbox__(x_5), 1))
      inhale _isDefined(3497848)
      // We are after loop body._loop_check_before_4 := false
    }
    if (p2_11 && !ret2) {
      x_5_0 := __prim__int___box__(int___sub__(int___unbox__(x_5_0), 1))
      inhale true
      // We are after loop body._loop_check_before_4_0 := false
    }
    assert (p1_11 && !ret1 ==> _loop_termination_flag_4 ==> !true || true && Measure$check(_loop_measures_4, _cthread_150, int___add__(int___unbox__(_checkDefined(x_5, 3497848)), 1))) && (p2_11 && !ret2 ==> _loop_termination_flag_4_0 ==> !true || true && Measure$check(_loop_measures_4_0, _cthread_150_0, int___add__(int___unbox__(x_5_0), 1)))
    inhale !p1_10 || !ret1
    inhale !p2_10 || !ret2
  }
  // Loop Reconstruction.
  if (!bypass1_4 && ret1 || !bypass2_4 && ret2) {
    ret1 := oldret1
    ret2 := oldret2
    inhale (p1_10 && !ret1 ==> [(forperm _r_24: Ref [_r_24.MustReleaseBounded] :: Level(_r_24) <= _residue_163) && ((forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: Level(_r_24) <= _residue_163) && _residue_150 <= _residue_163), true]) && (p2_10 && !ret2 ==> [(forperm _r_24: Ref [_r_24.MustReleaseBoundedp] :: Level(_r_24) <= _residue_163_0) && ((forperm _r_24: Ref [_r_24.MustReleaseUnboundedp] :: Level(_r_24) <= _residue_163_0) && _residue_150_0 <= _residue_163_0), true])
    inhale (p1_10 && !ret1 ==> issubtype(typeof(x_5), int())) && (p2_10 && !ret2 ==> issubtype(typeof(x_5_0), int()))
    inhale (p1_10 && !ret1 ==> int___ge__(int___unbox__(_checkDefined(x_5, 3497848)), 0)) && (p2_10 && !ret2 ==> int___ge__(int___unbox__(x_5_0), 0)) && ((p1_10 && !ret1 ==> int___le__(int___unbox__(_checkDefined(x_5, 3497848)), 10)) && (p2_10 && !ret2 ==> int___le__(int___unbox__(x_5_0), 10)))
    inhale (p1_10 && !ret1 ==> true ==> int___add__(int___unbox__(_checkDefined(x_5, 3497848)), 1) > 0 && [acc(MustTerminate(_cthread_150), write), true]) && (p2_10 && !ret2 ==> true ==> int___add__(int___unbox__(x_5_0), 1) > 0 && [acc(MustTerminate_0(_cthread_150_0), write), true]) && true
    inhale (p1_10 && !ret1 ==> [true, !idle1_4 ==> _loop_check_before_4 ==> _loop_termination_flag_4 || perm(MustTerminate(_cthread_150)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false))))]) && (p2_10 && !ret2 ==> [true, !idle2_4 ==> _loop_check_before_4_0 ==> _loop_termination_flag_4_0 || perm(MustTerminate_0(_cthread_150_0)) == none && ((forperm _r_25: Ref [MustInvokeBounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBoundedp] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnboundedp] :: false))))])
    inhale (p1_10 && !ret1 ==> [true, !idle1_4 ==> !_loop_check_before_4 ==> (forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false)))]) && (p2_10 && !ret2 ==> [true, !idle2_4 ==> !_loop_check_before_4_0 ==> (forperm _r_25: Ref [MustInvokeBounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded_0(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBoundedp] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnboundedp] :: false)))])
    inhale p1_10 && !ret1 ==> true
    inhale p2_10 && !ret1 ==> true
    p1_11 := p1_10 && !ret1 && true
    p2_11 := p2_10 && !ret2 && true
    idle1_4 := p1_10 && !ret1 && !true
    idle2_4 := p2_10 && !ret2 && !true
    if (p1_11 && !ret1) {
      _loop_measures_4 := Seq(Measure$create(true, _cthread_150, int___add__(int___unbox__(_checkDefined(x_5, 3497848)), 1)))
    }
    if (p2_11 && !ret2) {
      _loop_measures_4_0 := Seq(Measure$create(true, _cthread_150_0, int___add__(int___unbox__(x_5_0), 1)))
    }
    var p1_12: Bool
    var p2_12: Bool
    var p3_0: Bool
    var p4_0: Bool
    p1_12 := p1_11 && !ret1 && int___eq__(_checkDefined(x_5, 3497848), __prim__int___box__(0))
    p2_12 := p2_11 && !ret2 && int___eq__(x_5_0, __prim__int___box__(0))
    p3_0 := p1_11 && !ret1 && !int___eq__(_checkDefined(x_5, 3497848), __prim__int___box__(0))
    p4_0 := p2_11 && !ret2 && !int___eq__(x_5_0, __prim__int___box__(0))
    if (p1_12 && !ret1) {
      ret1 := true
    }
    if (p2_12 && !ret2) {
      ret2 := true
    }
    if (p1_11 && !ret1) {
      x_5 := __prim__int___box__(int___sub__(int___unbox__(x_5), 1))
      inhale _isDefined(3497848)
      // We are after loop body._loop_check_before_4 := false
    }
    if (p2_11 && !ret2) {
      x_5_0 := __prim__int___box__(int___sub__(int___unbox__(x_5_0), 1))
      inhale true
      // We are after loop body._loop_check_before_4_0 := false
    }
    assert (p1_11 && !ret1 ==> _loop_termination_flag_4 ==> !true || true && Measure$check(_loop_measures_4, _cthread_150, int___add__(int___unbox__(_checkDefined(x_5, 3497848)), 1))) && (p2_11 && !ret2 ==> _loop_termination_flag_4_0 ==> !true || true && Measure$check(_loop_measures_4_0, _cthread_150_0, int___add__(int___unbox__(x_5_0), 1)))
    inhale !p1_11 || !!ret1
    inhale !p2_11 || !!ret2
  }
  if (p1_10 && !ret1) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_150)) > none ==> acc(MustTerminate(_cthread_150), perm(MustTerminate(_cthread_150)) - _loop_original_must_terminate_4)
  }
  if (p2_10 && !ret2) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_150_0)) > none ==> acc(MustTerminate_0(_cthread_150_0), perm(MustTerminate_0(_cthread_150_0)) - _loop_original_must_terminate_4_0)
  }
  assert true
}

method nested(p1_13: Bool, p2_13: Bool, _cthread_151: Ref, _cthread_151_0: Ref, _caller_measures_151: Seq[Measure$], _caller_measures_151_0: Seq[Measure$], _residue_151: Perm, _residue_151_0: Perm, h_2: Ref, h_2_0: Ref) returns (_current_wait_level_151: Perm, _current_wait_level_151_0: Perm)
  requires (p1_13 ==> _cthread_151 != null) && (p2_13 ==> _cthread_151_0 != null)
  requires (p1_13 ==> issubtype(typeof(_cthread_151), Thread_0())) && (p2_13 ==> issubtype(typeof(_cthread_151_0), Thread_0()))
  requires (p1_13 ==> issubtype(typeof(h_2), int())) && (p2_13 ==> issubtype(typeof(h_2_0), int()))
  requires (p1_13 ==> [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_35: Ref [MustInvokeBounded(_r_35)] :: false) && ((forperm _r_35: Ref [MustInvokeUnbounded(_r_35)] :: false) && ((forperm _r_35: Ref [_r_35.MustReleaseBounded] :: false) && (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: false))))]) && (p2_13 ==> [true, perm(MustTerminate_0(_cthread_151_0)) == none && ((forperm _r_35: Ref [MustInvokeBounded_0(_r_35)] :: false) && ((forperm _r_35: Ref [MustInvokeUnbounded_0(_r_35)] :: false) && ((forperm _r_35: Ref [_r_35.MustReleaseBoundedp] :: false) && (forperm _r_35: Ref [_r_35.MustReleaseUnboundedp] :: false))))])
  ensures (p1_13 ==> [(forperm _r_33: Ref [_r_33.MustReleaseBounded] :: Level(_r_33) <= _current_wait_level_151) && ((forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: Level(_r_33) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]) && (p2_13 ==> [(forperm _r_33: Ref [_r_33.MustReleaseBoundedp] :: Level(_r_33) <= _current_wait_level_151_0) && ((forperm _r_33: Ref [_r_33.MustReleaseUnboundedp] :: Level(_r_33) <= _current_wait_level_151_0) && _residue_151_0 <= _current_wait_level_151_0), true])
  ensures (p1_13 ==> [true, (forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false)))]) && (p2_13 ==> [true, (forperm _r_34: Ref [MustInvokeBounded_0(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded_0(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBoundedp] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_13
  var _err: Ref
  var _err_6: Ref
  var x1: Ref
  var x1_0: Ref
  var x2: Ref
  var x2_0: Ref
  var h_10: Ref
  var h_10_0: Ref
  var _loop_measures_5: Seq[Measure$]
  var _loop_measures_5_0: Seq[Measure$]
  var _loop_check_before_5: Bool
  var _loop_check_before_5_0: Bool
  var _loop_termination_flag_5: Bool
  var _loop_termination_flag_5_0: Bool
  var _loop_original_must_terminate_5: Perm
  var _loop_original_must_terminate_5_0: Perm
  var _residue_164: Perm
  var _residue_164_0: Perm
  var _loop_measures_6: Seq[Measure$]
  var _loop_measures_6_0: Seq[Measure$]
  var _loop_check_before_6: Bool
  var _loop_check_before_6_0: Bool
  var _loop_termination_flag_6: Bool
  var _loop_termination_flag_6_0: Bool
  var _loop_original_must_terminate_6: Perm
  var _loop_original_must_terminate_6_0: Perm
  var _residue_165: Perm
  var _residue_165_0: Perm
  var _cwl_151: Perm
  var _cwl_151_0: Perm
  var _method_measures_151: Seq[Measure$]
  var _method_measures_151_0: Seq[Measure$]
  if (p1_13) {
    _method_measures_151 := Seq[Measure$]()
    _err := null
    h_10 := h_2
    x1 := h_10
    inhale _isDefined(12664)
    // Save current MustTerminate amount._loop_original_must_terminate_5 := perm(MustTerminate(_cthread_151))
    // Save loop termination promise._loop_termination_flag_5 := int___ge__(int___unbox__(h_10), 0)
    // We are before loop._loop_check_before_5 := true
  }
  if (p2_13) {
    _method_measures_151_0 := Seq[Measure$]()
    _err_6 := null
    h_10_0 := h_2_0
    x1_0 := h_10_0
    inhale true
    // Save current MustTerminate amount._loop_original_must_terminate_5_0 := perm(MustTerminate_0(_cthread_151_0))
    // Save loop termination promise._loop_termination_flag_5_0 := int___ge__(int___unbox__(h_10_0), 0)
    // We are before loop._loop_check_before_5_0 := true
  }
  var bypass1_5: Bool
  var bypass2_5: Bool
  var tmp1_19: Seq[Measure$]
  var tmp2_19: Seq[Measure$]
  var tmp1_20: Ref
  var tmp2_20: Ref
  var tmp1_21: Perm
  var tmp2_21: Perm
  var tmp1_22: Bool
  var tmp2_22: Bool
  var tmp1_23: Bool
  var tmp2_23: Bool
  var tmp1_24: Seq[Measure$]
  var tmp2_24: Seq[Measure$]
  var tmp1_25: Bool
  var tmp2_25: Bool
  var p1_14: Bool
  var p2_14: Bool
  var idle1_5: Bool
  var idle2_5: Bool
  var cond_11: Bool
  var cond_12: Bool
  bypass1_5 := !p1_13
  bypass2_5 := !p2_13
  if (bypass1_5) {
    tmp1_19 := _loop_measures_5
    tmp1_20 := x2
    tmp1_21 := _loop_original_must_terminate_6
    tmp1_22 := _loop_termination_flag_6
    tmp1_23 := _loop_check_before_6
    tmp1_24 := _loop_measures_6
    tmp1_25 := _loop_check_before_5
  }
  if (bypass2_5) {
    tmp2_19 := _loop_measures_5_0
    tmp2_20 := x2_0
    tmp2_21 := _loop_original_must_terminate_6_0
    tmp2_22 := _loop_termination_flag_6_0
    tmp2_23 := _loop_check_before_6_0
    tmp2_24 := _loop_measures_6_0
    tmp2_25 := _loop_check_before_5_0
  }
  idle1_5 := false
  idle2_5 := false
  assert (p1_13 ==> !int___ge__(int___unbox__(h_10), 0)) && (p2_13 ==> !int___ge__(int___unbox__(h_10_0), 0)) ==> p1_13 == p2_13
  assert p1_13 && p2_13 ==> int___ge__(int___unbox__(h_10), 0) == int___ge__(int___unbox__(h_10_0), 0)
  if (p1_13) {
    cond_11 := int___ge__(int___unbox__(h_10), 0)
  }
  if (p2_13) {
    cond_12 := int___ge__(int___unbox__(h_10_0), 0)
  }
  while (p1_13 && !bypass1_5 && !int___eq__(_checkDefined(x1, 12664), __prim__int___box__(0)) || p2_13 && !bypass2_5 && !int___eq__(x1_0, __prim__int___box__(0)))
    invariant (p1_13 ==> [(forperm _r_31: Ref [_r_31.MustReleaseBounded] :: Level(_r_31) <= _residue_164) && ((forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: Level(_r_31) <= _residue_164) && _residue_151 <= _residue_164), true]) && (p2_13 ==> [(forperm _r_31: Ref [_r_31.MustReleaseBoundedp] :: Level(_r_31) <= _residue_164_0) && ((forperm _r_31: Ref [_r_31.MustReleaseUnboundedp] :: Level(_r_31) <= _residue_164_0) && _residue_151_0 <= _residue_164_0), true])
    invariant (p1_13 ==> int___le__(int___unbox__(_checkDefined(x1, 12664)), int___unbox__(h_10))) && (p2_13 ==> int___le__(int___unbox__(x1_0), int___unbox__(h_10_0)))
    invariant (p1_13 ==> int___ge__(int___unbox__(h_10), 0) ==> int___ge__(int___unbox__(_checkDefined(x1, 12664)), 0)) && (p2_13 ==> int___ge__(int___unbox__(h_10_0), 0) ==> int___ge__(int___unbox__(x1_0), 0))
    invariant (p1_13 ==> int___ge__(int___unbox__(h_10), 0) ==> (!int___eq__(_checkDefined(x1, 12664), __prim__int___box__(0)) ==> int___unbox__(_checkDefined(x1, 12664)) > 0) && [acc(MustTerminate(_cthread_151), write), true]) && (p2_13 ==> int___ge__(int___unbox__(h_10_0), 0) ==> (!int___eq__(x1_0, __prim__int___box__(0)) ==> int___unbox__(x1_0) > 0) && [acc(MustTerminate_0(_cthread_151_0), write), true]) && true
    invariant (p1_13 ==> [true, !idle1_5 ==> _loop_check_before_5 ==> _loop_termination_flag_5 || (int___eq__(_checkDefined(x1, 12664), __prim__int___box__(0)) || perm(MustTerminate(_cthread_151)) == none && ((forperm _r_32: Ref [MustInvokeBounded(_r_32)] :: false) && ((forperm _r_32: Ref [MustInvokeUnbounded(_r_32)] :: false) && ((forperm _r_32: Ref [_r_32.MustReleaseBounded] :: false) && (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: false)))))]) && (p2_13 ==> [true, !idle2_5 ==> _loop_check_before_5_0 ==> _loop_termination_flag_5_0 || (int___eq__(x1_0, __prim__int___box__(0)) || perm(MustTerminate_0(_cthread_151_0)) == none && ((forperm _r_32: Ref [MustInvokeBounded_0(_r_32)] :: false) && ((forperm _r_32: Ref [MustInvokeUnbounded_0(_r_32)] :: false) && ((forperm _r_32: Ref [_r_32.MustReleaseBoundedp] :: false) && (forperm _r_32: Ref [_r_32.MustReleaseUnboundedp] :: false)))))])
    invariant (p1_13 ==> [true, !idle1_5 ==> !_loop_check_before_5 ==> (forperm _r_32: Ref [MustInvokeBounded(_r_32)] :: false) && ((forperm _r_32: Ref [MustInvokeUnbounded(_r_32)] :: false) && ((forperm _r_32: Ref [_r_32.MustReleaseBounded] :: false) && (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: false)))]) && (p2_13 ==> [true, !idle2_5 ==> !_loop_check_before_5_0 ==> (forperm _r_32: Ref [MustInvokeBounded_0(_r_32)] :: false) && ((forperm _r_32: Ref [MustInvokeUnbounded_0(_r_32)] :: false) && ((forperm _r_32: Ref [_r_32.MustReleaseBoundedp] :: false) && (forperm _r_32: Ref [_r_32.MustReleaseUnboundedp] :: false)))])
    invariant (p1_13 ==> !cond_11 ==> !int___eq__(_checkDefined(x1, 12664), __prim__int___box__(0))) && (p2_13 ==> !cond_12 ==> !int___eq__(x1_0, __prim__int___box__(0)))
    invariant bypass1_5 ==> tmp1_23 == _loop_check_before_6
    invariant bypass1_5 ==> tmp1_20 == x2
    invariant bypass1_5 ==> tmp1_24 == _loop_measures_6
    invariant bypass1_5 ==> tmp1_21 == _loop_original_must_terminate_6
    invariant bypass1_5 ==> tmp1_19 == _loop_measures_5
    invariant bypass1_5 ==> tmp1_22 == _loop_termination_flag_6
    invariant bypass1_5 ==> tmp1_25 == _loop_check_before_5
    invariant bypass2_5 ==> tmp2_25 == _loop_check_before_5_0
    invariant bypass2_5 ==> tmp2_23 == _loop_check_before_6_0
    invariant bypass2_5 ==> tmp2_20 == x2_0
    invariant bypass2_5 ==> tmp2_19 == _loop_measures_5_0
    invariant bypass2_5 ==> tmp2_22 == _loop_termination_flag_6_0
    invariant bypass2_5 ==> tmp2_21 == _loop_original_must_terminate_6_0
    invariant bypass2_5 ==> tmp2_24 == _loop_measures_6_0 
  {
    p1_14 := p1_13 && !int___eq__(_checkDefined(x1, 12664), __prim__int___box__(0))
    p2_14 := p2_13 && !int___eq__(x1_0, __prim__int___box__(0))
    idle1_5 := p1_13 && !!int___eq__(_checkDefined(x1, 12664), __prim__int___box__(0))
    idle2_5 := p2_13 && !!int___eq__(x1_0, __prim__int___box__(0))
    if (p1_14) {
      _loop_measures_5 := Seq(Measure$create(int___ge__(int___unbox__(h_10), 0), _cthread_151, int___unbox__(_checkDefined(x1, 12664))))
      x2 := __prim__int___box__(10)
      inhale _isDefined(12920)
      // Save current MustTerminate amount._loop_original_must_terminate_6 := perm(MustTerminate(_cthread_151))
      // Save loop termination promise._loop_termination_flag_6 := true
      // We are before loop._loop_check_before_6 := true
    }
    if (p2_14) {
      _loop_measures_5_0 := Seq(Measure$create(int___ge__(int___unbox__(h_10_0), 0), _cthread_151_0, int___unbox__(x1_0)))
      x2_0 := __prim__int___box__(10)
      inhale true
      // Save current MustTerminate amount._loop_original_must_terminate_6_0 := perm(MustTerminate_0(_cthread_151_0))
      // Save loop termination promise._loop_termination_flag_6_0 := true
      // We are before loop._loop_check_before_6_0 := true
    }
    var bypass1_6: Bool
    var bypass2_6: Bool
    var tmp1_26: Seq[Measure$]
    var tmp2_26: Seq[Measure$]
    var tmp1_27: Ref
    var tmp2_27: Ref
    var tmp1_28: Bool
    var tmp2_28: Bool
    var p1_15: Bool
    var p2_15: Bool
    var idle1_6: Bool
    var idle2_6: Bool
    var cond_13: Bool
    var cond_14: Bool
    bypass1_6 := !p1_14
    bypass2_6 := !p2_14
    if (bypass1_6) {
      tmp1_26 := _loop_measures_6
      tmp1_27 := x2
      tmp1_28 := _loop_check_before_6
    }
    if (bypass2_6) {
      tmp2_26 := _loop_measures_6_0
      tmp2_27 := x2_0
      tmp2_28 := _loop_check_before_6_0
    }
    idle1_6 := false
    idle2_6 := false
    assert (p1_14 ==> !true) && (p2_14 ==> !true) ==> p1_14 == p2_14
    assert p1_14 && p2_14 ==> true == true
    if (p1_14) {
      cond_13 := true
    }
    if (p2_14) {
      cond_14 := true
    }
    while (p1_14 && !bypass1_6 && !int___eq__(_checkDefined(x2, 12920), __prim__int___box__(0)) || p2_14 && !bypass2_6 && !int___eq__(x2_0, __prim__int___box__(0)))
      invariant (p1_14 ==> [(forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _residue_165) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _residue_165) && _residue_164 <= _residue_165), true]) && (p2_14 ==> [(forperm _r_29: Ref [_r_29.MustReleaseBoundedp] :: Level(_r_29) <= _residue_165_0) && ((forperm _r_29: Ref [_r_29.MustReleaseUnboundedp] :: Level(_r_29) <= _residue_165_0) && _residue_164_0 <= _residue_165_0), true])
      invariant (p1_14 ==> issubtype(typeof(x2), int())) && (p2_14 ==> issubtype(typeof(x2_0), int()))
      invariant (p1_14 ==> int___ge__(int___unbox__(_checkDefined(x2, 12920)), 0)) && (p2_14 ==> int___ge__(int___unbox__(x2_0), 0)) && ((p1_14 ==> int___le__(int___unbox__(_checkDefined(x2, 12920)), 10)) && (p2_14 ==> int___le__(int___unbox__(x2_0), 10)))
      invariant (p1_14 ==> true ==> (!int___eq__(_checkDefined(x2, 12920), __prim__int___box__(0)) ==> int___unbox__(_checkDefined(x2, 12920)) > 0) && [acc(MustTerminate(_cthread_151), write), true]) && (p2_14 ==> true ==> (!int___eq__(x2_0, __prim__int___box__(0)) ==> int___unbox__(x2_0) > 0) && [acc(MustTerminate_0(_cthread_151_0), write), true]) && true
      invariant (p1_14 ==> [true, !idle1_6 ==> _loop_check_before_6 ==> _loop_termination_flag_6 || (int___eq__(_checkDefined(x2, 12920), __prim__int___box__(0)) || perm(MustTerminate(_cthread_151)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))))]) && (p2_14 ==> [true, !idle2_6 ==> _loop_check_before_6_0 ==> _loop_termination_flag_6_0 || (int___eq__(x2_0, __prim__int___box__(0)) || perm(MustTerminate_0(_cthread_151_0)) == none && ((forperm _r_30: Ref [MustInvokeBounded_0(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded_0(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBoundedp] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnboundedp] :: false)))))])
      invariant (p1_14 ==> [true, !idle1_6 ==> !_loop_check_before_6 ==> (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))]) && (p2_14 ==> [true, !idle2_6 ==> !_loop_check_before_6_0 ==> (forperm _r_30: Ref [MustInvokeBounded_0(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded_0(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBoundedp] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnboundedp] :: false)))])
      invariant (p1_14 ==> !cond_13 ==> !int___eq__(_checkDefined(x2, 12920), __prim__int___box__(0))) && (p2_14 ==> !cond_14 ==> !int___eq__(x2_0, __prim__int___box__(0)))
      invariant bypass1_6 ==> tmp1_26 == _loop_measures_6
      invariant bypass1_6 ==> tmp1_27 == x2
      invariant bypass1_6 ==> tmp1_28 == _loop_check_before_6
      invariant bypass2_6 ==> tmp2_26 == _loop_measures_6_0
      invariant bypass2_6 ==> tmp2_27 == x2_0
      invariant bypass2_6 ==> tmp2_28 == _loop_check_before_6_0 
    {
      p1_15 := p1_14 && !int___eq__(_checkDefined(x2, 12920), __prim__int___box__(0))
      p2_15 := p2_14 && !int___eq__(x2_0, __prim__int___box__(0))
      idle1_6 := p1_14 && !!int___eq__(_checkDefined(x2, 12920), __prim__int___box__(0))
      idle2_6 := p2_14 && !!int___eq__(x2_0, __prim__int___box__(0))
      if (p1_15) {
        _loop_measures_6 := Seq(Measure$create(true, _cthread_151, int___unbox__(_checkDefined(x2, 12920))))
        x2 := __prim__int___box__(int___sub__(int___unbox__(x2), 1))
        inhale _isDefined(12920)
        // We are after loop body._loop_check_before_6 := false
      }
      if (p2_15) {
        _loop_measures_6_0 := Seq(Measure$create(true, _cthread_151_0, int___unbox__(x2_0)))
        x2_0 := __prim__int___box__(int___sub__(int___unbox__(x2_0), 1))
        inhale true
        // We are after loop body._loop_check_before_6_0 := false
      }
      assert (p1_15 ==> _loop_termination_flag_6 ==> !!int___eq__(_checkDefined(x2, 12920), __prim__int___box__(0)) || true && Measure$check(_loop_measures_6, _cthread_151, int___unbox__(_checkDefined(x2, 12920)))) && (p2_15 ==> _loop_termination_flag_6_0 ==> !!int___eq__(x2_0, __prim__int___box__(0)) || true && Measure$check(_loop_measures_6_0, _cthread_151_0, int___unbox__(x2_0)))
      inhale !p1_14 || true
      inhale !p2_14 || true
    }
    if (p1_14) {
      // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_151)) > none ==> acc(MustTerminate(_cthread_151), perm(MustTerminate(_cthread_151)) - _loop_original_must_terminate_6)
      // We are after loop body._loop_check_before_5 := false
    }
    if (p2_14) {
      // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_151_0)) > none ==> acc(MustTerminate_0(_cthread_151_0), perm(MustTerminate_0(_cthread_151_0)) - _loop_original_must_terminate_6_0)
      // We are after loop body._loop_check_before_5_0 := false
    }
    assert (p1_14 ==> _loop_termination_flag_5 ==> !!int___eq__(_checkDefined(x1, 12664), __prim__int___box__(0)) || int___ge__(int___unbox__(h_10), 0) && Measure$check(_loop_measures_5, _cthread_151, int___unbox__(_checkDefined(x1, 12664)))) && (p2_14 ==> _loop_termination_flag_5_0 ==> !!int___eq__(x1_0, __prim__int___box__(0)) || int___ge__(int___unbox__(h_10_0), 0) && Measure$check(_loop_measures_5_0, _cthread_151_0, int___unbox__(x1_0)))
    inhale !p1_13 || true
    inhale !p2_13 || true
  }
  if (p1_13) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_151)) > none ==> acc(MustTerminate(_cthread_151), perm(MustTerminate(_cthread_151)) - _loop_original_must_terminate_5)
  }
  if (p2_13) {
    // Reset MustTerminate amount to original level.exhale perm(MustTerminate_0(_cthread_151_0)) > none ==> acc(MustTerminate_0(_cthread_151_0), perm(MustTerminate_0(_cthread_151_0)) - _loop_original_must_terminate_5_0)
  }
  assert true
}

method terminates(p1_16: Bool, p2_16: Bool, _cthread_152: Ref, _cthread_152_0: Ref, _caller_measures_152: Seq[Measure$], _caller_measures_152_0: Seq[Measure$], _residue_152: Perm, _residue_152_0: Perm, x_6: Ref, x_6_0: Ref) returns (_current_wait_level_152: Perm, _current_wait_level_152_0: Perm, _res: Ref, _res_0: Ref)
  requires (p1_16 ==> _cthread_152 != null) && (p2_16 ==> _cthread_152_0 != null)
  requires (p1_16 ==> issubtype(typeof(_cthread_152), Thread_0())) && (p2_16 ==> issubtype(typeof(_cthread_152_0), Thread_0()))
  requires (p1_16 ==> issubtype(typeof(x_6), int())) && (p2_16 ==> issubtype(typeof(x_6_0), int()))
  requires (p1_16 ==> true ==> [acc(MustTerminate(_cthread_152), write), true]) && (p2_16 ==> true ==> [acc(MustTerminate_0(_cthread_152_0), write), true]) && true
  requires (p1_16 ==> [true, Measure$check(_caller_measures_152, _cthread_152, 1) || perm(MustTerminate(_cthread_152)) == none && ((forperm _r_38: Ref [MustInvokeBounded(_r_38)] :: false) && ((forperm _r_38: Ref [MustInvokeUnbounded(_r_38)] :: false) && ((forperm _r_38: Ref [_r_38.MustReleaseBounded] :: false) && (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: false))))]) && (p2_16 ==> [true, Measure$check(_caller_measures_152_0, _cthread_152_0, 1) || perm(MustTerminate_0(_cthread_152_0)) == none && ((forperm _r_38: Ref [MustInvokeBounded_0(_r_38)] :: false) && ((forperm _r_38: Ref [MustInvokeUnbounded_0(_r_38)] :: false) && ((forperm _r_38: Ref [_r_38.MustReleaseBoundedp] :: false) && (forperm _r_38: Ref [_r_38.MustReleaseUnboundedp] :: false))))])
  requires (p1_16 ==> false) && (p2_16 ==> false) ==> p1_16 == p2_16
  ensures (p1_16 ==> [(forperm _r_36: Ref [_r_36.MustReleaseBounded] :: Level(_r_36) <= _current_wait_level_152) && ((forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: Level(_r_36) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]) && (p2_16 ==> [(forperm _r_36: Ref [_r_36.MustReleaseBoundedp] :: Level(_r_36) <= _current_wait_level_152_0) && ((forperm _r_36: Ref [_r_36.MustReleaseUnboundedp] :: Level(_r_36) <= _current_wait_level_152_0) && _residue_152_0 <= _current_wait_level_152_0), true])
  ensures (p1_16 ==> issubtype(typeof(_res), int())) && (p2_16 ==> issubtype(typeof(_res_0), int()))
  ensures (p1_16 ==> _res == x_6) && (p2_16 ==> _res_0 == x_6_0)
  ensures (p1_16 ==> [true, (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)))]) && (p2_16 ==> [true, (forperm _r_37: Ref [MustInvokeBounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded_0(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBoundedp] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnboundedp] :: false)))])
  ensures old((p1_16 ==> true) && (p2_16 ==> true))
{
  var ret1_0: Bool
  var ret2_0: Bool
  inhale p1_16
  ret1_0 := false
  ret2_0 := false
  var _err: Ref
  var _err_7: Ref
  var x_9: Ref
  var x_9_0: Ref
  var _cwl_152: Perm
  var _cwl_152_0: Perm
  var _method_measures_152: Seq[Measure$]
  var _method_measures_152_0: Seq[Measure$]
  if (p1_16 && !ret1_0) {
    _method_measures_152 := Seq(Measure$create(true, _cthread_152, 1))
    _res := null
    _err := null
    x_9 := x_6
    _res := x_9
    ret1_0 := true
  }
  if (p2_16 && !ret2_0) {
    _method_measures_152_0 := Seq(Measure$create(true, _cthread_152_0, 1))
    _res_0 := null
    _err_7 := null
    x_9_0 := x_6_0
    _res_0 := x_9_0
    ret2_0 := true
  }
  assert true
}

method recursion(p1_17: Bool, p2_17: Bool, _cthread_153: Ref, _cthread_153_0: Ref, _caller_measures_153: Seq[Measure$], _caller_measures_153_0: Seq[Measure$], _residue_153: Perm, _residue_153_0: Perm, h_3: Ref, h_3_0: Ref) returns (_current_wait_level_153: Perm, _current_wait_level_153_0: Perm, _res: Ref, _res_1: Ref)
  requires (p1_17 ==> _cthread_153 != null) && (p2_17 ==> _cthread_153_0 != null)
  requires (p1_17 ==> issubtype(typeof(_cthread_153), Thread_0())) && (p2_17 ==> issubtype(typeof(_cthread_153_0), Thread_0()))
  requires (p1_17 ==> issubtype(typeof(h_3), int())) && (p2_17 ==> issubtype(typeof(h_3_0), int()))
  requires (p1_17 ==> int___gt__(int___unbox__(h_3), 0) ==> int___add__(int___unbox__(h_3), 2) > 0 && [acc(MustTerminate(_cthread_153), write), true]) && (p2_17 ==> int___gt__(int___unbox__(h_3_0), 0) ==> int___add__(int___unbox__(h_3_0), 2) > 0 && [acc(MustTerminate_0(_cthread_153_0), write), true]) && true
  requires (p1_17 ==> [true, int___gt__(int___unbox__(h_3), 0) && Measure$check(_caller_measures_153, _cthread_153, int___add__(int___unbox__(h_3), 2)) || perm(MustTerminate(_cthread_153)) == none && ((forperm _r_41: Ref [MustInvokeBounded(_r_41)] :: false) && ((forperm _r_41: Ref [MustInvokeUnbounded(_r_41)] :: false) && ((forperm _r_41: Ref [_r_41.MustReleaseBounded] :: false) && (forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: false))))]) && (p2_17 ==> [true, int___gt__(int___unbox__(h_3_0), 0) && Measure$check(_caller_measures_153_0, _cthread_153_0, int___add__(int___unbox__(h_3_0), 2)) || perm(MustTerminate_0(_cthread_153_0)) == none && ((forperm _r_41: Ref [MustInvokeBounded_0(_r_41)] :: false) && ((forperm _r_41: Ref [MustInvokeUnbounded_0(_r_41)] :: false) && ((forperm _r_41: Ref [_r_41.MustReleaseBoundedp] :: false) && (forperm _r_41: Ref [_r_41.MustReleaseUnboundedp] :: false))))])
  requires (p1_17 ==> !int___gt__(int___unbox__(h_3), 0)) && (p2_17 ==> !int___gt__(int___unbox__(h_3_0), 0)) ==> p1_17 == p2_17
  requires p1_17 && p2_17 ==> int___gt__(int___unbox__(h_3), 0) == int___gt__(int___unbox__(h_3_0), 0)
  ensures (p1_17 ==> [(forperm _r_39: Ref [_r_39.MustReleaseBounded] :: Level(_r_39) <= _current_wait_level_153) && ((forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: Level(_r_39) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]) && (p2_17 ==> [(forperm _r_39: Ref [_r_39.MustReleaseBoundedp] :: Level(_r_39) <= _current_wait_level_153_0) && ((forperm _r_39: Ref [_r_39.MustReleaseUnboundedp] :: Level(_r_39) <= _current_wait_level_153_0) && _residue_153_0 <= _current_wait_level_153_0), true])
  ensures (p1_17 ==> issubtype(typeof(_res), int())) && (p2_17 ==> issubtype(typeof(_res_1), int()))
  ensures (p1_17 ==> int___eq__(_res, __prim__int___box__(1))) && (p2_17 ==> int___eq__(_res_1, __prim__int___box__(1)))
  ensures (p1_17 ==> [true, (forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false)))]) && (p2_17 ==> [true, (forperm _r_40: Ref [MustInvokeBounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded_0(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBoundedp] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnboundedp] :: false)))])
  ensures old((p1_17 ==> int___gt__(int___unbox__(h_3), 0)) && (p2_17 ==> int___gt__(int___unbox__(h_3_0), 0)))
{
  var ret1_1: Bool
  var ret2_1: Bool
  inhale p1_17
  ret1_1 := false
  ret2_1 := false
  var _err: Ref
  var _err_8: Ref
  var x_7: Ref
  var x_7_0: Ref
  var h_11: Ref
  var h_11_0: Ref
  var terminates_res: Ref
  var terminates_res_1: Ref
  var recursion_res: Ref
  var recursion_res_0: Ref
  var _cwl_153: Perm
  var _cwl_153_0: Perm
  var _method_measures_153: Seq[Measure$]
  var _method_measures_153_0: Seq[Measure$]
  if (p1_17 && !ret1_1) {
    _method_measures_153 := Seq(Measure$create(int___gt__(int___unbox__(h_3), 0), _cthread_153, int___add__(int___unbox__(h_3), 2)))
    _res := null
    _err := null
    h_11 := h_3
  }
  if (p2_17 && !ret2_1) {
    _method_measures_153_0 := Seq(Measure$create(int___gt__(int___unbox__(h_3_0), 0), _cthread_153_0, int___add__(int___unbox__(h_3_0), 2)))
    _res_1 := null
    _err_8 := null
    h_11_0 := h_3_0
  }
  // Method call: terminates
  if (p1_17 && !ret1_1 || p2_17 && !ret2_1) {
    var tmp1_29: Ref
    var tmp2_29: Ref
    var tmp1_30: Seq[Measure$]
    var tmp2_30: Seq[Measure$]
    var tmp1_31: Perm
    var tmp2_31: Perm
    var tmp1_32: Ref
    var tmp2_32: Ref
    var tmp1_33: Perm
    var tmp2_33: Perm
    var tmp1_34: Ref
    var tmp2_34: Ref
    if (p1_17 && !ret1_1) {
      tmp1_29 := _cthread_153
      tmp1_30 := _method_measures_153
      tmp1_31 := _residue_153
      tmp1_32 := h_11
    }
    if (p2_17 && !ret2_1) {
      tmp2_29 := _cthread_153_0
      tmp2_30 := _method_measures_153_0
      tmp2_31 := _residue_153_0
      tmp2_32 := h_11_0
    }
    tmp1_33, tmp2_33, tmp1_34, tmp2_34 := terminates(p1_17 && !ret1_1, p2_17 && !ret2_1, tmp1_29, tmp2_29, tmp1_30, tmp2_30, tmp1_31, tmp2_31, tmp1_32, tmp2_32)
    if (p1_17 && !ret1_1) {
      _cwl_153 := tmp1_33
      terminates_res := tmp1_34
    }
    if (p2_17 && !ret2_1) {
      _cwl_153_0 := tmp2_33
      terminates_res_1 := tmp2_34
    }
  }
  if (p1_17 && !ret1_1) {
    x_7 := terminates_res
    inhale _isDefined(3628920)
  }
  if (p2_17 && !ret2_1) {
    x_7_0 := terminates_res_1
    inhale true
  }
  var p1_18: Bool
  var p2_18: Bool
  var p3_1: Bool
  var p4_1: Bool
  p1_18 := p1_17 && !ret1_1 && int___eq__(_checkDefined(x_7, 3628920), __prim__int___box__(0))
  p2_18 := p2_17 && !ret2_1 && int___eq__(x_7_0, __prim__int___box__(0))
  p3_1 := p1_17 && !ret1_1 && !int___eq__(_checkDefined(x_7, 3628920), __prim__int___box__(0))
  p4_1 := p2_17 && !ret2_1 && !int___eq__(x_7_0, __prim__int___box__(0))
  if (p1_18 && !ret1_1) {
    _res := __prim__int___box__(1)
    ret1_1 := true
  }
  if (p2_18 && !ret2_1) {
    _res_1 := __prim__int___box__(1)
    ret2_1 := true
  }
  // Method call: recursion
  if (p1_17 && !ret1_1 || p2_17 && !ret2_1) {
    var tmp1_35: Ref
    var tmp2_35: Ref
    var tmp1_36: Seq[Measure$]
    var tmp2_36: Seq[Measure$]
    var tmp1_37: Perm
    var tmp2_37: Perm
    var tmp1_38: Ref
    var tmp2_38: Ref
    var tmp1_39: Perm
    var tmp2_39: Perm
    var tmp1_40: Ref
    var tmp2_40: Ref
    if (p1_17 && !ret1_1) {
      tmp1_35 := _cthread_153
      tmp1_36 := _method_measures_153
      tmp1_37 := _residue_153
      tmp1_38 := __prim__int___box__(int___sub__(int___unbox__(_checkDefined(x_7, 3628920)), 1))
    }
    if (p2_17 && !ret2_1) {
      tmp2_35 := _cthread_153_0
      tmp2_36 := _method_measures_153_0
      tmp2_37 := _residue_153_0
      tmp2_38 := __prim__int___box__(int___sub__(int___unbox__(x_7_0), 1))
    }
    tmp1_39, tmp2_39, tmp1_40, tmp2_40 := recursion(p1_17 && !ret1_1, p2_17 && !ret2_1, tmp1_35, tmp2_35, tmp1_36, tmp2_36, tmp1_37, tmp2_37, tmp1_38, tmp2_38)
    if (p1_17 && !ret1_1) {
      _cwl_153 := tmp1_39
      recursion_res := tmp1_40
    }
    if (p2_17 && !ret2_1) {
      _cwl_153_0 := tmp2_39
      recursion_res_0 := tmp2_40
    }
  }
  if (p1_17 && !ret1_1) {
    _res := recursion_res
    ret1_1 := true
  }
  if (p2_17 && !ret2_1) {
    _res_1 := recursion_res_0
    ret2_1 := true
  }
  assert true
}

method recursion_fixed(p1_19: Bool, p2_19: Bool, _cthread_154: Ref, _cthread_154_0: Ref, _caller_measures_154: Seq[Measure$], _caller_measures_154_0: Seq[Measure$], _residue_154: Perm, _residue_154_0: Perm, h_4: Ref, h_4_0: Ref) returns (_current_wait_level_154: Perm, _current_wait_level_154_0: Perm, _res: Ref, _res_2: Ref)
  requires (p1_19 ==> _cthread_154 != null) && (p2_19 ==> _cthread_154_0 != null)
  requires (p1_19 ==> issubtype(typeof(_cthread_154), Thread_0())) && (p2_19 ==> issubtype(typeof(_cthread_154_0), Thread_0()))
  requires (p1_19 ==> issubtype(typeof(h_4), int())) && (p2_19 ==> issubtype(typeof(h_4_0), int()))
  requires (p1_19 ==> int___ge__(int___unbox__(h_4), 0) ==> int___add__(int___unbox__(h_4), 2) > 0 && [acc(MustTerminate(_cthread_154), write), true]) && (p2_19 ==> int___ge__(int___unbox__(h_4_0), 0) ==> int___add__(int___unbox__(h_4_0), 2) > 0 && [acc(MustTerminate_0(_cthread_154_0), write), true]) && true
  requires (p1_19 ==> [true, int___ge__(int___unbox__(h_4), 0) && Measure$check(_caller_measures_154, _cthread_154, int___add__(int___unbox__(h_4), 2)) || perm(MustTerminate(_cthread_154)) == none && ((forperm _r_44: Ref [MustInvokeBounded(_r_44)] :: false) && ((forperm _r_44: Ref [MustInvokeUnbounded(_r_44)] :: false) && ((forperm _r_44: Ref [_r_44.MustReleaseBounded] :: false) && (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: false))))]) && (p2_19 ==> [true, int___ge__(int___unbox__(h_4_0), 0) && Measure$check(_caller_measures_154_0, _cthread_154_0, int___add__(int___unbox__(h_4_0), 2)) || perm(MustTerminate_0(_cthread_154_0)) == none && ((forperm _r_44: Ref [MustInvokeBounded_0(_r_44)] :: false) && ((forperm _r_44: Ref [MustInvokeUnbounded_0(_r_44)] :: false) && ((forperm _r_44: Ref [_r_44.MustReleaseBoundedp] :: false) && (forperm _r_44: Ref [_r_44.MustReleaseUnboundedp] :: false))))])
  requires (p1_19 ==> !int___ge__(int___unbox__(h_4), 0)) && (p2_19 ==> !int___ge__(int___unbox__(h_4_0), 0)) ==> p1_19 == p2_19
  requires p1_19 && p2_19 ==> int___ge__(int___unbox__(h_4), 0) == int___ge__(int___unbox__(h_4_0), 0)
  ensures (p1_19 ==> [(forperm _r_42: Ref [_r_42.MustReleaseBounded] :: Level(_r_42) <= _current_wait_level_154) && ((forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: Level(_r_42) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]) && (p2_19 ==> [(forperm _r_42: Ref [_r_42.MustReleaseBoundedp] :: Level(_r_42) <= _current_wait_level_154_0) && ((forperm _r_42: Ref [_r_42.MustReleaseUnboundedp] :: Level(_r_42) <= _current_wait_level_154_0) && _residue_154_0 <= _current_wait_level_154_0), true])
  ensures (p1_19 ==> issubtype(typeof(_res), int())) && (p2_19 ==> issubtype(typeof(_res_2), int()))
  ensures (p1_19 ==> int___eq__(_res, __prim__int___box__(1))) && (p2_19 ==> int___eq__(_res_2, __prim__int___box__(1)))
  ensures (p1_19 ==> [true, (forperm _r_43: Ref [MustInvokeBounded(_r_43)] :: false) && ((forperm _r_43: Ref [MustInvokeUnbounded(_r_43)] :: false) && ((forperm _r_43: Ref [_r_43.MustReleaseBounded] :: false) && (forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: false)))]) && (p2_19 ==> [true, (forperm _r_43: Ref [MustInvokeBounded_0(_r_43)] :: false) && ((forperm _r_43: Ref [MustInvokeUnbounded_0(_r_43)] :: false) && ((forperm _r_43: Ref [_r_43.MustReleaseBoundedp] :: false) && (forperm _r_43: Ref [_r_43.MustReleaseUnboundedp] :: false)))])
  ensures old((p1_19 ==> int___ge__(int___unbox__(h_4), 0)) && (p2_19 ==> int___ge__(int___unbox__(h_4_0), 0)))
{
  var ret1_2: Bool
  var ret2_2: Bool
  inhale p1_19
  ret1_2 := false
  ret2_2 := false
  var _err: Ref
  var _err_9: Ref
  var x_8: Ref
  var x_8_0: Ref
  var h_12: Ref
  var h_12_0: Ref
  var terminates_res_0: Ref
  var terminates_res_0_0: Ref
  var recursion_fixed_res: Ref
  var recursion_fixed_res_1: Ref
  var _cwl_154: Perm
  var _cwl_154_0: Perm
  var _method_measures_154: Seq[Measure$]
  var _method_measures_154_0: Seq[Measure$]
  if (p1_19 && !ret1_2) {
    _method_measures_154 := Seq(Measure$create(int___ge__(int___unbox__(h_4), 0), _cthread_154, int___add__(int___unbox__(h_4), 2)))
    _res := null
    _err := null
    h_12 := h_4
  }
  if (p2_19 && !ret2_2) {
    _method_measures_154_0 := Seq(Measure$create(int___ge__(int___unbox__(h_4_0), 0), _cthread_154_0, int___add__(int___unbox__(h_4_0), 2)))
    _res_2 := null
    _err_9 := null
    h_12_0 := h_4_0
  }
  // Method call: terminates
  if (p1_19 && !ret1_2 || p2_19 && !ret2_2) {
    var tmp1_41: Ref
    var tmp2_41: Ref
    var tmp1_42: Seq[Measure$]
    var tmp2_42: Seq[Measure$]
    var tmp1_43: Perm
    var tmp2_43: Perm
    var tmp1_44: Ref
    var tmp2_44: Ref
    var tmp1_45: Perm
    var tmp2_45: Perm
    var tmp1_46: Ref
    var tmp2_46: Ref
    if (p1_19 && !ret1_2) {
      tmp1_41 := _cthread_154
      tmp1_42 := _method_measures_154
      tmp1_43 := _residue_154
      tmp1_44 := h_12
    }
    if (p2_19 && !ret2_2) {
      tmp2_41 := _cthread_154_0
      tmp2_42 := _method_measures_154_0
      tmp2_43 := _residue_154_0
      tmp2_44 := h_12_0
    }
    tmp1_45, tmp2_45, tmp1_46, tmp2_46 := terminates(p1_19 && !ret1_2, p2_19 && !ret2_2, tmp1_41, tmp2_41, tmp1_42, tmp2_42, tmp1_43, tmp2_43, tmp1_44, tmp2_44)
    if (p1_19 && !ret1_2) {
      _cwl_154 := tmp1_45
      terminates_res_0 := tmp1_46
    }
    if (p2_19 && !ret2_2) {
      _cwl_154_0 := tmp2_45
      terminates_res_0_0 := tmp2_46
    }
  }
  if (p1_19 && !ret1_2) {
    x_8 := terminates_res_0
    inhale _isDefined(3694456)
  }
  if (p2_19 && !ret2_2) {
    x_8_0 := terminates_res_0_0
    inhale true
  }
  var p1_20: Bool
  var p2_20: Bool
  var p3_2: Bool
  var p4_2: Bool
  p1_20 := p1_19 && !ret1_2 && int___eq__(_checkDefined(x_8, 3694456), __prim__int___box__(0))
  p2_20 := p2_19 && !ret2_2 && int___eq__(x_8_0, __prim__int___box__(0))
  p3_2 := p1_19 && !ret1_2 && !int___eq__(_checkDefined(x_8, 3694456), __prim__int___box__(0))
  p4_2 := p2_19 && !ret2_2 && !int___eq__(x_8_0, __prim__int___box__(0))
  if (p1_20 && !ret1_2) {
    _res := __prim__int___box__(1)
    ret1_2 := true
  }
  if (p2_20 && !ret2_2) {
    _res_2 := __prim__int___box__(1)
    ret2_2 := true
  }
  // Method call: recursion_fixed
  if (p1_19 && !ret1_2 || p2_19 && !ret2_2) {
    var tmp1_47: Ref
    var tmp2_47: Ref
    var tmp1_48: Seq[Measure$]
    var tmp2_48: Seq[Measure$]
    var tmp1_49: Perm
    var tmp2_49: Perm
    var tmp1_50: Ref
    var tmp2_50: Ref
    var tmp1_51: Perm
    var tmp2_51: Perm
    var tmp1_52: Ref
    var tmp2_52: Ref
    if (p1_19 && !ret1_2) {
      tmp1_47 := _cthread_154
      tmp1_48 := _method_measures_154
      tmp1_49 := _residue_154
      tmp1_50 := __prim__int___box__(int___sub__(int___unbox__(_checkDefined(x_8, 3694456)), 1))
    }
    if (p2_19 && !ret2_2) {
      tmp2_47 := _cthread_154_0
      tmp2_48 := _method_measures_154_0
      tmp2_49 := _residue_154_0
      tmp2_50 := __prim__int___box__(int___sub__(int___unbox__(x_8_0), 1))
    }
    tmp1_51, tmp2_51, tmp1_52, tmp2_52 := recursion_fixed(p1_19 && !ret1_2, p2_19 && !ret2_2, tmp1_47, tmp2_47, tmp1_48, tmp2_48, tmp1_49, tmp2_49, tmp1_50, tmp2_50)
    if (p1_19 && !ret1_2) {
      _cwl_154 := tmp1_51
      recursion_fixed_res := tmp1_52
    }
    if (p2_19 && !ret2_2) {
      _cwl_154_0 := tmp2_51
      recursion_fixed_res_1 := tmp2_52
    }
  }
  if (p1_19 && !ret1_2) {
    _res := recursion_fixed_res
    ret1_2 := true
  }
  if (p2_19 && !ret2_2) {
    _res_2 := recursion_fixed_res_1
    ret2_2 := true
  }
  assert true
}

method test_recursion(p1_21: Bool, p2_21: Bool, _cthread_155: Ref, _cthread_155_0: Ref, _caller_measures_155: Seq[Measure$], _caller_measures_155_0: Seq[Measure$], _residue_155: Perm, _residue_155_0: Perm, secret: Ref, secret_1: Ref) returns (_current_wait_level_155: Perm, _current_wait_level_155_0: Perm, _res: Ref, _res_3: Ref)
  requires (p1_21 ==> _cthread_155 != null) && (p2_21 ==> _cthread_155_0 != null)
  requires (p1_21 ==> issubtype(typeof(_cthread_155), Thread_0())) && (p2_21 ==> issubtype(typeof(_cthread_155_0), Thread_0()))
  requires (p1_21 ==> issubtype(typeof(secret), int())) && (p2_21 ==> issubtype(typeof(secret_1), int()))
  requires (p1_21 ==> [true, perm(MustTerminate(_cthread_155)) == none && ((forperm _r_47: Ref [MustInvokeBounded(_r_47)] :: false) && ((forperm _r_47: Ref [MustInvokeUnbounded(_r_47)] :: false) && ((forperm _r_47: Ref [_r_47.MustReleaseBounded] :: false) && (forperm _r_47: Ref [_r_47.MustReleaseUnbounded] :: false))))]) && (p2_21 ==> [true, perm(MustTerminate_0(_cthread_155_0)) == none && ((forperm _r_47: Ref [MustInvokeBounded_0(_r_47)] :: false) && ((forperm _r_47: Ref [MustInvokeUnbounded_0(_r_47)] :: false) && ((forperm _r_47: Ref [_r_47.MustReleaseBoundedp] :: false) && (forperm _r_47: Ref [_r_47.MustReleaseUnboundedp] :: false))))])
  ensures (p1_21 ==> [(forperm _r_45: Ref [_r_45.MustReleaseBounded] :: Level(_r_45) <= _current_wait_level_155) && ((forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: Level(_r_45) <= _current_wait_level_155) && _residue_155 <= _current_wait_level_155), true]) && (p2_21 ==> [(forperm _r_45: Ref [_r_45.MustReleaseBoundedp] :: Level(_r_45) <= _current_wait_level_155_0) && ((forperm _r_45: Ref [_r_45.MustReleaseUnboundedp] :: Level(_r_45) <= _current_wait_level_155_0) && _residue_155_0 <= _current_wait_level_155_0), true])
  ensures (p1_21 ==> issubtype(typeof(_res), int())) && (p2_21 ==> issubtype(typeof(_res_3), int()))
  ensures (p1_21 ==> [true, (forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false)))]) && (p2_21 ==> [true, (forperm _r_46: Ref [MustInvokeBounded_0(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded_0(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBoundedp] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnboundedp] :: false)))])
{
  var ret1_3: Bool
  var ret2_3: Bool
  inhale p1_21
  ret1_3 := false
  ret2_3 := false
  var _err: Ref
  var _err_10: Ref
  var secret_0: Ref
  var secret_0_0: Ref
  var recursion_fixed_res_0: Ref
  var recursion_fixed_res_0_0: Ref
  var _cwl_155: Perm
  var _cwl_155_0: Perm
  var _method_measures_155: Seq[Measure$]
  var _method_measures_155_0: Seq[Measure$]
  if (p1_21 && !ret1_3) {
    _method_measures_155 := Seq[Measure$]()
    _res := null
    _err := null
    secret_0 := secret
  }
  if (p2_21 && !ret2_3) {
    _method_measures_155_0 := Seq[Measure$]()
    _res_3 := null
    _err_10 := null
    secret_0_0 := secret_1
  }
  // Method call: recursion_fixed
  if (p1_21 && !ret1_3 || p2_21 && !ret2_3) {
    var tmp1_53: Ref
    var tmp2_53: Ref
    var tmp1_54: Seq[Measure$]
    var tmp2_54: Seq[Measure$]
    var tmp1_55: Perm
    var tmp2_55: Perm
    var tmp1_56: Ref
    var tmp2_56: Ref
    var tmp1_57: Perm
    var tmp2_57: Perm
    var tmp1_58: Ref
    var tmp2_58: Ref
    if (p1_21 && !ret1_3) {
      tmp1_53 := _cthread_155
      tmp1_54 := _method_measures_155
      tmp1_55 := _residue_155
      tmp1_56 := secret_0
    }
    if (p2_21 && !ret2_3) {
      tmp2_53 := _cthread_155_0
      tmp2_54 := _method_measures_155_0
      tmp2_55 := _residue_155_0
      tmp2_56 := secret_0_0
    }
    tmp1_57, tmp2_57, tmp1_58, tmp2_58 := recursion_fixed(p1_21 && !ret1_3, p2_21 && !ret2_3, tmp1_53, tmp2_53, tmp1_54, tmp2_54, tmp1_55, tmp2_55, tmp1_56, tmp2_56)
    if (p1_21 && !ret1_3) {
      _cwl_155 := tmp1_57
      recursion_fixed_res_0 := tmp1_58
    }
    if (p2_21 && !ret2_3) {
      _cwl_155_0 := tmp2_57
      recursion_fixed_res_0_0 := tmp2_58
    }
  }
  if (p1_21 && !ret1_3) {
    _res := recursion_fixed_res_0
    ret1_3 := true
  }
  if (p2_21 && !ret2_3) {
    _res_3 := recursion_fixed_res_0_0
    ret2_3 := true
  }
  assert true
}

method cycle_1(p1_22: Bool, p2_22: Bool, _cthread_156: Ref, _cthread_156_0: Ref, _caller_measures_156: Seq[Measure$], _caller_measures_156_0: Seq[Measure$], _residue_156: Perm, _residue_156_0: Perm, h_5: Ref, h_5_0: Ref) returns (_current_wait_level_156: Perm, _current_wait_level_156_0: Perm)
  requires (p1_22 ==> _cthread_156 != null) && (p2_22 ==> _cthread_156_0 != null)
  requires (p1_22 ==> issubtype(typeof(_cthread_156), Thread_0())) && (p2_22 ==> issubtype(typeof(_cthread_156_0), Thread_0()))
  requires (p1_22 ==> issubtype(typeof(h_5), int())) && (p2_22 ==> issubtype(typeof(h_5_0), int()))
  requires (p1_22 ==> true ==> int___unbox__(h_5) > 0 && [acc(MustTerminate(_cthread_156), write), true]) && (p2_22 ==> true ==> int___unbox__(h_5_0) > 0 && [acc(MustTerminate_0(_cthread_156_0), write), true]) && true
  requires (p1_22 ==> [true, Measure$check(_caller_measures_156, _cthread_156, int___unbox__(h_5)) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_50: Ref [MustInvokeBounded(_r_50)] :: false) && ((forperm _r_50: Ref [MustInvokeUnbounded(_r_50)] :: false) && ((forperm _r_50: Ref [_r_50.MustReleaseBounded] :: false) && (forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: false))))]) && (p2_22 ==> [true, Measure$check(_caller_measures_156_0, _cthread_156_0, int___unbox__(h_5_0)) || perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_50: Ref [MustInvokeBounded_0(_r_50)] :: false) && ((forperm _r_50: Ref [MustInvokeUnbounded_0(_r_50)] :: false) && ((forperm _r_50: Ref [_r_50.MustReleaseBoundedp] :: false) && (forperm _r_50: Ref [_r_50.MustReleaseUnboundedp] :: false))))])
  requires (p1_22 ==> false) && (p2_22 ==> false) ==> p1_22 == p2_22
  ensures (p1_22 ==> [(forperm _r_48: Ref [_r_48.MustReleaseBounded] :: Level(_r_48) <= _current_wait_level_156) && ((forperm _r_48: Ref [_r_48.MustReleaseUnbounded] :: Level(_r_48) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]) && (p2_22 ==> [(forperm _r_48: Ref [_r_48.MustReleaseBoundedp] :: Level(_r_48) <= _current_wait_level_156_0) && ((forperm _r_48: Ref [_r_48.MustReleaseUnboundedp] :: Level(_r_48) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0), true])
  ensures (p1_22 ==> [true, (forperm _r_49: Ref [MustInvokeBounded(_r_49)] :: false) && ((forperm _r_49: Ref [MustInvokeUnbounded(_r_49)] :: false) && ((forperm _r_49: Ref [_r_49.MustReleaseBounded] :: false) && (forperm _r_49: Ref [_r_49.MustReleaseUnbounded] :: false)))]) && (p2_22 ==> [true, (forperm _r_49: Ref [MustInvokeBounded_0(_r_49)] :: false) && ((forperm _r_49: Ref [MustInvokeUnbounded_0(_r_49)] :: false) && ((forperm _r_49: Ref [_r_49.MustReleaseBoundedp] :: false) && (forperm _r_49: Ref [_r_49.MustReleaseUnboundedp] :: false)))])
  ensures old((p1_22 ==> true) && (p2_22 ==> true))
{
  inhale p1_22
  var _err: Ref
  var _err_11: Ref
  var h_13: Ref
  var h_13_0: Ref
  var _cwl_156: Perm
  var _cwl_156_0: Perm
  var _method_measures_156: Seq[Measure$]
  var _method_measures_156_0: Seq[Measure$]
  if (p1_22) {
    _method_measures_156 := Seq(Measure$create(true, _cthread_156, int___unbox__(h_5)))
    _err := null
    h_13 := h_5
  }
  if (p2_22) {
    _method_measures_156_0 := Seq(Measure$create(true, _cthread_156_0, int___unbox__(h_5_0)))
    _err_11 := null
    h_13_0 := h_5_0
  }
  // Method call: cycle_2
  if (p1_22 || p2_22) {
    var tmp1_59: Ref
    var tmp2_59: Ref
    var tmp1_60: Seq[Measure$]
    var tmp2_60: Seq[Measure$]
    var tmp1_61: Perm
    var tmp2_61: Perm
    var tmp1_62: Ref
    var tmp2_62: Ref
    var tmp1_63: Perm
    var tmp2_63: Perm
    if (p1_22) {
      tmp1_59 := _cthread_156
      tmp1_60 := _method_measures_156
      tmp1_61 := _residue_156
      tmp1_62 := h_13
    }
    if (p2_22) {
      tmp2_59 := _cthread_156_0
      tmp2_60 := _method_measures_156_0
      tmp2_61 := _residue_156_0
      tmp2_62 := h_13_0
    }
    tmp1_63, tmp2_63 := cycle_2(p1_22, p2_22, tmp1_59, tmp2_59, tmp1_60, tmp2_60, tmp1_61, tmp2_61, tmp1_62, tmp2_62)
    if (p1_22) {
      _cwl_156 := tmp1_63
    }
    if (p2_22) {
      _cwl_156_0 := tmp2_63
    }
  }
  assert true
}

method cycle_2(p1_23: Bool, p2_23: Bool, _cthread_157: Ref, _cthread_157_0: Ref, _caller_measures_157: Seq[Measure$], _caller_measures_157_0: Seq[Measure$], _residue_157: Perm, _residue_157_0: Perm, h_6: Ref, h_6_0: Ref) returns (_current_wait_level_157: Perm, _current_wait_level_157_0: Perm)
  requires (p1_23 ==> _cthread_157 != null) && (p2_23 ==> _cthread_157_0 != null)
  requires (p1_23 ==> issubtype(typeof(_cthread_157), Thread_0())) && (p2_23 ==> issubtype(typeof(_cthread_157_0), Thread_0()))
  requires (p1_23 ==> issubtype(typeof(h_6), int())) && (p2_23 ==> issubtype(typeof(h_6_0), int()))
  requires (p1_23 ==> true ==> int___unbox__(h_6) > 0 && [acc(MustTerminate(_cthread_157), write), true]) && (p2_23 ==> true ==> int___unbox__(h_6_0) > 0 && [acc(MustTerminate_0(_cthread_157_0), write), true]) && true
  requires (p1_23 ==> [true, Measure$check(_caller_measures_157, _cthread_157, int___unbox__(h_6)) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_53: Ref [MustInvokeBounded(_r_53)] :: false) && ((forperm _r_53: Ref [MustInvokeUnbounded(_r_53)] :: false) && ((forperm _r_53: Ref [_r_53.MustReleaseBounded] :: false) && (forperm _r_53: Ref [_r_53.MustReleaseUnbounded] :: false))))]) && (p2_23 ==> [true, Measure$check(_caller_measures_157_0, _cthread_157_0, int___unbox__(h_6_0)) || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_53: Ref [MustInvokeBounded_0(_r_53)] :: false) && ((forperm _r_53: Ref [MustInvokeUnbounded_0(_r_53)] :: false) && ((forperm _r_53: Ref [_r_53.MustReleaseBoundedp] :: false) && (forperm _r_53: Ref [_r_53.MustReleaseUnboundedp] :: false))))])
  requires (p1_23 ==> false) && (p2_23 ==> false) ==> p1_23 == p2_23
  ensures (p1_23 ==> [(forperm _r_51: Ref [_r_51.MustReleaseBounded] :: Level(_r_51) <= _current_wait_level_157) && ((forperm _r_51: Ref [_r_51.MustReleaseUnbounded] :: Level(_r_51) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]) && (p2_23 ==> [(forperm _r_51: Ref [_r_51.MustReleaseBoundedp] :: Level(_r_51) <= _current_wait_level_157_0) && ((forperm _r_51: Ref [_r_51.MustReleaseUnboundedp] :: Level(_r_51) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0), true])
  ensures (p1_23 ==> [true, (forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false)))]) && (p2_23 ==> [true, (forperm _r_52: Ref [MustInvokeBounded_0(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded_0(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBoundedp] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnboundedp] :: false)))])
  ensures old((p1_23 ==> true) && (p2_23 ==> true))
{
  inhale p1_23
  var _err: Ref
  var _err_12: Ref
  var h_14: Ref
  var h_14_0: Ref
  var _cwl_157: Perm
  var _cwl_157_0: Perm
  var _method_measures_157: Seq[Measure$]
  var _method_measures_157_0: Seq[Measure$]
  if (p1_23) {
    _method_measures_157 := Seq(Measure$create(true, _cthread_157, int___unbox__(h_6)))
    _err := null
    h_14 := h_6
  }
  if (p2_23) {
    _method_measures_157_0 := Seq(Measure$create(true, _cthread_157_0, int___unbox__(h_6_0)))
    _err_12 := null
    h_14_0 := h_6_0
  }
  // Method call: cycle_1
  if (p1_23 || p2_23) {
    var tmp1_64: Ref
    var tmp2_64: Ref
    var tmp1_65: Seq[Measure$]
    var tmp2_65: Seq[Measure$]
    var tmp1_66: Perm
    var tmp2_66: Perm
    var tmp1_67: Ref
    var tmp2_67: Ref
    var tmp1_68: Perm
    var tmp2_68: Perm
    if (p1_23) {
      tmp1_64 := _cthread_157
      tmp1_65 := _method_measures_157
      tmp1_66 := _residue_157
      tmp1_67 := h_14
    }
    if (p2_23) {
      tmp2_64 := _cthread_157_0
      tmp2_65 := _method_measures_157_0
      tmp2_66 := _residue_157_0
      tmp2_67 := h_14_0
    }
    tmp1_68, tmp2_68 := cycle_1(p1_23, p2_23, tmp1_64, tmp2_64, tmp1_65, tmp2_65, tmp1_66, tmp2_66, tmp1_67, tmp2_67)
    if (p1_23) {
      _cwl_157 := tmp1_68
    }
    if (p2_23) {
      _cwl_157_0 := tmp2_68
    }
  }
  assert true
}

method main(p1_24: Bool, p2_24: Bool, _cthread_158: Ref, _cthread_158_0: Ref, _caller_measures_158: Seq[Measure$], _caller_measures_158_0: Seq[Measure$], _residue_166: Perm, _residue_166_0: Perm) returns (_current_wait_level_158: Perm, _current_wait_level_158_0: Perm)
  requires (p1_24 ==> _cthread_158 != null) && (p2_24 ==> _cthread_158_0 != null)
  requires (p1_24 ==> issubtype(typeof(_cthread_158), Thread_0())) && (p2_24 ==> issubtype(typeof(_cthread_158_0), Thread_0()))
  requires (p1_24 ==> [true, perm(MustTerminate(_cthread_158)) == none && ((forperm _r_56: Ref [MustInvokeBounded(_r_56)] :: false) && ((forperm _r_56: Ref [MustInvokeUnbounded(_r_56)] :: false) && ((forperm _r_56: Ref [_r_56.MustReleaseBounded] :: false) && (forperm _r_56: Ref [_r_56.MustReleaseUnbounded] :: false))))]) && (p2_24 ==> [true, perm(MustTerminate_0(_cthread_158_0)) == none && ((forperm _r_56: Ref [MustInvokeBounded_0(_r_56)] :: false) && ((forperm _r_56: Ref [MustInvokeUnbounded_0(_r_56)] :: false) && ((forperm _r_56: Ref [_r_56.MustReleaseBoundedp] :: false) && (forperm _r_56: Ref [_r_56.MustReleaseUnboundedp] :: false))))])
  ensures (p1_24 ==> [(forperm _r_54: Ref [_r_54.MustReleaseBounded] :: Level(_r_54) <= _current_wait_level_158) && ((forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: Level(_r_54) <= _current_wait_level_158) && _residue_166 <= _current_wait_level_158), true]) && (p2_24 ==> [(forperm _r_54: Ref [_r_54.MustReleaseBoundedp] :: Level(_r_54) <= _current_wait_level_158_0) && ((forperm _r_54: Ref [_r_54.MustReleaseUnboundedp] :: Level(_r_54) <= _current_wait_level_158_0) && _residue_166_0 <= _current_wait_level_158_0), true])
  ensures (p1_24 ==> [true, (forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false)))]) && (p2_24 ==> [true, (forperm _r_55: Ref [MustInvokeBounded_0(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded_0(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBoundedp] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnboundedp] :: false)))])
{
  inhale p1_24
  var module_defined_0: Bool
  var module_defined_0_0: Bool
  var module_names_0: Set[_Name]
  var module_names_0_0: Set[_Name]
  var _err: Ref
  var _err_13: Ref
  var _cwl_158: Perm
  var _cwl_158_0: Perm
  var _method_measures_158: Seq[Measure$]
  var _method_measures_158_0: Seq[Measure$]
  if (p1_24) {
    _method_measures_158 := Seq[Measure$]()
    module_defined_0 := true
    module_names_0 := Set[_Name]()
    module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
    module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
    _err := null
    module_names_0 := (module_names_0 union Set(_single(5460990052674857173734662115181759155)))
  }
  if (p2_24) {
    _method_measures_158_0 := Seq[Measure$]()
    module_defined_0_0 := true
    module_names_0_0 := Set[_Name]()
    module_names_0_0 := (module_names_0_0 union Set(_single(3106082509126931487350218591)))
    inhale acc(__file__()._valp, 99 / 100) && issubtype(typeof(__file__()._valp), str()) && issubtype(typeof(__file__()._valp), str())
    module_names_0_0 := (module_names_0_0 union Set(_single(2489530350921051593165922143)))
    inhale acc(__name__()._valp, 99 / 100) && issubtype(typeof(__name__()._valp), str()) && issubtype(typeof(__name__()._valp), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._valp)
    _err_13 := null
    module_names_0_0 := (module_names_0_0 union Set(_single(5460990052674857173734662115181759155)))
  }
  assert (p1_24 ==> true) && (p2_24 ==> true)
  if (p1_24) {
    module_names_0 := (module_names_0 union Set(_single(37330345359941673101818918286847601070845161324)))
  }
  if (p2_24) {
    module_names_0_0 := (module_names_0_0 union Set(_single(37330345359941673101818918286847601070845161324)))
  }
  assert (p1_24 ==> true) && (p2_24 ==> true)
  if (p1_24) {
    module_names_0 := (module_names_0 union Set(_single(32204233192925355264118027841014314442427428716)))
  }
  if (p2_24) {
    module_names_0_0 := (module_names_0_0 union Set(_single(32204233192925355264118027841014314442427428716)))
  }
  assert (p1_24 ==> true) && (p2_24 ==> true)
  if (p1_24) {
    module_names_0 := (module_names_0 union Set(_single(36965155440021349930102037095268433865801791785625751700)))
  }
  if (p2_24) {
    module_names_0_0 := (module_names_0_0 union Set(_single(36965155440021349930102037095268433865801791785625751700)))
  }
  assert (p1_24 ==> true) && (p2_24 ==> true)
  if (p1_24) {
    module_names_0 := (module_names_0 union Set(_single(7525503899428788135877635948)))
  }
  if (p2_24) {
    module_names_0_0 := (module_names_0_0 union Set(_single(7525503899428788135877635948)))
  }
  assert (p1_24 ==> true) && (p2_24 ==> true)
  if (p1_24) {
    module_names_0 := (module_names_0 union Set(_single(44376279657752999905285108137954878869556064099)))
  }
  if (p2_24) {
    module_names_0_0 := (module_names_0_0 union Set(_single(44376279657752999905285108137954878869556064099)))
  }
  assert (p1_24 ==> true) && (p2_24 ==> true)
  if (p1_24) {
    module_names_0 := (module_names_0 union Set(_single(6514679306471588238894327154)))
  }
  if (p2_24) {
    module_names_0_0 := (module_names_0_0 union Set(_single(6514679306471588238894327154)))
  }
  assert (p1_24 ==> true) && (p2_24 ==> true)
  if (p1_24) {
    module_names_0 := (module_names_0 union Set(_single(4195691409921841810)))
  }
  if (p2_24) {
    module_names_0_0 := (module_names_0_0 union Set(_single(4195691409921841810)))
  }
  assert (p1_24 ==> true) && (p2_24 ==> true)
  if (p1_24) {
    module_names_0 := (module_names_0 union Set(_single(6670569162186330171992335732)))
  }
  if (p2_24) {
    module_names_0_0 := (module_names_0_0 union Set(_single(6670569162186330171992335732)))
  }
  assert (p1_24 ==> true) && (p2_24 ==> true)
  if (p1_24) {
    module_names_0 := (module_names_0 union Set(_single(6515597862094703433294767474)))
  }
  if (p2_24) {
    module_names_0_0 := (module_names_0_0 union Set(_single(6515597862094703433294767474)))
  }
  assert (p1_24 ==> true) && (p2_24 ==> true)
  if (p1_24) {
    module_names_0 := (module_names_0 union Set(_single(20760724128050977668661444628881119886)))
  }
  if (p2_24) {
    module_names_0_0 := (module_names_0_0 union Set(_single(20760724128050977668661444628881119886)))
  }
  assert (p1_24 ==> true) && (p2_24 ==> true)
  if (p1_24) {
    module_names_0 := (module_names_0 union Set(_single(16126968547422747133677052102664034956)))
  }
  if (p2_24) {
    module_names_0_0 := (module_names_0_0 union Set(_single(16126968547422747133677052102664034956)))
  }
  assert (p1_24 ==> true) && (p2_24 ==> true)
  if (p1_24) {
    module_names_0 := (module_names_0 union Set(_single(3919006981886346909)))
  }
  if (p2_24) {
    module_names_0_0 := (module_names_0_0 union Set(_single(3919006981886346909)))
  }
  assert (p1_24 ==> true) && (p2_24 ==> true)
  if (p1_24) {
    module_names_0 := (module_names_0 union Set(_single(3919288456863057565)))
  }
  if (p2_24) {
    module_names_0_0 := (module_names_0_0 union Set(_single(3919288456863057565)))
  }
  assert true
}