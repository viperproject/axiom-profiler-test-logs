domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function m_threading(): ThreadingID
  
  unique function m2_threading(): ThreadingID
  
  unique function m3_threading(): ThreadingID
  
  unique function m_tuple_threading(): ThreadingID
  
  unique function m2_tuple_threading(): ThreadingID
  
  unique function m3_tuple_threading(): ThreadingID
  
  unique function m_bytes_threading(): ThreadingID
  
  unique function m2_bytes_threading(): ThreadingID
  
  unique function m3_bytes_threading(): ThreadingID
  
  unique function m_range_threading(): ThreadingID
  
  unique function m2_range_threading(): ThreadingID
  
  unique function m3_range_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function bytes___len__(self: Ref): Int
  requires issubtype(typeof(self), bytes())
  ensures result >= 0 
{
  |bytes___val__(self)|
}

function bytes___val__(self: Ref): Seq[Ref] 


function bytes___create__(value: Seq[Ref], ctr: Int): Ref
  ensures typeof(result) == bytes()
  ensures bytes___len__(result) == |value|
  ensures bytes___val__(result) == value 


function bytes___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), bytes())
  ensures (bytes___val__(self) == bytes___val__(other)) == result
  ensures result ==> issubtype(typeof(other), bytes()) && bytes___len__(self) == bytes___len__(other) 


function bytes___getitem__(self: Ref, index: Int): Ref
  requires issubtype(typeof(self), bytes())
  requires index >= 0 ==> index < bytes___len__(self)
  requires index < 0 ==> index >= -bytes___len__(self)
  ensures issubtype(typeof(result), int())
  ensures index >= 0 ==> result == bytes___val__(self)[index]
  ensures index < 0 ==> result == bytes___val__(self)[bytes___len__(self) + index] 


function bytes___getitem_slice__(self: Ref, index: Ref): Ref
  requires issubtype(typeof(self), bytes())
  requires issubtype(typeof(index), slice())
  requires slice___start__(index, bytes___len__(self)) >= 0 && slice___start__(index, bytes___len__(self)) <= bytes___len__(self)
  requires slice___stop__(index, bytes___len__(self)) >= 0 && slice___stop__(index, bytes___len__(self)) <= bytes___len__(self)
  ensures issubtype(typeof(result), bytes())
  ensures bytes___len__(result) == slice___stop__(index, bytes___len__(self)) - slice___start__(index, bytes___len__(self))
  ensures bytes___val__(result) == bytes___val__(self)[slice___start__(index, bytes___len__(self))..slice___stop__(index, bytes___len__(self))] 


function list___len__(self: Ref): Int
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_acc, wildcard) 
{
  |self.list_acc|
}

function list___getitem__(self: Ref, key: Ref): Ref
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires issubtype(typeof(key), int())
  requires acc(self.list_acc, wildcard)
  requires (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
  ensures result == (int___unbox__(key) >= 0 ? self.list_acc[int___unbox__(key)] : self.list_acc[list___len__(self) + int___unbox__(key)])
  ensures [issubtype(typeof(result), list_arg(typeof(self), 0)), true] 


function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function range___create__(start: Int, stop: Int, ctr: Int): Ref
  requires stop >= start
  ensures range___val__(result) == [start..stop)
  ensures range___start__(result) == start
  ensures range___stop__(result) == stop
  ensures typeof(result) == range() 


function range___val__(self: Ref): Seq[Int] 


function range___start__(self: Ref): Int 


function range___stop__(self: Ref): Int 


function range___len__(self: Ref): Int
  requires issubtype(typeof(self), range())
  ensures result == |range___val__(self)| 


function range___getitem__(self: Ref, index: Int): Int
  requires issubtype(typeof(self), range())
  requires index >= 0 ==> index < range___len__(self)
  requires index < 0 ==> index >= -range___len__(self)
  ensures index >= 0 ==> result == range___val__(self)[index]
  ensures index < 0 ==> result == range___val__(self)[range___len__(self) + index] 


function range___getitem_slice__(self: Ref, index: Ref): Ref
  requires issubtype(typeof(self), range())
  requires issubtype(typeof(index), slice())
  requires slice___start__(index, range___len__(self)) >= 0 && slice___start__(index, range___len__(self)) <= range___len__(self)
  requires slice___stop__(index, range___len__(self)) >= 0 && slice___stop__(index, range___len__(self)) <= range___len__(self)
  ensures issubtype(typeof(result), range())
  ensures range___len__(result) == slice___stop__(index, range___len__(self)) - slice___start__(index, range___len__(self))
  ensures range___val__(result) == range___val__(self)[slice___start__(index, range___len__(self))..slice___stop__(index, range___len__(self))] 


function range___sil_seq__(self: Ref): Seq[Ref]
  requires issubtype(typeof(self), range())
  ensures |result| == range___len__(self)
  ensures (forall i: Int :: { result[i] } i >= 0 && i < |range___val__(self)| ==> result[i] == __prim__int___box__(range___val__(self)[i]))
  ensures (forall i: Ref :: { (i in result) } (i in result) == (typeof(i) == int() && (int___unbox__(i) in range___val__(self)))) 


function range___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), range())
  ensures (range___val__(self) == range___val__(other)) == result
  ensures result ==> issubtype(typeof(other), range()) && range___len__(self) == range___len__(other) 


function Sequence___create__(prim: Seq[Ref], cont_type: PyType): Ref
  ensures typeof(result) == Sequence(cont_type)
  ensures Sequence___sil_seq__(result) == prim 


function Sequence___sil_seq__(box: Ref): Seq[Ref]
  requires issubtype(typeof(box), Sequence(Sequence_arg(typeof(box), 0))) 


function Sequence___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), Sequence(Sequence_arg(typeof(self), 0)))
  requires issubtype(typeof(other), Sequence(Sequence_arg(typeof(other), 0)))
  requires Sequence_arg(typeof(self), 0) == Sequence_arg(typeof(other), 0)
  ensures result == (Sequence___sil_seq__(self) == Sequence___sil_seq__(other)) 


function slice___create__(start: Ref, stop: Ref): Ref
  requires start == null || issubtype(typeof(start), int())
  requires stop == null || issubtype(typeof(stop), int())
  ensures slice___internal_start__(result) == start
  ensures slice___internal_stop__(result) == stop
  ensures typeof(result) == slice() 


function slice___internal_start__(self: Ref): Ref
  ensures result == null || issubtype(typeof(result), int()) 


function slice___start__(self: Ref, len: Int): Int 
{
  (slice___internal_start__(self) == null ? 0 : (int___unbox__(slice___internal_start__(self)) < 0 ? len + int___unbox__(slice___internal_start__(self)) : int___unbox__(slice___internal_start__(self))))
}

function slice___stop__(self: Ref, len: Int): Int 
{
  (slice___internal_stop__(self) == null ? len : (int___unbox__(slice___internal_stop__(self)) < 0 ? len + int___unbox__(slice___internal_stop__(self)) : int___unbox__(slice___internal_stop__(self))))
}

function slice___internal_stop__(self: Ref): Ref
  ensures result == null || issubtype(typeof(result), int()) 


function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


function tuple___val__(self: Ref): Seq[Ref] 


function tuple___create5__(arg0: Ref, arg1: Ref, arg2: Ref, arg3: Ref, arg4: Ref, t0: PyType, t1: PyType, t2: PyType, t3: PyType, t4: PyType, ctr: Int): Ref
  requires issubtype(typeof(arg0), t0)
  requires issubtype(typeof(arg1), t1)
  requires issubtype(typeof(arg2), t2)
  requires issubtype(typeof(arg3), t3)
  requires issubtype(typeof(arg4), t4)
  ensures result != null
  ensures typeof(result) == tuple(Seq(t0, t1, t2, t3, t4))
  ensures tuple_args(typeof(result)) == Seq(t0, t1, t2, t3, t4)
  ensures tuple___val__(result) == Seq(arg0, arg1, arg2, arg3, arg4)
  ensures tuple___len__(result) == 5 && (tuple___getitem__(result, 0) == arg0 && (tuple___getitem__(result, 1) == arg1 && (tuple___getitem__(result, 2) == arg2 && (tuple___getitem__(result, 3) == arg3 && tuple___getitem__(result, 4) == arg4)))) 


function tuple___sil_seq__(self: Ref): Seq[Ref]
  ensures |result| == tuple___len__(self)
  ensures result == tuple___val__(self) 


function tuple___len__(self: Ref): Int
  ensures result == |tuple_args(typeof(self))|
  ensures result == |tuple___val__(self)| 


function tuple___getitem__(self: Ref, key: Int): Ref
  requires (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
  ensures key >= 0 ==> issubtype(typeof(result), tuple_arg(typeof(self), key))
  ensures key < 0 ==> issubtype(typeof(result), tuple_arg(typeof(self), tuple___len__(self) + key))
  ensures key >= 0 ==> result == tuple___val__(self)[key]
  ensures key < 0 ==> result == tuple___val__(self)[tuple___len__(self) + key] 


function tuple___getitem_slice__(self: Ref, key: Ref): Ref
  requires issubtype(typeof(key), slice())
  requires slice___start__(key, tuple___len__(self)) >= 0 && slice___start__(key, tuple___len__(self)) <= tuple___len__(self)
  requires slice___stop__(key, tuple___len__(self)) >= 0 && slice___stop__(key, tuple___len__(self)) <= tuple___len__(self)
  ensures typeof(result) == tuple(tuple_args(typeof(self))[slice___start__(key, tuple___len__(self))..slice___stop__(key, tuple___len__(self))])
  ensures (forall i: Int :: { tuple_arg(typeof(result), i) } i >= 0 && i < slice___stop__(key, tuple___len__(self)) - slice___start__(key, tuple___len__(self)) ==> tuple_arg(typeof(result), i) == tuple_arg(typeof(self), i + slice___start__(key, tuple___len__(self))))
  ensures tuple___len__(result) == slice___stop__(key, tuple___len__(self)) - slice___start__(key, tuple___len__(self))
  ensures tuple___val__(result) == tuple___val__(self)[slice___start__(key, tuple___len__(self))..slice___stop__(key, tuple___len__(self))] 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

method m_0(_cthread_145: Ref, _caller_measures_145: Seq[Measure$], _residue_145: Perm) returns (_current_wait_level_145: Perm)
  requires _cthread_145 != null
  requires issubtype(typeof(_cthread_145), Thread_0())
  requires [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_145) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a: Ref
  var b: Ref
  var list_0: Ref
  var slice_res: Ref
  var _cwl_145: Perm
  var _method_measures_145: Seq[Measure$]
  _method_measures_145 := Seq[Measure$]()
  _err := null
  _cwl_145, list_0 := list___init__(_cthread_145, _method_measures_145, _residue_145)
  inhale issubtype(typeof(list_0), list(int()))
  assert issubtype(typeof(__prim__int___box__(1)), int())
  assert issubtype(typeof(__prim__int___box__(2)), int())
  assert issubtype(typeof(__prim__int___box__(3)), int())
  assert issubtype(typeof(__prim__int___box__(4)), int())
  assert issubtype(typeof(__prim__int___box__(5)), int())
  list_0.list_acc := Seq(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5))
  a := list_0
  inhale _isDefined(97)
  assert int___eq__(list___getitem__(_checkDefined(a, 97), __prim__int___box__(-2)), __prim__int___box__(4))
  _cwl_145, slice_res := list___getitem_slice__(_cthread_145, _method_measures_145, _residue_145, _checkDefined(a, 97), slice___create__(null, null))
  b := slice_res
  inhale _isDefined(98)
  assert int___eq__(list___getitem__(_checkDefined(b, 98), __prim__int___box__(0)), __prim__int___box__(1))
  assert int___eq__(__prim__int___box__(list___len__(_checkDefined(b, 98))), __prim__int___box__(5))
  assert int___eq__(list___getitem__(_checkDefined(b, 98), __prim__int___box__(3)), __prim__int___box__(4))
  assert Sequence___eq__(Sequence___create__(_checkDefined(a, 97).list_acc, int()), Sequence___create__(_checkDefined(b, 98).list_acc, int()))
  assert false
  goto __end
  label __end
}

method m2(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm) returns (_current_wait_level_146: Perm)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_146) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_0: Ref
  var b_0: Ref
  var c: Ref
  var list_1: Ref
  var slice_res_0: Ref
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq[Measure$]()
  _err := null
  _cwl_146, list_1 := list___init__(_cthread_146, _method_measures_146, _residue_146)
  inhale issubtype(typeof(list_1), list(int()))
  assert issubtype(typeof(__prim__int___box__(1)), int())
  assert issubtype(typeof(__prim__int___box__(2)), int())
  assert issubtype(typeof(__prim__int___box__(3)), int())
  assert issubtype(typeof(__prim__int___box__(4)), int())
  assert issubtype(typeof(__prim__int___box__(5)), int())
  list_1.list_acc := Seq(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5))
  a_0 := list_1
  inhale _isDefined(3170145)
  assert int___eq__(list___getitem__(_checkDefined(a_0, 3170145), __prim__int___box__(-2)), __prim__int___box__(4))
  _cwl_146, slice_res_0 := list___getitem_slice__(_cthread_146, _method_measures_146, _residue_146, _checkDefined(a_0, 3170145), slice___create__(__prim__int___box__(2), null))
  b_0 := slice_res_0
  inhale _isDefined(3170146)
  assert int___eq__(list___getitem__(_checkDefined(b_0, 3170146), __prim__int___box__(0)), __prim__int___box__(3))
  assert int___eq__(__prim__int___box__(list___len__(_checkDefined(b_0, 3170146))), __prim__int___box__(3))
  assert int___eq__(list___getitem__(_checkDefined(b_0, 3170146), __prim__int___box__(2)), __prim__int___box__(5))
  c := list___getitem__(_checkDefined(b_0, 3170146), __prim__int___box__(3))
  inhale _isDefined(99)
  goto __end
  label __end
}

method m3(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm) returns (_current_wait_level_147: Perm)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_147) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_1: Ref
  var b_1: Ref
  var c_0: Ref
  var list_2: Ref
  var slice_res_1: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq[Measure$]()
  _err := null
  _cwl_147, list_2 := list___init__(_cthread_147, _method_measures_147, _residue_147)
  inhale issubtype(typeof(list_2), list(int()))
  assert issubtype(typeof(__prim__int___box__(1)), int())
  assert issubtype(typeof(__prim__int___box__(2)), int())
  assert issubtype(typeof(__prim__int___box__(3)), int())
  assert issubtype(typeof(__prim__int___box__(4)), int())
  assert issubtype(typeof(__prim__int___box__(5)), int())
  list_2.list_acc := Seq(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5))
  a_1 := list_2
  inhale _isDefined(3235681)
  assert int___eq__(list___getitem__(_checkDefined(a_1, 3235681), __prim__int___box__(-2)), __prim__int___box__(4))
  _cwl_147, slice_res_1 := list___getitem_slice__(_cthread_147, _method_measures_147, _residue_147, _checkDefined(a_1, 3235681), slice___create__(null, __prim__int___box__(3)))
  b_1 := slice_res_1
  inhale _isDefined(3235682)
  assert int___eq__(list___getitem__(_checkDefined(b_1, 3235682), __prim__int___box__(0)), __prim__int___box__(1))
  assert int___eq__(__prim__int___box__(list___len__(_checkDefined(b_1, 3235682))), __prim__int___box__(3))
  assert int___eq__(list___getitem__(_checkDefined(b_1, 3235682), __prim__int___box__(2)), __prim__int___box__(3))
  assert int___eq__(list___getitem__(_checkDefined(b_1, 3235682), __prim__int___box__(-3)), __prim__int___box__(1))
  c_0 := list___getitem__(_checkDefined(b_1, 3235682), __prim__int___box__(-4))
  inhale _isDefined(3170147)
  goto __end
  label __end
}

method m_tuple(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm) returns (_current_wait_level_148: Perm)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_148) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures [true, (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_2: Ref
  var b_2: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq[Measure$]()
  _err := null
  a_2 := tuple___create5__(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5), int(), int(), int(), int(), int(), 0)
  inhale _isDefined(3301217)
  assert int___eq__(tuple___getitem__(_checkDefined(a_2, 3301217), -2), __prim__int___box__(4))
  b_2 := tuple___getitem_slice__(_checkDefined(a_2, 3301217), slice___create__(null, null))
  inhale _isDefined(3301218)
  assert int___eq__(tuple___getitem__(_checkDefined(b_2, 3301218), 0), __prim__int___box__(1))
  assert int___eq__(__prim__int___box__(tuple___len__(_checkDefined(b_2, 3301218))), __prim__int___box__(5))
  assert int___eq__(tuple___getitem__(_checkDefined(b_2, 3301218), 3), __prim__int___box__(4))
  assert Sequence___eq__(Sequence___create__(tuple___sil_seq__(_checkDefined(a_2, 3301217)), int()), Sequence___create__(tuple___sil_seq__(_checkDefined(b_2, 3301218)), int()))
  assert false
  goto __end
  label __end
}

method m2_tuple(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm) returns (_current_wait_level_149: Perm)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_149) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_3: Ref
  var b_3: Ref
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq[Measure$]()
  _err := null
  a_3 := tuple___create5__(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5), int(), int(), int(), int(), int(), 1)
  inhale _isDefined(3366753)
  assert int___eq__(tuple___getitem__(_checkDefined(a_3, 3366753), -2), __prim__int___box__(4))
  b_3 := tuple___getitem_slice__(_checkDefined(a_3, 3366753), slice___create__(__prim__int___box__(2), null))
  inhale _isDefined(3366754)
  assert int___eq__(tuple___getitem__(_checkDefined(b_3, 3366754), 0), __prim__int___box__(3))
  assert int___eq__(__prim__int___box__(tuple___len__(_checkDefined(b_3, 3366754))), __prim__int___box__(3))
  assert int___eq__(tuple___getitem__(_checkDefined(b_3, 3366754), 2), __prim__int___box__(5))
  assert false
  goto __end
  label __end
}

method m3_tuple(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm) returns (_current_wait_level_150: Perm)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_150) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_4: Ref
  var b_4: Ref
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq[Measure$]()
  _err := null
  a_4 := tuple___create5__(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5), int(), int(), int(), int(), int(), 2)
  inhale _isDefined(3432289)
  assert int___eq__(tuple___getitem__(_checkDefined(a_4, 3432289), -2), __prim__int___box__(4))
  b_4 := tuple___getitem_slice__(_checkDefined(a_4, 3432289), slice___create__(null, __prim__int___box__(3)))
  inhale _isDefined(3432290)
  assert int___eq__(tuple___getitem__(_checkDefined(b_4, 3432290), 0), __prim__int___box__(1))
  assert int___eq__(__prim__int___box__(tuple___len__(_checkDefined(b_4, 3432290))), __prim__int___box__(3))
  assert int___eq__(tuple___getitem__(_checkDefined(b_4, 3432290), 2), __prim__int___box__(3))
  assert int___eq__(tuple___getitem__(_checkDefined(b_4, 3432290), -3), __prim__int___box__(1))
  assert false
  goto __end
  label __end
}

method m_bytes(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_151: Perm) returns (_current_wait_level_151: Perm)
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_19: Ref [MustInvokeBounded(_r_19)] :: false) && ((forperm _r_19: Ref [MustInvokeUnbounded(_r_19)] :: false) && ((forperm _r_19: Ref [_r_19.MustReleaseBounded] :: false) && (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_151) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]
  ensures [true, (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_5: Ref
  var b_5: Ref
  var _cwl_151: Perm
  var _method_measures_151: Seq[Measure$]
  _method_measures_151 := Seq[Measure$]()
  _err := null
  a_5 := bytes___create__(Seq(__prim__int___box__(49), __prim__int___box__(50), __prim__int___box__(51), __prim__int___box__(52), __prim__int___box__(53)), 3)
  inhale _isDefined(3497825)
  assert int___eq__(bytes___getitem__(_checkDefined(a_5, 3497825), -2), __prim__int___box__(int___add__(4, 48)))
  b_5 := bytes___getitem_slice__(_checkDefined(a_5, 3497825), slice___create__(null, null))
  inhale _isDefined(3497826)
  assert int___eq__(bytes___getitem__(_checkDefined(b_5, 3497826), 0), __prim__int___box__(int___add__(1, 48)))
  assert int___eq__(__prim__int___box__(bytes___len__(_checkDefined(b_5, 3497826))), __prim__int___box__(5))
  assert int___eq__(bytes___getitem__(_checkDefined(b_5, 3497826), 3), __prim__int___box__(int___add__(4, 48)))
  assert bytes___eq__(_checkDefined(a_5, 3497825), _checkDefined(b_5, 3497826))
  assert false
  goto __end
  label __end
}

method m2_bytes(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm) returns (_current_wait_level_152: Perm)
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_152) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures [true, (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_6: Ref
  var b_6: Ref
  var c_1: Ref
  var _cwl_152: Perm
  var _method_measures_152: Seq[Measure$]
  _method_measures_152 := Seq[Measure$]()
  _err := null
  a_6 := bytes___create__(Seq(__prim__int___box__(49), __prim__int___box__(50), __prim__int___box__(51), __prim__int___box__(52), __prim__int___box__(53)), 4)
  inhale _isDefined(3563361)
  assert int___eq__(bytes___getitem__(_checkDefined(a_6, 3563361), -2), __prim__int___box__(int___add__(4, 48)))
  b_6 := bytes___getitem_slice__(_checkDefined(a_6, 3563361), slice___create__(__prim__int___box__(2), null))
  inhale _isDefined(3563362)
  assert int___eq__(bytes___getitem__(_checkDefined(b_6, 3563362), 0), __prim__int___box__(int___add__(3, 48)))
  assert int___eq__(__prim__int___box__(bytes___len__(_checkDefined(b_6, 3563362))), __prim__int___box__(3))
  assert int___eq__(bytes___getitem__(_checkDefined(b_6, 3563362), 2), __prim__int___box__(int___add__(5, 48)))
  assert bytes___eq__(_checkDefined(b_6, 3563362), bytes___create__(Seq(__prim__int___box__(51), __prim__int___box__(52), __prim__int___box__(53)), 5))
  c_1 := bytes___getitem__(_checkDefined(b_6, 3563362), 3)
  inhale _isDefined(3235683)
  goto __end
  label __end
}

method m3_bytes(_cthread_153: Ref, _caller_measures_153: Seq[Measure$], _residue_153: Perm) returns (_current_wait_level_153: Perm)
  requires _cthread_153 != null
  requires issubtype(typeof(_cthread_153), Thread_0())
  requires [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_153) && ((forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]
  ensures [true, (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_7: Ref
  var b_7: Ref
  var c_2: Ref
  var _cwl_153: Perm
  var _method_measures_153: Seq[Measure$]
  _method_measures_153 := Seq[Measure$]()
  _err := null
  a_7 := bytes___create__(Seq(__prim__int___box__(49), __prim__int___box__(50), __prim__int___box__(51), __prim__int___box__(52), __prim__int___box__(53)), 6)
  inhale _isDefined(3628897)
  assert int___eq__(bytes___getitem__(_checkDefined(a_7, 3628897), -2), __prim__int___box__(int___add__(4, 48)))
  b_7 := bytes___getitem_slice__(_checkDefined(a_7, 3628897), slice___create__(null, __prim__int___box__(3)))
  inhale _isDefined(3628898)
  assert int___eq__(bytes___getitem__(_checkDefined(b_7, 3628898), 0), __prim__int___box__(int___add__(1, 48)))
  assert int___eq__(__prim__int___box__(bytes___len__(_checkDefined(b_7, 3628898))), __prim__int___box__(3))
  assert int___eq__(bytes___getitem__(_checkDefined(b_7, 3628898), 2), __prim__int___box__(int___add__(3, 48)))
  assert int___eq__(bytes___getitem__(_checkDefined(b_7, 3628898), -3), __prim__int___box__(int___add__(1, 48)))
  assert bytes___eq__(_checkDefined(b_7, 3628898), bytes___create__(Seq(__prim__int___box__(49), __prim__int___box__(50), __prim__int___box__(51)), 7))
  c_2 := bytes___getitem__(_checkDefined(b_7, 3628898), -4)
  inhale _isDefined(3301219)
  goto __end
  label __end
}

method m_range(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm) returns (_current_wait_level_154: Perm)
  requires _cthread_154 != null
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_154) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]
  ensures [true, (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_8: Ref
  var b_8: Ref
  var _cwl_154: Perm
  var _method_measures_154: Seq[Measure$]
  _method_measures_154 := Seq[Measure$]()
  _err := null
  a_8 := range___create__(1, 6, 8)
  inhale _isDefined(3694433)
  assert int___eq__(__prim__int___box__(range___getitem__(_checkDefined(a_8, 3694433), -2)), __prim__int___box__(4))
  b_8 := range___getitem_slice__(_checkDefined(a_8, 3694433), slice___create__(null, null))
  inhale _isDefined(3694434)
  assert int___eq__(__prim__int___box__(range___getitem__(_checkDefined(b_8, 3694434), 0)), __prim__int___box__(1))
  assert int___eq__(__prim__int___box__(range___len__(_checkDefined(b_8, 3694434))), __prim__int___box__(5))
  assert int___eq__(__prim__int___box__(range___getitem__(_checkDefined(b_8, 3694434), 3)), __prim__int___box__(4))
  assert Sequence___eq__(Sequence___create__(range___sil_seq__(_checkDefined(a_8, 3694433)), int()), Sequence___create__(range___sil_seq__(_checkDefined(b_8, 3694434)), int()))
  assert false
  goto __end
  label __end
}

method m2_range(_cthread_155: Ref, _caller_measures_155: Seq[Measure$], _residue_155: Perm) returns (_current_wait_level_155: Perm)
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires [true, perm(MustTerminate(_cthread_155)) == none && ((forperm _r_31: Ref [MustInvokeBounded(_r_31)] :: false) && ((forperm _r_31: Ref [MustInvokeUnbounded(_r_31)] :: false) && ((forperm _r_31: Ref [_r_31.MustReleaseBounded] :: false) && (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_155) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_155) && _residue_155 <= _current_wait_level_155), true]
  ensures [true, (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_9: Ref
  var b_9: Ref
  var c_3: Ref
  var _cwl_155: Perm
  var _method_measures_155: Seq[Measure$]
  _method_measures_155 := Seq[Measure$]()
  _err := null
  a_9 := range___create__(1, 6, 9)
  inhale _isDefined(3759969)
  assert int___eq__(__prim__int___box__(range___getitem__(_checkDefined(a_9, 3759969), -2)), __prim__int___box__(4))
  b_9 := range___getitem_slice__(_checkDefined(a_9, 3759969), slice___create__(__prim__int___box__(2), null))
  inhale _isDefined(3759970)
  assert int___eq__(__prim__int___box__(range___getitem__(_checkDefined(b_9, 3759970), 0)), __prim__int___box__(3))
  assert int___eq__(__prim__int___box__(range___len__(_checkDefined(b_9, 3759970))), __prim__int___box__(3))
  assert int___eq__(__prim__int___box__(range___getitem__(_checkDefined(b_9, 3759970), 2)), __prim__int___box__(5))
  assert range___eq__(_checkDefined(b_9, 3759970), range___create__(3, 6, 10))
  c_3 := __prim__int___box__(range___getitem__(_checkDefined(b_9, 3759970), 3))
  inhale _isDefined(3366755)
  goto __end
  label __end
}

method m3_range(_cthread_156: Ref, _caller_measures_156: Seq[Measure$], _residue_156: Perm) returns (_current_wait_level_156: Perm)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires [true, perm(MustTerminate(_cthread_156)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_156) && ((forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]
  ensures [true, (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_10: Ref
  var b_10: Ref
  var c_4: Ref
  var _cwl_156: Perm
  var _method_measures_156: Seq[Measure$]
  _method_measures_156 := Seq[Measure$]()
  _err := null
  a_10 := range___create__(1, 6, 11)
  inhale _isDefined(808542049)
  assert int___eq__(__prim__int___box__(range___getitem__(_checkDefined(a_10, 808542049), -2)), __prim__int___box__(4))
  b_10 := range___getitem_slice__(_checkDefined(a_10, 808542049), slice___create__(null, __prim__int___box__(3)))
  inhale _isDefined(808542050)
  assert int___eq__(__prim__int___box__(range___getitem__(_checkDefined(b_10, 808542050), 0)), __prim__int___box__(1))
  assert int___eq__(__prim__int___box__(range___len__(_checkDefined(b_10, 808542050))), __prim__int___box__(3))
  assert int___eq__(__prim__int___box__(range___getitem__(_checkDefined(b_10, 808542050), 2)), __prim__int___box__(3))
  assert int___eq__(__prim__int___box__(range___getitem__(_checkDefined(b_10, 808542050), -3)), __prim__int___box__(1))
  assert range___eq__(_checkDefined(b_10, 808542050), range___create__(1, 4, 12))
  c_4 := __prim__int___box__(range___getitem__(_checkDefined(b_10, 808542050), -4))
  inhale _isDefined(3432291)
  goto __end
  label __end
}

method main(_cthread_157: Ref, _caller_measures_157: Seq[Measure$], _residue_157: Perm) returns (_current_wait_level_157: Perm)
  requires _cthread_157 != null
  requires issubtype(typeof(_cthread_157), Thread_0())
  requires [true, perm(MustTerminate(_cthread_157)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_157) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]
  ensures [true, (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var _cwl_157: Perm
  var _method_measures_157: Seq[Measure$]
  _method_measures_157 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_names_0 := (module_names_0 union Set(_single(1953720652)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(109)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(12909)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(13165)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4260295459715391635)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4891336705982880546604135021)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4891337886574500164503810925)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4405810343207346323)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(5660827472084242188474462829)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(5660828652675861806374138733)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3539432538547003539)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4733566979834772680412705389)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4733568160426392298312381293)))
  goto __end
  label __end
}

method list___init__(_cthread_9: Ref, _caller_measures_9: Seq[Measure$], _residue_9: Perm) returns (_current_wait_level_9: Perm, res: Ref)
  requires _cthread_9 != null
  requires Measure$check(_caller_measures_9, _cthread_9, 1)
  requires issubtype(typeof(_cthread_9), Thread_0())
  requires [true, Measure$check(_caller_measures_9, _cthread_9, 1)]
  ensures [(forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_9) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_9) && _residue_9 <= _current_wait_level_9), true]
  ensures acc(res.list_acc, write)
  ensures res.list_acc == Seq[Ref]()
  ensures typeof(res) == list(list_arg(typeof(res), 0))
  ensures Low(res)
{
  var _cwl_9: Perm
  inhale false
}

method list___getitem_slice__(_cthread_15: Ref, _caller_measures_15: Seq[Measure$], _residue_15: Perm, self: Ref, key: Ref) returns (_current_wait_level_15: Perm, _res: Ref)
  requires _cthread_15 != null
  requires Measure$check(_caller_measures_15, _cthread_15, 1)
  requires issubtype(typeof(_cthread_15), Thread_0())
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires issubtype(typeof(key), slice())
  requires acc(self.list_acc, 1 / 1000)
  requires [true, Measure$check(_caller_measures_15, _cthread_15, 1)]
  ensures [(forperm _r_40: Ref [_r_40.MustReleaseBounded] :: Level(_r_40) <= _current_wait_level_15) && ((forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: Level(_r_40) <= _current_wait_level_15) && _residue_15 <= _current_wait_level_15), true]
  ensures acc(self.list_acc, 1 / 1000)
  ensures acc(_res.list_acc, write)
  ensures typeof(_res) == typeof(self)
  ensures _res.list_acc == self.list_acc[slice___start__(key, list___len__(self))..slice___stop__(key, list___len__(self))]
{
  var _cwl_15: Perm
  inhale false
}