domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function A(): PyType
  
  unique function B(): PyType
  
  unique function C(): PyType
  
  unique function Base(): PyType
  
  unique function DerivedLeft(): PyType
  
  unique function DerivedRight(): PyType
  
  unique function SingleInheritanceLeft(): PyType
  
  unique function SingleInheritanceRight(): PyType
  
  unique function DataStructure(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_A {
    extends_(A(), object()) && get_basic(A()) == A()
  }
  
  axiom subtype_B {
    extends_(B(), object()) && get_basic(B()) == B()
  }
  
  axiom subtype_C {
    extends_(C(), object()) && get_basic(C()) == C()
  }
  
  axiom subtype_Base {
    extends_(Base(), object()) && get_basic(Base()) == Base()
  }
  
  axiom subtype_DerivedLeft {
    extends_(DerivedLeft(), Base()) && get_basic(DerivedLeft()) == DerivedLeft()
  }
  
  axiom subtype_DerivedRight {
    extends_(DerivedRight(), Base()) && get_basic(DerivedRight()) == DerivedRight()
  }
  
  axiom subtype_SingleInheritanceLeft {
    extends_(SingleInheritanceLeft(), DerivedRight()) && get_basic(SingleInheritanceLeft()) == SingleInheritanceLeft()
  }
  
  axiom subtype_SingleInheritanceRight {
    extends_(SingleInheritanceRight(), DerivedRight()) && get_basic(SingleInheritanceRight()) == SingleInheritanceRight()
  }
  
  axiom subtype_DataStructure {
    extends_(DataStructure(), object()) && get_basic(DataStructure()) == DataStructure()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function test_1_threading(): ThreadingID
  
  unique function test_2_threading(): ThreadingID
  
  unique function test_3_threading(): ThreadingID
  
  unique function test_4_threading(): ThreadingID
  
  unique function test_5_threading(): ThreadingID
  
  unique function test_6_threading(): ThreadingID
  
  unique function test_7_threading(): ThreadingID
  
  unique function test_8_threading(): ThreadingID
  
  unique function test_9_threading(): ThreadingID
  
  unique function test_10_threading(): ThreadingID
  
  unique function test_11_threading(): ThreadingID
  
  unique function test_12_threading(): ThreadingID
  
  unique function test_13_threading(): ThreadingID
  
  unique function test_14_threading(): ThreadingID
  
  unique function test_15_threading(): ThreadingID
  
  unique function test_16_threading(): ThreadingID
  
  unique function test_17_threading(): ThreadingID
  
  unique function test_union_predicate_threading(): ThreadingID
  
  unique function test_18_threading(): ThreadingID
  
  unique function test_19_threading(): ThreadingID
  
  unique function test_20_threading(): ThreadingID
  
  unique function client1_threading(): ThreadingID
  
  unique function client2_threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
  
  unique function foo_threading(): ThreadingID
  
  unique function __init___threading_3(): ThreadingID
  
  unique function foo_threading_0(): ThreadingID
  
  unique function foo_threading_1(): ThreadingID
  
  unique function foo_threading_2(): ThreadingID
  
  unique function foo_threading_3(): ThreadingID
  
  unique function foo_threading_4(): ThreadingID
  
  unique function foo_threading_5(): ThreadingID
  
  unique function foo_threading_6(): ThreadingID
  
  unique function append_threading_0(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field A_field: Ref

field B_field: Ref

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function int___gt__(self: Int, other: Int): Bool 
{
  self > other
}

function int___lt__(self: Int, other: Int): Bool 
{
  self < other
}

function list___len__(self: Ref): Int
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_acc, wildcard) 
{
  |self.list_acc|
}

function list___getitem__(self: Ref, key: Ref): Ref
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires issubtype(typeof(key), int())
  requires acc(self.list_acc, wildcard)
  requires (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
  ensures result == (int___unbox__(key) >= 0 ? self.list_acc[int___unbox__(key)] : self.list_acc[list___len__(self) + int___unbox__(key)])
  ensures [issubtype(typeof(result), list_arg(typeof(self), 0)), true] 


function list___sil_seq__(self: Ref): Seq[Ref]
  requires acc(self.list_acc, wildcard) 
{
  self.list_acc
}

function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate Base_test_pred(self_5: Ref, i_3: Ref) {
  true && issubtype(typeof(self_5), Base()) && issubtype(typeof(i_3), int()) && ((issubtype(typeof(self_5), Base()) ==> int___gt__(int___unbox__(i_3), 0)) && (issubtype(typeof(self_5), DerivedLeft()) ==> int___gt__(int___unbox__(i_3), 6)) && (issubtype(typeof(self_5), DerivedRight()) ==> int___lt__(int___unbox__(i_3), 4)))
}

method test_1(_cthread_159: Ref, _caller_measures_159: Seq[Measure$], _residue_159: Perm, o: Ref) returns (_current_wait_level_159: Perm)
  requires _cthread_159 != null
  requires issubtype(typeof(_cthread_159), Thread_0())
  requires issubtype(typeof(o), union_type_2(A(), B()))
  requires [true, perm(MustTerminate(_cthread_159)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_159) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159), true]
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_0: Ref
  var o_20: Ref
  var foo_res: Ref
  var foo_res_0: Ref
  var return_var: Ref
  var _cwl_159: Perm
  var _method_measures_159: Seq[Measure$]
  _method_measures_159 := Seq[Measure$]()
  _err := null
  o_20 := o
  if (issubtype(typeof(o_20), A())) {
    _cwl_159, foo_res := A_foo(_cthread_159, _method_measures_159, _residue_159, o_20, __prim__int___box__(5))
    return_var := foo_res
  } elseif (issubtype(typeof(o_20), B())) {
    _cwl_159, foo_res_0 := B_foo(_cthread_159, _method_measures_159, _residue_159, o_20, __prim__int___box__(5))
    return_var := foo_res_0
  }
  x_0 := return_var
  inhale _isDefined(3170168)
  goto __end
  label __end
}

method test_2(_cthread_160: Ref, _caller_measures_160: Seq[Measure$], _residue_160: Perm, o_0: Ref) returns (_current_wait_level_160: Perm)
  requires _cthread_160 != null
  requires issubtype(typeof(_cthread_160), Thread_0())
  requires issubtype(typeof(o_0), union_type_3(A(), B(), C()))
  requires [true, perm(MustTerminate(_cthread_160)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_160) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160), true]
  ensures [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_1: Ref
  var o_21: Ref
  var foo_res_1: Ref
  var foo_res_2: Ref
  var foo_res_3: Ref
  var return_var_0: Ref
  var _cwl_160: Perm
  var _method_measures_160: Seq[Measure$]
  _method_measures_160 := Seq[Measure$]()
  _err := null
  o_21 := o_0
  if (issubtype(typeof(o_21), A())) {
    _cwl_160, foo_res_1 := A_foo(_cthread_160, _method_measures_160, _residue_160, o_21, __prim__int___box__(5))
    return_var_0 := foo_res_1
  } elseif (issubtype(typeof(o_21), B())) {
    _cwl_160, foo_res_2 := B_foo(_cthread_160, _method_measures_160, _residue_160, o_21, __prim__int___box__(5))
    return_var_0 := foo_res_2
  } elseif (issubtype(typeof(o_21), C())) {
    _cwl_160, foo_res_3 := C_foo(_cthread_160, _method_measures_160, _residue_160, o_21, __prim__int___box__(5))
    return_var_0 := foo_res_3
  }
  x_1 := return_var_0
  inhale _isDefined(3235704)
  goto __end
  label __end
}

method test_3(_cthread_161: Ref, _caller_measures_161: Seq[Measure$], _residue_161: Perm, o_1: Ref) returns (_current_wait_level_161: Perm)
  requires _cthread_161 != null
  requires issubtype(typeof(_cthread_161), Thread_0())
  requires issubtype(typeof(o_1), union_type_2(A(), B()))
  requires [true, perm(MustTerminate(_cthread_161)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_161) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161), true]
  ensures [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_2: Ref
  var o_22: Ref
  var foo_res_4: Ref
  var foo_res_5: Ref
  var return_var_1: Ref
  var _cwl_161: Perm
  var _method_measures_161: Seq[Measure$]
  _method_measures_161 := Seq[Measure$]()
  _err := null
  o_22 := o_1
  if (issubtype(typeof(o_22), A())) {
    _cwl_161, foo_res_4 := A_foo(_cthread_161, _method_measures_161, _residue_161, o_22, __prim__int___box__(-5))
    return_var_1 := foo_res_4
  } elseif (issubtype(typeof(o_22), B())) {
    _cwl_161, foo_res_5 := B_foo(_cthread_161, _method_measures_161, _residue_161, o_22, __prim__int___box__(-5))
    return_var_1 := foo_res_5
  }
  x_2 := return_var_1
  inhale _isDefined(3301240)
  goto __end
  label __end
}

method test_4(_cthread_162: Ref, _caller_measures_162: Seq[Measure$], _residue_162: Perm, o_2: Ref) returns (_current_wait_level_162: Perm)
  requires _cthread_162 != null
  requires issubtype(typeof(_cthread_162), Thread_0())
  requires issubtype(typeof(o_2), union_type_3(A(), B(), C()))
  requires [true, perm(MustTerminate(_cthread_162)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_162) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_162) && _residue_162 <= _current_wait_level_162), true]
  ensures [true, (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_3: Ref
  var o_23: Ref
  var foo_res_6: Ref
  var foo_res_7: Ref
  var foo_res_8: Ref
  var return_var_2: Ref
  var _cwl_162: Perm
  var _method_measures_162: Seq[Measure$]
  _method_measures_162 := Seq[Measure$]()
  _err := null
  o_23 := o_2
  if (issubtype(typeof(o_23), A())) {
    _cwl_162, foo_res_6 := A_foo(_cthread_162, _method_measures_162, _residue_162, o_23, __prim__int___box__(-5))
    return_var_2 := foo_res_6
  } elseif (issubtype(typeof(o_23), B())) {
    _cwl_162, foo_res_7 := B_foo(_cthread_162, _method_measures_162, _residue_162, o_23, __prim__int___box__(-5))
    return_var_2 := foo_res_7
  } elseif (issubtype(typeof(o_23), C())) {
    _cwl_162, foo_res_8 := C_foo(_cthread_162, _method_measures_162, _residue_162, o_23, __prim__int___box__(-5))
    return_var_2 := foo_res_8
  }
  x_3 := return_var_2
  inhale _isDefined(3366776)
  goto __end
  label __end
}

method test_5(_cthread_163: Ref, _caller_measures_163: Seq[Measure$], _residue_163: Perm, o_3: Ref) returns (_current_wait_level_163: Perm)
  requires _cthread_163 != null
  requires issubtype(typeof(_cthread_163), Thread_0())
  requires issubtype(typeof(o_3), union_type_2(A(), B()))
  requires [true, perm(MustTerminate(_cthread_163)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_163) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_163) && _residue_163 <= _current_wait_level_163), true]
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_4: Ref
  var o_24: Ref
  var foo_res_9: Ref
  var foo_res_10: Ref
  var foo_res_11: Ref
  var _cwl_163: Perm
  var _method_measures_163: Seq[Measure$]
  _method_measures_163 := Seq[Measure$]()
  _err := null
  o_24 := o_3
  if (issubtype(typeof(o_24), A())) {
    _cwl_163, foo_res_9 := A_foo(_cthread_163, _method_measures_163, _residue_163, o_24, __prim__int___box__(-2))
    x_4 := foo_res_9
    inhale _isDefined(3432312)
    assert int___eq__(_checkDefined(x_4, 3432312), __prim__int___box__(4))
  }
  if (issubtype(typeof(o_24), B())) {
    _cwl_163, foo_res_10 := B_foo(_cthread_163, _method_measures_163, _residue_163, o_24, __prim__int___box__(34))
    x_4 := foo_res_10
    inhale _isDefined(3432312)
    assert int___eq__(_checkDefined(x_4, 3432312), __prim__int___box__(6))
    _cwl_163, foo_res_11 := B_foo(_cthread_163, _method_measures_163, _residue_163, o_24, __prim__int___box__(-34))
    x_4 := foo_res_11
    inhale _isDefined(3432312)
  }
  goto __end
  label __end
}

method test_6(_cthread_164: Ref, _caller_measures_164: Seq[Measure$], _residue_164: Perm, o_4: Ref, i_10: Ref) returns (_current_wait_level_164: Perm)
  requires _cthread_164 != null
  requires issubtype(typeof(_cthread_164), Thread_0())
  requires issubtype(typeof(o_4), union_type_2(A(), B()))
  requires issubtype(typeof(i_10), int())
  requires [true, perm(MustTerminate(_cthread_164)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_164) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_164) && _residue_164 <= _current_wait_level_164), true]
  ensures [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_5: Ref
  var o_25: Ref
  var i_14: Ref
  var foo_res_12: Ref
  var _cwl_164: Perm
  var _method_measures_164: Seq[Measure$]
  _method_measures_164 := Seq[Measure$]()
  _err := null
  o_25 := o_4
  i_14 := i_10
  if (issubtype(typeof(o_25), B())) {
    _cwl_164, foo_res_12 := B_foo(_cthread_164, _method_measures_164, _residue_164, o_25, i_14)
    x_5 := foo_res_12
    inhale _isDefined(3497848)
  }
  goto __end
  label __end
}

method test_7(_cthread_165: Ref, _caller_measures_165: Seq[Measure$], _residue_165: Perm, o_5: Ref, i_11: Ref) returns (_current_wait_level_165: Perm)
  requires _cthread_165 != null
  requires issubtype(typeof(_cthread_165), Thread_0())
  requires issubtype(typeof(o_5), union_type_2(A(), B()))
  requires issubtype(typeof(i_11), int())
  requires [true, perm(MustTerminate(_cthread_165)) == none && ((forperm _r_19: Ref [MustInvokeBounded(_r_19)] :: false) && ((forperm _r_19: Ref [MustInvokeUnbounded(_r_19)] :: false) && ((forperm _r_19: Ref [_r_19.MustReleaseBounded] :: false) && (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_165) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_165) && _residue_165 <= _current_wait_level_165), true]
  ensures [true, (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_6: Ref
  var o_26: Ref
  var i_15: Ref
  var foo_res_13: Ref
  var foo_res_14: Ref
  var return_var_3: Ref
  var _cwl_165: Perm
  var _method_measures_165: Seq[Measure$]
  _method_measures_165 := Seq[Measure$]()
  _err := null
  o_26 := o_5
  i_15 := i_11
  if (issubtype(typeof(o_26), A())) {
    _cwl_165, foo_res_13 := A_foo(_cthread_165, _method_measures_165, _residue_165, o_26, i_15)
    return_var_3 := foo_res_13
  } elseif (issubtype(typeof(o_26), B())) {
    _cwl_165, foo_res_14 := B_foo(_cthread_165, _method_measures_165, _residue_165, o_26, i_15)
    return_var_3 := foo_res_14
  }
  x_6 := return_var_3
  inhale _isDefined(3563384)
  goto __end
  label __end
}

method test_8(_cthread_166: Ref, _caller_measures_166: Seq[Measure$], _residue_166: Perm, o_6: Ref, i_12: Ref) returns (_current_wait_level_166: Perm)
  requires _cthread_166 != null
  requires issubtype(typeof(_cthread_166), Thread_0())
  requires issubtype(typeof(o_6), union_type_2(A(), B()))
  requires issubtype(typeof(i_12), int())
  requires [true, perm(MustTerminate(_cthread_166)) == none && ((forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_166) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_166) && _residue_166 <= _current_wait_level_166), true]
  ensures [true, (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_7: Ref
  var o_27: Ref
  var i_16: Ref
  var foo_res_15: Ref
  var foo_res_16: Ref
  var return_var_4: Ref
  var _cwl_166: Perm
  var _method_measures_166: Seq[Measure$]
  _method_measures_166 := Seq[Measure$]()
  _err := null
  o_27 := o_6
  i_16 := i_12
  if (int___gt__(int___unbox__(i_16), 0)) {
    if (issubtype(typeof(o_27), A())) {
      _cwl_166, foo_res_15 := A_foo(_cthread_166, _method_measures_166, _residue_166, o_27, i_16)
      return_var_4 := foo_res_15
    } elseif (issubtype(typeof(o_27), B())) {
      _cwl_166, foo_res_16 := B_foo(_cthread_166, _method_measures_166, _residue_166, o_27, i_16)
      return_var_4 := foo_res_16
    }
    x_7 := return_var_4
    inhale _isDefined(3628920)
    assert int___eq__(_checkDefined(x_7, 3628920), __prim__int___box__(4)) || int___eq__(_checkDefined(x_7, 3628920), __prim__int___box__(6))
  }
  goto __end
  label __end
}

method test_9(_cthread_167: Ref, _caller_measures_167: Seq[Measure$], _residue_167: Perm, o_7: Ref, j: Ref) returns (_current_wait_level_167: Perm)
  requires _cthread_167 != null
  requires issubtype(typeof(_cthread_167), Thread_0())
  requires issubtype(typeof(o_7), union_type_2(A(), B()))
  requires issubtype(typeof(j), int())
  requires int___gt__(int___unbox__(j), 0)
  requires [true, perm(MustTerminate(_cthread_167)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_167) && ((forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_167) && _residue_167 <= _current_wait_level_167), true]
  ensures [true, (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var o_28: Ref
  var j_1: Ref
  var foo_res_17: Ref
  var foo_res_18: Ref
  var return_var_5: Ref
  var expr_res: Ref
  var _cwl_167: Perm
  var _method_measures_167: Seq[Measure$]
  _method_measures_167 := Seq[Measure$]()
  _err := null
  o_28 := o_7
  j_1 := j
  if (issubtype(typeof(o_28), A())) {
    _cwl_167, foo_res_17 := A_foo(_cthread_167, _method_measures_167, _residue_167, o_28, j_1)
    return_var_5 := foo_res_17
  } elseif (issubtype(typeof(o_28), B())) {
    _cwl_167, foo_res_18 := B_foo(_cthread_167, _method_measures_167, _residue_167, o_28, j_1)
    return_var_5 := foo_res_18
  }
  expr_res := return_var_5
  goto __end
  label __end
}

method test_10(_cthread_168: Ref, _caller_measures_168: Seq[Measure$], _residue_168: Perm, o_8: Ref, i_13: Ref) returns (_current_wait_level_168: Perm, _res: Ref)
  requires _cthread_168 != null
  requires issubtype(typeof(_cthread_168), Thread_0())
  requires issubtype(typeof(o_8), union_type_2(A(), B()))
  requires issubtype(typeof(i_13), int())
  requires int___gt__(int___unbox__(i_13), 0)
  requires [true, perm(MustTerminate(_cthread_168)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_168) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_168) && _residue_168 <= _current_wait_level_168), true]
  ensures issubtype(typeof(_res), int())
  ensures int___eq__(_res, __prim__int___box__(4)) || int___eq__(_res, __prim__int___box__(6))
  ensures [true, (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var o_29: Ref
  var i_17: Ref
  var foo_res_19: Ref
  var foo_res_20: Ref
  var return_var_6: Ref
  var _cwl_168: Perm
  var _method_measures_168: Seq[Measure$]
  _method_measures_168 := Seq[Measure$]()
  _res := null
  _err := null
  o_29 := o_8
  i_17 := i_13
  if (issubtype(typeof(o_29), A())) {
    _cwl_168, foo_res_19 := A_foo(_cthread_168, _method_measures_168, _residue_168, o_29, i_17)
    return_var_6 := foo_res_19
  } elseif (issubtype(typeof(o_29), B())) {
    _cwl_168, foo_res_20 := B_foo(_cthread_168, _method_measures_168, _residue_168, o_29, i_17)
    return_var_6 := foo_res_20
  }
  _res := return_var_6
  goto __end
  goto __end
  label __end
}

method test_11(_cthread_169: Ref, _caller_measures_169: Seq[Measure$], _residue_169: Perm, o_9: Ref) returns (_current_wait_level_169: Perm)
  requires _cthread_169 != null
  requires issubtype(typeof(_cthread_169), Thread_0())
  requires issubtype(typeof(o_9), union_type_2(A(), union_type_2(B(), C())))
  requires [true, perm(MustTerminate(_cthread_169)) == none && ((forperm _r_31: Ref [MustInvokeBounded(_r_31)] :: false) && ((forperm _r_31: Ref [MustInvokeUnbounded(_r_31)] :: false) && ((forperm _r_31: Ref [_r_31.MustReleaseBounded] :: false) && (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_169) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_169) && _residue_169 <= _current_wait_level_169), true]
  ensures [true, (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_8: Ref
  var o_30: Ref
  var foo_res_21: Ref
  var foo_res_22: Ref
  var foo_res_23: Ref
  var return_var_7: Ref
  var _cwl_169: Perm
  var _method_measures_169: Seq[Measure$]
  _method_measures_169 := Seq[Measure$]()
  _err := null
  o_30 := o_9
  if (issubtype(typeof(o_30), A())) {
    _cwl_169, foo_res_21 := A_foo(_cthread_169, _method_measures_169, _residue_169, o_30, __prim__int___box__(5))
    return_var_7 := foo_res_21
  } elseif (issubtype(typeof(o_30), B())) {
    _cwl_169, foo_res_22 := B_foo(_cthread_169, _method_measures_169, _residue_169, o_30, __prim__int___box__(5))
    return_var_7 := foo_res_22
  } elseif (issubtype(typeof(o_30), C())) {
    _cwl_169, foo_res_23 := C_foo(_cthread_169, _method_measures_169, _residue_169, o_30, __prim__int___box__(5))
    return_var_7 := foo_res_23
  }
  x_8 := return_var_7
  inhale _isDefined(3694456)
  goto __end
  label __end
}

method test_12(_cthread_170: Ref, _caller_measures_170: Seq[Measure$], _residue_170: Perm, o_10: Ref) returns (_current_wait_level_170: Perm)
  requires _cthread_170 != null
  requires issubtype(typeof(_cthread_170), Thread_0())
  requires issubtype(typeof(o_10), union_type_2(B(), C()))
  requires [true, perm(MustTerminate(_cthread_170)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_170) && ((forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_170) && _residue_170 <= _current_wait_level_170), true]
  ensures [true, (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_9: Ref
  var o_31: Ref
  var foo_res_24: Ref
  var foo_res_25: Ref
  var return_var_8: Ref
  var _cwl_170: Perm
  var _method_measures_170: Seq[Measure$]
  _method_measures_170 := Seq[Measure$]()
  _err := null
  o_31 := o_10
  if (issubtype(typeof(o_31), B())) {
    _cwl_170, foo_res_24 := B_foo(_cthread_170, _method_measures_170, _residue_170, o_31, __prim__int___box__(5))
    return_var_8 := foo_res_24
  } elseif (issubtype(typeof(o_31), C())) {
    _cwl_170, foo_res_25 := C_foo(_cthread_170, _method_measures_170, _residue_170, o_31, __prim__int___box__(5))
    return_var_8 := foo_res_25
  }
  x_9 := return_var_8
  inhale _isDefined(3759992)
  goto __end
  label __end
}

method test_13(_cthread_171: Ref, _caller_measures_171: Seq[Measure$], _residue_171: Perm, o_11: Ref) returns (_current_wait_level_171: Perm)
  requires _cthread_171 != null
  requires issubtype(typeof(_cthread_171), Thread_0())
  requires issubtype(typeof(o_11), union_type_2(union_type_2(A(), B()), C()))
  requires [true, perm(MustTerminate(_cthread_171)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_171) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_171) && _residue_171 <= _current_wait_level_171), true]
  ensures [true, (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_10: Ref
  var o_32: Ref
  var foo_res_26: Ref
  var foo_res_27: Ref
  var foo_res_28: Ref
  var return_var_9: Ref
  var _cwl_171: Perm
  var _method_measures_171: Seq[Measure$]
  _method_measures_171 := Seq[Measure$]()
  _err := null
  o_32 := o_11
  if (issubtype(typeof(o_32), A())) {
    _cwl_171, foo_res_26 := A_foo(_cthread_171, _method_measures_171, _residue_171, o_32, __prim__int___box__(5))
    return_var_9 := foo_res_26
  } elseif (issubtype(typeof(o_32), B())) {
    _cwl_171, foo_res_27 := B_foo(_cthread_171, _method_measures_171, _residue_171, o_32, __prim__int___box__(5))
    return_var_9 := foo_res_27
  } elseif (issubtype(typeof(o_32), C())) {
    _cwl_171, foo_res_28 := C_foo(_cthread_171, _method_measures_171, _residue_171, o_32, __prim__int___box__(5))
    return_var_9 := foo_res_28
  }
  x_10 := return_var_9
  inhale _isDefined(808542072)
  goto __end
  label __end
}

method test_14(_cthread_172: Ref, _caller_measures_172: Seq[Measure$], _residue_172: Perm, o_12: Ref) returns (_current_wait_level_172: Perm)
  requires _cthread_172 != null
  requires issubtype(typeof(_cthread_172), Thread_0())
  requires issubtype(typeof(o_12), A())
  requires [true, perm(MustTerminate(_cthread_172)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_172) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_172) && _residue_172 <= _current_wait_level_172), true]
  ensures [true, (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_11: Ref
  var o_33: Ref
  var foo_res_29: Ref
  var _cwl_172: Perm
  var _method_measures_172: Seq[Measure$]
  _method_measures_172 := Seq[Measure$]()
  _err := null
  o_33 := o_12
  _cwl_172, foo_res_29 := A_foo(_cthread_172, _method_measures_172, _residue_172, o_33, __prim__int___box__(5))
  x_11 := foo_res_29
  inhale _isDefined(825319288)
  goto __end
  label __end
}

method test_15(_cthread_173: Ref, _caller_measures_173: Seq[Measure$], _residue_173: Perm, o_13: Ref) returns (_current_wait_level_173: Perm)
  requires _cthread_173 != null
  requires issubtype(typeof(_cthread_173), Thread_0())
  requires issubtype(typeof(o_13), union_type_2(Base(), DerivedLeft()))
  requires [true, perm(MustTerminate(_cthread_173)) == none && ((forperm _r_43: Ref [MustInvokeBounded(_r_43)] :: false) && ((forperm _r_43: Ref [MustInvokeUnbounded(_r_43)] :: false) && ((forperm _r_43: Ref [_r_43.MustReleaseBounded] :: false) && (forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_41: Ref [_r_41.MustReleaseBounded] :: Level(_r_41) <= _current_wait_level_173) && ((forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: Level(_r_41) <= _current_wait_level_173) && _residue_173 <= _current_wait_level_173), true]
  ensures [true, (forperm _r_42: Ref [MustInvokeBounded(_r_42)] :: false) && ((forperm _r_42: Ref [MustInvokeUnbounded(_r_42)] :: false) && ((forperm _r_42: Ref [_r_42.MustReleaseBounded] :: false) && (forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_12: Ref
  var o_34: Ref
  var foo_res_30: Ref
  var foo_res_31: Ref
  var return_var_10: Ref
  var _cwl_173: Perm
  var _method_measures_173: Seq[Measure$]
  _method_measures_173 := Seq[Measure$]()
  _err := null
  o_34 := o_13
  if (issubtype(typeof(o_34), DerivedLeft())) {
    _cwl_173, foo_res_30 := DerivedLeft_foo(_cthread_173, _method_measures_173, _residue_173, o_34, __prim__int___box__(5))
    return_var_10 := foo_res_30
  } elseif (issubtype(typeof(o_34), Base())) {
    _cwl_173, foo_res_31 := Base_foo(_cthread_173, _method_measures_173, _residue_173, o_34, __prim__int___box__(5))
    return_var_10 := foo_res_31
  }
  x_12 := return_var_10
  inhale _isDefined(842096504)
  goto __end
  label __end
}

method test_16(_cthread_174: Ref, _caller_measures_174: Seq[Measure$], _residue_174: Perm, o_14: Ref) returns (_current_wait_level_174: Perm)
  requires _cthread_174 != null
  requires issubtype(typeof(_cthread_174), Thread_0())
  requires issubtype(typeof(o_14), union_type_2(DerivedLeft(), Base()))
  requires [true, perm(MustTerminate(_cthread_174)) == none && ((forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_44: Ref [_r_44.MustReleaseBounded] :: Level(_r_44) <= _current_wait_level_174) && ((forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: Level(_r_44) <= _current_wait_level_174) && _residue_174 <= _current_wait_level_174), true]
  ensures [true, (forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false) && ((forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false) && ((forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false) && (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_13: Ref
  var o_35: Ref
  var foo_res_32: Ref
  var foo_res_33: Ref
  var return_var_11: Ref
  var _cwl_174: Perm
  var _method_measures_174: Seq[Measure$]
  _method_measures_174 := Seq[Measure$]()
  _err := null
  o_35 := o_14
  if (issubtype(typeof(o_35), DerivedLeft())) {
    _cwl_174, foo_res_32 := DerivedLeft_foo(_cthread_174, _method_measures_174, _residue_174, o_35, __prim__int___box__(5))
    return_var_11 := foo_res_32
  } elseif (issubtype(typeof(o_35), Base())) {
    _cwl_174, foo_res_33 := Base_foo(_cthread_174, _method_measures_174, _residue_174, o_35, __prim__int___box__(5))
    return_var_11 := foo_res_33
  }
  x_13 := return_var_11
  inhale _isDefined(858873720)
  goto __end
  label __end
}

method test_17(_cthread_175: Ref, _caller_measures_175: Seq[Measure$], _residue_175: Perm, o_15: Ref) returns (_current_wait_level_175: Perm)
  requires _cthread_175 != null
  requires issubtype(typeof(_cthread_175), Thread_0())
  requires issubtype(typeof(o_15), union_type_4(DerivedLeft(), DerivedRight(), Base(), SingleInheritanceLeft()))
  requires [true, perm(MustTerminate(_cthread_175)) == none && ((forperm _r_49: Ref [MustInvokeBounded(_r_49)] :: false) && ((forperm _r_49: Ref [MustInvokeUnbounded(_r_49)] :: false) && ((forperm _r_49: Ref [_r_49.MustReleaseBounded] :: false) && (forperm _r_49: Ref [_r_49.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_47: Ref [_r_47.MustReleaseBounded] :: Level(_r_47) <= _current_wait_level_175) && ((forperm _r_47: Ref [_r_47.MustReleaseUnbounded] :: Level(_r_47) <= _current_wait_level_175) && _residue_175 <= _current_wait_level_175), true]
  ensures [true, (forperm _r_48: Ref [MustInvokeBounded(_r_48)] :: false) && ((forperm _r_48: Ref [MustInvokeUnbounded(_r_48)] :: false) && ((forperm _r_48: Ref [_r_48.MustReleaseBounded] :: false) && (forperm _r_48: Ref [_r_48.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_14: Ref
  var o_36: Ref
  var foo_res_34: Ref
  var foo_res_35: Ref
  var foo_res_36: Ref
  var foo_res_37: Ref
  var return_var_12: Ref
  var _cwl_175: Perm
  var _method_measures_175: Seq[Measure$]
  _method_measures_175 := Seq[Measure$]()
  _err := null
  o_36 := o_15
  if (issubtype(typeof(o_36), DerivedLeft())) {
    _cwl_175, foo_res_34 := DerivedLeft_foo(_cthread_175, _method_measures_175, _residue_175, o_36, __prim__int___box__(5))
    return_var_12 := foo_res_34
  } elseif (issubtype(typeof(o_36), SingleInheritanceLeft())) {
    _cwl_175, foo_res_35 := SingleInheritanceLeft_foo(_cthread_175, _method_measures_175, _residue_175, o_36, __prim__int___box__(5))
    return_var_12 := foo_res_35
  } elseif (issubtype(typeof(o_36), DerivedRight())) {
    _cwl_175, foo_res_36 := DerivedRight_foo(_cthread_175, _method_measures_175, _residue_175, o_36, __prim__int___box__(5))
    return_var_12 := foo_res_36
  } elseif (issubtype(typeof(o_36), Base())) {
    _cwl_175, foo_res_37 := Base_foo(_cthread_175, _method_measures_175, _residue_175, o_36, __prim__int___box__(5))
    return_var_12 := foo_res_37
  }
  x_14 := return_var_12
  inhale _isDefined(875650936)
  goto __end
  label __end
}

method test_union_predicate(_cthread_176: Ref, _caller_measures_176: Seq[Measure$], _residue_176: Perm, o_16: Ref, j_0: Ref) returns (_current_wait_level_176: Perm)
  requires _cthread_176 != null
  requires issubtype(typeof(_cthread_176), Thread_0())
  requires issubtype(typeof(o_16), union_type_2(DerivedLeft(), DerivedRight()))
  requires issubtype(typeof(j_0), int())
  requires acc(Base_test_pred(o_16, j_0), write)
  requires [true, perm(MustTerminate(_cthread_176)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_50: Ref [_r_50.MustReleaseBounded] :: Level(_r_50) <= _current_wait_level_176) && ((forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: Level(_r_50) <= _current_wait_level_176) && _residue_176 <= _current_wait_level_176), true]
  ensures [true, (forperm _r_51: Ref [MustInvokeBounded(_r_51)] :: false) && ((forperm _r_51: Ref [MustInvokeUnbounded(_r_51)] :: false) && ((forperm _r_51: Ref [_r_51.MustReleaseBounded] :: false) && (forperm _r_51: Ref [_r_51.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var o_37: Ref
  var j_2: Ref
  var _cwl_176: Perm
  var _method_measures_176: Seq[Measure$]
  _method_measures_176 := Seq[Measure$]()
  _err := null
  o_37 := o_16
  j_2 := j_0
  unfold acc(Base_test_pred(o_37, j_2), write)
  assert int___gt__(int___unbox__(j_2), 0)
  if (issubtype(typeof(o_37), DerivedRight())) {
    assert int___lt__(int___unbox__(j_2), 4)
  }
  assert int___lt__(int___unbox__(j_2), 4)
  goto __end
  label __end
}

method test_18(_cthread_177: Ref, _caller_measures_177: Seq[Measure$], _residue_177: Perm, o_17: Ref) returns (_current_wait_level_177: Perm)
  requires _cthread_177 != null
  requires issubtype(typeof(_cthread_177), Thread_0())
  requires issubtype(typeof(o_17), union_type_2(DataStructure(), list(int())))
  requires !issubtype(typeof(o_17), DataStructure()) ==> acc(o_17.list_acc, write)
  requires [true, perm(MustTerminate(_cthread_177)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_53: Ref [_r_53.MustReleaseBounded] :: Level(_r_53) <= _current_wait_level_177) && ((forperm _r_53: Ref [_r_53.MustReleaseUnbounded] :: Level(_r_53) <= _current_wait_level_177) && _residue_177 <= _current_wait_level_177), true]
  ensures [true, (forperm _r_54: Ref [MustInvokeBounded(_r_54)] :: false) && ((forperm _r_54: Ref [MustInvokeUnbounded(_r_54)] :: false) && ((forperm _r_54: Ref [_r_54.MustReleaseBounded] :: false) && (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var o_38: Ref
  var _cwl_177: Perm
  var _method_measures_177: Seq[Measure$]
  _method_measures_177 := Seq[Measure$]()
  _err := null
  o_38 := o_17
  if (issubtype(typeof(o_38), list(list_arg(typeof(o_38), 0)))) {
    _cwl_177 := list_append(_cthread_177, _method_measures_177, _residue_177, o_38, __prim__int___box__(5))
  } elseif (issubtype(typeof(o_38), DataStructure())) {
    _cwl_177 := DataStructure_append(_cthread_177, _method_measures_177, _residue_177, o_38, __prim__int___box__(5))
  }
  goto __end
  label __end
}

method test_19(_cthread_178: Ref, _caller_measures_178: Seq[Measure$], _residue_178: Perm, o_18: Ref) returns (_current_wait_level_178: Perm)
  requires _cthread_178 != null
  requires issubtype(typeof(_cthread_178), Thread_0())
  requires issubtype(typeof(o_18), union_type_2(A(), B()))
  requires (issubtype(typeof(o_18), A()) ? acc(o_18.A_field, write) && issubtype(typeof(o_18.A_field), int()) : acc(o_18.B_field, write) && issubtype(typeof(o_18.B_field), str()))
  requires [true, perm(MustTerminate(_cthread_178)) == none && ((forperm _r_58: Ref [MustInvokeBounded(_r_58)] :: false) && ((forperm _r_58: Ref [MustInvokeUnbounded(_r_58)] :: false) && ((forperm _r_58: Ref [_r_58.MustReleaseBounded] :: false) && (forperm _r_58: Ref [_r_58.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_56: Ref [_r_56.MustReleaseBounded] :: Level(_r_56) <= _current_wait_level_178) && ((forperm _r_56: Ref [_r_56.MustReleaseUnbounded] :: Level(_r_56) <= _current_wait_level_178) && _residue_178 <= _current_wait_level_178), true]
  ensures [true, (forperm _r_57: Ref [MustInvokeBounded(_r_57)] :: false) && ((forperm _r_57: Ref [MustInvokeUnbounded(_r_57)] :: false) && ((forperm _r_57: Ref [_r_57.MustReleaseBounded] :: false) && (forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var x_15: Ref
  var o_39: Ref
  var _cwl_178: Perm
  var _method_measures_178: Seq[Measure$]
  _method_measures_178 := Seq[Measure$]()
  _err := null
  o_39 := o_18
  x_15 := (issubtype(typeof(o_39), A()) ? o_39.A_field : o_39.B_field)
  inhale _isDefined(892428152)
  goto __end
  label __end
}

method test_20(_cthread_179: Ref, _caller_measures_179: Seq[Measure$], _residue_179: Perm, o_19: Ref) returns (_current_wait_level_179: Perm)
  requires _cthread_179 != null
  requires issubtype(typeof(_cthread_179), Thread_0())
  requires issubtype(typeof(o_19), union_type_2(A(), B()))
  requires (issubtype(typeof(o_19), A()) ? acc(o_19.A_field, write) && issubtype(typeof(o_19.A_field), int()) : acc(o_19.B_field, write) && issubtype(typeof(o_19.B_field), str()))
  requires [true, perm(MustTerminate(_cthread_179)) == none && ((forperm _r_61: Ref [MustInvokeBounded(_r_61)] :: false) && ((forperm _r_61: Ref [MustInvokeUnbounded(_r_61)] :: false) && ((forperm _r_61: Ref [_r_61.MustReleaseBounded] :: false) && (forperm _r_61: Ref [_r_61.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_59: Ref [_r_59.MustReleaseBounded] :: Level(_r_59) <= _current_wait_level_179) && ((forperm _r_59: Ref [_r_59.MustReleaseUnbounded] :: Level(_r_59) <= _current_wait_level_179) && _residue_179 <= _current_wait_level_179), true]
  ensures [true, (forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var o_40: Ref
  var _cwl_179: Perm
  var _method_measures_179: Seq[Measure$]
  _method_measures_179 := Seq[Measure$]()
  _err := null
  o_40 := o_19
  if (issubtype(typeof(o_40), A())) {
    if (perm(_MaySet(o_40, 3825697954142462143)) > none) {
      exhale acc(_MaySet(o_40, 3825697954142462143), write)
      inhale acc(o_40.A_field, write)
    }
    o_40.A_field := __prim__int___box__(5)
  } elseif (issubtype(typeof(o_40), B())) {
    if (perm(_MaySet(o_40, 3825697956289945790)) > none) {
      exhale acc(_MaySet(o_40, 3825697956289945790), write)
      inhale acc(o_40.B_field, write)
    }
    o_40.B_field := __prim__int___box__(5)
  }
  goto __end
  label __end
}

method client1(_cthread_180: Ref, _caller_measures_180: Seq[Measure$], _residue_180: Perm, a: Ref) returns (_current_wait_level_180: Perm)
  requires _cthread_180 != null
  requires issubtype(typeof(_cthread_180), Thread_0())
  requires issubtype(typeof(a), union_type_2(list(int()), list(bool())))
  requires [true, perm(MustTerminate(_cthread_180)) == none && ((forperm _r_64: Ref [MustInvokeBounded(_r_64)] :: false) && ((forperm _r_64: Ref [MustInvokeUnbounded(_r_64)] :: false) && ((forperm _r_64: Ref [_r_64.MustReleaseBounded] :: false) && (forperm _r_64: Ref [_r_64.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_62: Ref [_r_62.MustReleaseBounded] :: Level(_r_62) <= _current_wait_level_180) && ((forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: Level(_r_62) <= _current_wait_level_180) && _residue_180 <= _current_wait_level_180), true]
  ensures [true, (forperm _r_63: Ref [MustInvokeBounded(_r_63)] :: false) && ((forperm _r_63: Ref [MustInvokeUnbounded(_r_63)] :: false) && ((forperm _r_63: Ref [_r_63.MustReleaseBounded] :: false) && (forperm _r_63: Ref [_r_63.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var b: Ref
  var a_1: Ref
  var _cwl_180: Perm
  var _method_measures_180: Seq[Measure$]
  _method_measures_180 := Seq[Measure$]()
  _err := null
  a_1 := a
  b := list___getitem__(a_1, __prim__int___box__(0))
  inhale _isDefined(98)
  goto __end
  label __end
}

method client2(_cthread_181: Ref, _caller_measures_181: Seq[Measure$], _residue_181: Perm, a_0: Ref) returns (_current_wait_level_181: Perm)
  requires _cthread_181 != null
  requires issubtype(typeof(_cthread_181), Thread_0())
  requires issubtype(typeof(a_0), union_type_2(list(int()), list(bool())))
  requires [true, perm(MustTerminate(_cthread_181)) == none && ((forperm _r_67: Ref [MustInvokeBounded(_r_67)] :: false) && ((forperm _r_67: Ref [MustInvokeUnbounded(_r_67)] :: false) && ((forperm _r_67: Ref [_r_67.MustReleaseBounded] :: false) && (forperm _r_67: Ref [_r_67.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_65: Ref [_r_65.MustReleaseBounded] :: Level(_r_65) <= _current_wait_level_181) && ((forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: Level(_r_65) <= _current_wait_level_181) && _residue_181 <= _current_wait_level_181), true]
  ensures [true, (forperm _r_66: Ref [MustInvokeBounded(_r_66)] :: false) && ((forperm _r_66: Ref [MustInvokeUnbounded(_r_66)] :: false) && ((forperm _r_66: Ref [_r_66.MustReleaseBounded] :: false) && (forperm _r_66: Ref [_r_66.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_2: Ref
  var _cwl_181: Perm
  var _method_measures_181: Seq[Measure$]
  _method_measures_181 := Seq[Measure$]()
  _err := null
  a_2 := a_0
  if (issubtype(typeof(a_2), list(list_arg(typeof(a_2), 0)))) {
    _cwl_181 := list_append(_cthread_181, _method_measures_181, _residue_181, a_2, __prim__bool___box__(true))
  }
  goto __end
  label __end
}

method A___init__(_cthread_145: Ref, _caller_measures_145: Seq[Measure$], _residue_145: Perm, self: Ref) returns (_current_wait_level_145: Perm)
  requires _cthread_145 != null
  requires issubtype(typeof(_cthread_145), Thread_0())
  requires self != null
  requires acc(_MaySet(self, 3825697954142462143), write)
  requires issubtype(typeof(self), A())
  requires self != null
  requires [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_68: Ref [_r_68.MustReleaseBounded] :: Level(_r_68) <= _current_wait_level_145) && ((forperm _r_68: Ref [_r_68.MustReleaseUnbounded] :: Level(_r_68) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]
  ensures [true, (forperm _r_69: Ref [MustInvokeBounded(_r_69)] :: false) && ((forperm _r_69: Ref [MustInvokeUnbounded(_r_69)] :: false) && ((forperm _r_69: Ref [_r_69.MustReleaseBounded] :: false) && (forperm _r_69: Ref [_r_69.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_13: Ref
  var _cwl_145: Perm
  var _method_measures_145: Seq[Measure$]
  _method_measures_145 := Seq[Measure$]()
  inhale typeof(self) == A()
  _err := null
  self_13 := self
  if (perm(_MaySet(self_13, 3825697954142462143)) > none) {
    exhale acc(_MaySet(self_13, 3825697954142462143), write)
    inhale acc(self_13.A_field, write)
  }
  self_13.A_field := __prim__int___box__(5)
  goto __end
  label __end
}

method A_foo(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm, self_0: Ref, i: Ref) returns (_current_wait_level_146: Perm, _res: Ref)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires issubtype(typeof(self_0), A())
  requires issubtype(typeof(i), int())
  requires self_0 != null
  requires true
  requires [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_73: Ref [MustInvokeBounded(_r_73)] :: false) && ((forperm _r_73: Ref [MustInvokeUnbounded(_r_73)] :: false) && ((forperm _r_73: Ref [_r_73.MustReleaseBounded] :: false) && (forperm _r_73: Ref [_r_73.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_71: Ref [_r_71.MustReleaseBounded] :: Level(_r_71) <= _current_wait_level_146) && ((forperm _r_71: Ref [_r_71.MustReleaseUnbounded] :: Level(_r_71) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures issubtype(typeof(_res), int())
  ensures int___eq__(_res, __prim__int___box__(4))
  ensures [true, (forperm _r_72: Ref [MustInvokeBounded(_r_72)] :: false) && ((forperm _r_72: Ref [MustInvokeUnbounded(_r_72)] :: false) && ((forperm _r_72: Ref [_r_72.MustReleaseBounded] :: false) && (forperm _r_72: Ref [_r_72.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_14: Ref
  var i_18: Ref
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq[Measure$]()
  inhale typeof(self_0) == A()
  _res := null
  _err := null
  self_14 := self_0
  i_18 := i
  _res := __prim__int___box__(4)
  goto __end
  goto __end
  label __end
}

method B___init__(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, self_1: Ref) returns (_current_wait_level_147: Perm)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires self_1 != null
  requires acc(_MaySet(self_1, 3825697956289945790), write)
  requires issubtype(typeof(self_1), B())
  requires self_1 != null
  requires [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_76: Ref [MustInvokeBounded(_r_76)] :: false) && ((forperm _r_76: Ref [MustInvokeUnbounded(_r_76)] :: false) && ((forperm _r_76: Ref [_r_76.MustReleaseBounded] :: false) && (forperm _r_76: Ref [_r_76.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_74: Ref [_r_74.MustReleaseBounded] :: Level(_r_74) <= _current_wait_level_147) && ((forperm _r_74: Ref [_r_74.MustReleaseUnbounded] :: Level(_r_74) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures [true, (forperm _r_75: Ref [MustInvokeBounded(_r_75)] :: false) && ((forperm _r_75: Ref [MustInvokeUnbounded(_r_75)] :: false) && ((forperm _r_75: Ref [_r_75.MustReleaseBounded] :: false) && (forperm _r_75: Ref [_r_75.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_15: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq[Measure$]()
  inhale typeof(self_1) == B()
  _err := null
  self_15 := self_1
  if (perm(_MaySet(self_15, 3825697956289945790)) > none) {
    exhale acc(_MaySet(self_15, 3825697956289945790), write)
    inhale acc(self_15.B_field, write)
  }
  self_15.B_field := str___create__(1, 66)
  goto __end
  label __end
}

method B_foo(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, self_2: Ref, i_0: Ref) returns (_current_wait_level_148: Perm, _res: Ref)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires issubtype(typeof(self_2), B())
  requires issubtype(typeof(i_0), int())
  requires self_2 != null
  requires int___gt__(int___unbox__(i_0), 0)
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_79: Ref [MustInvokeBounded(_r_79)] :: false) && ((forperm _r_79: Ref [MustInvokeUnbounded(_r_79)] :: false) && ((forperm _r_79: Ref [_r_79.MustReleaseBounded] :: false) && (forperm _r_79: Ref [_r_79.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_77: Ref [_r_77.MustReleaseBounded] :: Level(_r_77) <= _current_wait_level_148) && ((forperm _r_77: Ref [_r_77.MustReleaseUnbounded] :: Level(_r_77) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures issubtype(typeof(_res), int())
  ensures int___eq__(_res, __prim__int___box__(6))
  ensures [true, (forperm _r_78: Ref [MustInvokeBounded(_r_78)] :: false) && ((forperm _r_78: Ref [MustInvokeUnbounded(_r_78)] :: false) && ((forperm _r_78: Ref [_r_78.MustReleaseBounded] :: false) && (forperm _r_78: Ref [_r_78.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_16: Ref
  var i_19: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq[Measure$]()
  inhale typeof(self_2) == B()
  _res := null
  _err := null
  self_16 := self_2
  i_19 := i_0
  _res := __prim__int___box__(6)
  goto __end
  goto __end
  label __end
}

method C_foo(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm, self_3: Ref, i_1: Ref) returns (_current_wait_level_149: Perm, _res: Ref)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires issubtype(typeof(self_3), C())
  requires issubtype(typeof(i_1), int())
  requires self_3 != null
  requires true
  requires [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_82: Ref [MustInvokeBounded(_r_82)] :: false) && ((forperm _r_82: Ref [MustInvokeUnbounded(_r_82)] :: false) && ((forperm _r_82: Ref [_r_82.MustReleaseBounded] :: false) && (forperm _r_82: Ref [_r_82.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_80: Ref [_r_80.MustReleaseBounded] :: Level(_r_80) <= _current_wait_level_149) && ((forperm _r_80: Ref [_r_80.MustReleaseUnbounded] :: Level(_r_80) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures issubtype(typeof(_res), str())
  ensures str___eq__(_res, str___create__(1, 53))
  ensures [true, (forperm _r_81: Ref [MustInvokeBounded(_r_81)] :: false) && ((forperm _r_81: Ref [MustInvokeUnbounded(_r_81)] :: false) && ((forperm _r_81: Ref [_r_81.MustReleaseBounded] :: false) && (forperm _r_81: Ref [_r_81.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_17: Ref
  var i_20: Ref
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq[Measure$]()
  inhale typeof(self_3) == C()
  _res := null
  _err := null
  self_17 := self_3
  i_20 := i_1
  _res := str___create__(1, 53)
  goto __end
  goto __end
  label __end
}

method Base_foo(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm, self_4: Ref, i_2: Ref) returns (_current_wait_level_150: Perm, _res: Ref)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires issubtype(typeof(self_4), Base())
  requires issubtype(typeof(i_2), int())
  requires self_4 != null
  requires int___gt__(int___unbox__(i_2), 3)
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_85: Ref [MustInvokeBounded(_r_85)] :: false) && ((forperm _r_85: Ref [MustInvokeUnbounded(_r_85)] :: false) && ((forperm _r_85: Ref [_r_85.MustReleaseBounded] :: false) && (forperm _r_85: Ref [_r_85.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_83: Ref [_r_83.MustReleaseBounded] :: Level(_r_83) <= _current_wait_level_150) && ((forperm _r_83: Ref [_r_83.MustReleaseUnbounded] :: Level(_r_83) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures issubtype(typeof(_res), int())
  ensures int___gt__(int___unbox__(_res), 3)
  ensures [true, (forperm _r_84: Ref [MustInvokeBounded(_r_84)] :: false) && ((forperm _r_84: Ref [MustInvokeUnbounded(_r_84)] :: false) && ((forperm _r_84: Ref [_r_84.MustReleaseBounded] :: false) && (forperm _r_84: Ref [_r_84.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_18: Ref
  var i_21: Ref
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq[Measure$]()
  inhale typeof(self_4) == Base()
  _res := null
  _err := null
  self_18 := self_4
  i_21 := i_2
  _res := __prim__int___box__(4)
  goto __end
  goto __end
  label __end
}

method DerivedLeft_foo(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm, self_6: Ref, i_4: Ref) returns (_current_wait_level_152: Perm, _res: Ref)
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires issubtype(typeof(self_6), DerivedLeft())
  requires issubtype(typeof(i_4), int())
  requires self_6 != null
  requires int___gt__(int___unbox__(i_4), 2)
  requires [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_88: Ref [MustInvokeBounded(_r_88)] :: false) && ((forperm _r_88: Ref [MustInvokeUnbounded(_r_88)] :: false) && ((forperm _r_88: Ref [_r_88.MustReleaseBounded] :: false) && (forperm _r_88: Ref [_r_88.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_86: Ref [_r_86.MustReleaseBounded] :: Level(_r_86) <= _current_wait_level_152) && ((forperm _r_86: Ref [_r_86.MustReleaseUnbounded] :: Level(_r_86) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures issubtype(typeof(_res), int())
  ensures int___gt__(int___unbox__(_res), 5)
  ensures [true, (forperm _r_87: Ref [MustInvokeBounded(_r_87)] :: false) && ((forperm _r_87: Ref [MustInvokeUnbounded(_r_87)] :: false) && ((forperm _r_87: Ref [_r_87.MustReleaseBounded] :: false) && (forperm _r_87: Ref [_r_87.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_19: Ref
  var i_22: Ref
  var _cwl_152: Perm
  var _method_measures_152: Seq[Measure$]
  _method_measures_152 := Seq[Measure$]()
  inhale typeof(self_6) == DerivedLeft()
  _res := null
  _err := null
  self_19 := self_6
  i_22 := i_4
  _res := __prim__int___box__(6)
  goto __end
  goto __end
  label __end
}

method DerivedLeft_foo_override_check(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm, self_4: Ref, i_2: Ref) returns (_current_wait_level_150: Perm, _res: Ref)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires self_4 != null
  requires issubtype(typeof(self_4), Base())
  requires issubtype(typeof(i_2), int())
  requires self_4 != null
  requires int___gt__(int___unbox__(i_2), 3)
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_91: Ref [MustInvokeBounded(_r_91)] :: false) && ((forperm _r_91: Ref [MustInvokeUnbounded(_r_91)] :: false) && ((forperm _r_91: Ref [_r_91.MustReleaseBounded] :: false) && (forperm _r_91: Ref [_r_91.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_89: Ref [_r_89.MustReleaseBounded] :: Level(_r_89) <= _current_wait_level_150) && ((forperm _r_89: Ref [_r_89.MustReleaseUnbounded] :: Level(_r_89) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures issubtype(typeof(_res), int())
  ensures int___gt__(int___unbox__(_res), 3)
  ensures [true, (forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false) && ((forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false) && ((forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false) && (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false)))]
{
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq[Measure$]()
  inhale issubtype(typeof(self_4), DerivedLeft())
  _cwl_150, _res := DerivedLeft_foo(_cthread_150, _method_measures_150, _residue_150, self_4, i_2)
}

method DerivedRight_foo(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm, self_8: Ref, i_6: Ref) returns (_current_wait_level_154: Perm, _res: Ref)
  requires _cthread_154 != null
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires issubtype(typeof(self_8), DerivedRight())
  requires issubtype(typeof(i_6), int())
  requires self_8 != null
  requires int___gt__(int___unbox__(i_6), 2)
  requires [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_94: Ref [MustInvokeBounded(_r_94)] :: false) && ((forperm _r_94: Ref [MustInvokeUnbounded(_r_94)] :: false) && ((forperm _r_94: Ref [_r_94.MustReleaseBounded] :: false) && (forperm _r_94: Ref [_r_94.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_92: Ref [_r_92.MustReleaseBounded] :: Level(_r_92) <= _current_wait_level_154) && ((forperm _r_92: Ref [_r_92.MustReleaseUnbounded] :: Level(_r_92) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]
  ensures issubtype(typeof(_res), int())
  ensures int___gt__(int___unbox__(_res), 5)
  ensures [true, (forperm _r_93: Ref [MustInvokeBounded(_r_93)] :: false) && ((forperm _r_93: Ref [MustInvokeUnbounded(_r_93)] :: false) && ((forperm _r_93: Ref [_r_93.MustReleaseBounded] :: false) && (forperm _r_93: Ref [_r_93.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_20: Ref
  var i_23: Ref
  var _cwl_154: Perm
  var _method_measures_154: Seq[Measure$]
  _method_measures_154 := Seq[Measure$]()
  inhale typeof(self_8) == DerivedRight()
  _res := null
  _err := null
  self_20 := self_8
  i_23 := i_6
  _res := __prim__int___box__(6)
  goto __end
  goto __end
  label __end
}

method DerivedRight_foo_override_check(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm, self_4: Ref, i_2: Ref) returns (_current_wait_level_150: Perm, _res: Ref)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires self_4 != null
  requires issubtype(typeof(self_4), Base())
  requires issubtype(typeof(i_2), int())
  requires self_4 != null
  requires int___gt__(int___unbox__(i_2), 3)
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_97: Ref [MustInvokeBounded(_r_97)] :: false) && ((forperm _r_97: Ref [MustInvokeUnbounded(_r_97)] :: false) && ((forperm _r_97: Ref [_r_97.MustReleaseBounded] :: false) && (forperm _r_97: Ref [_r_97.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_95: Ref [_r_95.MustReleaseBounded] :: Level(_r_95) <= _current_wait_level_150) && ((forperm _r_95: Ref [_r_95.MustReleaseUnbounded] :: Level(_r_95) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures issubtype(typeof(_res), int())
  ensures int___gt__(int___unbox__(_res), 3)
  ensures [true, (forperm _r_96: Ref [MustInvokeBounded(_r_96)] :: false) && ((forperm _r_96: Ref [MustInvokeUnbounded(_r_96)] :: false) && ((forperm _r_96: Ref [_r_96.MustReleaseBounded] :: false) && (forperm _r_96: Ref [_r_96.MustReleaseUnbounded] :: false)))]
{
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq[Measure$]()
  inhale issubtype(typeof(self_4), DerivedRight())
  _cwl_150, _res := DerivedRight_foo(_cthread_150, _method_measures_150, _residue_150, self_4, i_2)
}

method SingleInheritanceLeft_foo(_cthread_156: Ref, _caller_measures_156: Seq[Measure$], _residue_156: Perm, self_10: Ref, i_8: Ref) returns (_current_wait_level_156: Perm, _res: Ref)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires issubtype(typeof(self_10), SingleInheritanceLeft())
  requires issubtype(typeof(i_8), int())
  requires self_10 != null
  requires int___gt__(int___unbox__(i_8), 1)
  requires [true, perm(MustTerminate(_cthread_156)) == none && ((forperm _r_100: Ref [MustInvokeBounded(_r_100)] :: false) && ((forperm _r_100: Ref [MustInvokeUnbounded(_r_100)] :: false) && ((forperm _r_100: Ref [_r_100.MustReleaseBounded] :: false) && (forperm _r_100: Ref [_r_100.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_98: Ref [_r_98.MustReleaseBounded] :: Level(_r_98) <= _current_wait_level_156) && ((forperm _r_98: Ref [_r_98.MustReleaseUnbounded] :: Level(_r_98) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]
  ensures issubtype(typeof(_res), int())
  ensures int___gt__(int___unbox__(_res), 6)
  ensures [true, (forperm _r_99: Ref [MustInvokeBounded(_r_99)] :: false) && ((forperm _r_99: Ref [MustInvokeUnbounded(_r_99)] :: false) && ((forperm _r_99: Ref [_r_99.MustReleaseBounded] :: false) && (forperm _r_99: Ref [_r_99.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_21: Ref
  var i_24: Ref
  var _cwl_156: Perm
  var _method_measures_156: Seq[Measure$]
  _method_measures_156 := Seq[Measure$]()
  inhale typeof(self_10) == SingleInheritanceLeft()
  _res := null
  _err := null
  self_21 := self_10
  i_24 := i_8
  _res := __prim__int___box__(7)
  goto __end
  goto __end
  label __end
}

method SingleInheritanceLeft_foo_override_check(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm, self_8: Ref, i_6: Ref) returns (_current_wait_level_154: Perm, _res: Ref)
  requires _cthread_154 != null
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires self_8 != null
  requires issubtype(typeof(self_8), DerivedRight())
  requires issubtype(typeof(i_6), int())
  requires self_8 != null
  requires int___gt__(int___unbox__(i_6), 2)
  requires [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_103: Ref [MustInvokeBounded(_r_103)] :: false) && ((forperm _r_103: Ref [MustInvokeUnbounded(_r_103)] :: false) && ((forperm _r_103: Ref [_r_103.MustReleaseBounded] :: false) && (forperm _r_103: Ref [_r_103.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_101: Ref [_r_101.MustReleaseBounded] :: Level(_r_101) <= _current_wait_level_154) && ((forperm _r_101: Ref [_r_101.MustReleaseUnbounded] :: Level(_r_101) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]
  ensures issubtype(typeof(_res), int())
  ensures int___gt__(int___unbox__(_res), 5)
  ensures [true, (forperm _r_102: Ref [MustInvokeBounded(_r_102)] :: false) && ((forperm _r_102: Ref [MustInvokeUnbounded(_r_102)] :: false) && ((forperm _r_102: Ref [_r_102.MustReleaseBounded] :: false) && (forperm _r_102: Ref [_r_102.MustReleaseUnbounded] :: false)))]
{
  var _cwl_154: Perm
  var _method_measures_154: Seq[Measure$]
  _method_measures_154 := Seq[Measure$]()
  inhale issubtype(typeof(self_8), SingleInheritanceLeft())
  _cwl_154, _res := SingleInheritanceLeft_foo(_cthread_154, _method_measures_154, _residue_154, self_8, i_6)
}

method SingleInheritanceRight_foo(_cthread_157: Ref, _caller_measures_157: Seq[Measure$], _residue_157: Perm, self_11: Ref, i_9: Ref) returns (_current_wait_level_157: Perm, _res: Ref)
  requires _cthread_157 != null
  requires issubtype(typeof(_cthread_157), Thread_0())
  requires issubtype(typeof(self_11), SingleInheritanceRight())
  requires issubtype(typeof(i_9), int())
  requires self_11 != null
  requires int___gt__(int___unbox__(i_9), 1)
  requires [true, perm(MustTerminate(_cthread_157)) == none && ((forperm _r_106: Ref [MustInvokeBounded(_r_106)] :: false) && ((forperm _r_106: Ref [MustInvokeUnbounded(_r_106)] :: false) && ((forperm _r_106: Ref [_r_106.MustReleaseBounded] :: false) && (forperm _r_106: Ref [_r_106.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_104: Ref [_r_104.MustReleaseBounded] :: Level(_r_104) <= _current_wait_level_157) && ((forperm _r_104: Ref [_r_104.MustReleaseUnbounded] :: Level(_r_104) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]
  ensures issubtype(typeof(_res), int())
  ensures int___gt__(int___unbox__(_res), 6)
  ensures [true, (forperm _r_105: Ref [MustInvokeBounded(_r_105)] :: false) && ((forperm _r_105: Ref [MustInvokeUnbounded(_r_105)] :: false) && ((forperm _r_105: Ref [_r_105.MustReleaseBounded] :: false) && (forperm _r_105: Ref [_r_105.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_22: Ref
  var i_25: Ref
  var _cwl_157: Perm
  var _method_measures_157: Seq[Measure$]
  _method_measures_157 := Seq[Measure$]()
  inhale typeof(self_11) == SingleInheritanceRight()
  _res := null
  _err := null
  self_22 := self_11
  i_25 := i_9
  _res := __prim__int___box__(7)
  goto __end
  goto __end
  label __end
}

method SingleInheritanceRight_foo_override_check(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm, self_8: Ref, i_6: Ref) returns (_current_wait_level_154: Perm, _res: Ref)
  requires _cthread_154 != null
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires self_8 != null
  requires issubtype(typeof(self_8), DerivedRight())
  requires issubtype(typeof(i_6), int())
  requires self_8 != null
  requires int___gt__(int___unbox__(i_6), 2)
  requires [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_109: Ref [MustInvokeBounded(_r_109)] :: false) && ((forperm _r_109: Ref [MustInvokeUnbounded(_r_109)] :: false) && ((forperm _r_109: Ref [_r_109.MustReleaseBounded] :: false) && (forperm _r_109: Ref [_r_109.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_107: Ref [_r_107.MustReleaseBounded] :: Level(_r_107) <= _current_wait_level_154) && ((forperm _r_107: Ref [_r_107.MustReleaseUnbounded] :: Level(_r_107) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]
  ensures issubtype(typeof(_res), int())
  ensures int___gt__(int___unbox__(_res), 5)
  ensures [true, (forperm _r_108: Ref [MustInvokeBounded(_r_108)] :: false) && ((forperm _r_108: Ref [MustInvokeUnbounded(_r_108)] :: false) && ((forperm _r_108: Ref [_r_108.MustReleaseBounded] :: false) && (forperm _r_108: Ref [_r_108.MustReleaseUnbounded] :: false)))]
{
  var _cwl_154: Perm
  var _method_measures_154: Seq[Measure$]
  _method_measures_154 := Seq[Measure$]()
  inhale issubtype(typeof(self_8), SingleInheritanceRight())
  _cwl_154, _res := SingleInheritanceRight_foo(_cthread_154, _method_measures_154, _residue_154, self_8, i_6)
}

method DataStructure_append(_cthread_158: Ref, _caller_measures_158: Seq[Measure$], _residue_158: Perm, self_12: Ref, item: Ref) returns (_current_wait_level_158: Perm)
  requires _cthread_158 != null
  requires issubtype(typeof(_cthread_158), Thread_0())
  requires issubtype(typeof(self_12), DataStructure())
  requires issubtype(typeof(item), int())
  requires self_12 != null
  requires [true, perm(MustTerminate(_cthread_158)) == none && ((forperm _r_112: Ref [MustInvokeBounded(_r_112)] :: false) && ((forperm _r_112: Ref [MustInvokeUnbounded(_r_112)] :: false) && ((forperm _r_112: Ref [_r_112.MustReleaseBounded] :: false) && (forperm _r_112: Ref [_r_112.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_110: Ref [_r_110.MustReleaseBounded] :: Level(_r_110) <= _current_wait_level_158) && ((forperm _r_110: Ref [_r_110.MustReleaseUnbounded] :: Level(_r_110) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158), true]
  ensures [true, (forperm _r_111: Ref [MustInvokeBounded(_r_111)] :: false) && ((forperm _r_111: Ref [MustInvokeUnbounded(_r_111)] :: false) && ((forperm _r_111: Ref [_r_111.MustReleaseBounded] :: false) && (forperm _r_111: Ref [_r_111.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_23: Ref
  var item_0: Ref
  var _cwl_158: Perm
  var _method_measures_158: Seq[Measure$]
  _method_measures_158 := Seq[Measure$]()
  inhale typeof(self_12) == DataStructure()
  _err := null
  self_23 := self_12
  item_0 := item
  goto __end
  label __end
}

method main(_cthread_182: Ref, _caller_measures_182: Seq[Measure$], _residue_182: Perm) returns (_current_wait_level_182: Perm)
  requires _cthread_182 != null
  requires issubtype(typeof(_cthread_182), Thread_0())
  requires [true, perm(MustTerminate(_cthread_182)) == none && ((forperm _r_115: Ref [MustInvokeBounded(_r_115)] :: false) && ((forperm _r_115: Ref [MustInvokeUnbounded(_r_115)] :: false) && ((forperm _r_115: Ref [_r_115.MustReleaseBounded] :: false) && (forperm _r_115: Ref [_r_115.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_113: Ref [_r_113.MustReleaseBounded] :: Level(_r_113) <= _current_wait_level_182) && ((forperm _r_113: Ref [_r_113.MustReleaseUnbounded] :: Level(_r_113) <= _current_wait_level_182) && _residue_182 <= _current_wait_level_182), true]
  ensures [true, (forperm _r_114: Ref [MustInvokeBounded(_r_114)] :: false) && ((forperm _r_114: Ref [MustInvokeUnbounded(_r_114)] :: false) && ((forperm _r_114: Ref [_r_114.MustReleaseBounded] :: false) && (forperm _r_114: Ref [_r_114.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var _cwl_182: Perm
  var _method_measures_182: Seq[Measure$]
  _method_measures_182 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_names_0 := (module_names_0 union Set(_single(1953720652)))
  module_names_0 := (module_names_0 union Set(_single(4014035031635169707)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(7303014)))
  module_names_0 := (module_names_0 union Set(_single(65)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(7303014)))
  module_names_0 := (module_names_0 union Set(_single(66)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(7303014)))
  module_names_0 := (module_names_0 union Set(_single(67)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4195635321943923340)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4195636421455551116)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4195637520967178892)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4195638620478806668)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4195639719990434444)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4195640819502062220)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4195641919013689996)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4195643018525317772)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4195644118036945548)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4209146120826034828)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4209427595802745484)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4209709070779456140)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4209990545756166796)))
  assert true && (_single(65) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(4210272020732877452)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(7303014)))
  module_names_0 := (module_names_0 union Set(_single(1702060354)))
  assert true
  assert true && (_single(1702060354) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(7303014)))
  module_names_0 := (module_names_0 union Set(_single(313350000041959791206229316)))
  assert true
  assert true && (_single(1702060354) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(7303014)))
  module_names_0 := (module_names_0 union Set(_single(15927892482688941093593829848973679292)))
  assert true
  assert true && (_single(15927892482688941093593829848973679292) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(7303014)))
  module_names_0 := (module_names_0 union Set(_single(82427503366053041647579674947187865237987679911745263277)))
  assert true
  assert true && (_single(15927892482688941093593829848973679292) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(7303014)))
  module_names_0 := (module_names_0 union Set(_single(94923535277649672830805182682086264378731734294202521261)))
  assert true && (_single(1702060354) in module_names_0) && (_single(313350000041959791206229316) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(4210553495709588108)))
  assert true && (_single(313350000041959791206229316) in module_names_0) && (_single(1702060354) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(4210834970686298764)))
  assert true && (_single(313350000041959791206229316) in module_names_0) && (_single(15927892482688941093593829848973679292) in module_names_0) && (_single(1702060354) in module_names_0) && (_single(82427503366053041647579674947187865237987679911745263277) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(4211116445663009420)))
  assert true && (_single(313350000041959791206229316) in module_names_0) && (_single(15927892482688941093593829848973679292) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(33114163592903344957225313431623963916157043252218600076)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3654843300475539359)))
  module_names_0 := (module_names_0 union Set(_single(3685959420309005536159775523986972348)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4211397920639720076)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4211679395616430732)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4209147220337662604)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3667665809374090141)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3667947284350800797)))
  goto __end
  label __end
}

method list_append(_cthread_10: Ref, _caller_measures_10: Seq[Measure$], _residue_10: Perm, self: Ref, item: Ref) returns (_current_wait_level_10: Perm)
  requires _cthread_10 != null
  requires Measure$check(_caller_measures_10, _cthread_10, 1)
  requires issubtype(typeof(_cthread_10), Thread_0())
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_acc, write)
  requires issubtype(typeof(item), list_arg(typeof(self), 0))
  requires [true, Measure$check(_caller_measures_10, _cthread_10, 1)]
  ensures [(forperm _r_116: Ref [_r_116.MustReleaseBounded] :: Level(_r_116) <= _current_wait_level_10) && ((forperm _r_116: Ref [_r_116.MustReleaseUnbounded] :: Level(_r_116) <= _current_wait_level_10) && _residue_10 <= _current_wait_level_10), true]
  ensures acc(self.list_acc, write)
  ensures self.list_acc == old(self.list_acc) ++ Seq(item)
{
  var _cwl_10: Perm
  inhale false
}