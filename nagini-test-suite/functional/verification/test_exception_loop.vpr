domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function Container(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_Container {
    extends_(Container(), object()) && get_basic(Container()) == Container()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function break_out_exception_threading(): ThreadingID
  
  unique function break_out_exception_2_threading(): ThreadingID
  
  unique function break_out_exception_3_threading(): ThreadingID
  
  unique function break_out_threading(): ThreadingID
  
  unique function break_out_2_threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field Container_value: Ref

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function Level(r: Ref): Perm 


function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

method break_out_exception(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm, c: Ref, b: Ref) returns (_current_wait_level_146: Perm, _err: Ref)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires issubtype(typeof(c), Container())
  requires issubtype(typeof(b), bool())
  requires acc(c.Container_value, write) && issubtype(typeof(c.Container_value), int())
  requires [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_146) && ((forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures _err == null ==> acc(c.Container_value, write) && issubtype(typeof(c.Container_value), int()) && int___eq__(c.Container_value, __prim__int___box__(8))
  ensures _err != null && issubtype(typeof(_err), Exception()) ==> acc(c.Container_value, write) && issubtype(typeof(c.Container_value), int()) && int___eq__(c.Container_value, __prim__int___box__(7))
  ensures _err != null ==> issubtype(typeof(_err), Exception())
  ensures [true, (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))]
{
  var c_4: Ref
  var b_4: Ref
  var _loop_measures: Seq[Measure$]
  var _loop_check_before: Bool
  var _loop_termination_flag: Bool
  var _loop_original_must_terminate: Perm
  var _residue_151: Perm
  var Exception_res: Ref
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq[Measure$]()
  _err := null
  c_4 := c
  b_4 := b
  // Save current MustTerminate amount._loop_original_must_terminate := perm(MustTerminate(_cthread_146))
  // Save loop termination promise._loop_termination_flag := false
  // We are before loop._loop_check_before := true
  while (true)
    invariant [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_151) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_151) && _residue_146 <= _residue_151), true]
    invariant true
    invariant acc(c_4.Container_value, write) && issubtype(typeof(c_4.Container_value), int())
    invariant [true, _loop_check_before ==> _loop_termination_flag || (!true || perm(MustTerminate(_cthread_146)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures := Seq[Measure$]()
    if (bool___unbox__(b_4)) {
      if (perm(_MaySet(c_4, 12015246693702276493947828542597337277)) > none) {
        exhale acc(_MaySet(c_4, 12015246693702276493947828542597337277), write)
        inhale acc(c_4.Container_value, write)
      }
      c_4.Container_value := __prim__int___box__(7)
      Exception_res := new()
      inhale typeof(Exception_res) == Exception()
      _err := Exception_res
      if (_err != null) {
        _err := _err
        goto __end
      }
    } else {
      if (perm(_MaySet(c_4, 12015246693702276493947828542597337277)) > none) {
        exhale acc(_MaySet(c_4, 12015246693702276493947828542597337277), write)
        inhale acc(c_4.Container_value, write)
      }
      c_4.Container_value := __prim__int___box__(8)
      goto post_loop
    }
    label loop_end
    // We are after loop body._loop_check_before := false
    // Check if loop continues to terminate.assert _loop_termination_flag ==> !true
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_146)) > none ==> acc(MustTerminate(_cthread_146), perm(MustTerminate(_cthread_146)) - _loop_original_must_terminate)
  label post_loop
  _err := null
  goto __end
  label __end
}

method break_out_exception_2(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, c_0: Ref, b_0: Ref) returns (_current_wait_level_147: Perm, _err: Ref)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires issubtype(typeof(c_0), Container())
  requires issubtype(typeof(b_0), bool())
  requires acc(c_0.Container_value, write) && issubtype(typeof(c_0.Container_value), int())
  requires [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_147) && ((forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures _err == null ==> acc(c_0.Container_value, write) && issubtype(typeof(c_0.Container_value), int()) && int___eq__(c_0.Container_value, __prim__int___box__(9))
  ensures _err != null && issubtype(typeof(_err), Exception()) ==> acc(c_0.Container_value, write) && issubtype(typeof(c_0.Container_value), int()) && int___eq__(c_0.Container_value, __prim__int___box__(7))
  ensures _err != null ==> issubtype(typeof(_err), Exception())
  ensures [true, (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))]
{
  var c_5: Ref
  var b_5: Ref
  var _loop_measures_0: Seq[Measure$]
  var _loop_check_before_0: Bool
  var _loop_termination_flag_0: Bool
  var _loop_original_must_terminate_0: Perm
  var _residue_152: Perm
  var Exception_res_0: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq[Measure$]()
  _err := null
  c_5 := c_0
  b_5 := b_0
  // Save current MustTerminate amount._loop_original_must_terminate_0 := perm(MustTerminate(_cthread_147))
  // Save loop termination promise._loop_termination_flag_0 := false
  // We are before loop._loop_check_before_0 := true
  while (true)
    invariant [(forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_152) && ((forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_152) && _residue_147 <= _residue_152), true]
    invariant true
    invariant acc(c_5.Container_value, write) && issubtype(typeof(c_5.Container_value), int())
    invariant [true, _loop_check_before_0 ==> _loop_termination_flag_0 || (!true || perm(MustTerminate(_cthread_147)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_0 := Seq[Measure$]()
    if (bool___unbox__(b_5)) {
      if (perm(_MaySet(c_5, 12015246693702276493947828542597337277)) > none) {
        exhale acc(_MaySet(c_5, 12015246693702276493947828542597337277), write)
        inhale acc(c_5.Container_value, write)
      }
      c_5.Container_value := __prim__int___box__(7)
      Exception_res_0 := new()
      inhale typeof(Exception_res_0) == Exception()
      _err := Exception_res_0
      if (_err != null) {
        _err := _err
        goto __end
      }
    } else {
      if (perm(_MaySet(c_5, 12015246693702276493947828542597337277)) > none) {
        exhale acc(_MaySet(c_5, 12015246693702276493947828542597337277), write)
        inhale acc(c_5.Container_value, write)
      }
      c_5.Container_value := __prim__int___box__(8)
      goto post_loop_0
    }
    label loop_end_0
    // We are after loop body._loop_check_before_0 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_0 ==> !true
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_147)) > none ==> acc(MustTerminate(_cthread_147), perm(MustTerminate(_cthread_147)) - _loop_original_must_terminate_0)
  label post_loop_0
  _err := null
  goto __end
  label __end
}

method break_out_exception_3(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, c_1: Ref, b_1: Ref) returns (_current_wait_level_148: Perm, _err: Ref)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires issubtype(typeof(c_1), Container())
  requires issubtype(typeof(b_1), bool())
  requires acc(c_1.Container_value, write) && issubtype(typeof(c_1.Container_value), int())
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_148) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures _err == null ==> acc(c_1.Container_value, write) && issubtype(typeof(c_1.Container_value), int()) && int___eq__(c_1.Container_value, __prim__int___box__(8))
  ensures _err != null && issubtype(typeof(_err), Exception()) ==> acc(c_1.Container_value, write) && issubtype(typeof(c_1.Container_value), int()) && int___eq__(c_1.Container_value, __prim__int___box__(9))
  ensures _err != null ==> issubtype(typeof(_err), Exception())
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var c_6: Ref
  var b_6: Ref
  var _loop_measures_1: Seq[Measure$]
  var _loop_check_before_1: Bool
  var _loop_termination_flag_1: Bool
  var _loop_original_must_terminate_1: Perm
  var _residue_153: Perm
  var Exception_res_1: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq[Measure$]()
  _err := null
  c_6 := c_1
  b_6 := b_1
  // Save current MustTerminate amount._loop_original_must_terminate_1 := perm(MustTerminate(_cthread_148))
  // Save loop termination promise._loop_termination_flag_1 := false
  // We are before loop._loop_check_before_1 := true
  while (true)
    invariant [(forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _residue_153) && ((forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _residue_153) && _residue_148 <= _residue_153), true]
    invariant true
    invariant acc(c_6.Container_value, write) && issubtype(typeof(c_6.Container_value), int())
    invariant [true, _loop_check_before_1 ==> _loop_termination_flag_1 || (!true || perm(MustTerminate(_cthread_148)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_1 := Seq[Measure$]()
    if (bool___unbox__(b_6)) {
      if (perm(_MaySet(c_6, 12015246693702276493947828542597337277)) > none) {
        exhale acc(_MaySet(c_6, 12015246693702276493947828542597337277), write)
        inhale acc(c_6.Container_value, write)
      }
      c_6.Container_value := __prim__int___box__(7)
      Exception_res_1 := new()
      inhale typeof(Exception_res_1) == Exception()
      _err := Exception_res_1
      if (_err != null) {
        _err := _err
        goto __end
      }
    } else {
      if (perm(_MaySet(c_6, 12015246693702276493947828542597337277)) > none) {
        exhale acc(_MaySet(c_6, 12015246693702276493947828542597337277), write)
        inhale acc(c_6.Container_value, write)
      }
      c_6.Container_value := __prim__int___box__(8)
      goto post_loop_1
    }
    label loop_end_1
    // We are after loop body._loop_check_before_1 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_1 ==> !true
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_148)) > none ==> acc(MustTerminate(_cthread_148), perm(MustTerminate(_cthread_148)) - _loop_original_must_terminate_1)
  label post_loop_1
  _err := null
  goto __end
  label __end
}

method break_out(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm, c_2: Ref, b_2: Ref) returns (_current_wait_level_149: Perm, _res: Ref)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires issubtype(typeof(c_2), Container())
  requires issubtype(typeof(b_2), bool())
  requires acc(c_2.Container_value, write) && issubtype(typeof(c_2.Container_value), int())
  requires [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_149) && ((forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures _res == null || issubtype(typeof(_res), int())
  ensures acc(c_2.Container_value, write) && issubtype(typeof(c_2.Container_value), int()) && int___eq__(c_2.Container_value, __prim__int___box__(8))
  ensures [true, (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_7: Ref
  var b_7: Ref
  var _loop_measures_2: Seq[Measure$]
  var _loop_check_before_2: Bool
  var _loop_termination_flag_2: Bool
  var _loop_original_must_terminate_2: Perm
  var _residue_154: Perm
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq[Measure$]()
  _res := null
  _err := null
  c_7 := c_2
  b_7 := b_2
  // Save current MustTerminate amount._loop_original_must_terminate_2 := perm(MustTerminate(_cthread_149))
  // Save loop termination promise._loop_termination_flag_2 := false
  // We are before loop._loop_check_before_2 := true
  while (true)
    invariant [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _residue_154) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _residue_154) && _residue_149 <= _residue_154), true]
    invariant true
    invariant acc(c_7.Container_value, write) && issubtype(typeof(c_7.Container_value), int())
    invariant [true, _loop_check_before_2 ==> _loop_termination_flag_2 || (!true || perm(MustTerminate(_cthread_149)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_2 := Seq[Measure$]()
    if (perm(_MaySet(c_7, 12015246693702276493947828542597337277)) > none) {
      exhale acc(_MaySet(c_7, 12015246693702276493947828542597337277), write)
      inhale acc(c_7.Container_value, write)
    }
    c_7.Container_value := __prim__int___box__(8)
    goto post_loop_2
    label loop_end_2
    // We are after loop body._loop_check_before_2 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_2 ==> !true
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_149)) > none ==> acc(MustTerminate(_cthread_149), perm(MustTerminate(_cthread_149)) - _loop_original_must_terminate_2)
  label post_loop_2
  _res := null
  goto __end
  label __end
}

method break_out_2(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm, c_3: Ref, b_3: Ref) returns (_current_wait_level_150: Perm, _res: Ref)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires issubtype(typeof(c_3), Container())
  requires issubtype(typeof(b_3), bool())
  requires acc(c_3.Container_value, write) && issubtype(typeof(c_3.Container_value), int())
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_21: Ref [_r_21.MustReleaseBounded] :: Level(_r_21) <= _current_wait_level_150) && ((forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: Level(_r_21) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures _res == null || issubtype(typeof(_res), int())
  ensures acc(c_3.Container_value, write) && issubtype(typeof(c_3.Container_value), int()) && int___eq__(c_3.Container_value, __prim__int___box__(9))
  ensures [true, (forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_8: Ref
  var b_8: Ref
  var _loop_measures_3: Seq[Measure$]
  var _loop_check_before_3: Bool
  var _loop_termination_flag_3: Bool
  var _loop_original_must_terminate_3: Perm
  var _residue_155: Perm
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq[Measure$]()
  _res := null
  _err := null
  c_8 := c_3
  b_8 := b_3
  // Save current MustTerminate amount._loop_original_must_terminate_3 := perm(MustTerminate(_cthread_150))
  // Save loop termination promise._loop_termination_flag_3 := false
  // We are before loop._loop_check_before_3 := true
  while (true)
    invariant [(forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _residue_155) && ((forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _residue_155) && _residue_150 <= _residue_155), true]
    invariant true
    invariant acc(c_8.Container_value, write) && issubtype(typeof(c_8.Container_value), int())
    invariant [true, _loop_check_before_3 ==> _loop_termination_flag_3 || (!true || perm(MustTerminate(_cthread_150)) == none && ((forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_3 ==> (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_3 := Seq[Measure$]()
    if (perm(_MaySet(c_8, 12015246693702276493947828542597337277)) > none) {
      exhale acc(_MaySet(c_8, 12015246693702276493947828542597337277), write)
      inhale acc(c_8.Container_value, write)
    }
    c_8.Container_value := __prim__int___box__(8)
    goto post_loop_3
    label loop_end_3
    // We are after loop body._loop_check_before_3 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_3 ==> !true
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_150)) > none ==> acc(MustTerminate(_cthread_150), perm(MustTerminate(_cthread_150)) - _loop_original_must_terminate_3)
  label post_loop_3
  _res := null
  goto __end
  label __end
}

method Container___init__(_cthread_145: Ref, _caller_measures_145: Seq[Measure$], _residue_145: Perm, self: Ref) returns (_current_wait_level_145: Perm)
  requires _cthread_145 != null
  requires issubtype(typeof(_cthread_145), Thread_0())
  requires self != null
  requires acc(_MaySet(self, 12015246693702276493947828542597337277), write)
  requires issubtype(typeof(self), Container())
  requires self != null
  requires [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_26: Ref [MustInvokeBounded(_r_26)] :: false) && ((forperm _r_26: Ref [MustInvokeUnbounded(_r_26)] :: false) && ((forperm _r_26: Ref [_r_26.MustReleaseBounded] :: false) && (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_24: Ref [_r_24.MustReleaseBounded] :: Level(_r_24) <= _current_wait_level_145) && ((forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: Level(_r_24) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]
  ensures acc(self.Container_value, write) && issubtype(typeof(self.Container_value), int()) && int___eq__(self.Container_value, __prim__int___box__(0))
  ensures [true, (forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_0: Ref
  var _cwl_145: Perm
  var _method_measures_145: Seq[Measure$]
  _method_measures_145 := Seq[Measure$]()
  inhale typeof(self) == Container()
  _err := null
  self_0 := self
  if (perm(_MaySet(self_0, 12015246693702276493947828542597337277)) > none) {
    exhale acc(_MaySet(self_0, 12015246693702276493947828542597337277), write)
    inhale acc(self_0.Container_value, write)
  }
  self_0.Container_value := __prim__int___box__(0)
  goto __end
  label __end
}

method main(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_156: Perm) returns (_current_wait_level_151: Perm)
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_151) && ((forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_151) && _residue_156 <= _current_wait_level_151), true]
  ensures [true, (forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var _cwl_151: Perm
  var _method_measures_151: Seq[Measure$]
  _method_measures_151 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_names_0 := (module_names_0 union Set(_single(5123216512802524336881954895)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(4897136316197950463415316291)))
  assert true && (_single(4897136316197950463415316291) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(31493970039360988834698396944762241246170542690)))
  assert true && (_single(4897136316197950463415316291) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(55372894986234456360708438063752878162229851907753151902)))
  assert true && (_single(4897136316197950463415316291) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(55372896447736093691611356267437710878512871563685694878)))
  assert true && (_single(4897136316197950463415316291) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(5900827180183351329034695266)))
  assert true && (_single(4897136316197950463415316291) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(5961722095979955404065305186)))
  goto __end
  label __end
}