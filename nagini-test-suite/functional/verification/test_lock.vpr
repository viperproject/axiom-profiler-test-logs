domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function Cell(): PyType
  
  unique function CellLock(): PyType
  
  unique function CellMonitor(): PyType
  
  unique function NCell(): PyType
  
  unique function NCellLock(): PyType
  
  unique function Lock_basic(): PyType
  
  function Lock(arg0: PyType): PyType
  
  function Lock_arg(typ: PyType, index: Int): PyType
  
  unique function BaseLock(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_Cell {
    extends_(Cell(), object()) && get_basic(Cell()) == Cell()
  }
  
  axiom subtype_CellLock {
    extends_(CellLock(), Lock(Cell())) && get_basic(CellLock()) == CellLock()
  }
  
  axiom subtype_CellMonitor {
    extends_(CellMonitor(), object()) && get_basic(CellMonitor()) == CellMonitor()
  }
  
  axiom subtype_NCell {
    extends_(NCell(), object()) && get_basic(NCell()) == NCell()
  }
  
  axiom subtype_NCellLock {
    extends_(NCellLock(), Lock(NCell())) && get_basic(NCellLock()) == NCellLock()
  }
  
  axiom subtype_Lock {
    (forall T: PyType :: { Lock(T) } extends_(Lock(T), BaseLock()) && get_basic(Lock(T)) == Lock_basic())
  }
  
  axiom Lock_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Lock(arg0)) ==> Lock_arg(Z, 0) == arg0)
  }
  
  axiom subtype_BaseLock {
    extends_(BaseLock(), object()) && get_basic(BaseLock()) == BaseLock()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  unique function get_locked(): Function
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function leak_permission_threading(): ThreadingID
  
  unique function client_1_threading(): ThreadingID
  
  unique function client_2_threading(): ThreadingID
  
  unique function ncell_correct_threading(): ThreadingID
  
  unique function release_fails_assertion_threading(): ThreadingID
  
  unique function ncell_client_correct_threading(): ThreadingID
  
  unique function ncell_share_invariant_fail_threading(): ThreadingID
  
  unique function ncell_share_permission_lost_threading(): ThreadingID
  
  unique function ncell_share_havoc_threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
  
  unique function __init___threading_3(): ThreadingID
  
  unique function acquire_release_correct_threading(): ThreadingID
  
  unique function unspecified_locked_object_threading(): ThreadingID
  
  unique function unspecified_waitlevel_threading(): ThreadingID
  
  unique function no_release_threading(): ThreadingID
  
  unique function release_fails_permission_threading(): ThreadingID
  
  unique function __init___threading_4(): ThreadingID
  
  unique function __init___threading_5(): ThreadingID
  
  unique function acquire_threading(): ThreadingID
  
  unique function release_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field Cell_value: Ref

field CellMonitor_c: Ref

field CellMonitor_l: Ref

field NCell_n: Ref

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function Lock_get_locked(self_9: Ref): Ref
  requires issubtype(typeof(self_9), Lock(Lock_arg(typeof(self_9), 0)))
  requires issubtype(Lock_arg(typeof(self_9), 0), object())
  requires self_9 != null
  ensures issubtype(typeof(result), Lock_arg(typeof(self_9), 0)) 


function __file__(): Ref 


function __name__(): Ref 


function __file___0(): Ref 


function __name___0(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function int___ge__(self: Int, other: Int): Bool 
{
  self >= other
}

function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function int___sub__(self: Int, other: Int): Int 
{
  self - other
}

function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate Lock_invariant(self_13: Ref) {
  true && issubtype(typeof(self_13), Lock(Lock_arg(typeof(self_13), 0))) && ((issubtype(typeof(self_13), Lock(Lock_arg(typeof(self_13), 0))) ==> true) && (issubtype(typeof(self_13), NCellLock()) ==> acc(Lock_get_locked(self_13).NCell_n, write) && issubtype(typeof(Lock_get_locked(self_13).NCell_n), int()) && int___ge__(int___unbox__(Lock_get_locked(self_13).NCell_n), 0)) && (issubtype(typeof(self_13), CellLock()) ==> acc(Lock_get_locked(self_13).Cell_value, write) && issubtype(typeof(Lock_get_locked(self_13).Cell_value), int())))
}

method leak_permission(_cthread_155: Ref, _caller_measures_155: Seq[Measure$], _residue_155: Perm, c: Ref) returns (_current_wait_level_155: Perm)
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires issubtype(typeof(c), Cell())
  requires acc(c.Cell_value, write) && issubtype(typeof(c.Cell_value), int())
  requires [acc(MustTerminate(_cthread_155), write), true]
  requires [true, Measure$check(_caller_measures_155, _cthread_155, 1) || perm(MustTerminate(_cthread_155)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_155) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_155) && _residue_155 <= _current_wait_level_155), true]
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_6: Ref
  var _cwl_155: Perm
  var _method_measures_155: Seq[Measure$]
  _method_measures_155 := Seq(Measure$create(true, _cthread_155, 1))
  _err := null
  c_6 := c
  goto __end
  label __end
}

method client_1(_cthread_156: Ref, _caller_measures_156: Seq[Measure$], _residue_156: Perm) returns (_current_wait_level_156: Perm)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires [true, perm(MustTerminate(_cthread_156)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_156) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]
  ensures [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var twc: Ref
  var CellMonitor_res: Ref
  var _cwl_156: Perm
  var _method_measures_156: Seq[Measure$]
  _method_measures_156 := Seq[Measure$]()
  _err := null
  CellMonitor_res := new()
  inhale typeof(CellMonitor_res) == CellMonitor()
  inhale acc(_MaySet(CellMonitor_res, 10147707306507650856858278064481868477), write)
  inhale acc(_MaySet(CellMonitor_res, 10147708019561113485237316406377421501), write)
  _cwl_156 := CellMonitor___init__(_cthread_156, _method_measures_156, _residue_156, CellMonitor_res)
  twc := CellMonitor_res
  inhale _isDefined(6518644)
  _cwl_156 := Lock_acquire(_cthread_156, _method_measures_156, _residue_156, _checkDefined(twc, 6518644).CellMonitor_l)
  unfold acc(Lock_invariant(_checkDefined(twc, 6518644).CellMonitor_l), write)
  fold acc(Lock_invariant(_checkDefined(twc, 6518644).CellMonitor_l), write)
  _cwl_156 := Lock_release(_cthread_156, _method_measures_156, _residue_156, _checkDefined(twc, 6518644).CellMonitor_l)
  _cwl_156 := CellMonitor_acquire_release_correct(_cthread_156, _method_measures_156, _residue_156, _checkDefined(twc, 6518644))
  goto __end
  label __end
}

method client_2(_cthread_157: Ref, _caller_measures_157: Seq[Measure$], _residue_157: Perm) returns (_current_wait_level_157: Perm)
  requires _cthread_157 != null
  requires issubtype(typeof(_cthread_157), Thread_0())
  requires [true, perm(MustTerminate(_cthread_157)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_157) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]
  ensures [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var twc_0: Ref
  var CellMonitor_res_0: Ref
  var _cwl_157: Perm
  var _method_measures_157: Seq[Measure$]
  _method_measures_157 := Seq[Measure$]()
  _err := null
  CellMonitor_res_0 := new()
  inhale typeof(CellMonitor_res_0) == CellMonitor()
  inhale acc(_MaySet(CellMonitor_res_0, 10147707306507650856858278064481868477), write)
  inhale acc(_MaySet(CellMonitor_res_0, 10147708019561113485237316406377421501), write)
  _cwl_157 := CellMonitor___init__(_cthread_157, _method_measures_157, _residue_157, CellMonitor_res_0)
  twc_0 := CellMonitor_res_0
  inhale _isDefined(3436734602756786316)
  _cwl_157 := CellMonitor_acquire_release_correct(_cthread_157, _method_measures_157, _residue_157, _checkDefined(twc_0, 3436734602756786316))
  goto __end
  label __end
}

method ncell_correct(_cthread_158: Ref, _caller_measures_158: Seq[Measure$], _residue_158: Perm, c_0: Ref, l: Ref) returns (_current_wait_level_158: Perm)
  requires _cthread_158 != null
  requires issubtype(typeof(_cthread_158), Thread_0())
  requires issubtype(typeof(c_0), NCell())
  requires issubtype(typeof(l), NCellLock())
  requires Lock_get_locked(l) == c_0
  requires [_residue_158 < Level(l), true]
  requires [true, (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) < Level(l)) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) < Level(l)) && _residue_158 < Level(l))]
  requires [true, perm(MustTerminate(_cthread_158)) == none && ((forperm _r_11: Ref [MustInvokeBounded(_r_11)] :: false) && ((forperm _r_11: Ref [MustInvokeUnbounded(_r_11)] :: false) && ((forperm _r_11: Ref [_r_11.MustReleaseBounded] :: false) && (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _current_wait_level_158) && ((forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158), true]
  ensures [true, (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_7: Ref
  var l_5: Ref
  var _cwl_158: Perm
  var _method_measures_158: Seq[Measure$]
  _method_measures_158 := Seq[Measure$]()
  _err := null
  c_7 := c_0
  l_5 := l
  _cwl_158 := Lock_acquire(_cthread_158, _method_measures_158, _residue_158, l_5)
  unfold acc(Lock_invariant(l_5), write)
  if (perm(_MaySet(c_7, 3936428728595954866)) > none) {
    exhale acc(_MaySet(c_7, 3936428728595954866), write)
    inhale acc(c_7.NCell_n, write)
  }
  c_7.NCell_n := __prim__int___box__(int___add__(int___unbox__(c_7.NCell_n), 12))
  fold acc(Lock_invariant(l_5), write)
  _cwl_158 := Lock_release(_cthread_158, _method_measures_158, _residue_158, l_5)
  goto __end
  label __end
}

method release_fails_assertion(_cthread_159: Ref, _caller_measures_159: Seq[Measure$], _residue_159: Perm, c_1: Ref, l_0: Ref) returns (_current_wait_level_159: Perm)
  requires _cthread_159 != null
  requires issubtype(typeof(_cthread_159), Thread_0())
  requires issubtype(typeof(c_1), NCell())
  requires issubtype(typeof(l_0), NCellLock())
  requires Lock_get_locked(l_0) == c_1
  requires [_residue_159 < Level(l_0), true]
  requires [true, (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: Level(_r_12) < Level(l_0)) && ((forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: Level(_r_12) < Level(l_0)) && _residue_159 < Level(l_0))]
  requires [true, perm(MustTerminate(_cthread_159)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_13: Ref [_r_13.MustReleaseBounded] :: Level(_r_13) <= _current_wait_level_159) && ((forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: Level(_r_13) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159), true]
  ensures [true, (forperm _r_14: Ref [MustInvokeBounded(_r_14)] :: false) && ((forperm _r_14: Ref [MustInvokeUnbounded(_r_14)] :: false) && ((forperm _r_14: Ref [_r_14.MustReleaseBounded] :: false) && (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_8: Ref
  var l_6: Ref
  var _cwl_159: Perm
  var _method_measures_159: Seq[Measure$]
  _method_measures_159 := Seq[Measure$]()
  _err := null
  c_8 := c_1
  l_6 := l_0
  _cwl_159 := Lock_acquire(_cthread_159, _method_measures_159, _residue_159, l_6)
  unfold acc(Lock_invariant(l_6), write)
  if (perm(_MaySet(c_8, 3936428728595954866)) > none) {
    exhale acc(_MaySet(c_8, 3936428728595954866), write)
    inhale acc(c_8.NCell_n, write)
  }
  c_8.NCell_n := __prim__int___box__(int___sub__(int___unbox__(c_8.NCell_n), 2))
  fold acc(Lock_invariant(l_6), write)
  _cwl_159 := Lock_release(_cthread_159, _method_measures_159, _residue_159, l_6)
  goto __end
  label __end
}

method ncell_client_correct(_cthread_160: Ref, _caller_measures_160: Seq[Measure$], _residue_160: Perm) returns (_current_wait_level_160: Perm)
  requires _cthread_160 != null
  requires issubtype(typeof(_cthread_160), Thread_0())
  requires [true, perm(MustTerminate(_cthread_160)) == none && ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_160) && ((forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160), true]
  ensures [true, (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_2: Ref
  var l_1: Ref
  var NCell_res: Ref
  var NCellLock_res: Ref
  var _cwl_160: Perm
  var _method_measures_160: Seq[Measure$]
  _method_measures_160 := Seq[Measure$]()
  _err := null
  NCell_res := new()
  inhale typeof(NCell_res) == NCell()
  inhale acc(_MaySet(NCell_res, 3936428728595954866), write)
  _cwl_160 := NCell___init__(_cthread_160, _method_measures_160, _residue_160, NCell_res, __prim__int___box__(3))
  c_2 := NCell_res
  inhale _isDefined(3301219)
  NCellLock_res := new()
  inhale typeof(NCellLock_res) == NCellLock()
  inhale Lock_get_locked(NCellLock_res) == _checkDefined(c_2, 3301219)
  fold acc(Lock_invariant(NCellLock_res), write)
  _cwl_160 := Lock___init__(_cthread_160, _method_measures_160, _residue_160, NCellLock_res, _checkDefined(c_2, 3301219), null, null)
  l_1 := NCellLock_res
  inhale _isDefined(3235692)
  _cwl_160 := Lock_acquire(_cthread_160, _method_measures_160, _residue_160, _checkDefined(l_1, 3235692))
  unfold acc(Lock_invariant(_checkDefined(l_1, 3235692)), write)
  assert int___ge__(int___unbox__(_checkDefined(c_2, 3301219).NCell_n), 0)
  fold acc(Lock_invariant(_checkDefined(l_1, 3235692)), write)
  _cwl_160 := Lock_release(_cthread_160, _method_measures_160, _residue_160, _checkDefined(l_1, 3235692))
  assert false
  goto __end
  label __end
}

method ncell_share_invariant_fail(_cthread_161: Ref, _caller_measures_161: Seq[Measure$], _residue_161: Perm) returns (_current_wait_level_161: Perm)
  requires _cthread_161 != null
  requires issubtype(typeof(_cthread_161), Thread_0())
  requires [true, perm(MustTerminate(_cthread_161)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _current_wait_level_161) && ((forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161), true]
  ensures [true, (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_3: Ref
  var l_2: Ref
  var NCell_res_0: Ref
  var NCellLock_res_0: Ref
  var _cwl_161: Perm
  var _method_measures_161: Seq[Measure$]
  _method_measures_161 := Seq[Measure$]()
  _err := null
  NCell_res_0 := new()
  inhale typeof(NCell_res_0) == NCell()
  inhale acc(_MaySet(NCell_res_0, 3936428728595954866), write)
  _cwl_161 := NCell___init__(_cthread_161, _method_measures_161, _residue_161, NCell_res_0, __prim__int___box__(-3))
  c_3 := NCell_res_0
  inhale _isDefined(3366755)
  NCellLock_res_0 := new()
  inhale typeof(NCellLock_res_0) == NCellLock()
  inhale Lock_get_locked(NCellLock_res_0) == _checkDefined(c_3, 3366755)
  fold acc(Lock_invariant(NCellLock_res_0), write)
  _cwl_161 := Lock___init__(_cthread_161, _method_measures_161, _residue_161, NCellLock_res_0, _checkDefined(c_3, 3366755), null, null)
  l_2 := NCellLock_res_0
  inhale _isDefined(3301228)
  goto __end
  label __end
}

method ncell_share_permission_lost(_cthread_162: Ref, _caller_measures_162: Seq[Measure$], _residue_162: Perm) returns (_current_wait_level_162: Perm)
  requires _cthread_162 != null
  requires issubtype(typeof(_cthread_162), Thread_0())
  requires [true, perm(MustTerminate(_cthread_162)) == none && ((forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_22: Ref [_r_22.MustReleaseBounded] :: Level(_r_22) <= _current_wait_level_162) && ((forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: Level(_r_22) <= _current_wait_level_162) && _residue_162 <= _current_wait_level_162), true]
  ensures [true, (forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_4: Ref
  var l_3: Ref
  var NCell_res_1: Ref
  var NCellLock_res_1: Ref
  var _cwl_162: Perm
  var _method_measures_162: Seq[Measure$]
  _method_measures_162 := Seq[Measure$]()
  _err := null
  NCell_res_1 := new()
  inhale typeof(NCell_res_1) == NCell()
  inhale acc(_MaySet(NCell_res_1, 3936428728595954866), write)
  _cwl_162 := NCell___init__(_cthread_162, _method_measures_162, _residue_162, NCell_res_1, __prim__int___box__(3))
  c_4 := NCell_res_1
  inhale _isDefined(3432291)
  NCellLock_res_1 := new()
  inhale typeof(NCellLock_res_1) == NCellLock()
  inhale Lock_get_locked(NCellLock_res_1) == _checkDefined(c_4, 3432291)
  fold acc(Lock_invariant(NCellLock_res_1), write)
  _cwl_162 := Lock___init__(_cthread_162, _method_measures_162, _residue_162, NCellLock_res_1, _checkDefined(c_4, 3432291), null, null)
  l_3 := NCellLock_res_1
  inhale _isDefined(3366764)
  assert int___ge__(int___unbox__(_checkDefined(c_4, 3432291).NCell_n), 0)
  goto __end
  label __end
}

method ncell_share_havoc(_cthread_163: Ref, _caller_measures_163: Seq[Measure$], _residue_163: Perm) returns (_current_wait_level_163: Perm)
  requires _cthread_163 != null
  requires issubtype(typeof(_cthread_163), Thread_0())
  requires [true, perm(MustTerminate(_cthread_163)) == none && ((forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_25: Ref [_r_25.MustReleaseBounded] :: Level(_r_25) <= _current_wait_level_163) && ((forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: Level(_r_25) <= _current_wait_level_163) && _residue_163 <= _current_wait_level_163), true]
  ensures [true, (forperm _r_26: Ref [MustInvokeBounded(_r_26)] :: false) && ((forperm _r_26: Ref [MustInvokeUnbounded(_r_26)] :: false) && ((forperm _r_26: Ref [_r_26.MustReleaseBounded] :: false) && (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_5: Ref
  var l_4: Ref
  var NCell_res_2: Ref
  var NCellLock_res_2: Ref
  var _cwl_163: Perm
  var _method_measures_163: Seq[Measure$]
  _method_measures_163 := Seq[Measure$]()
  _err := null
  NCell_res_2 := new()
  inhale typeof(NCell_res_2) == NCell()
  inhale acc(_MaySet(NCell_res_2, 3936428728595954866), write)
  _cwl_163 := NCell___init__(_cthread_163, _method_measures_163, _residue_163, NCell_res_2, __prim__int___box__(3))
  c_5 := NCell_res_2
  inhale _isDefined(3497827)
  assert int___eq__(_checkDefined(c_5, 3497827).NCell_n, __prim__int___box__(3))
  NCellLock_res_2 := new()
  inhale typeof(NCellLock_res_2) == NCellLock()
  inhale Lock_get_locked(NCellLock_res_2) == _checkDefined(c_5, 3497827)
  fold acc(Lock_invariant(NCellLock_res_2), write)
  _cwl_163 := Lock___init__(_cthread_163, _method_measures_163, _residue_163, NCellLock_res_2, _checkDefined(c_5, 3497827), null, null)
  l_4 := NCellLock_res_2
  inhale _isDefined(3432300)
  _cwl_163 := Lock_acquire(_cthread_163, _method_measures_163, _residue_163, _checkDefined(l_4, 3432300))
  unfold acc(Lock_invariant(_checkDefined(l_4, 3432300)), write)
  assert int___ge__(int___unbox__(_checkDefined(c_5, 3497827).NCell_n), 0)
  assert int___eq__(_checkDefined(c_5, 3497827).NCell_n, __prim__int___box__(3))
  goto __end
  label __end
}

method Cell___init__(_cthread_145: Ref, _caller_measures_145: Seq[Measure$], _residue_145: Perm, self: Ref, val: Ref) returns (_current_wait_level_145: Perm)
  requires _cthread_145 != null
  requires issubtype(typeof(_cthread_145), Thread_0())
  requires self != null
  requires acc(_MaySet(self, 5353397235643131551055373635), write)
  requires issubtype(typeof(self), Cell())
  requires issubtype(typeof(val), int())
  requires self != null
  requires [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_28: Ref [_r_28.MustReleaseBounded] :: Level(_r_28) <= _current_wait_level_145) && ((forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: Level(_r_28) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]
  ensures acc(self.Cell_value, write) && issubtype(typeof(self.Cell_value), int()) && int___eq__(self.Cell_value, val)
  ensures [true, (forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_14: Ref
  var val_1: Ref
  var _cwl_145: Perm
  var _method_measures_145: Seq[Measure$]
  _method_measures_145 := Seq[Measure$]()
  inhale typeof(self) == Cell()
  _err := null
  self_14 := self
  val_1 := val
  if (perm(_MaySet(self_14, 5353397235643131551055373635)) > none) {
    exhale acc(_MaySet(self_14, 5353397235643131551055373635), write)
    inhale acc(self_14.Cell_value, write)
  }
  self_14.Cell_value := val_1
  goto __end
  label __end
}

method CellMonitor___init__(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, self_1: Ref) returns (_current_wait_level_147: Perm)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires self_1 != null
  requires acc(_MaySet(self_1, 10147707306507650856858278064481868477), write)
  requires acc(_MaySet(self_1, 10147708019561113485237316406377421501), write)
  requires issubtype(typeof(self_1), CellMonitor())
  requires self_1 != null
  requires [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_147) && ((forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures acc(self_1.CellMonitor_c, write) && issubtype(typeof(self_1.CellMonitor_c), Cell()) && (acc(self_1.CellMonitor_l, write) && issubtype(typeof(self_1.CellMonitor_l), CellLock()) && Lock_get_locked(self_1.CellMonitor_l) == self_1.CellMonitor_c)
  ensures [_current_wait_level_147 < Level(self_1.CellMonitor_l), true]
  ensures [true, (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))]
  ensures [true, (forperm _r_31: Ref [_r_31.MustReleaseBounded] :: Level(_r_31) < Level(self_1.CellMonitor_l)) && ((forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: Level(_r_31) < Level(self_1.CellMonitor_l)) && _residue_147 < Level(self_1.CellMonitor_l))]
{
  var _err: Ref
  var self_15: Ref
  var Cell_res: Ref
  var CellLock_res: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq[Measure$]()
  inhale typeof(self_1) == CellMonitor()
  _err := null
  self_15 := self_1
  Cell_res := new()
  inhale typeof(Cell_res) == Cell()
  inhale acc(_MaySet(Cell_res, 5353397235643131551055373635), write)
  _cwl_147 := Cell___init__(_cthread_147, _method_measures_147, _residue_147, Cell_res, __prim__int___box__(12))
  if (perm(_MaySet(self_15, 10147707306507650856858278064481868477)) > none) {
    exhale acc(_MaySet(self_15, 10147707306507650856858278064481868477), write)
    inhale acc(self_15.CellMonitor_c, write)
  }
  self_15.CellMonitor_c := Cell_res
  if (perm(_MaySet(self_15.CellMonitor_c, 5353397235643131551055373635)) > none) {
    exhale acc(_MaySet(self_15.CellMonitor_c, 5353397235643131551055373635), write)
    inhale acc(self_15.CellMonitor_c.Cell_value, write)
  }
  self_15.CellMonitor_c.Cell_value := __prim__int___box__(14)
  CellLock_res := new()
  inhale typeof(CellLock_res) == CellLock()
  inhale Lock_get_locked(CellLock_res) == self_15.CellMonitor_c
  fold acc(Lock_invariant(CellLock_res), write)
  _cwl_147 := Lock___init__(_cthread_147, _method_measures_147, _residue_147, CellLock_res, self_15.CellMonitor_c, null, null)
  if (perm(_MaySet(self_15, 10147708019561113485237316406377421501)) > none) {
    exhale acc(_MaySet(self_15, 10147708019561113485237316406377421501), write)
    inhale acc(self_15.CellMonitor_l, write)
  }
  self_15.CellMonitor_l := CellLock_res
  if (perm(_MaySet(self_15.CellMonitor_c, 5353397235643131551055373635)) > none) {
    exhale acc(_MaySet(self_15.CellMonitor_c, 5353397235643131551055373635), write)
    inhale acc(self_15.CellMonitor_c.Cell_value, write)
  }
  self_15.CellMonitor_c.Cell_value := __prim__int___box__(16)
  goto __end
  label __end
}

method CellMonitor_acquire_release_correct(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, self_2: Ref) returns (_current_wait_level_148: Perm)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires issubtype(typeof(self_2), CellMonitor())
  requires self_2 != null
  requires acc(self_2.CellMonitor_l, 1 / 2) && issubtype(typeof(self_2.CellMonitor_l), CellLock()) && (acc(self_2.CellMonitor_c, 1 / 2) && issubtype(typeof(self_2.CellMonitor_c), Cell()) && Lock_get_locked(self_2.CellMonitor_l) == self_2.CellMonitor_c)
  requires [_residue_148 < Level(self_2.CellMonitor_l), true]
  requires [true, (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) < Level(self_2.CellMonitor_l)) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) < Level(self_2.CellMonitor_l)) && _residue_148 < Level(self_2.CellMonitor_l))]
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_38: Ref [MustInvokeBounded(_r_38)] :: false) && ((forperm _r_38: Ref [MustInvokeUnbounded(_r_38)] :: false) && ((forperm _r_38: Ref [_r_38.MustReleaseBounded] :: false) && (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_36: Ref [_r_36.MustReleaseBounded] :: Level(_r_36) <= _current_wait_level_148) && ((forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: Level(_r_36) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures acc(self_2.CellMonitor_l, 1 / 2) && issubtype(typeof(self_2.CellMonitor_l), CellLock()) && (acc(self_2.CellMonitor_c, 1 / 2) && issubtype(typeof(self_2.CellMonitor_c), Cell()))
  ensures false
  ensures [true, (forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_16: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq[Measure$]()
  inhale typeof(self_2) == CellMonitor()
  _err := null
  self_16 := self_2
  _cwl_148 := Lock_acquire(_cthread_148, _method_measures_148, _residue_148, self_16.CellMonitor_l)
  unfold acc(Lock_invariant(self_16.CellMonitor_l), write)
  if (perm(_MaySet(self_16.CellMonitor_c, 5353397235643131551055373635)) > none) {
    exhale acc(_MaySet(self_16.CellMonitor_c, 5353397235643131551055373635), write)
    inhale acc(self_16.CellMonitor_c.Cell_value, write)
  }
  self_16.CellMonitor_c.Cell_value := __prim__int___box__(int___add__(int___unbox__(self_16.CellMonitor_c.Cell_value), 2))
  fold acc(Lock_invariant(self_16.CellMonitor_l), write)
  _cwl_148 := Lock_release(_cthread_148, _method_measures_148, _residue_148, self_16.CellMonitor_l)
  goto __end
  label __end
}

method CellMonitor_unspecified_locked_object(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm, self_3: Ref) returns (_current_wait_level_149: Perm)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires issubtype(typeof(self_3), CellMonitor())
  requires self_3 != null
  requires acc(self_3.CellMonitor_l, 1 / 2) && issubtype(typeof(self_3.CellMonitor_l), CellLock()) && (acc(self_3.CellMonitor_c, 1 / 2) && issubtype(typeof(self_3.CellMonitor_c), Cell()))
  requires [_residue_149 < Level(self_3.CellMonitor_l), true]
  requires [true, (forperm _r_39: Ref [_r_39.MustReleaseBounded] :: Level(_r_39) < Level(self_3.CellMonitor_l)) && ((forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: Level(_r_39) < Level(self_3.CellMonitor_l)) && _residue_149 < Level(self_3.CellMonitor_l))]
  requires [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_42: Ref [MustInvokeBounded(_r_42)] :: false) && ((forperm _r_42: Ref [MustInvokeUnbounded(_r_42)] :: false) && ((forperm _r_42: Ref [_r_42.MustReleaseBounded] :: false) && (forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_40: Ref [_r_40.MustReleaseBounded] :: Level(_r_40) <= _current_wait_level_149) && ((forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: Level(_r_40) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures acc(self_3.CellMonitor_l, 1 / 2) && issubtype(typeof(self_3.CellMonitor_l), CellLock()) && (acc(self_3.CellMonitor_c, 1 / 2) && issubtype(typeof(self_3.CellMonitor_c), Cell()))
  ensures [true, (forperm _r_41: Ref [MustInvokeBounded(_r_41)] :: false) && ((forperm _r_41: Ref [MustInvokeUnbounded(_r_41)] :: false) && ((forperm _r_41: Ref [_r_41.MustReleaseBounded] :: false) && (forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_17: Ref
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq[Measure$]()
  inhale typeof(self_3) == CellMonitor()
  _err := null
  self_17 := self_3
  _cwl_149 := Lock_acquire(_cthread_149, _method_measures_149, _residue_149, self_17.CellMonitor_l)
  unfold acc(Lock_invariant(self_17.CellMonitor_l), write)
  if (perm(_MaySet(self_17.CellMonitor_c, 5353397235643131551055373635)) > none) {
    exhale acc(_MaySet(self_17.CellMonitor_c, 5353397235643131551055373635), write)
    inhale acc(self_17.CellMonitor_c.Cell_value, write)
  }
  self_17.CellMonitor_c.Cell_value := __prim__int___box__(int___add__(int___unbox__(self_17.CellMonitor_c.Cell_value), 2))
  fold acc(Lock_invariant(self_17.CellMonitor_l), write)
  _cwl_149 := Lock_release(_cthread_149, _method_measures_149, _residue_149, self_17.CellMonitor_l)
  goto __end
  label __end
}

method CellMonitor_unspecified_waitlevel(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm, self_4: Ref) returns (_current_wait_level_150: Perm)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires issubtype(typeof(self_4), CellMonitor())
  requires self_4 != null
  requires acc(self_4.CellMonitor_l, 1 / 2) && issubtype(typeof(self_4.CellMonitor_l), CellLock()) && (acc(self_4.CellMonitor_c, 1 / 2) && issubtype(typeof(self_4.CellMonitor_c), Cell()) && Lock_get_locked(self_4.CellMonitor_l) == self_4.CellMonitor_c)
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false) && ((forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false) && ((forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false) && (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_43: Ref [_r_43.MustReleaseBounded] :: Level(_r_43) <= _current_wait_level_150) && ((forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: Level(_r_43) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures acc(self_4.CellMonitor_l, 1 / 2) && issubtype(typeof(self_4.CellMonitor_l), CellLock()) && (acc(self_4.CellMonitor_c, 1 / 2) && issubtype(typeof(self_4.CellMonitor_c), Cell()))
  ensures [true, (forperm _r_44: Ref [MustInvokeBounded(_r_44)] :: false) && ((forperm _r_44: Ref [MustInvokeUnbounded(_r_44)] :: false) && ((forperm _r_44: Ref [_r_44.MustReleaseBounded] :: false) && (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_18: Ref
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq[Measure$]()
  inhale typeof(self_4) == CellMonitor()
  _err := null
  self_18 := self_4
  _cwl_150 := Lock_acquire(_cthread_150, _method_measures_150, _residue_150, self_18.CellMonitor_l)
  unfold acc(Lock_invariant(self_18.CellMonitor_l), write)
  if (perm(_MaySet(self_18.CellMonitor_c, 5353397235643131551055373635)) > none) {
    exhale acc(_MaySet(self_18.CellMonitor_c, 5353397235643131551055373635), write)
    inhale acc(self_18.CellMonitor_c.Cell_value, write)
  }
  self_18.CellMonitor_c.Cell_value := __prim__int___box__(int___add__(int___unbox__(self_18.CellMonitor_c.Cell_value), 2))
  fold acc(Lock_invariant(self_18.CellMonitor_l), write)
  _cwl_150 := Lock_release(_cthread_150, _method_measures_150, _residue_150, self_18.CellMonitor_l)
  goto __end
  label __end
}

method CellMonitor_no_release(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_151: Perm, self_5: Ref) returns (_current_wait_level_151: Perm)
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires issubtype(typeof(self_5), CellMonitor())
  requires self_5 != null
  requires acc(self_5.CellMonitor_l, 1 / 2) && issubtype(typeof(self_5.CellMonitor_l), CellLock()) && (acc(self_5.CellMonitor_c, 1 / 2) && issubtype(typeof(self_5.CellMonitor_c), Cell()) && Lock_get_locked(self_5.CellMonitor_l) == self_5.CellMonitor_c)
  requires [_residue_151 < Level(self_5.CellMonitor_l), true]
  requires [true, (forperm _r_46: Ref [_r_46.MustReleaseBounded] :: Level(_r_46) < Level(self_5.CellMonitor_l)) && ((forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: Level(_r_46) < Level(self_5.CellMonitor_l)) && _residue_151 < Level(self_5.CellMonitor_l))]
  requires [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_49: Ref [MustInvokeBounded(_r_49)] :: false) && ((forperm _r_49: Ref [MustInvokeUnbounded(_r_49)] :: false) && ((forperm _r_49: Ref [_r_49.MustReleaseBounded] :: false) && (forperm _r_49: Ref [_r_49.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_47: Ref [_r_47.MustReleaseBounded] :: Level(_r_47) <= _current_wait_level_151) && ((forperm _r_47: Ref [_r_47.MustReleaseUnbounded] :: Level(_r_47) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]
  ensures acc(self_5.CellMonitor_l, 1 / 2) && issubtype(typeof(self_5.CellMonitor_l), CellLock()) && (acc(self_5.CellMonitor_c, 1 / 2) && issubtype(typeof(self_5.CellMonitor_c), Cell()))
  ensures [true, (forperm _r_48: Ref [MustInvokeBounded(_r_48)] :: false) && ((forperm _r_48: Ref [MustInvokeUnbounded(_r_48)] :: false) && ((forperm _r_48: Ref [_r_48.MustReleaseBounded] :: false) && (forperm _r_48: Ref [_r_48.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_19: Ref
  var _cwl_151: Perm
  var _method_measures_151: Seq[Measure$]
  _method_measures_151 := Seq[Measure$]()
  inhale typeof(self_5) == CellMonitor()
  _err := null
  self_19 := self_5
  _cwl_151 := Lock_acquire(_cthread_151, _method_measures_151, _residue_151, self_19.CellMonitor_l)
  unfold acc(Lock_invariant(self_19.CellMonitor_l), write)
  if (perm(_MaySet(self_19.CellMonitor_c, 5353397235643131551055373635)) > none) {
    exhale acc(_MaySet(self_19.CellMonitor_c, 5353397235643131551055373635), write)
    inhale acc(self_19.CellMonitor_c.Cell_value, write)
  }
  self_19.CellMonitor_c.Cell_value := __prim__int___box__(int___add__(int___unbox__(self_19.CellMonitor_c.Cell_value), 2))
  goto __end
  label __end
}

method CellMonitor_release_fails_permission(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm, self_6: Ref) returns (_current_wait_level_152: Perm)
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires issubtype(typeof(self_6), CellMonitor())
  requires self_6 != null
  requires acc(self_6.CellMonitor_l, 1 / 2) && issubtype(typeof(self_6.CellMonitor_l), CellLock()) && (acc(self_6.CellMonitor_c, 1 / 2) && issubtype(typeof(self_6.CellMonitor_c), Cell()) && Lock_get_locked(self_6.CellMonitor_l) == self_6.CellMonitor_c)
  requires [_residue_152 < Level(self_6.CellMonitor_l), true]
  requires [true, (forperm _r_50: Ref [_r_50.MustReleaseBounded] :: Level(_r_50) < Level(self_6.CellMonitor_l)) && ((forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: Level(_r_50) < Level(self_6.CellMonitor_l)) && _residue_152 < Level(self_6.CellMonitor_l))]
  requires [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_53: Ref [MustInvokeBounded(_r_53)] :: false) && ((forperm _r_53: Ref [MustInvokeUnbounded(_r_53)] :: false) && ((forperm _r_53: Ref [_r_53.MustReleaseBounded] :: false) && (forperm _r_53: Ref [_r_53.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_51: Ref [_r_51.MustReleaseBounded] :: Level(_r_51) <= _current_wait_level_152) && ((forperm _r_51: Ref [_r_51.MustReleaseUnbounded] :: Level(_r_51) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures acc(self_6.CellMonitor_l, 1 / 2) && issubtype(typeof(self_6.CellMonitor_l), CellLock()) && (acc(self_6.CellMonitor_c, 1 / 2) && issubtype(typeof(self_6.CellMonitor_c), Cell()))
  ensures [true, (forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_20: Ref
  var _cwl_152: Perm
  var _method_measures_152: Seq[Measure$]
  _method_measures_152 := Seq[Measure$]()
  inhale typeof(self_6) == CellMonitor()
  _err := null
  self_20 := self_6
  _cwl_152 := Lock_acquire(_cthread_152, _method_measures_152, _residue_152, self_20.CellMonitor_l)
  unfold acc(Lock_invariant(self_20.CellMonitor_l), write)
  if (perm(_MaySet(self_20.CellMonitor_c, 5353397235643131551055373635)) > none) {
    exhale acc(_MaySet(self_20.CellMonitor_c, 5353397235643131551055373635), write)
    inhale acc(self_20.CellMonitor_c.Cell_value, write)
  }
  self_20.CellMonitor_c.Cell_value := __prim__int___box__(int___add__(int___unbox__(self_20.CellMonitor_c.Cell_value), 2))
  _cwl_152 := leak_permission(_cthread_152, _method_measures_152, _residue_152, self_20.CellMonitor_c)
  fold acc(Lock_invariant(self_20.CellMonitor_l), write)
  _cwl_152 := Lock_release(_cthread_152, _method_measures_152, _residue_152, self_20.CellMonitor_l)
  goto __end
  label __end
}

method NCell___init__(_cthread_153: Ref, _caller_measures_153: Seq[Measure$], _residue_153: Perm, self_7: Ref, val_0: Ref) returns (_current_wait_level_153: Perm)
  requires _cthread_153 != null
  requires issubtype(typeof(_cthread_153), Thread_0())
  requires self_7 != null
  requires acc(_MaySet(self_7, 3936428728595954866), write)
  requires issubtype(typeof(self_7), NCell())
  requires issubtype(typeof(val_0), int())
  requires self_7 != null
  requires [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_56: Ref [MustInvokeBounded(_r_56)] :: false) && ((forperm _r_56: Ref [MustInvokeUnbounded(_r_56)] :: false) && ((forperm _r_56: Ref [_r_56.MustReleaseBounded] :: false) && (forperm _r_56: Ref [_r_56.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_54: Ref [_r_54.MustReleaseBounded] :: Level(_r_54) <= _current_wait_level_153) && ((forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: Level(_r_54) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]
  ensures acc(self_7.NCell_n, write) && issubtype(typeof(self_7.NCell_n), int()) && int___eq__(self_7.NCell_n, val_0)
  ensures [true, (forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_21: Ref
  var val_2: Ref
  var _cwl_153: Perm
  var _method_measures_153: Seq[Measure$]
  _method_measures_153 := Seq[Measure$]()
  inhale typeof(self_7) == NCell()
  _err := null
  self_21 := self_7
  val_2 := val_0
  if (perm(_MaySet(self_21, 3936428728595954866)) > none) {
    exhale acc(_MaySet(self_21, 3936428728595954866), write)
    inhale acc(self_21.NCell_n, write)
  }
  self_21.NCell_n := val_2
  goto __end
  label __end
}

method Lock___init__(_cthread_165: Ref, _caller_measures_165: Seq[Measure$], _residue_165: Perm, self_10: Ref, locked_object: Ref, above: Ref, below: Ref) returns (_current_wait_level_165: Perm)
  requires _cthread_165 != null
  requires issubtype(typeof(_cthread_165), Thread_0())
  requires self_10 != null
  requires issubtype(typeof(self_10), Lock(Lock_arg(typeof(self_10), 0)))
  requires issubtype(typeof(locked_object), Lock_arg(typeof(self_10), 0))
  requires above == null || issubtype(typeof(above), BaseLock())
  requires below == null || issubtype(typeof(below), BaseLock())
  requires issubtype(Lock_arg(typeof(self_10), 0), object())
  requires self_10 != null
  requires [acc(MustTerminate(_cthread_165), write), true]
  requires above == null && below != null ==> [_residue_165 < Level(below), true]
  requires above != null && below != null ==> Level(above) < Level(below)
  requires acc(Lock_invariant(self_10), write)
  requires [true, above == null && below != null ==> (forperm _r_57: Ref [_r_57.MustReleaseBounded] :: Level(_r_57) < Level(below)) && ((forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: Level(_r_57) < Level(below)) && _residue_165 < Level(below))]
  requires [true, Measure$check(_caller_measures_165, _cthread_165, 1) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_59: Ref [_r_59.MustReleaseBounded] :: Level(_r_59) <= _current_wait_level_165) && ((forperm _r_59: Ref [_r_59.MustReleaseUnbounded] :: Level(_r_59) <= _current_wait_level_165) && _residue_165 <= _current_wait_level_165), true]
  ensures above == null ==> [_current_wait_level_165 < Level(self_10), true]
  ensures above != null ==> Level(above) < Level(self_10)
  ensures below != null ==> Level(self_10) < Level(below)
{
  var _cwl_165: Perm
  inhale typeof(self_10) == Lock(Lock_arg(typeof(self_10), 0))
  inhale false
}

method Lock_acquire(_cthread_166: Ref, _caller_measures_166: Seq[Measure$], _residue_166: Perm, self_11: Ref) returns (_current_wait_level_166: Perm)
  requires _cthread_166 != null
  requires issubtype(typeof(_cthread_166), Thread_0())
  requires issubtype(typeof(self_11), Lock(Lock_arg(typeof(self_11), 0)))
  requires issubtype(Lock_arg(typeof(self_11), 0), object())
  requires self_11 != null
  requires [acc(MustTerminate(_cthread_166), write), true]
  requires [_residue_166 < Level(self_11), true]
  requires true
  requires true
  requires [true, (forperm _r_61: Ref [_r_61.MustReleaseBounded] :: Level(_r_61) < Level(self_11)) && ((forperm _r_61: Ref [_r_61.MustReleaseUnbounded] :: Level(_r_61) < Level(self_11)) && _residue_166 < Level(self_11))]
  requires [true, Measure$check(_caller_measures_166, _cthread_166, 1) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_63: Ref [MustInvokeBounded(_r_63)] :: false) && ((forperm _r_63: Ref [MustInvokeUnbounded(_r_63)] :: false) && ((forperm _r_63: Ref [_r_63.MustReleaseBounded] :: false) && (forperm _r_63: Ref [_r_63.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_62: Ref [_r_62.MustReleaseBounded] :: Level(_r_62) <= _current_wait_level_166) && ((forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: Level(_r_62) <= _current_wait_level_166) && _residue_166 <= _current_wait_level_166), true]
  ensures acc(Lock_invariant(self_11), write)
  ensures [acc(self_11.MustReleaseUnbounded, write), acc(self_11.MustReleaseUnbounded, write)]
{
  var _cwl_166: Perm
  inhale typeof(self_11) == Lock(Lock_arg(typeof(self_11), 0))
  inhale false
}

method Lock_release(_cthread_167: Ref, _caller_measures_167: Seq[Measure$], _residue_167: Perm, self_12: Ref) returns (_current_wait_level_167: Perm)
  requires _cthread_167 != null
  requires issubtype(typeof(_cthread_167), Thread_0())
  requires issubtype(typeof(self_12), Lock(Lock_arg(typeof(self_12), 0)))
  requires issubtype(Lock_arg(typeof(self_12), 0), object())
  requires self_12 != null
  requires [acc(MustTerminate(_cthread_167), write), true]
  requires [acc(self_12.MustReleaseBounded, write), (perm(self_12.MustReleaseBounded) > none && Measure$check(_caller_measures_167, self_12, 1) ? acc(self_12.MustReleaseBounded, write) : acc(self_12.MustReleaseUnbounded, write))]
  requires acc(Lock_invariant(self_12), write)
  requires true
  requires true
  requires [true, Measure$check(_caller_measures_167, _cthread_167, 1) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_64: Ref [_r_64.MustReleaseBounded] :: Level(_r_64) <= _current_wait_level_167) && ((forperm _r_64: Ref [_r_64.MustReleaseUnbounded] :: Level(_r_64) <= _current_wait_level_167) && _residue_167 <= _current_wait_level_167), true]
{
  var _cwl_167: Perm
  inhale typeof(self_12) == Lock(Lock_arg(typeof(self_12), 0))
  inhale false
}

method main(_cthread_169: Ref, _caller_measures_169: Seq[Measure$], _residue_169: Perm) returns (_current_wait_level_169: Perm)
  requires _cthread_169 != null
  requires issubtype(typeof(_cthread_169), Thread_0())
  requires [true, perm(MustTerminate(_cthread_169)) == none && ((forperm _r_68: Ref [MustInvokeBounded(_r_68)] :: false) && ((forperm _r_68: Ref [MustInvokeUnbounded(_r_68)] :: false) && ((forperm _r_68: Ref [_r_68.MustReleaseBounded] :: false) && (forperm _r_68: Ref [_r_68.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_66: Ref [_r_66.MustReleaseBounded] :: Level(_r_66) <= _current_wait_level_169) && ((forperm _r_66: Ref [_r_66.MustReleaseUnbounded] :: Level(_r_66) <= _current_wait_level_169) && _residue_169 <= _current_wait_level_169), true]
  ensures [true, (forperm _r_67: Ref [MustInvokeBounded(_r_67)] :: false) && ((forperm _r_67: Ref [MustInvokeUnbounded(_r_67)] :: false) && ((forperm _r_67: Ref [_r_67.MustReleaseBounded] :: false) && (forperm _r_67: Ref [_r_67.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var module_defined_1: Bool
  var module_names_1: Set[_Name]
  var _cwl_169: Perm
  var _method_measures_169: Seq[Measure$]
  _method_measures_169 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_defined_1 := false
  module_names_1 := Set[_Name]()
  module_names_1 := (module_names_1 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file___0()._val, 99 / 100) && issubtype(typeof(__file___0()._val), str()) && issubtype(typeof(__file___0()._val), str())
  module_names_1 := (module_names_1 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name___0()._val, 99 / 100) && issubtype(typeof(__name___0()._val), str()) && issubtype(typeof(__name___0()._val), str()) && !str___eq__(str___create__(8, 2489249333222104298408468319), __name___0()._val)
  if (!module_defined_1) {
    module_defined_1 := true
    module_names_1 := (module_names_1 union Set(_single(3682427259782798009)))
    module_names_1 := (module_names_1 union Set(_single(5123216512802524336881954895)))
    module_names_1 := (module_names_1 union Set(_single(3686932966091490988)))
    module_names_1 := (module_names_1 union Set(_single(11116006324067352974226974112924930237)))
    module_names_1 := (module_names_1 union Set(_single(4264095844347449787)))
    module_names_1 := (module_names_1 union Set(_single(3939413879042314935)))
    module_names_1 := (module_names_1 union Set(_single(7827276)))
    module_names_1 := (module_names_1 union Set(_single(3584533797388877637428408140)))
    module_names_1 := (module_names_1 union Set(_single(5969745018335918569738826320)))
    module_names_1 := (module_names_1 union Set(_single(1701999952)))
    module_names_1 := (module_names_1 union Set(_single(7136376649266381199951095122)))
    module_names_1 := (module_names_1 union Set(_single(4659879962334230944322642242)))
    module_names_1 := (module_names_1 union Set(_single(3655571673241459380)))
    module_names_1 := (module_names_1 union Set(_single(5020080360567004017642927437)))
    module_names_1 := (module_names_1 union Set(_single(5460990052674857173734662115181759155)))
    module_names_1 := (module_names_1 union Set(_single(4900434677047853433511043415)))
    assert true && (_single(4659879962334230944322642242) in module_names_1) && (_single(4659879962334230944322642242) in module_names_1)
    assert true && (_single(4659879962334230944322642242) in module_names_1)
    module_names_1 := (module_names_1 union Set(_single(3493880855485680332086796127)))
    module_names_1 := (module_names_1 union Set(_single(4196433967405385533277627751)))
    module_names_1 := (module_names_1 union Set(_single(4259881987508968607)))
    module_names_1 := (module_names_1 union Set(_single(3682719749203270286)))
    module_names_1 := (module_names_1 union Set(_single(1801678668)))
  }
  assert (_single(1801678668) in module_names_1)
  module_names_0 := (module_names_0 union Set(_single(1801678668)))
  module_names_0 := (module_names_0 union Set(_single(3655571673241459380)))
  module_names_0 := (module_names_0 union Set(_single(4900434677047853433511043415)))
  module_names_0 := (module_names_0 union Set(_single(5460990052674857173734662115181759155)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(1819043139)))
  assert true
  assert true && (_single(1801678668) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(5199367835812990865954858307)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(94095402818451118327225466985208042021429372045912611999)))
  module_names_0 := (module_names_0 union Set(_single(198430886370893722258482044227639219380112873221370358900496494197)))
  module_names_0 := (module_names_0 union Set(_single(41021883307049266118028362975714389992870850880372248971)))
  module_names_0 := (module_names_0 union Set(_single(4113934450279089716288515950)))
  module_names_0 := (module_names_0 union Set(_single(9691922931183936376608126783374606286470683710892206118828533106)))
  module_names_0 := (module_names_0 union Set(_single(5034875793301896060426020163)))
  assert true && (_single(1819043139) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(5554072092161834318829637098962590356)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(2599749752028828573)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(2671807346066756509)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(3905362027553143986)))
  assert true
  assert true && (_single(1801678668) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(3966445269985614482286920526)))
  assert true && (_single(3905362027553143986) in module_names_0) && (_single(3966445269985614482286920526) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(14747379813896592790413689725958921362)))
  assert true && (_single(3905362027553143986) in module_names_0) && (_single(3966445269985614482286920526) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(53529798461536915385466028328851889482604280874206993038)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(86272208963371896004423340119387160107963918544910589074)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(147394763163979923345157700124599516022699144539919546146753962862)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(169017534179020846702663400889892781181807056400250654670931190638)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(19475504670593498915689050931554607675895800686)))
  goto __end
  label __end
}