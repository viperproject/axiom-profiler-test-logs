domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function Super(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_Super {
    extends_(Super(), object()) && get_basic(Super()) == Super()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function test_constr_threading(): ThreadingID
  
  unique function test_constr_arg_threading(): ThreadingID
  
  unique function test_in_threading(): ThreadingID
  
  unique function test_add_threading(): ThreadingID
  
  unique function test_clear_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function list___contains__(self: Ref, item: Ref): Bool
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_acc, wildcard)
  ensures result == (item in self.list_acc) 


function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function set___contains__(self: Ref, item: Ref): Bool
  requires issubtype(typeof(self), set(set_arg(typeof(self), 0)))
  requires acc(self.set_acc, wildcard)
  ensures result == (item in self.set_acc) 


function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

method test_constr(_cthread_145: Ref, _caller_measures_145: Seq[Measure$], _residue_145: Perm) returns (_current_wait_level_145: Perm)
  requires _cthread_145 != null
  requires issubtype(typeof(_cthread_145), Thread_0())
  requires [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_145) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var super1: Ref
  var super5: Ref
  var super6: Ref
  var myset: Ref
  var empty_set: Ref
  var Super_res: Ref
  var Super_res_0: Ref
  var Super_res_1: Ref
  var set_0: Ref
  var set_1: Ref
  var _cwl_145: Perm
  var _method_measures_145: Seq[Measure$]
  _method_measures_145 := Seq[Measure$]()
  _err := null
  Super_res := new()
  inhale typeof(Super_res) == Super()
  super1 := Super_res
  inhale _isDefined(3654790029996165773)
  Super_res_0 := new()
  inhale typeof(Super_res_0) == Super()
  super5 := Super_res_0
  inhale _isDefined(3654794428042676877)
  Super_res_1 := new()
  inhale typeof(Super_res_1) == Super()
  super6 := Super_res_1
  inhale _isDefined(3654795527554304653)
  _cwl_145, set_0 := set___init__(_cthread_145, _method_measures_145, _residue_145)
  inhale issubtype(typeof(set_0), set(Super()))
  assert issubtype(typeof(_checkDefined(super1, 3654790029996165773)), Super())
  assert issubtype(typeof(_checkDefined(super5, 3654794428042676877)), Super())
  assert issubtype(typeof(_checkDefined(super6, 3654795527554304653)), Super())
  set_0.set_acc := Set(_checkDefined(super1, 3654790029996165773), _checkDefined(super5, 3654794428042676877), _checkDefined(super6, 3654795527554304653))
  myset := set_0
  inhale _isDefined(3655160561119561363)
  _cwl_145, set_1 := set___init__(_cthread_145, _method_measures_145, _residue_145)
  inhale issubtype(typeof(set_1), set(Super()))
  empty_set := set_1
  inhale _isDefined(4900737535690922846550256997)
  goto __end
  label __end
}

method test_constr_arg(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm) returns (_current_wait_level_146: Perm)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_146) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l: Ref
  var s: Ref
  var list_0: Ref
  var set_2: Ref
  var havoc_set: Set[Ref]
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq[Measure$]()
  _err := null
  _cwl_146, list_0 := list___init__(_cthread_146, _method_measures_146, _residue_146)
  inhale issubtype(typeof(list_0), list(int()))
  assert issubtype(typeof(__prim__int___box__(1)), int())
  assert issubtype(typeof(__prim__int___box__(2)), int())
  assert issubtype(typeof(__prim__int___box__(3)), int())
  list_0.list_acc := Seq(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
  l := list_0
  inhale _isDefined(108)
  _cwl_146, set_2 := set___init__(_cthread_146, _method_measures_146, _residue_146)
  inhale issubtype(typeof(set_2), set(int()))
  set_2.set_acc := havoc_set
  inhale (forall item: Ref :: { set___contains__(set_2, item) } list___contains__(_checkDefined(l, 108), item) == set___contains__(set_2, item))
  s := set_2
  inhale _isDefined(115)
  assert set___contains__(_checkDefined(s, 115), __prim__int___box__(3))
  assert set___contains__(_checkDefined(s, 115), __prim__int___box__(5))
  goto __end
  label __end
}

method test_in(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm) returns (_current_wait_level_147: Perm)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_147) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var super1_0: Ref
  var super5_0: Ref
  var super6_0: Ref
  var super8: Ref
  var super55: Ref
  var myset_0: Ref
  var empty_set_0: Ref
  var Super_res_2: Ref
  var Super_res_3: Ref
  var Super_res_4: Ref
  var Super_res_5: Ref
  var Super_res_6: Ref
  var set_3: Ref
  var set_4: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq[Measure$]()
  _err := null
  Super_res_2 := new()
  inhale typeof(Super_res_2) == Super()
  super1_0 := Super_res_2
  inhale _isDefined(2528608652471798413)
  Super_res_3 := new()
  inhale typeof(Super_res_3) == Super()
  super5_0 := Super_res_3
  inhale _isDefined(2528613050518309517)
  Super_res_4 := new()
  inhale typeof(Super_res_4) == Super()
  super6_0 := Super_res_4
  inhale _isDefined(2528614150029937293)
  Super_res_5 := new()
  inhale typeof(Super_res_5) == Super()
  super8 := Super_res_5
  inhale _isDefined(3654797726577560205)
  Super_res_6 := new()
  inhale typeof(Super_res_6) == Super()
  super55 := Super_res_6
  inhale _isDefined(3669712601808341645)
  _cwl_147, set_3 := set___init__(_cthread_147, _method_measures_147, _residue_147)
  inhale issubtype(typeof(set_3), set(Super()))
  assert issubtype(typeof(_checkDefined(super1_0, 2528608652471798413)), Super())
  assert issubtype(typeof(_checkDefined(super5_0, 2528613050518309517)), Super())
  assert issubtype(typeof(_checkDefined(super6_0, 2528614150029937293)), Super())
  set_3.set_acc := Set(_checkDefined(super1_0, 2528608652471798413), _checkDefined(super5_0, 2528613050518309517), _checkDefined(super6_0, 2528614150029937293))
  myset_0 := set_3
  inhale _isDefined(3668775813606311571)
  _cwl_147, set_4 := set___init__(_cthread_147, _method_measures_147, _residue_147)
  inhale issubtype(typeof(set_4), set(Super()))
  empty_set_0 := set_4
  inhale _isDefined(4959214599848297663231454565)
  assert set___contains__(_checkDefined(myset_0, 3668775813606311571), _checkDefined(super1_0, 2528608652471798413))
  assert set___contains__(_checkDefined(myset_0, 3668775813606311571), _checkDefined(super6_0, 2528614150029937293))
  assert !set___contains__(_checkDefined(myset_0, 3668775813606311571), _checkDefined(super8, 3654797726577560205))
  assert !set___contains__(_checkDefined(empty_set_0, 4959214599848297663231454565), _checkDefined(super1_0, 2528608652471798413))
  assert set___contains__(_checkDefined(myset_0, 3668775813606311571), __prim__int___box__(55))
  goto __end
  label __end
}

method test_add(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm) returns (_current_wait_level_148: Perm)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_148) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures [true, (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var super1_1: Ref
  var super5_1: Ref
  var super6_1: Ref
  var super8_0: Ref
  var super17: Ref
  var super34: Ref
  var super36: Ref
  var super987: Ref
  var myset_1: Ref
  var empty_set_1: Ref
  var Super_res_7: Ref
  var Super_res_8: Ref
  var Super_res_9: Ref
  var Super_res_10: Ref
  var Super_res_11: Ref
  var Super_res_12: Ref
  var Super_res_13: Ref
  var Super_res_14: Ref
  var set_5: Ref
  var set_6: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq[Measure$]()
  _err := null
  Super_res_7 := new()
  inhale typeof(Super_res_7) == Super()
  super1_1 := Super_res_7
  inhale _isDefined(2600666246509726349)
  Super_res_8 := new()
  inhale typeof(Super_res_8) == Super()
  super5_1 := Super_res_8
  inhale _isDefined(2600670644556237453)
  Super_res_9 := new()
  inhale typeof(Super_res_9) == Super()
  super6_1 := Super_res_9
  inhale _isDefined(2600671744067865229)
  Super_res_10 := new()
  inhale typeof(Super_res_10) == Super()
  super8_0 := Super_res_10
  inhale _isDefined(2528616349053192845)
  Super_res_11 := new()
  inhale typeof(Super_res_11) == Super()
  super17 := Super_res_11
  inhale _isDefined(3670271153715251853)
  Super_res_12 := new()
  inhale typeof(Super_res_12) == Super()
  super34 := Super_res_12
  inhale _isDefined(3669428927808375437)
  Super_res_13 := new()
  inhale typeof(Super_res_13) == Super()
  super36 := Super_res_13
  inhale _isDefined(3669991877761796749)
  Super_res_14 := new()
  inhale typeof(Super_res_14) == Super()
  super987 := Super_res_14
  inhale _isDefined(3022043082738600589)
  _cwl_148, set_5 := set___init__(_cthread_148, _method_measures_148, _residue_148)
  inhale issubtype(typeof(set_5), set(Super()))
  assert issubtype(typeof(_checkDefined(super1_1, 2600666246509726349)), Super())
  assert issubtype(typeof(_checkDefined(super5_1, 2600670644556237453)), Super())
  assert issubtype(typeof(_checkDefined(super6_1, 2600671744067865229)), Super())
  set_5.set_acc := Set(_checkDefined(super1_1, 2600666246509726349), _checkDefined(super5_1, 2600670644556237453), _checkDefined(super6_1, 2600671744067865229))
  myset_1 := set_5
  inhale _isDefined(3669057288583022227)
  _cwl_148, set_6 := set___init__(_cthread_148, _method_measures_148, _residue_148)
  inhale issubtype(typeof(set_6), set(Super()))
  empty_set_1 := set_6
  inhale _isDefined(4960423525667912292406160741)
  assert !set___contains__(_checkDefined(myset_1, 3669057288583022227), _checkDefined(super8_0, 2528616349053192845))
  _cwl_148 := set_add(_cthread_148, _method_measures_148, _residue_148, _checkDefined(myset_1, 3669057288583022227), _checkDefined(super8_0, 2528616349053192845))
  assert set___contains__(_checkDefined(myset_1, 3669057288583022227), _checkDefined(super8_0, 2528616349053192845))
  assert set___contains__(_checkDefined(myset_1, 3669057288583022227), _checkDefined(super1_1, 2600666246509726349))
  assert !set___contains__(_checkDefined(myset_1, 3669057288583022227), _checkDefined(super17, 3670271153715251853))
  _cwl_148 := set_add(_cthread_148, _method_measures_148, _residue_148, _checkDefined(empty_set_1, 4960423525667912292406160741), _checkDefined(super34, 3669428927808375437))
  assert set___contains__(_checkDefined(empty_set_1, 4960423525667912292406160741), _checkDefined(super34, 3669428927808375437))
  assert !set___contains__(_checkDefined(empty_set_1, 4960423525667912292406160741), _checkDefined(super36, 3669991877761796749))
  _cwl_148 := set_add(_cthread_148, _method_measures_148, _residue_148, _checkDefined(empty_set_1, 4960423525667912292406160741), _checkDefined(super987, 3022043082738600589))
  assert !set___contains__(_checkDefined(empty_set_1, 4960423525667912292406160741), _checkDefined(super987, 3022043082738600589))
  goto __end
  label __end
}

method test_clear(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm) returns (_current_wait_level_149: Perm)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_149) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var super1_2: Ref
  var super5_2: Ref
  var super6_2: Ref
  var super17_0: Ref
  var super55_0: Ref
  var myset_2: Ref
  var empty_set_2: Ref
  var Super_res_15: Ref
  var Super_res_16: Ref
  var Super_res_17: Ref
  var Super_res_18: Ref
  var Super_res_19: Ref
  var set_7: Ref
  var set_8: Ref
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq[Measure$]()
  _err := null
  Super_res_15 := new()
  inhale typeof(Super_res_15) == Super()
  super1_2 := Super_res_15
  inhale _isDefined(2672723840547654285)
  Super_res_16 := new()
  inhale typeof(Super_res_16) == Super()
  super5_2 := Super_res_16
  inhale _isDefined(2672728238594165389)
  Super_res_17 := new()
  inhale typeof(Super_res_17) == Super()
  super6_2 := Super_res_17
  inhale _isDefined(2672729338105793165)
  Super_res_18 := new()
  inhale typeof(Super_res_18) == Super()
  super17_0 := Super_res_18
  inhale _isDefined(2775345522263807207142356339)
  Super_res_19 := new()
  inhale typeof(Super_res_19) == Super()
  super55_0 := Super_res_19
  inhale _isDefined(2774146041177716869164987763)
  _cwl_149, set_7 := set___init__(_cthread_149, _method_measures_149, _residue_149)
  inhale issubtype(typeof(set_7), set(Super()))
  assert issubtype(typeof(_checkDefined(super1_2, 2672723840547654285)), Super())
  assert issubtype(typeof(_checkDefined(super5_2, 2672728238594165389)), Super())
  assert issubtype(typeof(_checkDefined(super6_2, 2672729338105793165)), Super())
  set_7.set_acc := Set(_checkDefined(super1_2, 2672723840547654285), _checkDefined(super5_2, 2672728238594165389), _checkDefined(super6_2, 2672729338105793165))
  myset_2 := set_7
  inhale _isDefined(3669338763559732883)
  _cwl_149, set_8 := set___init__(_cthread_149, _method_measures_149, _residue_149)
  inhale issubtype(typeof(set_8), set(Super()))
  empty_set_2 := set_8
  inhale _isDefined(4961632451487526921580866917)
  _cwl_149 := set_add(_cthread_149, _method_measures_149, _residue_149, _checkDefined(empty_set_2, 4961632451487526921580866917), _checkDefined(super55_0, 2774146041177716869164987763))
  _cwl_149 := set_clear(_cthread_149, _method_measures_149, _residue_149, _checkDefined(myset_2, 3669338763559732883))
  assert !set___contains__(_checkDefined(myset_2, 3669338763559732883), _checkDefined(super1_2, 2672723840547654285))
  assert !set___contains__(_checkDefined(myset_2, 3669338763559732883), _checkDefined(super17_0, 2775345522263807207142356339))
  assert set___contains__(_checkDefined(empty_set_2, 4961632451487526921580866917), _checkDefined(super55_0, 2774146041177716869164987763))
  assert set___contains__(_checkDefined(myset_2, 3669338763559732883), _checkDefined(super5_2, 2672728238594165389))
  goto __end
  label __end
}

method main(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm) returns (_current_wait_level_150: Perm)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_150) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  assert true
  module_names_0 := (module_names_0 union Set(_single(3654736085206928045)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(6430274070833178792508482932)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(13681420901225626557965459023731661452)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4226659142033250956)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4737827748752115401565103476)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4897950818346640018777531764)))
  goto __end
  label __end
}

method list___init__(_cthread_9: Ref, _caller_measures_9: Seq[Measure$], _residue_9: Perm) returns (_current_wait_level_9: Perm, res: Ref)
  requires _cthread_9 != null
  requires Measure$check(_caller_measures_9, _cthread_9, 1)
  requires issubtype(typeof(_cthread_9), Thread_0())
  requires [true, Measure$check(_caller_measures_9, _cthread_9, 1)]
  ensures [(forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_9) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_9) && _residue_9 <= _current_wait_level_9), true]
  ensures acc(res.list_acc, write)
  ensures res.list_acc == Seq[Ref]()
  ensures typeof(res) == list(list_arg(typeof(res), 0))
  ensures Low(res)
{
  var _cwl_9: Perm
  inhale false
}

method set___init__(_cthread_22: Ref, _caller_measures_22: Seq[Measure$], _residue_22: Perm) returns (_current_wait_level_22: Perm, res: Ref)
  requires _cthread_22 != null
  requires Measure$check(_caller_measures_22, _cthread_22, 1)
  requires issubtype(typeof(_cthread_22), Thread_0())
  requires [true, Measure$check(_caller_measures_22, _cthread_22, 1)]
  ensures [(forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _current_wait_level_22) && ((forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _current_wait_level_22) && _residue_22 <= _current_wait_level_22), true]
  ensures acc(res.set_acc, write)
  ensures res.set_acc == Set[Ref]()
  ensures typeof(res) == set(set_arg(typeof(res), 0))
{
  var _cwl_22: Perm
  inhale false
}

method set_add(_cthread_23: Ref, _caller_measures_23: Seq[Measure$], _residue_23: Perm, self: Ref, item: Ref) returns (_current_wait_level_23: Perm)
  requires _cthread_23 != null
  requires Measure$check(_caller_measures_23, _cthread_23, 1)
  requires issubtype(typeof(_cthread_23), Thread_0())
  requires issubtype(typeof(self), set(set_arg(typeof(self), 0)))
  requires acc(self.set_acc, write)
  requires issubtype(typeof(item), set_arg(typeof(self), 0))
  requires [true, Measure$check(_caller_measures_23, _cthread_23, 1)]
  ensures [(forperm _r_21: Ref [_r_21.MustReleaseBounded] :: Level(_r_21) <= _current_wait_level_23) && ((forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: Level(_r_21) <= _current_wait_level_23) && _residue_23 <= _current_wait_level_23), true]
  ensures acc(self.set_acc, write)
  ensures self.set_acc == (old(self.set_acc) union Set(item))
{
  var _cwl_23: Perm
  inhale false
}

method set_clear(_cthread_25: Ref, _caller_measures_25: Seq[Measure$], _residue_25: Perm, self: Ref) returns (_current_wait_level_25: Perm)
  requires _cthread_25 != null
  requires Measure$check(_caller_measures_25, _cthread_25, 1)
  requires issubtype(typeof(_cthread_25), Thread_0())
  requires issubtype(typeof(self), set(set_arg(typeof(self), 0)))
  requires acc(self.set_acc, write)
  requires [true, Measure$check(_caller_measures_25, _cthread_25, 1)]
  ensures [(forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_25) && ((forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_25) && _residue_25 <= _current_wait_level_25), true]
  ensures acc(self.set_acc, write)
  ensures self.set_acc == Set[Ref]()
{
  var _cwl_25: Perm
  inhale false
}