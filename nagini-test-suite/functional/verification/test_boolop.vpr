domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function Container(): PyType
  
  unique function A(): PyType
  
  unique function B(): PyType
  
  unique function C(): PyType
  
  unique function D(): PyType
  
  unique function E(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_Container {
    extends_(Container(), object()) && get_basic(Container()) == Container()
  }
  
  axiom subtype_A {
    extends_(A(), object()) && get_basic(A()) == A()
  }
  
  axiom subtype_B {
    extends_(B(), A()) && get_basic(B()) == B()
  }
  
  axiom subtype_C {
    extends_(C(), A()) && get_basic(C()) == C()
  }
  
  axiom subtype_D {
    extends_(D(), object()) && get_basic(D()) == D()
  }
  
  axiom subtype_E {
    extends_(E(), object()) && get_basic(E()) == E()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function m_threading(): ThreadingID
  
  unique function m2_threading(): ThreadingID
  
  unique function m3_threading(): ThreadingID
  
  unique function m4_threading(): ThreadingID
  
  unique function m5_threading(): ThreadingID
  
  unique function m_f_threading(): ThreadingID
  
  unique function m2_f_threading(): ThreadingID
  
  unique function m3_f_threading(): ThreadingID
  
  unique function m4_f_threading(): ThreadingID
  
  unique function m5_f_threading(): ThreadingID
  
  unique function m_type_threading(): ThreadingID
  
  unique function m_type_2_threading(): ThreadingID
  
  unique function m_type_f_threading(): ThreadingID
  
  unique function m_type_2_f_threading(): ThreadingID
  
  unique function m_stmt_or_threading(): ThreadingID
  
  unique function m_stmt_or_2_threading(): ThreadingID
  
  unique function m_stmt_and_threading(): ThreadingID
  
  unique function m_stmt_and_2_threading(): ThreadingID
  
  unique function m_stmt_and_3_threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
  
  unique function test_threading(): ThreadingID
  
  unique function __init___threading_3(): ThreadingID
  
  unique function __init___threading_4(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field Container_value: Ref

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function object___bool__(self: Ref): Bool
  ensures self == null ==> !result
  ensures self != null ==> (let t == (typeof(self)) in !issubtype(t, list(list_arg(t, 0))) && (!issubtype(t, set(set_arg(t, 0))) && !issubtype(t, dict(dict_arg(t, 0), dict_arg(t, 1)))) ==> result) 


function int___bool__(self: Ref): Bool
  requires self != null ==> issubtype(typeof(self), int())
  ensures self == null ==> !result
  ensures self != null ==> result == (int___unbox__(self) != 0) 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function object___eq__(self: Ref, other: Ref): Bool
  ensures self == other ==> result
  ensures (self == null) != (other == null) ==> !result 


function list___bool__(self: Ref): Bool
  requires self != null ==> issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires self != null ==> acc(self.list_acc, wildcard)
  ensures self == null ==> !result
  ensures self != null ==> result == (|self.list_acc| != 0) 


function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

method m_0(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm) returns (_current_wait_level_149: Perm)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_149) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a: Ref
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq[Measure$]()
  _err := null
  a := (int___bool__(__prim__int___box__(3)) ? (int___bool__(__prim__int___box__(4)) ? __prim__int___box__(5) : __prim__int___box__(4)) : __prim__int___box__(3))
  inhale _isDefined(97)
  assert int___eq__(_checkDefined(a, 97), __prim__int___box__(5))
  goto __end
  label __end
}

method m2(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm) returns (_current_wait_level_150: Perm)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_150) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_0: Ref
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq[Measure$]()
  _err := null
  a_0 := (int___bool__(__prim__int___box__(3)) ? __prim__int___box__(3) : (int___bool__(__prim__int___box__(4)) ? __prim__int___box__(4) : __prim__int___box__(5)))
  inhale _isDefined(3170145)
  assert int___eq__(_checkDefined(a_0, 3170145), __prim__int___box__(3))
  goto __end
  label __end
}

method m3(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_151: Perm) returns (_current_wait_level_151: Perm)
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_151) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]
  ensures [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var empty: Ref
  var a_1: Ref
  var list_0: Ref
  var _cwl_151: Perm
  var _method_measures_151: Seq[Measure$]
  _method_measures_151 := Seq[Measure$]()
  _err := null
  _cwl_151, list_0 := list___init__(_cthread_151, _method_measures_151, _residue_151)
  inhale issubtype(typeof(list_0), list(int()))
  empty := list_0
  inhale _isDefined(4195163710912696987)
  a_1 := (int___bool__(__prim__int___box__(3)) ? (list___bool__(_checkDefined(empty, 4195163710912696987)) ? __prim__int___box__(5) : _checkDefined(empty, 4195163710912696987)) : __prim__int___box__(3))
  inhale _isDefined(3235681)
  assert _checkDefined(a_1, 3235681) == _checkDefined(empty, 4195163710912696987)
  goto __end
  label __end
}

method m4(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm) returns (_current_wait_level_152: Perm)
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_152) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures [true, (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var empty_0: Ref
  var a_2: Ref
  var list_1: Ref
  var _cwl_152: Perm
  var _method_measures_152: Seq[Measure$]
  _method_measures_152 := Seq[Measure$]()
  _err := null
  _cwl_152, list_1 := list___init__(_cthread_152, _method_measures_152, _residue_152)
  inhale issubtype(typeof(list_1), list(int()))
  empty_0 := list_1
  inhale _isDefined(4208778963399447195)
  a_2 := (int___bool__(__prim__int___box__(3)) ? __prim__int___box__(3) : (list___bool__(_checkDefined(empty_0, 4208778963399447195)) ? _checkDefined(empty_0, 4208778963399447195) : __prim__int___box__(5)))
  inhale _isDefined(3301217)
  assert (issubtype(typeof(_checkDefined(a_2, 3301217)), list(list_arg(typeof(_checkDefined(a_2, 3301217)), 0))) ? object___eq__(_checkDefined(a_2, 3301217), __prim__int___box__(3)) : int___eq__(_checkDefined(a_2, 3301217), __prim__int___box__(3)))
  goto __end
  label __end
}

method m5(_cthread_153: Ref, _caller_measures_153: Seq[Measure$], _residue_153: Perm) returns (_current_wait_level_153: Perm)
  requires _cthread_153 != null
  requires issubtype(typeof(_cthread_153), Thread_0())
  requires [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_153) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var empty_1: Ref
  var a_3: Ref
  var list_2: Ref
  var _cwl_153: Perm
  var _method_measures_153: Seq[Measure$]
  _method_measures_153 := Seq[Measure$]()
  _err := null
  _cwl_153, list_2 := list___init__(_cthread_153, _method_measures_153, _residue_153)
  inhale issubtype(typeof(list_2), list(int()))
  empty_1 := list_2
  inhale _isDefined(4209060438376157851)
  a_3 := (list___bool__(_checkDefined(empty_1, 4209060438376157851)) ? _checkDefined(empty_1, 4209060438376157851) : (int___bool__(__prim__int___box__(4)) ? __prim__int___box__(4) : __prim__int___box__(5)))
  inhale _isDefined(3366753)
  assert (issubtype(typeof(_checkDefined(a_3, 3366753)), list(list_arg(typeof(_checkDefined(a_3, 3366753)), 0))) ? object___eq__(_checkDefined(a_3, 3366753), __prim__int___box__(4)) : int___eq__(_checkDefined(a_3, 3366753), __prim__int___box__(4)))
  goto __end
  label __end
}

method m_f(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm) returns (_current_wait_level_154: Perm)
  requires _cthread_154 != null
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_154) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]
  ensures [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_4: Ref
  var _cwl_154: Perm
  var _method_measures_154: Seq[Measure$]
  _method_measures_154 := Seq[Measure$]()
  _err := null
  a_4 := (int___bool__(__prim__int___box__(3)) ? (int___bool__(__prim__int___box__(4)) ? __prim__int___box__(5) : __prim__int___box__(4)) : __prim__int___box__(3))
  inhale _isDefined(3432289)
  assert int___eq__(_checkDefined(a_4, 3432289), __prim__int___box__(4))
  goto __end
  label __end
}

method m2_f(_cthread_155: Ref, _caller_measures_155: Seq[Measure$], _residue_155: Perm) returns (_current_wait_level_155: Perm)
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires [true, perm(MustTerminate(_cthread_155)) == none && ((forperm _r_19: Ref [MustInvokeBounded(_r_19)] :: false) && ((forperm _r_19: Ref [MustInvokeUnbounded(_r_19)] :: false) && ((forperm _r_19: Ref [_r_19.MustReleaseBounded] :: false) && (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_155) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_155) && _residue_155 <= _current_wait_level_155), true]
  ensures [true, (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var a_5: Ref
  var _cwl_155: Perm
  var _method_measures_155: Seq[Measure$]
  _method_measures_155 := Seq[Measure$]()
  _err := null
  a_5 := (int___bool__(__prim__int___box__(3)) ? __prim__int___box__(3) : (int___bool__(__prim__int___box__(4)) ? __prim__int___box__(4) : __prim__int___box__(5)))
  inhale _isDefined(3497825)
  assert int___eq__(_checkDefined(a_5, 3497825), __prim__int___box__(4))
  goto __end
  label __end
}

method m3_f(_cthread_156: Ref, _caller_measures_156: Seq[Measure$], _residue_156: Perm) returns (_current_wait_level_156: Perm)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires [true, perm(MustTerminate(_cthread_156)) == none && ((forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_156) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]
  ensures [true, (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var empty_2: Ref
  var a_6: Ref
  var list_3: Ref
  var _cwl_156: Perm
  var _method_measures_156: Seq[Measure$]
  _method_measures_156 := Seq[Measure$]()
  _err := null
  _cwl_156, list_3 := list___init__(_cthread_156, _method_measures_156, _residue_156)
  inhale issubtype(typeof(list_3), list(int()))
  empty_2 := list_3
  inhale _isDefined(4209341913352868507)
  a_6 := (int___bool__(__prim__int___box__(3)) ? (list___bool__(_checkDefined(empty_2, 4209341913352868507)) ? __prim__int___box__(5) : _checkDefined(empty_2, 4209341913352868507)) : __prim__int___box__(3))
  inhale _isDefined(3563361)
  assert _checkDefined(a_6, 3563361) == __prim__int___box__(5)
  goto __end
  label __end
}

method m4_f(_cthread_157: Ref, _caller_measures_157: Seq[Measure$], _residue_157: Perm) returns (_current_wait_level_157: Perm)
  requires _cthread_157 != null
  requires issubtype(typeof(_cthread_157), Thread_0())
  requires [true, perm(MustTerminate(_cthread_157)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_157) && ((forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]
  ensures [true, (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var empty_3: Ref
  var a_7: Ref
  var list_4: Ref
  var _cwl_157: Perm
  var _method_measures_157: Seq[Measure$]
  _method_measures_157 := Seq[Measure$]()
  _err := null
  _cwl_157, list_4 := list___init__(_cthread_157, _method_measures_157, _residue_157)
  inhale issubtype(typeof(list_4), list(int()))
  empty_3 := list_4
  inhale _isDefined(4209623388329579163)
  a_7 := (int___bool__(__prim__int___box__(3)) ? __prim__int___box__(3) : (list___bool__(_checkDefined(empty_3, 4209623388329579163)) ? _checkDefined(empty_3, 4209623388329579163) : __prim__int___box__(5)))
  inhale _isDefined(3628897)
  assert (issubtype(typeof(_checkDefined(a_7, 3628897)), list(list_arg(typeof(_checkDefined(a_7, 3628897)), 0))) ? object___eq__(_checkDefined(a_7, 3628897), __prim__int___box__(5)) : int___eq__(_checkDefined(a_7, 3628897), __prim__int___box__(5)))
  goto __end
  label __end
}

method m5_f(_cthread_158: Ref, _caller_measures_158: Seq[Measure$], _residue_158: Perm) returns (_current_wait_level_158: Perm)
  requires _cthread_158 != null
  requires issubtype(typeof(_cthread_158), Thread_0())
  requires [true, perm(MustTerminate(_cthread_158)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_158) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158), true]
  ensures [true, (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var empty_4: Ref
  var a_8: Ref
  var list_5: Ref
  var _cwl_158: Perm
  var _method_measures_158: Seq[Measure$]
  _method_measures_158 := Seq[Measure$]()
  _err := null
  _cwl_158, list_5 := list___init__(_cthread_158, _method_measures_158, _residue_158)
  inhale issubtype(typeof(list_5), list(int()))
  empty_4 := list_5
  inhale _isDefined(4209904863306289819)
  a_8 := (list___bool__(_checkDefined(empty_4, 4209904863306289819)) ? _checkDefined(empty_4, 4209904863306289819) : (int___bool__(__prim__int___box__(4)) ? __prim__int___box__(4) : __prim__int___box__(5)))
  inhale _isDefined(3694433)
  assert _checkDefined(a_8, 3694433) == _checkDefined(empty_4, 4209904863306289819)
  goto __end
  label __end
}

method m_type(_cthread_159: Ref, _caller_measures_159: Seq[Measure$], _residue_159: Perm) returns (_current_wait_level_159: Perm)
  requires _cthread_159 != null
  requires issubtype(typeof(_cthread_159), Thread_0())
  requires [true, perm(MustTerminate(_cthread_159)) == none && ((forperm _r_31: Ref [MustInvokeBounded(_r_31)] :: false) && ((forperm _r_31: Ref [MustInvokeUnbounded(_r_31)] :: false) && ((forperm _r_31: Ref [_r_31.MustReleaseBounded] :: false) && (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_159) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159), true]
  ensures [true, (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_1: Ref
  var Container_res: Ref
  var B_res: Ref
  var C_res: Ref
  var _cwl_159: Perm
  var _method_measures_159: Seq[Measure$]
  _method_measures_159 := Seq[Measure$]()
  _err := null
  Container_res := new()
  inhale typeof(Container_res) == Container()
  inhale acc(_MaySet(Container_res, 12015246693702276493947828542597337277), write)
  _cwl_159 := Container___init__(_cthread_159, _method_measures_159, _residue_159, Container_res)
  c_1 := Container_res
  inhale _isDefined(3235683)
  B_res := new()
  inhale typeof(B_res) == B()
  if (!object___bool__(B_res)) {
    C_res := new()
    inhale typeof(C_res) == C()
  }
  _cwl_159 := A_test(_cthread_159, _method_measures_159, _residue_159, (object___bool__(B_res) ? B_res : C_res), _checkDefined(c_1, 3235683))
  assert int___eq__(_checkDefined(c_1, 3235683).Container_value, __prim__int___box__(5))
  goto __end
  label __end
}

method m_type_2(_cthread_160: Ref, _caller_measures_160: Seq[Measure$], _residue_160: Perm) returns (_current_wait_level_160: Perm, _res: Ref)
  requires _cthread_160 != null
  requires issubtype(typeof(_cthread_160), Thread_0())
  requires [true, perm(MustTerminate(_cthread_160)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_160) && ((forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160), true]
  ensures issubtype(typeof(_res), A())
  ensures [true, (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_2: Ref
  var Container_res_0: Ref
  var B_res_0: Ref
  var C_res_0: Ref
  var _cwl_160: Perm
  var _method_measures_160: Seq[Measure$]
  _method_measures_160 := Seq[Measure$]()
  _res := null
  _err := null
  Container_res_0 := new()
  inhale typeof(Container_res_0) == Container()
  inhale acc(_MaySet(Container_res_0, 12015246693702276493947828542597337277), write)
  _cwl_160 := Container___init__(_cthread_160, _method_measures_160, _residue_160, Container_res_0)
  c_2 := Container_res_0
  inhale _isDefined(3301219)
  B_res_0 := new()
  inhale typeof(B_res_0) == B()
  if (object___bool__(B_res_0)) {
    C_res_0 := new()
    inhale typeof(C_res_0) == C()
  }
  _res := (object___bool__(B_res_0) ? C_res_0 : B_res_0)
  goto __end
  goto __end
  label __end
}

method m_type_f(_cthread_161: Ref, _caller_measures_161: Seq[Measure$], _residue_161: Perm) returns (_current_wait_level_161: Perm)
  requires _cthread_161 != null
  requires issubtype(typeof(_cthread_161), Thread_0())
  requires [true, perm(MustTerminate(_cthread_161)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_161) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161), true]
  ensures [true, (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_3: Ref
  var Container_res_1: Ref
  var B_res_1: Ref
  var C_res_1: Ref
  var _cwl_161: Perm
  var _method_measures_161: Seq[Measure$]
  _method_measures_161 := Seq[Measure$]()
  _err := null
  Container_res_1 := new()
  inhale typeof(Container_res_1) == Container()
  inhale acc(_MaySet(Container_res_1, 12015246693702276493947828542597337277), write)
  _cwl_161 := Container___init__(_cthread_161, _method_measures_161, _residue_161, Container_res_1)
  c_3 := Container_res_1
  inhale _isDefined(3366755)
  B_res_1 := new()
  inhale typeof(B_res_1) == B()
  if (!object___bool__(B_res_1)) {
    C_res_1 := new()
    inhale typeof(C_res_1) == C()
  }
  _cwl_161 := A_test(_cthread_161, _method_measures_161, _residue_161, (object___bool__(B_res_1) ? B_res_1 : C_res_1), _checkDefined(c_3, 3366755))
  assert false
  goto __end
  label __end
}

method m_type_2_f(_cthread_162: Ref, _caller_measures_162: Seq[Measure$], _residue_162: Perm) returns (_current_wait_level_162: Perm, _res: Ref)
  requires _cthread_162 != null
  requires issubtype(typeof(_cthread_162), Thread_0())
  requires [true, perm(MustTerminate(_cthread_162)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_162) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_162) && _residue_162 <= _current_wait_level_162), true]
  ensures issubtype(typeof(_res), A())
  ensures false
  ensures [true, (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_4: Ref
  var Container_res_2: Ref
  var B_res_2: Ref
  var C_res_2: Ref
  var _cwl_162: Perm
  var _method_measures_162: Seq[Measure$]
  _method_measures_162 := Seq[Measure$]()
  _res := null
  _err := null
  Container_res_2 := new()
  inhale typeof(Container_res_2) == Container()
  inhale acc(_MaySet(Container_res_2, 12015246693702276493947828542597337277), write)
  _cwl_162 := Container___init__(_cthread_162, _method_measures_162, _residue_162, Container_res_2)
  c_4 := Container_res_2
  inhale _isDefined(3432291)
  B_res_2 := new()
  inhale typeof(B_res_2) == B()
  if (object___bool__(B_res_2)) {
    C_res_2 := new()
    inhale typeof(C_res_2) == C()
  }
  _res := (object___bool__(B_res_2) ? C_res_2 : B_res_2)
  goto __end
  goto __end
  label __end
}

method m_stmt_or(_cthread_163: Ref, _caller_measures_163: Seq[Measure$], _residue_163: Perm) returns (_current_wait_level_163: Perm)
  requires _cthread_163 != null
  requires issubtype(typeof(_cthread_163), Thread_0())
  requires [true, perm(MustTerminate(_cthread_163)) == none && ((forperm _r_43: Ref [MustInvokeBounded(_r_43)] :: false) && ((forperm _r_43: Ref [MustInvokeUnbounded(_r_43)] :: false) && ((forperm _r_43: Ref [_r_43.MustReleaseBounded] :: false) && (forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_41: Ref [_r_41.MustReleaseBounded] :: Level(_r_41) <= _current_wait_level_163) && ((forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: Level(_r_41) <= _current_wait_level_163) && _residue_163 <= _current_wait_level_163), true]
  ensures [true, (forperm _r_42: Ref [MustInvokeBounded(_r_42)] :: false) && ((forperm _r_42: Ref [MustInvokeUnbounded(_r_42)] :: false) && ((forperm _r_42: Ref [_r_42.MustReleaseBounded] :: false) && (forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_5: Ref
  var a_9: Ref
  var Container_res_3: Ref
  var E_res: Ref
  var D_res: Ref
  var _cwl_163: Perm
  var _method_measures_163: Seq[Measure$]
  _method_measures_163 := Seq[Measure$]()
  _err := null
  Container_res_3 := new()
  inhale typeof(Container_res_3) == Container()
  inhale acc(_MaySet(Container_res_3, 12015246693702276493947828542597337277), write)
  _cwl_163 := Container___init__(_cthread_163, _method_measures_163, _residue_163, Container_res_3)
  c_5 := Container_res_3
  inhale _isDefined(3497827)
  E_res := new()
  inhale typeof(E_res) == E()
  _cwl_163 := E___init__(_cthread_163, _method_measures_163, _residue_163, E_res, _checkDefined(c_5, 3497827))
  if (!object___bool__(E_res)) {
    D_res := new()
    inhale typeof(D_res) == D()
    _cwl_163 := D___init__(_cthread_163, _method_measures_163, _residue_163, D_res)
  }
  a_9 := (object___bool__(E_res) ? E_res : D_res)
  inhale _isDefined(3759969)
  assert int___eq__(_checkDefined(c_5, 3497827).Container_value, __prim__int___box__(5))
  goto __end
  label __end
}

method m_stmt_or_2(_cthread_164: Ref, _caller_measures_164: Seq[Measure$], _residue_164: Perm) returns (_current_wait_level_164: Perm)
  requires _cthread_164 != null
  requires issubtype(typeof(_cthread_164), Thread_0())
  requires [true, perm(MustTerminate(_cthread_164)) == none && ((forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_44: Ref [_r_44.MustReleaseBounded] :: Level(_r_44) <= _current_wait_level_164) && ((forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: Level(_r_44) <= _current_wait_level_164) && _residue_164 <= _current_wait_level_164), true]
  ensures [true, (forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false) && ((forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false) && ((forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false) && (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_6: Ref
  var l: Ref
  var a_10: Ref
  var Container_res_4: Ref
  var list_6: Ref
  var D_res_0: Ref
  var _cwl_164: Perm
  var _method_measures_164: Seq[Measure$]
  _method_measures_164 := Seq[Measure$]()
  _err := null
  Container_res_4 := new()
  inhale typeof(Container_res_4) == Container()
  inhale acc(_MaySet(Container_res_4, 12015246693702276493947828542597337277), write)
  _cwl_164 := Container___init__(_cthread_164, _method_measures_164, _residue_164, Container_res_4)
  c_6 := Container_res_4
  inhale _isDefined(3563363)
  _cwl_164, list_6 := list___init__(_cthread_164, _method_measures_164, _residue_164)
  inhale issubtype(typeof(list_6), list(int()))
  l := list_6
  inhale _isDefined(108)
  if (!list___bool__(_checkDefined(l, 108))) {
    D_res_0 := new()
    inhale typeof(D_res_0) == D()
    _cwl_164 := D___init__(_cthread_164, _method_measures_164, _residue_164, D_res_0)
  }
  a_10 := (list___bool__(_checkDefined(l, 108)) ? _checkDefined(l, 108) : D_res_0)
  inhale _isDefined(808542049)
  goto __end
  label __end
}

method m_stmt_and(_cthread_165: Ref, _caller_measures_165: Seq[Measure$], _residue_165: Perm) returns (_current_wait_level_165: Perm)
  requires _cthread_165 != null
  requires issubtype(typeof(_cthread_165), Thread_0())
  requires [true, perm(MustTerminate(_cthread_165)) == none && ((forperm _r_49: Ref [MustInvokeBounded(_r_49)] :: false) && ((forperm _r_49: Ref [MustInvokeUnbounded(_r_49)] :: false) && ((forperm _r_49: Ref [_r_49.MustReleaseBounded] :: false) && (forperm _r_49: Ref [_r_49.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_47: Ref [_r_47.MustReleaseBounded] :: Level(_r_47) <= _current_wait_level_165) && ((forperm _r_47: Ref [_r_47.MustReleaseUnbounded] :: Level(_r_47) <= _current_wait_level_165) && _residue_165 <= _current_wait_level_165), true]
  ensures [true, (forperm _r_48: Ref [MustInvokeBounded(_r_48)] :: false) && ((forperm _r_48: Ref [MustInvokeUnbounded(_r_48)] :: false) && ((forperm _r_48: Ref [_r_48.MustReleaseBounded] :: false) && (forperm _r_48: Ref [_r_48.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_7: Ref
  var a_11: Ref
  var Container_res_5: Ref
  var E_res_0: Ref
  var D_res_1: Ref
  var _cwl_165: Perm
  var _method_measures_165: Seq[Measure$]
  _method_measures_165 := Seq[Measure$]()
  _err := null
  Container_res_5 := new()
  inhale typeof(Container_res_5) == Container()
  inhale acc(_MaySet(Container_res_5, 12015246693702276493947828542597337277), write)
  _cwl_165 := Container___init__(_cthread_165, _method_measures_165, _residue_165, Container_res_5)
  c_7 := Container_res_5
  inhale _isDefined(3628899)
  E_res_0 := new()
  inhale typeof(E_res_0) == E()
  _cwl_165 := E___init__(_cthread_165, _method_measures_165, _residue_165, E_res_0, _checkDefined(c_7, 3628899))
  if (object___bool__(E_res_0)) {
    D_res_1 := new()
    inhale typeof(D_res_1) == D()
    _cwl_165 := D___init__(_cthread_165, _method_measures_165, _residue_165, D_res_1)
  }
  a_11 := (object___bool__(E_res_0) ? D_res_1 : E_res_0)
  inhale _isDefined(825319265)
  goto __end
  label __end
}

method m_stmt_and_2(_cthread_166: Ref, _caller_measures_166: Seq[Measure$], _residue_166: Perm) returns (_current_wait_level_166: Perm)
  requires _cthread_166 != null
  requires issubtype(typeof(_cthread_166), Thread_0())
  requires [true, perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_50: Ref [_r_50.MustReleaseBounded] :: Level(_r_50) <= _current_wait_level_166) && ((forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: Level(_r_50) <= _current_wait_level_166) && _residue_166 <= _current_wait_level_166), true]
  ensures [true, (forperm _r_51: Ref [MustInvokeBounded(_r_51)] :: false) && ((forperm _r_51: Ref [MustInvokeUnbounded(_r_51)] :: false) && ((forperm _r_51: Ref [_r_51.MustReleaseBounded] :: false) && (forperm _r_51: Ref [_r_51.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_8: Ref
  var a_12: Ref
  var Container_res_6: Ref
  var E_res_1: Ref
  var E_res_2: Ref
  var _cwl_166: Perm
  var _method_measures_166: Seq[Measure$]
  _method_measures_166 := Seq[Measure$]()
  _err := null
  Container_res_6 := new()
  inhale typeof(Container_res_6) == Container()
  inhale acc(_MaySet(Container_res_6, 12015246693702276493947828542597337277), write)
  _cwl_166 := Container___init__(_cthread_166, _method_measures_166, _residue_166, Container_res_6)
  c_8 := Container_res_6
  inhale _isDefined(3694435)
  E_res_1 := new()
  inhale typeof(E_res_1) == E()
  _cwl_166 := E___init__(_cthread_166, _method_measures_166, _residue_166, E_res_1, _checkDefined(c_8, 3694435))
  if (object___bool__(E_res_1)) {
    E_res_2 := new()
    inhale typeof(E_res_2) == E()
    _cwl_166 := E___init__(_cthread_166, _method_measures_166, _residue_166, E_res_2, _checkDefined(c_8, 3694435))
  }
  a_12 := (object___bool__(E_res_1) ? E_res_2 : E_res_1)
  inhale _isDefined(842096481)
  assert int___eq__(_checkDefined(c_8, 3694435).Container_value, __prim__int___box__(10))
  goto __end
  label __end
}

method m_stmt_and_3(_cthread_167: Ref, _caller_measures_167: Seq[Measure$], _residue_167: Perm) returns (_current_wait_level_167: Perm)
  requires _cthread_167 != null
  requires issubtype(typeof(_cthread_167), Thread_0())
  requires [true, perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_53: Ref [_r_53.MustReleaseBounded] :: Level(_r_53) <= _current_wait_level_167) && ((forperm _r_53: Ref [_r_53.MustReleaseUnbounded] :: Level(_r_53) <= _current_wait_level_167) && _residue_167 <= _current_wait_level_167), true]
  ensures [true, (forperm _r_54: Ref [MustInvokeBounded(_r_54)] :: false) && ((forperm _r_54: Ref [MustInvokeUnbounded(_r_54)] :: false) && ((forperm _r_54: Ref [_r_54.MustReleaseBounded] :: false) && (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_9: Ref
  var l_0: Ref
  var a_13: Ref
  var Container_res_7: Ref
  var list_7: Ref
  var E_res_3: Ref
  var _cwl_167: Perm
  var _method_measures_167: Seq[Measure$]
  _method_measures_167 := Seq[Measure$]()
  _err := null
  Container_res_7 := new()
  inhale typeof(Container_res_7) == Container()
  inhale acc(_MaySet(Container_res_7, 12015246693702276493947828542597337277), write)
  _cwl_167 := Container___init__(_cthread_167, _method_measures_167, _residue_167, Container_res_7)
  c_9 := Container_res_7
  inhale _isDefined(3759971)
  _cwl_167, list_7 := list___init__(_cthread_167, _method_measures_167, _residue_167)
  inhale issubtype(typeof(list_7), list(int()))
  l_0 := list_7
  inhale _isDefined(3170156)
  if (list___bool__(_checkDefined(l_0, 3170156))) {
    E_res_3 := new()
    inhale typeof(E_res_3) == E()
    _cwl_167 := E___init__(_cthread_167, _method_measures_167, _residue_167, E_res_3, _checkDefined(c_9, 3759971))
  }
  a_13 := (list___bool__(_checkDefined(l_0, 3170156)) ? E_res_3 : _checkDefined(l_0, 3170156))
  inhale _isDefined(858873697)
  assert int___eq__(_checkDefined(c_9, 3759971).Container_value, __prim__int___box__(5))
  goto __end
  label __end
}

method Container___init__(_cthread_145: Ref, _caller_measures_145: Seq[Measure$], _residue_145: Perm, self: Ref) returns (_current_wait_level_145: Perm)
  requires _cthread_145 != null
  requires issubtype(typeof(_cthread_145), Thread_0())
  requires self != null
  requires acc(_MaySet(self, 12015246693702276493947828542597337277), write)
  requires issubtype(typeof(self), Container())
  requires self != null
  requires [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_58: Ref [MustInvokeBounded(_r_58)] :: false) && ((forperm _r_58: Ref [MustInvokeUnbounded(_r_58)] :: false) && ((forperm _r_58: Ref [_r_58.MustReleaseBounded] :: false) && (forperm _r_58: Ref [_r_58.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_56: Ref [_r_56.MustReleaseBounded] :: Level(_r_56) <= _current_wait_level_145) && ((forperm _r_56: Ref [_r_56.MustReleaseUnbounded] :: Level(_r_56) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]
  ensures acc(self.Container_value, write) && issubtype(typeof(self.Container_value), int()) && int___eq__(self.Container_value, __prim__int___box__(0))
  ensures [true, (forperm _r_57: Ref [MustInvokeBounded(_r_57)] :: false) && ((forperm _r_57: Ref [MustInvokeUnbounded(_r_57)] :: false) && ((forperm _r_57: Ref [_r_57.MustReleaseBounded] :: false) && (forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_3: Ref
  var _cwl_145: Perm
  var _method_measures_145: Seq[Measure$]
  _method_measures_145 := Seq[Measure$]()
  inhale typeof(self) == Container()
  _err := null
  self_3 := self
  if (perm(_MaySet(self_3, 12015246693702276493947828542597337277)) > none) {
    exhale acc(_MaySet(self_3, 12015246693702276493947828542597337277), write)
    inhale acc(self_3.Container_value, write)
  }
  self_3.Container_value := __prim__int___box__(0)
  goto __end
  label __end
}

method A_test(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm, self_0: Ref, c: Ref) returns (_current_wait_level_146: Perm)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires issubtype(typeof(self_0), A())
  requires issubtype(typeof(c), Container())
  requires self_0 != null
  requires acc(c.Container_value, write) && issubtype(typeof(c.Container_value), int())
  requires [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_61: Ref [MustInvokeBounded(_r_61)] :: false) && ((forperm _r_61: Ref [MustInvokeUnbounded(_r_61)] :: false) && ((forperm _r_61: Ref [_r_61.MustReleaseBounded] :: false) && (forperm _r_61: Ref [_r_61.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_59: Ref [_r_59.MustReleaseBounded] :: Level(_r_59) <= _current_wait_level_146) && ((forperm _r_59: Ref [_r_59.MustReleaseUnbounded] :: Level(_r_59) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures acc(c.Container_value, write) && issubtype(typeof(c.Container_value), int()) && int___eq__(c.Container_value, __prim__int___box__(5))
  ensures [true, (forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_4: Ref
  var c_10: Ref
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq[Measure$]()
  inhale typeof(self_0) == A()
  _err := null
  self_4 := self_0
  c_10 := c
  if (perm(_MaySet(c_10, 12015246693702276493947828542597337277)) > none) {
    exhale acc(_MaySet(c_10, 12015246693702276493947828542597337277), write)
    inhale acc(c_10.Container_value, write)
  }
  c_10.Container_value := __prim__int___box__(5)
  goto __end
  label __end
}

method B_test_inherit_check(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm, self_0: Ref, c: Ref) returns (_current_wait_level_146: Perm)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires self_0 != null
  requires typeof(self_0) == B()
  requires issubtype(typeof(self_0), A())
  requires issubtype(typeof(c), Container())
  requires self_0 != null
  requires acc(c.Container_value, write) && issubtype(typeof(c.Container_value), int())
  requires [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_64: Ref [MustInvokeBounded(_r_64)] :: false) && ((forperm _r_64: Ref [MustInvokeUnbounded(_r_64)] :: false) && ((forperm _r_64: Ref [_r_64.MustReleaseBounded] :: false) && (forperm _r_64: Ref [_r_64.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_62: Ref [_r_62.MustReleaseBounded] :: Level(_r_62) <= _current_wait_level_146) && ((forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: Level(_r_62) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures acc(c.Container_value, write) && issubtype(typeof(c.Container_value), int()) && int___eq__(c.Container_value, __prim__int___box__(5))
  ensures [true, (forperm _r_63: Ref [MustInvokeBounded(_r_63)] :: false) && ((forperm _r_63: Ref [MustInvokeUnbounded(_r_63)] :: false) && ((forperm _r_63: Ref [_r_63.MustReleaseBounded] :: false) && (forperm _r_63: Ref [_r_63.MustReleaseUnbounded] :: false)))]
{
  var self_4_0: Ref
  var c_10_0: Ref
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq[Measure$]()
  if (perm(_MaySet(c, 12015246693702276493947828542597337277)) > none) {
    exhale acc(_MaySet(c, 12015246693702276493947828542597337277), write)
    inhale acc(c.Container_value, write)
  }
  c.Container_value := __prim__int___box__(5)
  goto __end_0
  label __end_0
}

method C_test_inherit_check(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm, self_0: Ref, c: Ref) returns (_current_wait_level_146: Perm)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires self_0 != null
  requires typeof(self_0) == C()
  requires issubtype(typeof(self_0), A())
  requires issubtype(typeof(c), Container())
  requires self_0 != null
  requires acc(c.Container_value, write) && issubtype(typeof(c.Container_value), int())
  requires [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_67: Ref [MustInvokeBounded(_r_67)] :: false) && ((forperm _r_67: Ref [MustInvokeUnbounded(_r_67)] :: false) && ((forperm _r_67: Ref [_r_67.MustReleaseBounded] :: false) && (forperm _r_67: Ref [_r_67.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_65: Ref [_r_65.MustReleaseBounded] :: Level(_r_65) <= _current_wait_level_146) && ((forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: Level(_r_65) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures acc(c.Container_value, write) && issubtype(typeof(c.Container_value), int()) && int___eq__(c.Container_value, __prim__int___box__(5))
  ensures [true, (forperm _r_66: Ref [MustInvokeBounded(_r_66)] :: false) && ((forperm _r_66: Ref [MustInvokeUnbounded(_r_66)] :: false) && ((forperm _r_66: Ref [_r_66.MustReleaseBounded] :: false) && (forperm _r_66: Ref [_r_66.MustReleaseUnbounded] :: false)))]
{
  var self_4_1: Ref
  var c_10_1: Ref
  var c_10_0_0: Ref
  var self_4_0_0: Ref
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq[Measure$]()
  if (perm(_MaySet(c, 12015246693702276493947828542597337277)) > none) {
    exhale acc(_MaySet(c, 12015246693702276493947828542597337277), write)
    inhale acc(c.Container_value, write)
  }
  c.Container_value := __prim__int___box__(5)
  goto __end_1
  label __end_1
}

method D___init__(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, self_1: Ref) returns (_current_wait_level_147: Perm)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires self_1 != null
  requires issubtype(typeof(self_1), D())
  requires self_1 != null
  requires false
  requires [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_68: Ref [_r_68.MustReleaseBounded] :: Level(_r_68) <= _current_wait_level_147) && ((forperm _r_68: Ref [_r_68.MustReleaseUnbounded] :: Level(_r_68) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures [true, (forperm _r_69: Ref [MustInvokeBounded(_r_69)] :: false) && ((forperm _r_69: Ref [MustInvokeUnbounded(_r_69)] :: false) && ((forperm _r_69: Ref [_r_69.MustReleaseBounded] :: false) && (forperm _r_69: Ref [_r_69.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_5: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq[Measure$]()
  inhale typeof(self_1) == D()
  _err := null
  self_5 := self_1
  goto __end
  label __end
}

method E___init__(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, self_2: Ref, c_0: Ref) returns (_current_wait_level_148: Perm)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires self_2 != null
  requires issubtype(typeof(self_2), E())
  requires issubtype(typeof(c_0), Container())
  requires self_2 != null
  requires acc(c_0.Container_value, write) && issubtype(typeof(c_0.Container_value), int())
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_73: Ref [MustInvokeBounded(_r_73)] :: false) && ((forperm _r_73: Ref [MustInvokeUnbounded(_r_73)] :: false) && ((forperm _r_73: Ref [_r_73.MustReleaseBounded] :: false) && (forperm _r_73: Ref [_r_73.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_71: Ref [_r_71.MustReleaseBounded] :: Level(_r_71) <= _current_wait_level_148) && ((forperm _r_71: Ref [_r_71.MustReleaseUnbounded] :: Level(_r_71) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures acc(c_0.Container_value, write) && issubtype(typeof(c_0.Container_value), int()) && int___eq__(c_0.Container_value, __prim__int___box__(int___add__(int___unbox__(old(c_0.Container_value)), 5)))
  ensures [true, (forperm _r_72: Ref [MustInvokeBounded(_r_72)] :: false) && ((forperm _r_72: Ref [MustInvokeUnbounded(_r_72)] :: false) && ((forperm _r_72: Ref [_r_72.MustReleaseBounded] :: false) && (forperm _r_72: Ref [_r_72.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_6: Ref
  var c_11: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq[Measure$]()
  inhale typeof(self_2) == E()
  _err := null
  self_6 := self_2
  c_11 := c_0
  if (perm(_MaySet(c_11, 12015246693702276493947828542597337277)) > none) {
    exhale acc(_MaySet(c_11, 12015246693702276493947828542597337277), write)
    inhale acc(c_11.Container_value, write)
  }
  c_11.Container_value := __prim__int___box__(int___add__(int___unbox__(c_11.Container_value), 5))
  goto __end
  label __end
}

method main(_cthread_168: Ref, _caller_measures_168: Seq[Measure$], _residue_168: Perm) returns (_current_wait_level_168: Perm)
  requires _cthread_168 != null
  requires issubtype(typeof(_cthread_168), Thread_0())
  requires [true, perm(MustTerminate(_cthread_168)) == none && ((forperm _r_76: Ref [MustInvokeBounded(_r_76)] :: false) && ((forperm _r_76: Ref [MustInvokeUnbounded(_r_76)] :: false) && ((forperm _r_76: Ref [_r_76.MustReleaseBounded] :: false) && (forperm _r_76: Ref [_r_76.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_74: Ref [_r_74.MustReleaseBounded] :: Level(_r_74) <= _current_wait_level_168) && ((forperm _r_74: Ref [_r_74.MustReleaseUnbounded] :: Level(_r_74) <= _current_wait_level_168) && _residue_168 <= _current_wait_level_168), true]
  ensures [true, (forperm _r_75: Ref [MustInvokeBounded(_r_75)] :: false) && ((forperm _r_75: Ref [MustInvokeUnbounded(_r_75)] :: false) && ((forperm _r_75: Ref [_r_75.MustReleaseBounded] :: false) && (forperm _r_75: Ref [_r_75.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var _cwl_168: Perm
  var _method_measures_168: Seq[Measure$]
  _method_measures_168 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  assert true
  module_names_0 := (module_names_0 union Set(_single(109)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(12909)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(13165)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(13421)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(13677)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(6709101)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(1717514861)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(1717515117)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(1717515373)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(1717515629)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(4897136316197950463415316291)))
  assert true && (_single(4897136316197950463415316291) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(1953719668)))
  module_names_0 := (module_names_0 union Set(_single(65)))
  assert true
  assert true && (_single(65) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(66)))
  assert true
  assert true && (_single(65) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(67)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(68)))
  assert true && (_single(4897136316197950463415316291) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(69)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4375973978494967955)))
  assert true && (_single(65) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(3393907789046456467)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(5431451422951497720713731949)))
  assert true && (_single(65) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(7288844910225130692399095661)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(6437012966135329970390785901)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(6497907881931934045421395821)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4271090061256031475531472749)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(114134225626052194110863267253231763)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(778748223209025120741421728668622995)))
  goto __end
  label __end
}

method list___init__(_cthread_9: Ref, _caller_measures_9: Seq[Measure$], _residue_9: Perm) returns (_current_wait_level_9: Perm, res: Ref)
  requires _cthread_9 != null
  requires Measure$check(_caller_measures_9, _cthread_9, 1)
  requires issubtype(typeof(_cthread_9), Thread_0())
  requires [true, Measure$check(_caller_measures_9, _cthread_9, 1)]
  ensures [(forperm _r_77: Ref [_r_77.MustReleaseBounded] :: Level(_r_77) <= _current_wait_level_9) && ((forperm _r_77: Ref [_r_77.MustReleaseUnbounded] :: Level(_r_77) <= _current_wait_level_9) && _residue_9 <= _current_wait_level_9), true]
  ensures acc(res.list_acc, write)
  ensures res.list_acc == Seq[Ref]()
  ensures typeof(res) == list(list_arg(typeof(res), 0))
  ensures Low(res)
{
  var _cwl_9: Perm
  inhale false
}