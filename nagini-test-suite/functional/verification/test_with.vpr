domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function NoLock(): PyType
  
  unique function MyException(): PyType
  
  unique function NoLockExOnly(): PyType
  
  unique function NoLockNoEx(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_NoLock {
    extends_(NoLock(), object()) && get_basic(NoLock()) == NoLock()
  }
  
  axiom subtype_MyException {
    extends_(MyException(), Exception()) && get_basic(MyException()) == MyException()
  }
  
  axiom subtype_NoLockExOnly {
    extends_(NoLockExOnly(), object()) && get_basic(NoLockExOnly()) == NoLockExOnly()
  }
  
  axiom subtype_NoLockNoEx {
    extends_(NoLockNoEx(), object()) && get_basic(NoLockNoEx()) == NoLockNoEx()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function client_threading(): ThreadingID
  
  unique function client_2_threading(): ThreadingID
  
  unique function client_3_threading(): ThreadingID
  
  unique function client_4_threading(): ThreadingID
  
  unique function client_exonly_threading(): ThreadingID
  
  unique function client_exonly_2_threading(): ThreadingID
  
  unique function client_exonly_3_threading(): ThreadingID
  
  unique function client_exonly_4_threading(): ThreadingID
  
  unique function client_exonly_5_threading(): ThreadingID
  
  unique function client_noex_threading(): ThreadingID
  
  unique function client_noex_2_threading(): ThreadingID
  
  unique function client_noex_3_threading(): ThreadingID
  
  unique function client_noex_4_threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
  
  unique function __enter___threading(): ThreadingID
  
  unique function __exit___threading(): ThreadingID
  
  unique function __init___threading_3(): ThreadingID
  
  unique function __enter___threading_0(): ThreadingID
  
  unique function __exit___threading_0(): ThreadingID
  
  unique function __init___threading_4(): ThreadingID
  
  unique function __enter___threading_1(): ThreadingID
  
  unique function __exit___threading_1(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field NoLock_value: Ref

field NoLockExOnly_value: Ref

field NoLockNoEx_value: Ref

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function Level(r: Ref): Perm 


function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


function tuple___val__(self: Ref): Seq[Ref] 


function tuple___create2__(arg0: Ref, arg1: Ref, t0: PyType, t1: PyType, ctr: Int): Ref
  requires issubtype(typeof(arg0), t0)
  requires issubtype(typeof(arg1), t1)
  ensures result != null
  ensures typeof(result) == tuple(Seq(t0, t1))
  ensures tuple_args(typeof(result)) == Seq(t0, t1)
  ensures tuple_args(typeof(result)) == Seq(t0, t1)
  ensures tuple___val__(result) == Seq(arg0, arg1)
  ensures tuple___len__(result) == 2 && (tuple___getitem__(result, 0) == arg0 && tuple___getitem__(result, 1) == arg1) 


function tuple___len__(self: Ref): Int
  ensures result == |tuple_args(typeof(self))|
  ensures result == |tuple___val__(self)| 


function tuple___getitem__(self: Ref, key: Int): Ref
  requires (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
  ensures key >= 0 ==> issubtype(typeof(result), tuple_arg(typeof(self), key))
  ensures key < 0 ==> issubtype(typeof(result), tuple_arg(typeof(self), tuple___len__(self) + key))
  ensures key >= 0 ==> result == tuple___val__(self)[key]
  ensures key < 0 ==> result == tuple___val__(self)[tuple___len__(self) + key] 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

method client(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm) returns (_current_wait_level_154: Perm, _res: Ref)
  requires _cthread_154 != null
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_154) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]
  ensures issubtype(typeof(_res), NoLock())
  ensures acc(_res.NoLock_value, write) && issubtype(typeof(_res.NoLock_value), int()) && int___eq__(_res.NoLock_value, __prim__int___box__(25))
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var nl: Ref
  var v: Ref
  var error: Ref
  var try_finally: Int
  var NoLock_res: Ref
  var with_ctx: Ref
  var enter_res: Ref
  var exit_res: Ref
  var t_3: PyType
  var e_2: Ref
  var tb_2: Ref
  var _cwl_154: Perm
  var _method_measures_154: Seq[Measure$]
  _method_measures_154 := Seq[Measure$]()
  _res := null
  _err := null
  NoLock_res := new()
  inhale typeof(NoLock_res) == NoLock()
  inhale acc(_MaySet(NoLock_res, 18921357502206297763743395104374886578), write)
  _cwl_154 := NoLock___init__(_cthread_154, _method_measures_154, _residue_154, NoLock_res)
  nl := NoLock_res
  inhale _isDefined(27758)
  with_ctx := _checkDefined(nl, 27758)
  _cwl_154, enter_res := NoLock___enter__(_cthread_154, _method_measures_154, _residue_154, with_ctx)
  v := enter_res
  inhale _isDefined(118)
  try_finally := 0
  if (perm(_MaySet(_checkDefined(nl, 27758), 18921357502206297763743395104374886578)) > none) {
    exhale acc(_MaySet(_checkDefined(nl, 27758), 18921357502206297763743395104374886578), write)
    inhale acc(_checkDefined(nl, 27758).NoLock_value, write)
  }
  _checkDefined(nl, 27758).NoLock_value := __prim__int___box__(int___add__(int___unbox__(_checkDefined(nl, 27758).NoLock_value), int___unbox__(_checkDefined(v, 118))))
  goto with_finally
  label post_with
  _res := _checkDefined(nl, 27758)
  goto __end
  goto __end
  label with_finally
  if (try_finally > 1) {
    e_2 := error
    t_3 := typeof(error)
    inhale issubtype(typeof(tb_2), traceback())
  } else {
    e_2 := null
    tb_2 := null
  }
  _cwl_154, exit_res := NoLock___exit__(_cthread_154, _method_measures_154, _residue_154, with_ctx, t_3, e_2, tb_2)
  if (try_finally > 1) {
    exhale false
    goto __end
  } elseif (try_finally > 0) {
    goto __end
  } else {
    goto post_with
  }
  label __end
}

method client_2(_cthread_155: Ref, _caller_measures_155: Seq[Measure$], _residue_155: Perm) returns (_current_wait_level_155: Perm, _res: Ref)
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires [true, perm(MustTerminate(_cthread_155)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_155) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_155) && _residue_155 <= _current_wait_level_155), true]
  ensures issubtype(typeof(_res), NoLock())
  ensures acc(_res.NoLock_value, write) && issubtype(typeof(_res.NoLock_value), int()) && int___eq__(_res.NoLock_value, __prim__int___box__(24))
  ensures [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var nl_0: Ref
  var v_0: Ref
  var error_0: Ref
  var try_finally_0: Int
  var NoLock_res_0: Ref
  var with_ctx_0: Ref
  var enter_res_0: Ref
  var exit_res_0: Ref
  var t_4: PyType
  var e_3: Ref
  var tb_3: Ref
  var _cwl_155: Perm
  var _method_measures_155: Seq[Measure$]
  _method_measures_155 := Seq[Measure$]()
  _res := null
  _err := null
  NoLock_res_0 := new()
  inhale typeof(NoLock_res_0) == NoLock()
  inhale acc(_MaySet(NoLock_res_0, 18921357502206297763743395104374886578), write)
  _cwl_155 := NoLock___init__(_cthread_155, _method_measures_155, _residue_155, NoLock_res_0)
  nl_0 := NoLock_res_0
  inhale _isDefined(811560046)
  with_ctx_0 := _checkDefined(nl_0, 811560046)
  _cwl_155, enter_res_0 := NoLock___enter__(_cthread_155, _method_measures_155, _residue_155, with_ctx_0)
  v_0 := enter_res_0
  inhale _isDefined(3170166)
  try_finally_0 := 0
  if (perm(_MaySet(_checkDefined(nl_0, 811560046), 18921357502206297763743395104374886578)) > none) {
    exhale acc(_MaySet(_checkDefined(nl_0, 811560046), 18921357502206297763743395104374886578), write)
    inhale acc(_checkDefined(nl_0, 811560046).NoLock_value, write)
  }
  _checkDefined(nl_0, 811560046).NoLock_value := __prim__int___box__(int___add__(int___unbox__(_checkDefined(nl_0, 811560046).NoLock_value), int___unbox__(_checkDefined(v_0, 3170166))))
  goto with_finally_0
  label post_with_0
  _res := _checkDefined(nl_0, 811560046)
  goto __end
  goto __end
  label with_finally_0
  if (try_finally_0 > 1) {
    e_3 := error_0
    t_4 := typeof(error_0)
    inhale issubtype(typeof(tb_3), traceback())
  } else {
    e_3 := null
    tb_3 := null
  }
  _cwl_155, exit_res_0 := NoLock___exit__(_cthread_155, _method_measures_155, _residue_155, with_ctx_0, t_4, e_3, tb_3)
  if (try_finally_0 > 1) {
    exhale false
    goto __end
  } elseif (try_finally_0 > 0) {
    goto __end
  } else {
    goto post_with_0
  }
  label __end
}

method client_3(_cthread_156: Ref, _caller_measures_156: Seq[Measure$], _residue_156: Perm) returns (_current_wait_level_156: Perm, _res: Ref)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires [true, perm(MustTerminate(_cthread_156)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_156) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]
  ensures issubtype(typeof(_res), tuple(Seq(NoLock(), int())))
  ensures acc(tuple___getitem__(_res, 0).NoLock_value, write) && issubtype(typeof(tuple___getitem__(_res, 0).NoLock_value), int()) && int___eq__(tuple___getitem__(_res, 0).NoLock_value, __prim__int___box__(16))
  ensures int___eq__(tuple___getitem__(_res, 1), __prim__int___box__(18))
  ensures [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var nl_1: Ref
  var v_1: Ref
  var error_1: Ref
  var try_finally_1: Int
  var NoLock_res_1: Ref
  var with_ctx_1: Ref
  var enter_res_1: Ref
  var exit_res_1: Ref
  var t_5: PyType
  var e_4: Ref
  var tb_4: Ref
  var _cwl_156: Perm
  var _method_measures_156: Seq[Measure$]
  _method_measures_156 := Seq[Measure$]()
  _res := null
  _err := null
  NoLock_res_1 := new()
  inhale typeof(NoLock_res_1) == NoLock()
  inhale acc(_MaySet(NoLock_res_1, 18921357502206297763743395104374886578), write)
  _cwl_156 := NoLock___init__(_cthread_156, _method_measures_156, _residue_156, NoLock_res_1)
  nl_1 := NoLock_res_1
  inhale _isDefined(828337262)
  with_ctx_1 := _checkDefined(nl_1, 828337262)
  _cwl_156, enter_res_1 := NoLock___enter__(_cthread_156, _method_measures_156, _residue_156, with_ctx_1)
  v_1 := enter_res_1
  inhale _isDefined(3235702)
  try_finally_1 := 0
  _res := tuple___create2__(_checkDefined(nl_1, 828337262), __prim__int___box__(int___add__(int___unbox__(_checkDefined(nl_1, 828337262).NoLock_value), int___unbox__(_checkDefined(v_1, 3235702)))), NoLock(), int(), 0)
  try_finally_1 := 1
  goto with_finally_1
  goto with_finally_1
  label post_with_1
  goto __end
  label with_finally_1
  if (try_finally_1 > 1) {
    e_4 := error_1
    t_5 := typeof(error_1)
    inhale issubtype(typeof(tb_4), traceback())
  } else {
    e_4 := null
    tb_4 := null
  }
  _cwl_156, exit_res_1 := NoLock___exit__(_cthread_156, _method_measures_156, _residue_156, with_ctx_1, t_5, e_4, tb_4)
  if (try_finally_1 > 1) {
    exhale false
    goto __end
  } elseif (try_finally_1 > 0) {
    goto __end
  } else {
    goto post_with_1
  }
  label __end
}

method client_4(_cthread_157: Ref, _caller_measures_157: Seq[Measure$], _residue_157: Perm) returns (_current_wait_level_157: Perm, _res: Ref)
  requires _cthread_157 != null
  requires issubtype(typeof(_cthread_157), Thread_0())
  requires [true, perm(MustTerminate(_cthread_157)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_157) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]
  ensures issubtype(typeof(_res), tuple(Seq(NoLock(), int())))
  ensures acc(tuple___getitem__(_res, 0).NoLock_value, write) && issubtype(typeof(tuple___getitem__(_res, 0).NoLock_value), int()) && int___eq__(tuple___getitem__(_res, 0).NoLock_value, __prim__int___box__(15))
  ensures int___eq__(tuple___getitem__(_res, 1), __prim__int___box__(18))
  ensures [true, (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var nl_2: Ref
  var v_2: Ref
  var error_2: Ref
  var try_finally_2: Int
  var NoLock_res_2: Ref
  var with_ctx_2: Ref
  var enter_res_2: Ref
  var exit_res_2: Ref
  var t_6: PyType
  var e_5: Ref
  var tb_5: Ref
  var _cwl_157: Perm
  var _method_measures_157: Seq[Measure$]
  _method_measures_157 := Seq[Measure$]()
  _res := null
  _err := null
  NoLock_res_2 := new()
  inhale typeof(NoLock_res_2) == NoLock()
  inhale acc(_MaySet(NoLock_res_2, 18921357502206297763743395104374886578), write)
  _cwl_157 := NoLock___init__(_cthread_157, _method_measures_157, _residue_157, NoLock_res_2)
  nl_2 := NoLock_res_2
  inhale _isDefined(845114478)
  with_ctx_2 := _checkDefined(nl_2, 845114478)
  _cwl_157, enter_res_2 := NoLock___enter__(_cthread_157, _method_measures_157, _residue_157, with_ctx_2)
  v_2 := enter_res_2
  inhale _isDefined(3301238)
  try_finally_2 := 0
  _res := tuple___create2__(_checkDefined(nl_2, 845114478), __prim__int___box__(int___add__(int___unbox__(_checkDefined(nl_2, 845114478).NoLock_value), int___unbox__(_checkDefined(v_2, 3301238)))), NoLock(), int(), 1)
  try_finally_2 := 1
  goto with_finally_2
  goto with_finally_2
  label post_with_2
  goto __end
  label with_finally_2
  if (try_finally_2 > 1) {
    e_5 := error_2
    t_6 := typeof(error_2)
    inhale issubtype(typeof(tb_5), traceback())
  } else {
    e_5 := null
    tb_5 := null
  }
  _cwl_157, exit_res_2 := NoLock___exit__(_cthread_157, _method_measures_157, _residue_157, with_ctx_2, t_6, e_5, tb_5)
  if (try_finally_2 > 1) {
    exhale false
    goto __end
  } elseif (try_finally_2 > 0) {
    goto __end
  } else {
    goto post_with_2
  }
  label __end
}

method client_exonly(_cthread_158: Ref, _caller_measures_158: Seq[Measure$], _residue_158: Perm) returns (_current_wait_level_158: Perm, _res: Ref)
  requires _cthread_158 != null
  requires issubtype(typeof(_cthread_158), Thread_0())
  requires [true, perm(MustTerminate(_cthread_158)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_158) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158), true]
  ensures issubtype(typeof(_res), NoLockExOnly())
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var nl_3: Ref
  var v_3: Ref
  var error_3: Ref
  var try_finally_3: Int
  var NoLockExOnly_res: Ref
  var with_ctx_3: Ref
  var enter_res_3: Ref
  var exit_res_3: Ref
  var t_7: PyType
  var e_6: Ref
  var tb_6: Ref
  var _cwl_158: Perm
  var _method_measures_158: Seq[Measure$]
  _method_measures_158 := Seq[Measure$]()
  _res := null
  _err := null
  NoLockExOnly_res := new()
  inhale typeof(NoLockExOnly_res) == NoLockExOnly()
  inhale acc(_MaySet(NoLockExOnly_res, 14488567895815297650636835670701187559949365070), write)
  _cwl_158 := NoLockExOnly___init__(_cthread_158, _method_measures_158, _residue_158, NoLockExOnly_res)
  nl_3 := NoLockExOnly_res
  inhale _isDefined(861891694)
  with_ctx_3 := _checkDefined(nl_3, 861891694)
  _cwl_158, enter_res_3 := NoLockExOnly___enter__(_cthread_158, _method_measures_158, _residue_158, with_ctx_3)
  v_3 := enter_res_3
  inhale _isDefined(3366774)
  try_finally_3 := 0
  if (perm(_MaySet(_checkDefined(nl_3, 861891694), 14488567895815297650636835670701187559949365070)) > none) {
    exhale acc(_MaySet(_checkDefined(nl_3, 861891694), 14488567895815297650636835670701187559949365070), write)
    inhale acc(_checkDefined(nl_3, 861891694).NoLockExOnly_value, write)
  }
  _checkDefined(nl_3, 861891694).NoLockExOnly_value := __prim__int___box__(int___add__(int___unbox__(_checkDefined(nl_3, 861891694).NoLockExOnly_value), int___unbox__(_checkDefined(v_3, 3366774))))
  goto with_finally_3
  label post_with_3
  _res := _checkDefined(nl_3, 861891694)
  goto __end
  goto __end
  label with_finally_3
  if (try_finally_3 > 1) {
    e_6 := error_3
    t_7 := typeof(error_3)
    inhale issubtype(typeof(tb_6), traceback())
  } else {
    e_6 := null
    tb_6 := null
  }
  _cwl_158, exit_res_3 := NoLockExOnly___exit__(_cthread_158, _method_measures_158, _residue_158, with_ctx_3, t_7, e_6, tb_6)
  if (try_finally_3 > 1) {
    exhale false
    goto __end
  } elseif (try_finally_3 > 0) {
    goto __end
  } else {
    goto post_with_3
  }
  label __end
}

method client_exonly_2(_cthread_159: Ref, _caller_measures_159: Seq[Measure$], _residue_159: Perm) returns (_current_wait_level_159: Perm, _res: Ref)
  requires _cthread_159 != null
  requires issubtype(typeof(_cthread_159), Thread_0())
  requires [true, perm(MustTerminate(_cthread_159)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_159) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159), true]
  ensures issubtype(typeof(_res), NoLockExOnly())
  ensures [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var nl_4: Ref
  var v_4: Ref
  var error_4: Ref
  var try_finally_4: Int
  var NoLockExOnly_res_0: Ref
  var with_ctx_4: Ref
  var enter_res_4: Ref
  var exit_res_4: Ref
  var t_8: PyType
  var e_7: Ref
  var tb_7: Ref
  var _cwl_159: Perm
  var _method_measures_159: Seq[Measure$]
  _method_measures_159 := Seq[Measure$]()
  _res := null
  _err := null
  NoLockExOnly_res_0 := new()
  inhale typeof(NoLockExOnly_res_0) == NoLockExOnly()
  inhale acc(_MaySet(NoLockExOnly_res_0, 14488567895815297650636835670701187559949365070), write)
  _cwl_159 := NoLockExOnly___init__(_cthread_159, _method_measures_159, _residue_159, NoLockExOnly_res_0)
  nl_4 := NoLockExOnly_res_0
  inhale _isDefined(878668910)
  with_ctx_4 := _checkDefined(nl_4, 878668910)
  _cwl_159, enter_res_4 := NoLockExOnly___enter__(_cthread_159, _method_measures_159, _residue_159, with_ctx_4)
  v_4 := enter_res_4
  inhale _isDefined(3432310)
  try_finally_4 := 0
  _res := _checkDefined(nl_4, 878668910)
  try_finally_4 := 1
  goto with_finally_4
  goto with_finally_4
  label post_with_4
  goto __end
  label with_finally_4
  if (try_finally_4 > 1) {
    e_7 := error_4
    t_8 := typeof(error_4)
    inhale issubtype(typeof(tb_7), traceback())
  } else {
    e_7 := null
    tb_7 := null
  }
  _cwl_159, exit_res_4 := NoLockExOnly___exit__(_cthread_159, _method_measures_159, _residue_159, with_ctx_4, t_8, e_7, tb_7)
  if (try_finally_4 > 1) {
    exhale false
    goto __end
  } elseif (try_finally_4 > 0) {
    goto __end
  } else {
    goto post_with_4
  }
  label __end
}

method client_exonly_3(_cthread_160: Ref, _caller_measures_160: Seq[Measure$], _residue_160: Perm) returns (_current_wait_level_160: Perm, _res: Ref, _err: Ref)
  requires _cthread_160 != null
  requires issubtype(typeof(_cthread_160), Thread_0())
  requires [true, perm(MustTerminate(_cthread_160)) == none && ((forperm _r_19: Ref [MustInvokeBounded(_r_19)] :: false) && ((forperm _r_19: Ref [MustInvokeUnbounded(_r_19)] :: false) && ((forperm _r_19: Ref [_r_19.MustReleaseBounded] :: false) && (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_160) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160), true]
  ensures _err == null ==> issubtype(typeof(_res), NoLockExOnly())
  ensures _err == null ==> false
  ensures _err != null && issubtype(typeof(_err), Exception()) ==> true
  ensures _err != null ==> issubtype(typeof(_err), Exception())
  ensures [true, (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))]
{
  var nl_5: Ref
  var v_5: Ref
  var error_5: Ref
  var try_finally_5: Int
  var NoLockExOnly_res_1: Ref
  var with_ctx_5: Ref
  var enter_res_5: Ref
  var Exception_res: Ref
  var exit_res_5: Ref
  var t_9: PyType
  var e_8: Ref
  var tb_8: Ref
  var _cwl_160: Perm
  var _method_measures_160: Seq[Measure$]
  _method_measures_160 := Seq[Measure$]()
  _res := null
  _err := null
  NoLockExOnly_res_1 := new()
  inhale typeof(NoLockExOnly_res_1) == NoLockExOnly()
  inhale acc(_MaySet(NoLockExOnly_res_1, 14488567895815297650636835670701187559949365070), write)
  _cwl_160 := NoLockExOnly___init__(_cthread_160, _method_measures_160, _residue_160, NoLockExOnly_res_1)
  nl_5 := NoLockExOnly_res_1
  inhale _isDefined(895446126)
  with_ctx_5 := _checkDefined(nl_5, 895446126)
  _cwl_160, enter_res_5 := NoLockExOnly___enter__(_cthread_160, _method_measures_160, _residue_160, with_ctx_5)
  v_5 := enter_res_5
  inhale _isDefined(3497846)
  try_finally_5 := 0
  Exception_res := new()
  inhale typeof(Exception_res) == Exception()
  error_5 := Exception_res
  if (error_5 != null) {
    try_finally_5 := 2
    goto with_finally_5
  }
  goto with_finally_5
  label post_with_5
  goto __end
  label with_finally_5
  if (try_finally_5 > 1) {
    e_8 := error_5
    t_9 := typeof(error_5)
    inhale issubtype(typeof(tb_8), traceback())
  } else {
    e_8 := null
    tb_8 := null
  }
  _cwl_160, exit_res_5 := NoLockExOnly___exit__(_cthread_160, _method_measures_160, _residue_160, with_ctx_5, t_9, e_8, tb_8)
  if (try_finally_5 > 1) {
    _err := error_5
    goto __end
  } elseif (try_finally_5 > 0) {
    goto __end
  } else {
    goto post_with_5
  }
  label __end
}

method client_exonly_4(_cthread_161: Ref, _caller_measures_161: Seq[Measure$], _residue_161: Perm) returns (_current_wait_level_161: Perm, _res: Ref)
  requires _cthread_161 != null
  requires issubtype(typeof(_cthread_161), Thread_0())
  requires [true, perm(MustTerminate(_cthread_161)) == none && ((forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_161) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161), true]
  ensures issubtype(typeof(_res), NoLockExOnly())
  ensures [true, (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var nl_6: Ref
  var v_6: Ref
  var error_6: Ref
  var try_finally_6: Int
  var NoLockExOnly_res_2: Ref
  var with_ctx_6: Ref
  var enter_res_6: Ref
  var MyException_res: Ref
  var exit_res_6: Ref
  var t_10: PyType
  var e_9: Ref
  var tb_9: Ref
  var _cwl_161: Perm
  var _method_measures_161: Seq[Measure$]
  _method_measures_161 := Seq[Measure$]()
  _res := null
  _err := null
  NoLockExOnly_res_2 := new()
  inhale typeof(NoLockExOnly_res_2) == NoLockExOnly()
  inhale acc(_MaySet(NoLockExOnly_res_2, 14488567895815297650636835670701187559949365070), write)
  _cwl_161 := NoLockExOnly___init__(_cthread_161, _method_measures_161, _residue_161, NoLockExOnly_res_2)
  nl_6 := NoLockExOnly_res_2
  inhale _isDefined(912223342)
  with_ctx_6 := _checkDefined(nl_6, 912223342)
  _cwl_161, enter_res_6 := NoLockExOnly___enter__(_cthread_161, _method_measures_161, _residue_161, with_ctx_6)
  v_6 := enter_res_6
  inhale _isDefined(3563382)
  try_finally_6 := 0
  MyException_res := new()
  inhale typeof(MyException_res) == MyException()
  error_6 := MyException_res
  if (error_6 != null) {
    try_finally_6 := 2
    goto with_finally_6
  }
  goto with_finally_6
  label post_with_6
  goto __end
  label with_finally_6
  if (try_finally_6 > 1) {
    e_9 := error_6
    t_10 := typeof(error_6)
    inhale issubtype(typeof(tb_9), traceback())
  } else {
    e_9 := null
    tb_9 := null
  }
  _cwl_161, exit_res_6 := NoLockExOnly___exit__(_cthread_161, _method_measures_161, _residue_161, with_ctx_6, t_10, e_9, tb_9)
  if (try_finally_6 > 1) {
    exhale false
    goto __end
  } elseif (try_finally_6 > 0) {
    goto __end
  } else {
    goto post_with_6
  }
  label __end
}

method client_exonly_5(_cthread_162: Ref, _caller_measures_162: Seq[Measure$], _residue_162: Perm) returns (_current_wait_level_162: Perm, _res: Ref, _err: Ref)
  requires _cthread_162 != null
  requires issubtype(typeof(_cthread_162), Thread_0())
  requires [true, perm(MustTerminate(_cthread_162)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_162) && ((forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_162) && _residue_162 <= _current_wait_level_162), true]
  ensures _err == null ==> issubtype(typeof(_res), NoLockExOnly())
  ensures _err == null ==> false
  ensures _err != null && issubtype(typeof(_err), MyException()) ==> true
  ensures _err != null ==> issubtype(typeof(_err), MyException())
  ensures [true, (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)))]
{
  var nl_7: Ref
  var v_7: Ref
  var error_7: Ref
  var try_finally_7: Int
  var NoLockExOnly_res_3: Ref
  var with_ctx_7: Ref
  var enter_res_7: Ref
  var MyException_res_0: Ref
  var exit_res_7: Ref
  var t_11: PyType
  var e_10: Ref
  var tb_10: Ref
  var _cwl_162: Perm
  var _method_measures_162: Seq[Measure$]
  _method_measures_162 := Seq[Measure$]()
  _res := null
  _err := null
  NoLockExOnly_res_3 := new()
  inhale typeof(NoLockExOnly_res_3) == NoLockExOnly()
  inhale acc(_MaySet(NoLockExOnly_res_3, 14488567895815297650636835670701187559949365070), write)
  _cwl_162 := NoLockExOnly___init__(_cthread_162, _method_measures_162, _residue_162, NoLockExOnly_res_3)
  nl_7 := NoLockExOnly_res_3
  inhale _isDefined(929000558)
  with_ctx_7 := _checkDefined(nl_7, 929000558)
  _cwl_162, enter_res_7 := NoLockExOnly___enter__(_cthread_162, _method_measures_162, _residue_162, with_ctx_7)
  v_7 := enter_res_7
  inhale _isDefined(3628918)
  try_finally_7 := 0
  MyException_res_0 := new()
  inhale typeof(MyException_res_0) == MyException()
  error_7 := MyException_res_0
  if (error_7 != null) {
    try_finally_7 := 2
    goto with_finally_7
  }
  goto with_finally_7
  label post_with_7
  goto __end
  label with_finally_7
  if (try_finally_7 > 1) {
    e_10 := error_7
    t_11 := typeof(error_7)
    inhale issubtype(typeof(tb_10), traceback())
  } else {
    e_10 := null
    tb_10 := null
  }
  _cwl_162, exit_res_7 := NoLockExOnly___exit__(_cthread_162, _method_measures_162, _residue_162, with_ctx_7, t_11, e_10, tb_10)
  if (try_finally_7 > 1) {
    _err := error_7
    goto __end
  } elseif (try_finally_7 > 0) {
    goto __end
  } else {
    goto post_with_7
  }
  label __end
}

method client_noex(_cthread_163: Ref, _caller_measures_163: Seq[Measure$], _residue_163: Perm) returns (_current_wait_level_163: Perm, _res: Ref)
  requires _cthread_163 != null
  requires issubtype(typeof(_cthread_163), Thread_0())
  requires [true, perm(MustTerminate(_cthread_163)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_163) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_163) && _residue_163 <= _current_wait_level_163), true]
  ensures issubtype(typeof(_res), NoLockNoEx())
  ensures [true, (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var nl_8: Ref
  var v_8: Ref
  var error_8: Ref
  var try_finally_8: Int
  var NoLockNoEx_res: Ref
  var with_ctx_8: Ref
  var enter_res_8: Ref
  var exit_res_8: Ref
  var t_12: PyType
  var e_11: Ref
  var tb_11: Ref
  var _cwl_163: Perm
  var _method_measures_163: Seq[Measure$]
  _method_measures_163 := Seq[Measure$]()
  _res := null
  _err := null
  NoLockNoEx_res := new()
  inhale typeof(NoLockNoEx_res) == NoLockNoEx()
  inhale acc(_MaySet(NoLockNoEx_res, 29641230529734471557654548391134816336400379726), write)
  _cwl_163 := NoLockNoEx___init__(_cthread_163, _method_measures_163, _residue_163, NoLockNoEx_res)
  nl_8 := NoLockNoEx_res
  inhale _isDefined(945777774)
  with_ctx_8 := _checkDefined(nl_8, 945777774)
  _cwl_163, enter_res_8 := NoLockNoEx___enter__(_cthread_163, _method_measures_163, _residue_163, with_ctx_8)
  v_8 := enter_res_8
  inhale _isDefined(3694454)
  try_finally_8 := 0
  if (perm(_MaySet(_checkDefined(nl_8, 945777774), 29641230529734471557654548391134816336400379726)) > none) {
    exhale acc(_MaySet(_checkDefined(nl_8, 945777774), 29641230529734471557654548391134816336400379726), write)
    inhale acc(_checkDefined(nl_8, 945777774).NoLockNoEx_value, write)
  }
  _checkDefined(nl_8, 945777774).NoLockNoEx_value := __prim__int___box__(int___add__(int___unbox__(_checkDefined(nl_8, 945777774).NoLockNoEx_value), int___unbox__(_checkDefined(v_8, 3694454))))
  goto with_finally_8
  label post_with_8
  _res := _checkDefined(nl_8, 945777774)
  goto __end
  goto __end
  label with_finally_8
  if (try_finally_8 > 1) {
    e_11 := error_8
    t_12 := typeof(error_8)
    inhale issubtype(typeof(tb_11), traceback())
  } else {
    e_11 := null
    tb_11 := null
  }
  _cwl_163, exit_res_8 := NoLockNoEx___exit__(_cthread_163, _method_measures_163, _residue_163, with_ctx_8, t_12, e_11, tb_11)
  if (try_finally_8 > 1) {
    exhale false
    goto __end
  } elseif (try_finally_8 > 0) {
    goto __end
  } else {
    goto post_with_8
  }
  label __end
}

method client_noex_2(_cthread_164: Ref, _caller_measures_164: Seq[Measure$], _residue_164: Perm) returns (_current_wait_level_164: Perm, _res: Ref)
  requires _cthread_164 != null
  requires issubtype(typeof(_cthread_164), Thread_0())
  requires [true, perm(MustTerminate(_cthread_164)) == none && ((forperm _r_31: Ref [MustInvokeBounded(_r_31)] :: false) && ((forperm _r_31: Ref [MustInvokeUnbounded(_r_31)] :: false) && ((forperm _r_31: Ref [_r_31.MustReleaseBounded] :: false) && (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_164) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_164) && _residue_164 <= _current_wait_level_164), true]
  ensures issubtype(typeof(_res), NoLockNoEx())
  ensures [true, (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var nl_9: Ref
  var v_9: Ref
  var error_9: Ref
  var try_finally_9: Int
  var NoLockNoEx_res_0: Ref
  var with_ctx_9: Ref
  var enter_res_9: Ref
  var exit_res_9: Ref
  var t_13: PyType
  var e_12: Ref
  var tb_12: Ref
  var _cwl_164: Perm
  var _method_measures_164: Seq[Measure$]
  _method_measures_164 := Seq[Measure$]()
  _res := null
  _err := null
  NoLockNoEx_res_0 := new()
  inhale typeof(NoLockNoEx_res_0) == NoLockNoEx()
  inhale acc(_MaySet(NoLockNoEx_res_0, 29641230529734471557654548391134816336400379726), write)
  _cwl_164 := NoLockNoEx___init__(_cthread_164, _method_measures_164, _residue_164, NoLockNoEx_res_0)
  nl_9 := NoLockNoEx_res_0
  inhale _isDefined(962554990)
  with_ctx_9 := _checkDefined(nl_9, 962554990)
  _cwl_164, enter_res_9 := NoLockNoEx___enter__(_cthread_164, _method_measures_164, _residue_164, with_ctx_9)
  v_9 := enter_res_9
  inhale _isDefined(3759990)
  try_finally_9 := 0
  _res := _checkDefined(nl_9, 962554990)
  try_finally_9 := 1
  goto with_finally_9
  goto with_finally_9
  label post_with_9
  goto __end
  label with_finally_9
  if (try_finally_9 > 1) {
    e_12 := error_9
    t_13 := typeof(error_9)
    inhale issubtype(typeof(tb_12), traceback())
  } else {
    e_12 := null
    tb_12 := null
  }
  _cwl_164, exit_res_9 := NoLockNoEx___exit__(_cthread_164, _method_measures_164, _residue_164, with_ctx_9, t_13, e_12, tb_12)
  if (try_finally_9 > 1) {
    exhale false
    goto __end
  } elseif (try_finally_9 > 0) {
    goto __end
  } else {
    goto post_with_9
  }
  label __end
}

method client_noex_3(_cthread_165: Ref, _caller_measures_165: Seq[Measure$], _residue_165: Perm) returns (_current_wait_level_165: Perm, _res: Ref)
  requires _cthread_165 != null
  requires issubtype(typeof(_cthread_165), Thread_0())
  requires [true, perm(MustTerminate(_cthread_165)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_165) && ((forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_165) && _residue_165 <= _current_wait_level_165), true]
  ensures issubtype(typeof(_res), NoLockNoEx())
  ensures [true, (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var nl_10: Ref
  var v_10: Ref
  var error_10: Ref
  var try_finally_10: Int
  var NoLockNoEx_res_1: Ref
  var with_ctx_10: Ref
  var enter_res_10: Ref
  var MyException_res_1: Ref
  var exit_res_10: Ref
  var t_14: PyType
  var e_13: Ref
  var tb_13: Ref
  var _cwl_165: Perm
  var _method_measures_165: Seq[Measure$]
  _method_measures_165 := Seq[Measure$]()
  _res := null
  _err := null
  NoLockNoEx_res_1 := new()
  inhale typeof(NoLockNoEx_res_1) == NoLockNoEx()
  inhale acc(_MaySet(NoLockNoEx_res_1, 29641230529734471557654548391134816336400379726), write)
  _cwl_165 := NoLockNoEx___init__(_cthread_165, _method_measures_165, _residue_165, NoLockNoEx_res_1)
  nl_10 := NoLockNoEx_res_1
  inhale _isDefined(1778840930504184722)
  with_ctx_10 := _checkDefined(nl_10, 1778840930504184722)
  _cwl_165, enter_res_10 := NoLockNoEx___enter__(_cthread_165, _method_measures_165, _residue_165, with_ctx_10)
  v_10 := enter_res_10
  inhale _isDefined(808542070)
  try_finally_10 := 0
  MyException_res_1 := new()
  inhale typeof(MyException_res_1) == MyException()
  error_10 := MyException_res_1
  if (error_10 != null) {
    try_finally_10 := 2
    goto with_finally_10
  }
  goto with_finally_10
  label post_with_10
  goto __end
  label with_finally_10
  if (try_finally_10 > 1) {
    e_13 := error_10
    t_14 := typeof(error_10)
    inhale issubtype(typeof(tb_13), traceback())
  } else {
    e_13 := null
    tb_13 := null
  }
  _cwl_165, exit_res_10 := NoLockNoEx___exit__(_cthread_165, _method_measures_165, _residue_165, with_ctx_10, t_14, e_13, tb_13)
  if (try_finally_10 > 1) {
    exhale false
    goto __end
  } elseif (try_finally_10 > 0) {
    goto __end
  } else {
    goto post_with_10
  }
  label __end
}

method client_noex_4(_cthread_166: Ref, _caller_measures_166: Seq[Measure$], _residue_166: Perm) returns (_current_wait_level_166: Perm, _res: Ref, _err: Ref)
  requires _cthread_166 != null
  requires issubtype(typeof(_cthread_166), Thread_0())
  requires [true, perm(MustTerminate(_cthread_166)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_166) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_166) && _residue_166 <= _current_wait_level_166), true]
  ensures _err == null ==> issubtype(typeof(_res), NoLockNoEx())
  ensures _err == null ==> false
  ensures _err != null && issubtype(typeof(_err), MyException()) ==> true
  ensures _err != null ==> issubtype(typeof(_err), MyException())
  ensures [true, (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))]
{
  var nl_11: Ref
  var v_11: Ref
  var error_11: Ref
  var try_finally_11: Int
  var NoLockNoEx_res_2: Ref
  var with_ctx_11: Ref
  var enter_res_11: Ref
  var MyException_res_2: Ref
  var exit_res_11: Ref
  var t_15: PyType
  var e_14: Ref
  var tb_14: Ref
  var _cwl_166: Perm
  var _method_measures_166: Seq[Measure$]
  _method_measures_166 := Seq[Measure$]()
  _res := null
  _err := null
  NoLockNoEx_res_2 := new()
  inhale typeof(NoLockNoEx_res_2) == NoLockNoEx()
  inhale acc(_MaySet(NoLockNoEx_res_2, 29641230529734471557654548391134816336400379726), write)
  _cwl_166 := NoLockNoEx___init__(_cthread_166, _method_measures_166, _residue_166, NoLockNoEx_res_2)
  nl_11 := NoLockNoEx_res_2
  inhale _isDefined(1778840934799152018)
  with_ctx_11 := _checkDefined(nl_11, 1778840934799152018)
  _cwl_166, enter_res_11 := NoLockNoEx___enter__(_cthread_166, _method_measures_166, _residue_166, with_ctx_11)
  v_11 := enter_res_11
  inhale _isDefined(825319286)
  try_finally_11 := 0
  MyException_res_2 := new()
  inhale typeof(MyException_res_2) == MyException()
  error_11 := MyException_res_2
  if (error_11 != null) {
    try_finally_11 := 2
    goto with_finally_11
  }
  goto with_finally_11
  label post_with_11
  goto __end
  label with_finally_11
  if (try_finally_11 > 1) {
    e_14 := error_11
    t_15 := typeof(error_11)
    inhale issubtype(typeof(tb_14), traceback())
  } else {
    e_14 := null
    tb_14 := null
  }
  _cwl_166, exit_res_11 := NoLockNoEx___exit__(_cthread_166, _method_measures_166, _residue_166, with_ctx_11, t_15, e_14, tb_14)
  if (try_finally_11 > 1) {
    _err := error_11
    goto __end
  } elseif (try_finally_11 > 0) {
    goto __end
  } else {
    goto post_with_11
  }
  label __end
}

method NoLock___init__(_cthread_145: Ref, _caller_measures_145: Seq[Measure$], _residue_145: Perm, self: Ref) returns (_current_wait_level_145: Perm)
  requires _cthread_145 != null
  requires issubtype(typeof(_cthread_145), Thread_0())
  requires self != null
  requires acc(_MaySet(self, 18921357502206297763743395104374886578), write)
  requires issubtype(typeof(self), NoLock())
  requires self != null
  requires [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_145) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]
  ensures acc(self.NoLock_value, write) && issubtype(typeof(self.NoLock_value), int())
  ensures int___eq__(self.NoLock_value, __prim__int___box__(4))
  ensures [true, (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_8: Ref
  var _cwl_145: Perm
  var _method_measures_145: Seq[Measure$]
  _method_measures_145 := Seq[Measure$]()
  inhale typeof(self) == NoLock()
  _err := null
  self_8 := self
  if (perm(_MaySet(self_8, 18921357502206297763743395104374886578)) > none) {
    exhale acc(_MaySet(self_8, 18921357502206297763743395104374886578), write)
    inhale acc(self_8.NoLock_value, write)
  }
  self_8.NoLock_value := __prim__int___box__(4)
  goto __end
  label __end
}

method NoLock___enter__(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm, self_0: Ref) returns (_current_wait_level_146: Perm, _res: Ref)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires issubtype(typeof(self_0), NoLock())
  requires self_0 != null
  requires acc(self_0.NoLock_value, write) && issubtype(typeof(self_0.NoLock_value), int())
  requires [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_43: Ref [MustInvokeBounded(_r_43)] :: false) && ((forperm _r_43: Ref [MustInvokeUnbounded(_r_43)] :: false) && ((forperm _r_43: Ref [_r_43.MustReleaseBounded] :: false) && (forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_41: Ref [_r_41.MustReleaseBounded] :: Level(_r_41) <= _current_wait_level_146) && ((forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: Level(_r_41) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures issubtype(typeof(_res), int())
  ensures acc(self_0.NoLock_value, write) && issubtype(typeof(self_0.NoLock_value), int()) && int___eq__(self_0.NoLock_value, __prim__int___box__(int___add__(int___unbox__(old(self_0.NoLock_value)), 5)))
  ensures int___eq__(_res, __prim__int___box__(9))
  ensures [true, (forperm _r_42: Ref [MustInvokeBounded(_r_42)] :: false) && ((forperm _r_42: Ref [MustInvokeUnbounded(_r_42)] :: false) && ((forperm _r_42: Ref [_r_42.MustReleaseBounded] :: false) && (forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_9: Ref
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq[Measure$]()
  inhale typeof(self_0) == NoLock()
  _res := null
  _err := null
  self_9 := self_0
  if (perm(_MaySet(self_9, 18921357502206297763743395104374886578)) > none) {
    exhale acc(_MaySet(self_9, 18921357502206297763743395104374886578), write)
    inhale acc(self_9.NoLock_value, write)
  }
  self_9.NoLock_value := __prim__int___box__(int___add__(int___unbox__(self_9.NoLock_value), 5))
  _res := __prim__int___box__(9)
  goto __end
  goto __end
  label __end
}

method NoLock___exit__(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, self_1: Ref, t_0: PyType, e: Ref, tb: Ref) returns (_current_wait_level_147: Perm, _res: Ref)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires issubtype(typeof(self_1), NoLock())
  requires true
  requires e == null || issubtype(typeof(e), Exception())
  requires issubtype(typeof(tb), object())
  requires self_1 != null
  requires acc(self_1.NoLock_value, write) && issubtype(typeof(self_1.NoLock_value), int())
  requires [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_46: Ref [MustInvokeBounded(_r_46)] :: false) && ((forperm _r_46: Ref [MustInvokeUnbounded(_r_46)] :: false) && ((forperm _r_46: Ref [_r_46.MustReleaseBounded] :: false) && (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_44: Ref [_r_44.MustReleaseBounded] :: Level(_r_44) <= _current_wait_level_147) && ((forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: Level(_r_44) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures issubtype(typeof(_res), int())
  ensures acc(self_1.NoLock_value, write) && issubtype(typeof(self_1.NoLock_value), int()) && int___eq__(self_1.NoLock_value, __prim__int___box__(int___add__(int___unbox__(old(self_1.NoLock_value)), 7)))
  ensures [true, (forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false) && ((forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false) && ((forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false) && (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_10: Ref
  var t_16: PyType
  var e_15: Ref
  var tb_15: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq[Measure$]()
  inhale typeof(self_1) == NoLock()
  _res := null
  _err := null
  self_10 := self_1
  t_16 := t_0
  e_15 := e
  tb_15 := tb
  if (perm(_MaySet(self_10, 18921357502206297763743395104374886578)) > none) {
    exhale acc(_MaySet(self_10, 18921357502206297763743395104374886578), write)
    inhale acc(self_10.NoLock_value, write)
  }
  self_10.NoLock_value := __prim__int___box__(int___add__(int___unbox__(self_10.NoLock_value), 7))
  _res := __prim__int___box__(7)
  goto __end
  goto __end
  label __end
}

method NoLockExOnly___init__(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, self_2: Ref) returns (_current_wait_level_148: Perm)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires self_2 != null
  requires acc(_MaySet(self_2, 14488567895815297650636835670701187559949365070), write)
  requires issubtype(typeof(self_2), NoLockExOnly())
  requires self_2 != null
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_49: Ref [MustInvokeBounded(_r_49)] :: false) && ((forperm _r_49: Ref [MustInvokeUnbounded(_r_49)] :: false) && ((forperm _r_49: Ref [_r_49.MustReleaseBounded] :: false) && (forperm _r_49: Ref [_r_49.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_47: Ref [_r_47.MustReleaseBounded] :: Level(_r_47) <= _current_wait_level_148) && ((forperm _r_47: Ref [_r_47.MustReleaseUnbounded] :: Level(_r_47) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures acc(self_2.NoLockExOnly_value, write) && issubtype(typeof(self_2.NoLockExOnly_value), int())
  ensures int___eq__(self_2.NoLockExOnly_value, __prim__int___box__(4))
  ensures [true, (forperm _r_48: Ref [MustInvokeBounded(_r_48)] :: false) && ((forperm _r_48: Ref [MustInvokeUnbounded(_r_48)] :: false) && ((forperm _r_48: Ref [_r_48.MustReleaseBounded] :: false) && (forperm _r_48: Ref [_r_48.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_11: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq[Measure$]()
  inhale typeof(self_2) == NoLockExOnly()
  _err := null
  self_11 := self_2
  if (perm(_MaySet(self_11, 14488567895815297650636835670701187559949365070)) > none) {
    exhale acc(_MaySet(self_11, 14488567895815297650636835670701187559949365070), write)
    inhale acc(self_11.NoLockExOnly_value, write)
  }
  self_11.NoLockExOnly_value := __prim__int___box__(4)
  goto __end
  label __end
}

method NoLockExOnly___enter__(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm, self_3: Ref) returns (_current_wait_level_149: Perm, _res: Ref)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires issubtype(typeof(self_3), NoLockExOnly())
  requires self_3 != null
  requires acc(self_3.NoLockExOnly_value, write) && issubtype(typeof(self_3.NoLockExOnly_value), int())
  requires [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_50: Ref [_r_50.MustReleaseBounded] :: Level(_r_50) <= _current_wait_level_149) && ((forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: Level(_r_50) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures issubtype(typeof(_res), int())
  ensures acc(self_3.NoLockExOnly_value, write) && issubtype(typeof(self_3.NoLockExOnly_value), int()) && int___eq__(self_3.NoLockExOnly_value, __prim__int___box__(int___add__(int___unbox__(old(self_3.NoLockExOnly_value)), 5)))
  ensures int___eq__(_res, __prim__int___box__(9))
  ensures [true, (forperm _r_51: Ref [MustInvokeBounded(_r_51)] :: false) && ((forperm _r_51: Ref [MustInvokeUnbounded(_r_51)] :: false) && ((forperm _r_51: Ref [_r_51.MustReleaseBounded] :: false) && (forperm _r_51: Ref [_r_51.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_12: Ref
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq[Measure$]()
  inhale typeof(self_3) == NoLockExOnly()
  _res := null
  _err := null
  self_12 := self_3
  if (perm(_MaySet(self_12, 14488567895815297650636835670701187559949365070)) > none) {
    exhale acc(_MaySet(self_12, 14488567895815297650636835670701187559949365070), write)
    inhale acc(self_12.NoLockExOnly_value, write)
  }
  self_12.NoLockExOnly_value := __prim__int___box__(int___add__(int___unbox__(self_12.NoLockExOnly_value), 5))
  _res := __prim__int___box__(9)
  goto __end
  goto __end
  label __end
}

method NoLockExOnly___exit__(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm, self_4: Ref, t_1: PyType, e_0: Ref, tb_0: Ref) returns (_current_wait_level_150: Perm, _res: Ref)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires issubtype(typeof(self_4), NoLockExOnly())
  requires true
  requires issubtype(typeof(e_0), Exception())
  requires issubtype(typeof(tb_0), object())
  requires self_4 != null
  requires acc(self_4.NoLockExOnly_value, write) && issubtype(typeof(self_4.NoLockExOnly_value), int())
  requires issubtype(typeof(e_0), MyException())
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_53: Ref [_r_53.MustReleaseBounded] :: Level(_r_53) <= _current_wait_level_150) && ((forperm _r_53: Ref [_r_53.MustReleaseUnbounded] :: Level(_r_53) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures issubtype(typeof(_res), int())
  ensures acc(self_4.NoLockExOnly_value, write) && issubtype(typeof(self_4.NoLockExOnly_value), int()) && int___eq__(self_4.NoLockExOnly_value, __prim__int___box__(int___add__(int___unbox__(old(self_4.NoLockExOnly_value)), 7)))
  ensures [true, (forperm _r_54: Ref [MustInvokeBounded(_r_54)] :: false) && ((forperm _r_54: Ref [MustInvokeUnbounded(_r_54)] :: false) && ((forperm _r_54: Ref [_r_54.MustReleaseBounded] :: false) && (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_13: Ref
  var t_17: PyType
  var e_16: Ref
  var tb_16: Ref
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq[Measure$]()
  inhale typeof(self_4) == NoLockExOnly()
  _res := null
  _err := null
  self_13 := self_4
  t_17 := t_1
  e_16 := e_0
  tb_16 := tb_0
  if (perm(_MaySet(self_13, 14488567895815297650636835670701187559949365070)) > none) {
    exhale acc(_MaySet(self_13, 14488567895815297650636835670701187559949365070), write)
    inhale acc(self_13.NoLockExOnly_value, write)
  }
  self_13.NoLockExOnly_value := __prim__int___box__(int___add__(int___unbox__(self_13.NoLockExOnly_value), 7))
  _res := __prim__int___box__(7)
  goto __end
  goto __end
  label __end
}

method NoLockNoEx___init__(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_151: Perm, self_5: Ref) returns (_current_wait_level_151: Perm)
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires self_5 != null
  requires acc(_MaySet(self_5, 29641230529734471557654548391134816336400379726), write)
  requires issubtype(typeof(self_5), NoLockNoEx())
  requires self_5 != null
  requires [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_58: Ref [MustInvokeBounded(_r_58)] :: false) && ((forperm _r_58: Ref [MustInvokeUnbounded(_r_58)] :: false) && ((forperm _r_58: Ref [_r_58.MustReleaseBounded] :: false) && (forperm _r_58: Ref [_r_58.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_56: Ref [_r_56.MustReleaseBounded] :: Level(_r_56) <= _current_wait_level_151) && ((forperm _r_56: Ref [_r_56.MustReleaseUnbounded] :: Level(_r_56) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]
  ensures acc(self_5.NoLockNoEx_value, write) && issubtype(typeof(self_5.NoLockNoEx_value), int())
  ensures int___eq__(self_5.NoLockNoEx_value, __prim__int___box__(4))
  ensures [true, (forperm _r_57: Ref [MustInvokeBounded(_r_57)] :: false) && ((forperm _r_57: Ref [MustInvokeUnbounded(_r_57)] :: false) && ((forperm _r_57: Ref [_r_57.MustReleaseBounded] :: false) && (forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_14: Ref
  var _cwl_151: Perm
  var _method_measures_151: Seq[Measure$]
  _method_measures_151 := Seq[Measure$]()
  inhale typeof(self_5) == NoLockNoEx()
  _err := null
  self_14 := self_5
  if (perm(_MaySet(self_14, 29641230529734471557654548391134816336400379726)) > none) {
    exhale acc(_MaySet(self_14, 29641230529734471557654548391134816336400379726), write)
    inhale acc(self_14.NoLockNoEx_value, write)
  }
  self_14.NoLockNoEx_value := __prim__int___box__(4)
  goto __end
  label __end
}

method NoLockNoEx___enter__(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm, self_6: Ref) returns (_current_wait_level_152: Perm, _res: Ref)
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires issubtype(typeof(self_6), NoLockNoEx())
  requires self_6 != null
  requires acc(self_6.NoLockNoEx_value, write) && issubtype(typeof(self_6.NoLockNoEx_value), int())
  requires [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_61: Ref [MustInvokeBounded(_r_61)] :: false) && ((forperm _r_61: Ref [MustInvokeUnbounded(_r_61)] :: false) && ((forperm _r_61: Ref [_r_61.MustReleaseBounded] :: false) && (forperm _r_61: Ref [_r_61.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_59: Ref [_r_59.MustReleaseBounded] :: Level(_r_59) <= _current_wait_level_152) && ((forperm _r_59: Ref [_r_59.MustReleaseUnbounded] :: Level(_r_59) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures issubtype(typeof(_res), int())
  ensures acc(self_6.NoLockNoEx_value, write) && issubtype(typeof(self_6.NoLockNoEx_value), int()) && int___eq__(self_6.NoLockNoEx_value, __prim__int___box__(int___add__(int___unbox__(old(self_6.NoLockNoEx_value)), 5)))
  ensures int___eq__(_res, __prim__int___box__(9))
  ensures [true, (forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_15: Ref
  var _cwl_152: Perm
  var _method_measures_152: Seq[Measure$]
  _method_measures_152 := Seq[Measure$]()
  inhale typeof(self_6) == NoLockNoEx()
  _res := null
  _err := null
  self_15 := self_6
  if (perm(_MaySet(self_15, 29641230529734471557654548391134816336400379726)) > none) {
    exhale acc(_MaySet(self_15, 29641230529734471557654548391134816336400379726), write)
    inhale acc(self_15.NoLockNoEx_value, write)
  }
  self_15.NoLockNoEx_value := __prim__int___box__(int___add__(int___unbox__(self_15.NoLockNoEx_value), 5))
  _res := __prim__int___box__(9)
  goto __end
  goto __end
  label __end
}

method NoLockNoEx___exit__(_cthread_153: Ref, _caller_measures_153: Seq[Measure$], _residue_153: Perm, self_7: Ref, t_2: PyType, e_1: Ref, tb_1: Ref) returns (_current_wait_level_153: Perm, _res: Ref)
  requires _cthread_153 != null
  requires issubtype(typeof(_cthread_153), Thread_0())
  requires issubtype(typeof(self_7), NoLockNoEx())
  requires true
  requires e_1 == null || issubtype(typeof(e_1), Exception())
  requires issubtype(typeof(tb_1), object())
  requires self_7 != null
  requires e_1 == null
  requires tb_1 == null
  requires acc(self_7.NoLockNoEx_value, write) && issubtype(typeof(self_7.NoLockNoEx_value), int())
  requires [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_64: Ref [MustInvokeBounded(_r_64)] :: false) && ((forperm _r_64: Ref [MustInvokeUnbounded(_r_64)] :: false) && ((forperm _r_64: Ref [_r_64.MustReleaseBounded] :: false) && (forperm _r_64: Ref [_r_64.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_62: Ref [_r_62.MustReleaseBounded] :: Level(_r_62) <= _current_wait_level_153) && ((forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: Level(_r_62) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]
  ensures issubtype(typeof(_res), int())
  ensures acc(self_7.NoLockNoEx_value, write) && issubtype(typeof(self_7.NoLockNoEx_value), int()) && int___eq__(self_7.NoLockNoEx_value, __prim__int___box__(int___add__(int___unbox__(old(self_7.NoLockNoEx_value)), 7)))
  ensures [true, (forperm _r_63: Ref [MustInvokeBounded(_r_63)] :: false) && ((forperm _r_63: Ref [MustInvokeUnbounded(_r_63)] :: false) && ((forperm _r_63: Ref [_r_63.MustReleaseBounded] :: false) && (forperm _r_63: Ref [_r_63.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_16: Ref
  var t_18: PyType
  var e_17: Ref
  var tb_17: Ref
  var _cwl_153: Perm
  var _method_measures_153: Seq[Measure$]
  _method_measures_153 := Seq[Measure$]()
  inhale typeof(self_7) == NoLockNoEx()
  _res := null
  _err := null
  self_16 := self_7
  t_18 := t_2
  e_17 := e_1
  tb_17 := tb_1
  if (perm(_MaySet(self_16, 29641230529734471557654548391134816336400379726)) > none) {
    exhale acc(_MaySet(self_16, 29641230529734471557654548391134816336400379726), write)
    inhale acc(self_16.NoLockNoEx_value, write)
  }
  self_16.NoLockNoEx_value := __prim__int___box__(int___add__(int___unbox__(self_16.NoLockNoEx_value), 7))
  _res := __prim__int___box__(7)
  goto __end
  goto __end
  label __end
}

method main(_cthread_167: Ref, _caller_measures_167: Seq[Measure$], _residue_167: Perm) returns (_current_wait_level_167: Perm)
  requires _cthread_167 != null
  requires issubtype(typeof(_cthread_167), Thread_0())
  requires [true, perm(MustTerminate(_cthread_167)) == none && ((forperm _r_67: Ref [MustInvokeBounded(_r_67)] :: false) && ((forperm _r_67: Ref [MustInvokeUnbounded(_r_67)] :: false) && ((forperm _r_67: Ref [_r_67.MustReleaseBounded] :: false) && (forperm _r_67: Ref [_r_67.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_65: Ref [_r_65.MustReleaseBounded] :: Level(_r_65) <= _current_wait_level_167) && ((forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: Level(_r_65) <= _current_wait_level_167) && _residue_167 <= _current_wait_level_167), true]
  ensures [true, (forperm _r_66: Ref [MustInvokeBounded(_r_66)] :: false) && ((forperm _r_66: Ref [MustInvokeUnbounded(_r_66)] :: false) && ((forperm _r_66: Ref [_r_66.MustReleaseBounded] :: false) && (forperm _r_66: Ref [_r_66.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var _cwl_167: Perm
  var _method_measures_167: Seq[Measure$]
  _method_measures_167 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_names_0 := (module_names_0 union Set(_single(3906937610535144108)))
  module_names_0 := (module_names_0 union Set(_single(5123216512802524336881954895)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(3504123161097356886321487711)))
  module_names_0 := (module_names_0 union Set(_single(4266384453499978334419115871)))
  module_names_0 := (module_names_0 union Set(_single(4010071779697725618)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(7650084617053181585792530765)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(3504123161097356886321487711)))
  module_names_0 := (module_names_0 union Set(_single(4266384453499978334419115871)))
  module_names_0 := (module_names_0 union Set(_single(11553507852245712390837905914623922354)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(3504123161097356886321487711)))
  module_names_0 := (module_names_0 union Set(_single(4266384453499978334419115871)))
  module_names_0 := (module_names_0 union Set(_single(6028657065521957366234115918)))
  assert true && (_single(4010071779697725618) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(3653873535515267997)))
  assert true && (_single(4010071779697725618) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(2671807346066756509)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(2743864940104684445)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(2815922534142612381)))
  assert true && (_single(11553507852245712390837905914623922354) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(16263629929857210902914477386743845789)))
  assert true && (_single(11553507852245712390837905914623922354) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(16525171601696299193031277192077022109)))
  assert true && (_single(11553507852245712390837905914623922354) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(16530363898554834020659807688406242205)))
  assert true && (_single(11553507852245712390837905914623922354) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(16535556195413368848288338184735462301)))
  assert true && (_single(11553507852245712390837905914623922354) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(16540748492271903675916868681064682397)))
  assert true && (_single(6028657065521957366234115918) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(5264242673827173147429399651)))
  assert true && (_single(6028657065521957366234115918) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(10640265049419122972389289665043534749)))
  assert true && (_single(6028657065521957366234115918) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(10640265128647285486653627258587485085)))
  assert true && (_single(6028657065521957366234115918) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(10640265207875448000917964852131435421)))
  goto __end
  label __end
}