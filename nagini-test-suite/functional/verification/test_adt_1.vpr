domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function LinkedList(): PyType
  
  unique function Node(): PyType
  
  unique function Null(): PyType
  
  unique function ADT(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_LinkedList {
    extends_(LinkedList(), ADT()) && get_basic(LinkedList()) == LinkedList()
  }
  
  axiom subtype_Node {
    extends_(Node(), LinkedList()) && get_basic(Node()) == Node()
  }
  
  axiom subtype_Null {
    extends_(Null(), LinkedList()) && get_basic(Null()) == Null()
  }
  
  axiom subtype_ADT {
    extends_(ADT(), object()) && get_basic(ADT()) == ADT()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  unique function get_head_0(): Function
  
  unique function get_ith_value_0(): Function
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function common_use_of_ADTs_threading(): ThreadingID
  
  unique function prepend_threading(): ThreadingID
  
  unique function constructor_totality_1_threading(): ThreadingID
  
  unique function constructor_totality_2_threading(): ThreadingID
  
  unique function constructor_instance_1_threading(): ThreadingID
  
  unique function constructor_instance_2_threading(): ThreadingID
  
  unique function deconstructor_in_contract_1_threading(): ThreadingID
  
  unique function deconstructor_in_constract_2_threading(): ThreadingID
  
  unique function receive_object_and_convert_to_adt_threading(): ThreadingID
  
  unique function test_predicate_positive_values_threading(): ThreadingID
  
  unique function test_globals_threading(): ThreadingID
  
  unique function wrong_cast_1_threading(): ThreadingID
  
  unique function wrong_cast_2_threading(): ThreadingID
}

domain LinkedList_0 {
  
  function LinkedList_Node(elem: Int, next: LinkedList_0): LinkedList_0
  
  function LinkedList_Null(): LinkedList_0
  
  function LinkedList_Node_elem(obj: LinkedList_0): Int
  
  function LinkedList_Node_next(obj: LinkedList_0): LinkedList_0
  
  function LinkedList_cons_type(obj: LinkedList_0): Int
  
  unique function LinkedList_Node_type(): Int
  
  unique function LinkedList_Null_type(): Int
  
  function LinkedList_is_Node(obj: LinkedList_0): Bool
  
  function LinkedList_is_Null(obj: LinkedList_0): Bool
  
  axiom LinkedList_decons_over_cons_Node {
    (forall elem: Int, next: LinkedList_0 :: { LinkedList_Node_elem(LinkedList_Node(elem, next)) } { LinkedList_Node_next(LinkedList_Node(elem, next)) } LinkedList_Node_elem(LinkedList_Node(elem, next)) == elem && LinkedList_Node_next(LinkedList_Node(elem, next)) == next)
  }
  
  axiom LinkedList_cons_Node_over_decons {
    (forall obj: LinkedList_0 :: { LinkedList_is_Node(obj) } LinkedList_is_Node(obj) ==> obj == LinkedList_Node(LinkedList_Node_elem(obj), LinkedList_Node_next(obj)))
  }
  
  axiom LinkedList_associate_cons_type_function_with_Node_constant {
    (forall elem: Int, next: LinkedList_0 :: { LinkedList_Node(elem, next) } LinkedList_cons_type(LinkedList_Node(elem, next)) == LinkedList_Node_type())
  }
  
  axiom LinkedList_associate_cons_type_function_with_Null_constant {
    LinkedList_cons_type(LinkedList_Null()) == LinkedList_Null_type()
  }
  
  axiom LinkedList_constrain_cons_type_function_cons_constants {
    (forall obj: LinkedList_0 :: { LinkedList_cons_type(obj) } LinkedList_cons_type(obj) == LinkedList_Node_type() || LinkedList_cons_type(obj) == LinkedList_Null_type())
  }
  
  axiom LinkedList_associate_cons_type_function_with_is_Node_bool_function {
    (forall obj: LinkedList_0 :: { LinkedList_cons_type(obj) } (LinkedList_cons_type(obj) == LinkedList_Node_type()) == LinkedList_is_Node(obj))
  }
  
  axiom LinkedList_associate_cons_type_function_with_is_Null_bool_function {
    (forall obj: LinkedList_0 :: { LinkedList_cons_type(obj) } (LinkedList_cons_type(obj) == LinkedList_Null_type()) == LinkedList_is_Null(obj))
  }
  
  axiom LinkedList_type_of_constructors {
    (forall ref: Ref :: { issubtype(typeof(ref), LinkedList()) } issubtype(typeof(ref), LinkedList()) ==> typeof(ref) == Node() || typeof(ref) == Null())
  }
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function get_head(l: Ref): Ref
  requires issubtype(typeof(l), LinkedList())
  requires Node() == typeof(l)
  requires acc(positive_values_predicate(l), write)
  ensures issubtype(typeof(result), int())
  ensures int___gt__(int___unbox__(result), 0) 
{
  __prim__int___box__((unfolding acc(positive_values_predicate(l), write) in LinkedList_Node_elem(unbox_LinkedList_0(object___cast__(Node(), l)))))
}

function get_ith_value(l_0: Ref, index: Ref): Ref
  requires issubtype(typeof(l_0), LinkedList())
  requires issubtype(typeof(index), int())
  requires acc(positive_values_predicate(l_0), write)
  requires int___ge__(int___unbox__(index), 0)
  ensures issubtype(typeof(result), int())
  ensures int___ge__(int___unbox__(result), 0) 
{
  (unfolding acc(positive_values_predicate(l_0), write) in (Null() == typeof(l_0) ? __prim__int___box__(0) : (int___eq__(index, __prim__int___box__(0)) ? __prim__int___box__(LinkedList_Node_elem(unbox_LinkedList_0(object___cast__(Node(), l_0)))) : get_ith_value(box_LinkedList_0(LinkedList_Node_next(unbox_LinkedList_0(object___cast__(Node(), l_0)))), __prim__int___box__(int___sub__(int___unbox__(index), 1))))))
}

function __file__(): Ref 


function __name__(): Ref 


function global_adt(): Ref
  ensures issubtype(typeof(result), Node())
  ensures result == box_LinkedList_0(LinkedList_Node(62, unbox_LinkedList_0(box_LinkedList_0(LinkedList_Node(32, unbox_LinkedList_0(box_LinkedList_0(LinkedList_Null()))))))) 
{
  box_LinkedList_0(LinkedList_Node(62, unbox_LinkedList_0(box_LinkedList_0(LinkedList_Node(32, unbox_LinkedList_0(box_LinkedList_0(LinkedList_Null())))))))
}

function __file___0(): Ref 


function __name___0(): Ref 


function box_LinkedList_0(obj: LinkedList_0): Ref
  ensures issubtype(typeof(result), LinkedList())
  ensures unbox_LinkedList_0(result) == obj
  ensures LinkedList_is_Node(obj) ==> typeof(result) == Node()
  ensures LinkedList_is_Null(obj) ==> typeof(result) == Null() 


function unbox_LinkedList_0(ref: Ref): LinkedList_0
  requires issubtype(typeof(ref), LinkedList())
  ensures box_LinkedList_0(result) == ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function int___ge__(self: Int, other: Int): Bool 
{
  self >= other
}

function int___gt__(self: Int, other: Int): Bool 
{
  self > other
}

function int___sub__(self: Int, other: Int): Int 
{
  self - other
}

function int___mul__(self: Int, other: Int): Int 
{
  self * other
}

function object___eq__(self: Ref, other: Ref): Bool
  ensures self == other ==> result
  ensures (self == null) != (other == null) ==> !result 


function object___cast__(typ: PyType, obj: Ref): Ref
  requires issubtype(typeof(obj), typ)
  ensures result == obj
  ensures issubtype(typeof(obj), typ) 


function Level(r: Ref): Perm 


function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate positive_values_predicate(l_15: Ref) {
  true && issubtype(typeof(l_15), LinkedList()) && (Node() == typeof(l_15) ==> int() == typeof(__prim__int___box__(LinkedList_Node_elem(unbox_LinkedList_0(object___cast__(Node(), l_15))))) && (int___gt__(LinkedList_Node_elem(unbox_LinkedList_0(object___cast__(Node(), l_15))), 0) && acc(positive_values_predicate(box_LinkedList_0(LinkedList_Node_next(unbox_LinkedList_0(object___cast__(Node(), l_15))))), write)))
}

method common_use_of_ADTs(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm) returns (_current_wait_level_147: Perm)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_147) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l_1: Ref
  var l_2: Ref
  var x_0: Ref
  var l_3: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq[Measure$]()
  _err := null
  l_1 := box_LinkedList_0(LinkedList_Null())
  inhale _isDefined(3235692)
  l_2 := box_LinkedList_0(LinkedList_Node(2, unbox_LinkedList_0(box_LinkedList_0(LinkedList_Null()))))
  inhale _isDefined(3301228)
  x_0 := __prim__int___box__(LinkedList_Node_elem(unbox_LinkedList_0(_checkDefined(l_2, 3301228))))
  inhale _isDefined(3170168)
  assert int___eq__(__prim__int___box__(LinkedList_Node_elem(unbox_LinkedList_0(_checkDefined(l_2, 3301228)))), _checkDefined(x_0, 3170168))
  assert int___eq__(__prim__int___box__(LinkedList_Node_elem(unbox_LinkedList_0(_checkDefined(l_2, 3301228)))), __prim__int___box__(2))
  l_3 := box_LinkedList_0(LinkedList_Node(3, unbox_LinkedList_0(box_LinkedList_0(LinkedList_Node(4, unbox_LinkedList_0(box_LinkedList_0(LinkedList_Null())))))))
  inhale _isDefined(3366764)
  assert int___eq__(__prim__int___box__(LinkedList_Node_elem(unbox_LinkedList_0(object___cast__(Node(), box_LinkedList_0(LinkedList_Node_next(unbox_LinkedList_0(_checkDefined(l_3, 3366764)))))))), __prim__int___box__(4))
  goto __end
  label __end
}

method prepend(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, l_4: Ref, elem: Ref) returns (_current_wait_level_148: Perm, _res: Ref)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires issubtype(typeof(l_4), LinkedList())
  requires issubtype(typeof(elem), int())
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_148) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures issubtype(typeof(_res), LinkedList())
  ensures object___eq__(_res, box_LinkedList_0(LinkedList_Node(int___unbox__(elem), unbox_LinkedList_0(l_4))))
  ensures [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l_16: Ref
  var elem_0: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq[Measure$]()
  _res := null
  _err := null
  l_16 := l_4
  elem_0 := elem
  _res := box_LinkedList_0(LinkedList_Node(int___unbox__(elem_0), unbox_LinkedList_0(l_16)))
  goto __end
  goto __end
  label __end
}

method constructor_totality_1(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm, l_5: Ref) returns (_current_wait_level_149: Perm)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires issubtype(typeof(l_5), LinkedList())
  requires [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_149) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l_17: Ref
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq[Measure$]()
  _err := null
  l_17 := l_5
  if (Node() == typeof(l_17)) {
    assert Null() != typeof(l_17)
  } else {
    assert Null() == typeof(l_17)
  }
  goto __end
  label __end
}

method constructor_totality_2(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm, l_6: Ref) returns (_current_wait_level_150: Perm)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires issubtype(typeof(l_6), LinkedList())
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_150) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures [true, (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l_18: Ref
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq[Measure$]()
  _err := null
  l_18 := l_6
  if (Null() == typeof(l_18)) {
    assert Node() != typeof(l_18)
  } else {
    assert Node() == typeof(l_18)
  }
  goto __end
  label __end
}

method constructor_instance_1(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_151: Perm, l_7: Ref) returns (_current_wait_level_151: Perm)
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires issubtype(typeof(l_7), LinkedList())
  requires [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_151) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l_19: Ref
  var _cwl_151: Perm
  var _method_measures_151: Seq[Measure$]
  _method_measures_151 := Seq[Measure$]()
  _err := null
  l_19 := l_7
  if (issubtype(typeof(l_19), Null())) {
    assert !issubtype(typeof(l_19), Node())
  } else {
    assert !issubtype(typeof(l_19), Null())
    assert issubtype(typeof(l_19), Node()) || issubtype(typeof(l_19), LinkedList())
  }
  goto __end
  label __end
}

method constructor_instance_2(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm, l_8: Ref) returns (_current_wait_level_152: Perm)
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires issubtype(typeof(l_8), LinkedList())
  requires [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_152) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l_20: Ref
  var _cwl_152: Perm
  var _method_measures_152: Seq[Measure$]
  _method_measures_152 := Seq[Measure$]()
  _err := null
  l_20 := l_8
  if (issubtype(typeof(l_20), Node())) {
    assert !issubtype(typeof(l_20), Null())
  } else {
    assert !issubtype(typeof(l_20), Node())
    assert issubtype(typeof(l_20), Null()) || issubtype(typeof(l_20), LinkedList())
  }
  goto __end
  label __end
}

method deconstructor_in_contract_1(_cthread_153: Ref, _caller_measures_153: Seq[Measure$], _residue_153: Perm, l_9: Ref) returns (_current_wait_level_153: Perm, _res: Ref)
  requires _cthread_153 != null
  requires issubtype(typeof(_cthread_153), Thread_0())
  requires issubtype(typeof(l_9), Node())
  requires issubtype(typeof(__prim__int___box__(LinkedList_Node_elem(unbox_LinkedList_0(l_9)))), int())
  requires int___eq__(__prim__int___box__(LinkedList_Node_elem(unbox_LinkedList_0(l_9))), __prim__int___box__(5))
  requires [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_19: Ref [MustInvokeBounded(_r_19)] :: false) && ((forperm _r_19: Ref [MustInvokeUnbounded(_r_19)] :: false) && ((forperm _r_19: Ref [_r_19.MustReleaseBounded] :: false) && (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_153) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]
  ensures issubtype(typeof(_res), int())
  ensures int___eq__(_res, __prim__int___box__(10))
  ensures [true, (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l_21: Ref
  var _cwl_153: Perm
  var _method_measures_153: Seq[Measure$]
  _method_measures_153 := Seq[Measure$]()
  _res := null
  _err := null
  l_21 := l_9
  _res := __prim__int___box__(int___mul__(LinkedList_Node_elem(unbox_LinkedList_0(l_21)), 2))
  goto __end
  goto __end
  label __end
}

method deconstructor_in_constract_2(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm, l_10: Ref) returns (_current_wait_level_154: Perm, _res: Ref)
  requires _cthread_154 != null
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires issubtype(typeof(l_10), LinkedList())
  requires Node() == typeof(l_10)
  requires issubtype(typeof(__prim__int___box__(LinkedList_Node_elem(unbox_LinkedList_0(object___cast__(Node(), l_10))))), int())
  requires int___eq__(__prim__int___box__(LinkedList_Node_elem(unbox_LinkedList_0(object___cast__(Node(), l_10)))), __prim__int___box__(5))
  requires [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_154) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]
  ensures issubtype(typeof(_res), int())
  ensures int___eq__(_res, __prim__int___box__(10))
  ensures [true, (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l_22: Ref
  var _cwl_154: Perm
  var _method_measures_154: Seq[Measure$]
  _method_measures_154 := Seq[Measure$]()
  _res := null
  _err := null
  l_22 := l_10
  _res := __prim__int___box__(int___mul__(LinkedList_Node_elem(unbox_LinkedList_0(object___cast__(Node(), l_22))), 2))
  goto __end
  goto __end
  label __end
}

method receive_object_and_convert_to_adt(_cthread_155: Ref, _caller_measures_155: Seq[Measure$], _residue_155: Perm, o: Ref) returns (_current_wait_level_155: Perm)
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires issubtype(typeof(o), object())
  requires issubtype(typeof(o), LinkedList())
  requires Null() == typeof(o)
  requires [true, perm(MustTerminate(_cthread_155)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_155) && ((forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_155) && _residue_155 <= _current_wait_level_155), true]
  ensures [true, (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l_11: Ref
  var o_0: Ref
  var _cwl_155: Perm
  var _method_measures_155: Seq[Measure$]
  _method_measures_155 := Seq[Measure$]()
  _err := null
  o_0 := o
  l_11 := object___cast__(LinkedList(), o_0)
  inhale _isDefined(825319276)
  assert Null() == typeof(o_0)
  goto __end
  label __end
}

method test_predicate_positive_values(_cthread_156: Ref, _caller_measures_156: Seq[Measure$], _residue_156: Perm, l_12: Ref) returns (_current_wait_level_156: Perm)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires issubtype(typeof(l_12), LinkedList())
  requires acc(positive_values_predicate(l_12), write)
  requires Node() == typeof(l_12)
  requires [true, perm(MustTerminate(_cthread_156)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_156) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]
  ensures acc(positive_values_predicate(l_12), write)
  ensures [true, (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var l_23: Ref
  var _cwl_156: Perm
  var _method_measures_156: Seq[Measure$]
  _method_measures_156 := Seq[Measure$]()
  _err := null
  l_23 := l_12
  unfold acc(positive_values_predicate(l_23), write)
  assert int___gt__(LinkedList_Node_elem(unbox_LinkedList_0(object___cast__(Node(), l_23))), 0)
  fold acc(positive_values_predicate(l_23), write)
  goto __end
  label __end
}

method test_globals(_cthread_157: Ref, _caller_measures_157: Seq[Measure$], _residue_157: Perm) returns (_current_wait_level_157: Perm)
  requires _cthread_157 != null
  requires issubtype(typeof(_cthread_157), Thread_0())
  requires [true, perm(MustTerminate(_cthread_157)) == none && ((forperm _r_31: Ref [MustInvokeBounded(_r_31)] :: false) && ((forperm _r_31: Ref [MustInvokeUnbounded(_r_31)] :: false) && ((forperm _r_31: Ref [_r_31.MustReleaseBounded] :: false) && (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_157) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]
  ensures [true, (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var _cwl_157: Perm
  var _method_measures_157: Seq[Measure$]
  _method_measures_157 := Seq[Measure$]()
  _err := null
  assert int___eq__(__prim__int___box__(LinkedList_Node_elem(unbox_LinkedList_0(global_adt()))), __prim__int___box__(62))
  assert int___eq__(__prim__int___box__(LinkedList_Node_elem(unbox_LinkedList_0(object___cast__(Node(), box_LinkedList_0(LinkedList_Node_next(unbox_LinkedList_0(global_adt()))))))), __prim__int___box__(32))
  goto __end
  label __end
}

method wrong_cast_1(_cthread_158: Ref, _caller_measures_158: Seq[Measure$], _residue_158: Perm, l_13: Ref) returns (_current_wait_level_158: Perm)
  requires _cthread_158 != null
  requires issubtype(typeof(_cthread_158), Thread_0())
  requires issubtype(typeof(l_13), LinkedList())
  requires object___eq__(l_13, box_LinkedList_0(LinkedList_Node(3, unbox_LinkedList_0(box_LinkedList_0(LinkedList_Node(4, unbox_LinkedList_0(box_LinkedList_0(LinkedList_Null()))))))))
  requires [true, perm(MustTerminate(_cthread_158)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_158) && ((forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158), true]
  ensures [true, (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var temp: Ref
  var l_24: Ref
  var _cwl_158: Perm
  var _method_measures_158: Seq[Measure$]
  _method_measures_158 := Seq[Measure$]()
  _err := null
  l_24 := l_13
  temp := object___cast__(Null(), l_24)
  inhale _isDefined(1886217588)
  goto __end
  label __end
}

method wrong_cast_2(_cthread_159: Ref, _caller_measures_159: Seq[Measure$], _residue_159: Perm, l_14: Ref) returns (_current_wait_level_159: Perm)
  requires _cthread_159 != null
  requires issubtype(typeof(_cthread_159), Thread_0())
  requires issubtype(typeof(l_14), LinkedList())
  requires object___eq__(l_14, box_LinkedList_0(LinkedList_Node(3, unbox_LinkedList_0(box_LinkedList_0(LinkedList_Null())))))
  requires [true, perm(MustTerminate(_cthread_159)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_159) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159), true]
  ensures [true, (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var temp_0: Ref
  var l_25: Ref
  var _cwl_159: Perm
  var _method_measures_159: Seq[Measure$]
  _method_measures_159 := Seq[Measure$]()
  _err := null
  l_25 := l_14
  temp_0 := object___cast__(Null(), l_25)
  inhale _isDefined(4050674609493809804)
  goto __end
  label __end
}

method main(_cthread_161: Ref, _caller_measures_161: Seq[Measure$], _residue_161: Perm) returns (_current_wait_level_161: Perm)
  requires _cthread_161 != null
  requires issubtype(typeof(_cthread_161), Thread_0())
  requires [true, perm(MustTerminate(_cthread_161)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_161) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161), true]
  ensures [true, (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var module_defined_1: Bool
  var module_names_1: Set[_Name]
  var _cwl_161: Perm
  var _method_measures_161: Seq[Measure$]
  _method_measures_161 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_defined_1 := false
  module_names_1 := Set[_Name]()
  module_names_1 := (module_names_1 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file___0()._val, 99 / 100) && issubtype(typeof(__file___0()._val), str()) && issubtype(typeof(__file___0()._val), str())
  module_names_1 := (module_names_1 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name___0()._val, 99 / 100) && issubtype(typeof(__name___0()._val), str()) && issubtype(typeof(__name___0()._val), str()) && !str___eq__(str___create__(8, 2489249333222104298408468319), __name___0()._val)
  if (!module_defined_1) {
    module_defined_1 := true
    assert true
    module_names_1 := (module_names_1 union Set(_single(5522497)))
  }
  assert (_single(5522497) in module_names_1)
  module_names_0 := (module_names_0 union Set(_single(5522497)))
  module_names_0 := (module_names_0 union Set(_single(1953718627)))
  module_names_0 := (module_names_0 union Set(_single(1953720652)))
  module_names_0 := (module_names_0 union Set(_single(5443074906187839357460504910)))
  assert true
  assert true && (_single(5522497) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(4799742327070523445543332172)))
  assert true
  assert true && (_single(4799742327070523445543332172) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(1701080910)))
  assert true
  assert true && (_single(4799742327070523445543332172) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(1819047246)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(19886790378824143444564292001352457875501182819)))
  assert true && (_single(4799742327070523445543332172) in module_names_0) && (_single(4799742327070523445543332172) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(4077771540984925584)))
  assert true && (_single(4799742327070523445543332172) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(69786357627064428175398462362784461828984212921997430941)))
  assert true && (_single(4799742327070523445543332172) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(69786731771483584886545522506101637197437244840728432797)))
  assert true && (_single(4799742327070523445543332172) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(38299193084500275820593873620806963279525376764087996573)))
  assert true && (_single(4799742327070523445543332172) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(38299567228919432531740933764124138647978408682818998429)))
  assert true && (_single(1701080910) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(166023798489760479152827560950699396172651096820201269458131707236)))
  assert true && (_single(4799742327070523445543332172) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(178599239674977852303547003238172428194340599793251242945906852898023447196)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(866187427705680888776839556113444127116780333629472380396985307919875469749029922162)))
  assert true && (_single(4799742327070523445543332172) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(85598101068507915170989028578730737493046172594952120356656344944)))
  assert true && (_single(4799742327070523445543332172) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(305570282386616403561745292108242866578426122172213240973688680303291046540)))
  assert true && (_single(4799742327070523445543332172) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(3111529759220699379249997159)))
  assert true && (_single(4799742327070523445543332172) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(19267861252884644471569972785595521689)))
  inhale global_adt() == box_LinkedList_0(LinkedList_Node(62, unbox_LinkedList_0(box_LinkedList_0(LinkedList_Node(32, unbox_LinkedList_0(box_LinkedList_0(LinkedList_Null())))))))
  module_names_0 := (module_names_0 union Set(_single(2877270285809363681306176615)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(5481589305288502063825537931777186444)))
  assert true && (_single(4799742327070523445543332172) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(19722947399582246696843133475038989705)))
  assert true && (_single(4799742327070523445543332172) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(20387561397165219623473691936454380937)))
  goto __end
  label __end
}