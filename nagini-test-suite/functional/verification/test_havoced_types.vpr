domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function A(): PyType
  
  unique function B(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_A {
    extends_(A(), object()) && get_basic(A()) == A()
  }
  
  axiom subtype_B {
    extends_(B(), object()) && get_basic(B()) == B()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function m_threading(): ThreadingID
  
  unique function m2_threading(): ThreadingID
  
  unique function m3_threading(): ThreadingID
  
  unique function m4_threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field A_a: Ref

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___ge__(self: Int, other: Int): Bool 
{
  self >= other
}

function int___gt__(self: Int, other: Int): Bool 
{
  self > other
}

function int___lt__(self: Int, other: Int): Bool 
{
  self < other
}

function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function list___contains__(self: Ref, item: Ref): Bool
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_acc, wildcard)
  ensures result == (item in self.list_acc) 


function list___len__(self: Ref): Int
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_acc, wildcard) 
{
  |self.list_acc|
}

function list___getitem__(self: Ref, key: Ref): Ref
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires issubtype(typeof(key), int())
  requires acc(self.list_acc, wildcard)
  requires (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
  ensures result == (int___unbox__(key) >= 0 ? self.list_acc[int___unbox__(key)] : self.list_acc[list___len__(self) + int___unbox__(key)])
  ensures [issubtype(typeof(result), list_arg(typeof(self), 0)), true] 


function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

method m_0(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm, l: Ref) returns (_current_wait_level_146: Perm)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires issubtype(typeof(l), list(A()))
  requires acc(l.list_acc, write)
  requires true && (forall lambda15_23$a: Ref :: { (lambda15_23$a in l.list_acc) } issubtype(typeof(lambda15_23$a), A()) && (lambda15_23$a in l.list_acc) ==> acc(lambda15_23$a.A_a, write)) && (forall lambda15_23$a: Ref :: { (lambda15_23$a in l.list_acc) } issubtype(typeof(lambda15_23$a), A()) && (lambda15_23$a in l.list_acc) ==> issubtype(typeof(lambda15_23$a.A_a), int()))
  requires int___gt__(list___len__(l), 2)
  requires [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_146) && ((forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures [true, (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var myb: Ref
  var i: Ref
  var l_3: Ref
  var _loop_measures: Seq[Measure$]
  var _loop_check_before: Bool
  var _loop_termination_flag: Bool
  var _loop_original_must_terminate: Perm
  var _residue_150: Perm
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq[Measure$]()
  _err := null
  l_3 := l
  myb := list___getitem__(l_3, __prim__int___box__(0))
  inhale _isDefined(6453613)
  i := __prim__int___box__(0)
  inhale _isDefined(105)
  // Save current MustTerminate amount._loop_original_must_terminate := perm(MustTerminate(_cthread_146))
  // Save loop termination promise._loop_termination_flag := false
  // We are before loop._loop_check_before := true
  while (int___lt__(int___unbox__(_checkDefined(i, 105)), list___len__(l_3)))
    invariant [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_150) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_150) && _residue_146 <= _residue_150), true]
    invariant true
    invariant issubtype(typeof(myb), A())
    invariant issubtype(typeof(i), int())
    invariant int___ge__(int___unbox__(_checkDefined(i, 105)), 0)
    invariant acc(l_3.list_acc, 1 / 2)
    invariant true && (forall lambda22_28$a: Ref :: { (lambda22_28$a in l_3.list_acc) } issubtype(typeof(lambda22_28$a), A()) && (lambda22_28$a in l_3.list_acc) ==> acc(lambda22_28$a.A_a, 1 / 4)) && (forall lambda22_28$a: Ref :: { (lambda22_28$a in l_3.list_acc) } issubtype(typeof(lambda22_28$a), A()) && (lambda22_28$a in l_3.list_acc) ==> issubtype(typeof(lambda22_28$a.A_a), int()))
    invariant list___contains__(l_3, _checkDefined(myb, 6453613))
    invariant [true, _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), list___len__(l_3)) || perm(MustTerminate(_cthread_146)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures := Seq[Measure$]()
    assert issubtype(typeof(_checkDefined(myb, 6453613)), A())
    assert issubtype(typeof(_checkDefined(myb, 6453613).A_a), int())
    myb := list___getitem__(l_3, _checkDefined(i, 105))
    inhale _isDefined(6453613)
    i := __prim__int___box__(int___add__(int___unbox__(i), 1))
    inhale _isDefined(105)
    label loop_end
    // We are after loop body._loop_check_before := false
    // Check if loop continues to terminate.assert _loop_termination_flag ==> !int___lt__(int___unbox__(_checkDefined(i, 105)), list___len__(l_3))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_146)) > none ==> acc(MustTerminate(_cthread_146), perm(MustTerminate(_cthread_146)) - _loop_original_must_terminate)
  label post_loop
  goto __end
  label __end
}

method m2(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, l_0: Ref) returns (_current_wait_level_147: Perm)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires issubtype(typeof(l_0), list(A()))
  requires acc(l_0.list_acc, write)
  requires true && (forall lambda32_23$a: Ref :: { (lambda32_23$a in l_0.list_acc) } issubtype(typeof(lambda32_23$a), A()) && (lambda32_23$a in l_0.list_acc) ==> acc(lambda32_23$a.A_a, write)) && (forall lambda32_23$a: Ref :: { (lambda32_23$a in l_0.list_acc) } issubtype(typeof(lambda32_23$a), A()) && (lambda32_23$a in l_0.list_acc) ==> issubtype(typeof(lambda32_23$a.A_a), int()))
  requires int___gt__(list___len__(l_0), 2)
  requires [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_147) && ((forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures [true, (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var myb_0: Ref
  var i_0: Ref
  var l_4: Ref
  var _loop_measures_0: Seq[Measure$]
  var _loop_check_before_0: Bool
  var _loop_termination_flag_0: Bool
  var _loop_original_must_terminate_0: Perm
  var _residue_151: Perm
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq[Measure$]()
  _err := null
  l_4 := l_0
  myb_0 := list___getitem__(l_4, __prim__int___box__(0))
  inhale _isDefined(3436594949747738259)
  i_0 := __prim__int___box__(0)
  inhale _isDefined(3170153)
  // Save current MustTerminate amount._loop_original_must_terminate_0 := perm(MustTerminate(_cthread_147))
  // Save loop termination promise._loop_termination_flag_0 := false
  // We are before loop._loop_check_before_0 := true
  while (int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(l_4)))
    invariant [(forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_151) && ((forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_151) && _residue_147 <= _residue_151), true]
    invariant true
    invariant issubtype(typeof(myb_0), A())
    invariant issubtype(typeof(i_0), int())
    invariant int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
    invariant acc(l_4.list_acc, 1 / 2)
    invariant true && (forall lambda39_28$a: Ref :: { (lambda39_28$a in l_4.list_acc) } issubtype(typeof(lambda39_28$a), A()) && (lambda39_28$a in l_4.list_acc) ==> acc(lambda39_28$a.A_a, 1 / 4)) && (forall lambda39_28$a: Ref :: { (lambda39_28$a in l_4.list_acc) } issubtype(typeof(lambda39_28$a), A()) && (lambda39_28$a in l_4.list_acc) ==> issubtype(typeof(lambda39_28$a.A_a), int()))
    invariant list___contains__(l_4, _checkDefined(myb_0, 3436594949747738259))
    invariant [true, _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(l_4)) || perm(MustTerminate(_cthread_147)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_0 := Seq[Measure$]()
    assert issubtype(typeof(_checkDefined(myb_0, 3436594949747738259)), B()) || issubtype(typeof(_checkDefined(myb_0, 3436594949747738259).A_a), bool())
    myb_0 := list___getitem__(l_4, _checkDefined(i_0, 3170153))
    inhale _isDefined(3436594949747738259)
    i_0 := __prim__int___box__(int___add__(int___unbox__(i_0), 1))
    inhale _isDefined(3170153)
    label loop_end_0
    // We are after loop body._loop_check_before_0 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_0 ==> !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(l_4))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_147)) > none ==> acc(MustTerminate(_cthread_147), perm(MustTerminate(_cthread_147)) - _loop_original_must_terminate_0)
  label post_loop_0
  goto __end
  label __end
}

method m3(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, l_1: Ref) returns (_current_wait_level_148: Perm)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires issubtype(typeof(l_1), list(A()))
  requires acc(l_1.list_acc, write)
  requires true && (forall lambda49_23$a: Ref :: { (lambda49_23$a in l_1.list_acc) } issubtype(typeof(lambda49_23$a), A()) && (lambda49_23$a in l_1.list_acc) ==> acc(lambda49_23$a.A_a, write)) && (forall lambda49_23$a: Ref :: { (lambda49_23$a in l_1.list_acc) } issubtype(typeof(lambda49_23$a), A()) && (lambda49_23$a in l_1.list_acc) ==> issubtype(typeof(lambda49_23$a.A_a), int()))
  requires int___gt__(list___len__(l_1), 2)
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_148) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var myb_1: Ref
  var i_1: Ref
  var item: Ref
  var l_5: Ref
  var iterable: Ref
  var iter: Ref
  var loop_target: Ref
  var iter_err: Ref
  var seqtmp: Seq[Ref]
  var _loop_measures_1: Seq[Measure$]
  var _loop_check_before_1: Bool
  var _loop_termination_flag_1: Bool
  var _loop_original_must_terminate_1: Perm
  var _residue_152: Perm
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq[Measure$]()
  _err := null
  l_5 := l_1
  myb_1 := list___getitem__(l_5, __prim__int___box__(0))
  inhale _isDefined(3436594954042705555)
  i_1 := __prim__int___box__(0)
  inhale _isDefined(3235689)
  iterable := l_5
  _cwl_148, iter := list___iter__(_cthread_148, _method_measures_148, _residue_148, iterable)
  _cwl_148, loop_target, iter_err := Iterator___next__(_cthread_148, _method_measures_148, _residue_148, iter)
  if (iter_err == null) {
    item := loop_target
    inhale _isDefined(1835365481)
  }
  seqtmp := iterable.list_acc
  // Save current MustTerminate amount._loop_original_must_terminate_1 := perm(MustTerminate(_cthread_148))
  // Save loop termination promise._loop_termination_flag_1 := false
  // We are before loop._loop_check_before_1 := true
  while (iter_err == null)
    invariant [(forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _residue_152) && ((forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _residue_152) && _residue_148 <= _residue_152), true]
    invariant acc(iterable.list_acc, 1 / 20)
    invariant acc(iter.list_acc, 1 / 20)
    invariant iter.list_acc == iterable.list_acc
    invariant seqtmp == iterable.list_acc
    invariant acc(iter.__iter_index, write)
    invariant acc(iter.__previous, write)
    invariant iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
    invariant iter_err != null ==> iter.__iter_index == |iter.__previous|
    invariant iter_err == null ==> |iter.list_acc| > 0
    invariant iter.__iter_index >= 0 && iter.__iter_index <= |iter.list_acc|
    invariant |iter.list_acc| > 0 ==> iter.__iter_index > 0
    invariant |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
    invariant |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
    invariant iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
    invariant |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), A())
    invariant |iter.list_acc| > 0 ==> item == loop_target && _isDefined(1835365481)
    invariant iter_err != null ==> iter.__previous == iter.list_acc
    invariant |iter.list_acc| == 0 ==> iter_err != null
    invariant true
    invariant issubtype(typeof(myb_1), A())
    invariant issubtype(typeof(i_1), int())
    invariant int___ge__(int___unbox__(_checkDefined(i_1, 3235689)), 0)
    invariant acc(l_5.list_acc, 1 / 2)
    invariant true && (forall lambda56_28$a: Ref :: { (lambda56_28$a in l_5.list_acc) } issubtype(typeof(lambda56_28$a), A()) && (lambda56_28$a in l_5.list_acc) ==> acc(lambda56_28$a.A_a, 1 / 4)) && (forall lambda56_28$a: Ref :: { (lambda56_28$a in l_5.list_acc) } issubtype(typeof(lambda56_28$a), A()) && (lambda56_28$a in l_5.list_acc) ==> issubtype(typeof(lambda56_28$a.A_a), int()))
    invariant list___contains__(l_5, _checkDefined(myb_1, 3436594954042705555))
    invariant [true, _loop_check_before_1 ==> _loop_termination_flag_1 || (!(iter_err == null) || perm(MustTerminate(_cthread_148)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_1 := Seq[Measure$]()
    assert issubtype(typeof(_checkDefined(myb_1, 3436594954042705555)), A())
    assert issubtype(typeof(_checkDefined(myb_1, 3436594954042705555).A_a), int())
    assert issubtype(typeof(_checkDefined(item, 1835365481)), A())
    assert issubtype(typeof(_checkDefined(item, 1835365481).A_a), int())
    myb_1 := _checkDefined(item, 1835365481)
    inhale _isDefined(3436594954042705555)
    i_1 := __prim__int___box__(int___add__(int___unbox__(i_1), 1))
    inhale _isDefined(3235689)
    label loop_end_1
    _cwl_148, loop_target, iter_err := Iterator___next__(_cthread_148, _method_measures_148, _residue_148, iter)
    if (iter_err == null) {
      item := loop_target
      inhale _isDefined(1835365481)
    }
    // We are after loop body._loop_check_before_1 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_1 ==> !(iter_err == null)
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_148)) > none ==> acc(MustTerminate(_cthread_148), perm(MustTerminate(_cthread_148)) - _loop_original_must_terminate_1)
  _cwl_148 := Iterator___del__(_cthread_148, _method_measures_148, _residue_152, iter)
  label post_loop_1
  goto __end
  label __end
}

method m4(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm, l_2: Ref) returns (_current_wait_level_149: Perm)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires issubtype(typeof(l_2), list(A()))
  requires acc(l_2.list_acc, write)
  requires true && (forall lambda68_23$a: Ref :: { (lambda68_23$a in l_2.list_acc) } issubtype(typeof(lambda68_23$a), A()) && (lambda68_23$a in l_2.list_acc) ==> acc(lambda68_23$a.A_a, write)) && (forall lambda68_23$a: Ref :: { (lambda68_23$a in l_2.list_acc) } issubtype(typeof(lambda68_23$a), A()) && (lambda68_23$a in l_2.list_acc) ==> issubtype(typeof(lambda68_23$a.A_a), int()))
  requires int___gt__(list___len__(l_2), 2)
  requires [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_149) && ((forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures [true, (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var myb_2: Ref
  var i_2: Ref
  var item_0: Ref
  var l_6: Ref
  var iterable_0: Ref
  var iter_0: Ref
  var loop_target_0: Ref
  var iter_err_0: Ref
  var seqtmp_0: Seq[Ref]
  var _loop_measures_2: Seq[Measure$]
  var _loop_check_before_2: Bool
  var _loop_termination_flag_2: Bool
  var _loop_original_must_terminate_2: Perm
  var _residue_153: Perm
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq[Measure$]()
  _err := null
  l_6 := l_2
  myb_2 := list___getitem__(l_6, __prim__int___box__(0))
  inhale _isDefined(3436594958337672851)
  i_2 := __prim__int___box__(0)
  inhale _isDefined(3301225)
  iterable_0 := l_6
  _cwl_149, iter_0 := list___iter__(_cthread_149, _method_measures_149, _residue_149, iterable_0)
  _cwl_149, loop_target_0, iter_err_0 := Iterator___next__(_cthread_149, _method_measures_149, _residue_149, iter_0)
  if (iter_err_0 == null) {
    item_0 := loop_target_0
    inhale _isDefined(3941470541295815575)
  }
  seqtmp_0 := iterable_0.list_acc
  // Save current MustTerminate amount._loop_original_must_terminate_2 := perm(MustTerminate(_cthread_149))
  // Save loop termination promise._loop_termination_flag_2 := false
  // We are before loop._loop_check_before_2 := true
  while (iter_err_0 == null)
    invariant [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _residue_153) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _residue_153) && _residue_149 <= _residue_153), true]
    invariant acc(iterable_0.list_acc, 1 / 20)
    invariant acc(iter_0.list_acc, 1 / 20)
    invariant iter_0.list_acc == iterable_0.list_acc
    invariant seqtmp_0 == iterable_0.list_acc
    invariant acc(iter_0.__iter_index, write)
    invariant acc(iter_0.__previous, write)
    invariant iter_err_0 == null ==> iter_0.__iter_index - 1 == |iter_0.__previous|
    invariant iter_err_0 != null ==> iter_0.__iter_index == |iter_0.__previous|
    invariant iter_err_0 == null ==> |iter_0.list_acc| > 0
    invariant iter_0.__iter_index >= 0 && iter_0.__iter_index <= |iter_0.list_acc|
    invariant |iter_0.list_acc| > 0 ==> iter_0.__iter_index > 0
    invariant |iter_0.list_acc| > 0 ==> loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
    invariant |iter_0.list_acc| > 0 ==> (loop_target_0 in iter_0.list_acc)
    invariant iter_err_0 == null ==> iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
    invariant |iter_0.list_acc| > 0 ==> issubtype(typeof(loop_target_0), A())
    invariant |iter_0.list_acc| > 0 ==> item_0 == loop_target_0 && _isDefined(3941470541295815575)
    invariant iter_err_0 != null ==> iter_0.__previous == iter_0.list_acc
    invariant |iter_0.list_acc| == 0 ==> iter_err_0 != null
    invariant true
    invariant issubtype(typeof(myb_2), A())
    invariant issubtype(typeof(i_2), int())
    invariant int___ge__(int___unbox__(_checkDefined(i_2, 3301225)), 0)
    invariant acc(l_6.list_acc, 1 / 2)
    invariant true && (forall lambda75_28$a: Ref :: { (lambda75_28$a in l_6.list_acc) } issubtype(typeof(lambda75_28$a), A()) && (lambda75_28$a in l_6.list_acc) ==> acc(lambda75_28$a.A_a, 1 / 4)) && (forall lambda75_28$a: Ref :: { (lambda75_28$a in l_6.list_acc) } issubtype(typeof(lambda75_28$a), A()) && (lambda75_28$a in l_6.list_acc) ==> issubtype(typeof(lambda75_28$a.A_a), int()))
    invariant list___contains__(l_6, _checkDefined(myb_2, 3436594958337672851))
    invariant [true, _loop_check_before_2 ==> _loop_termination_flag_2 || (!(iter_err_0 == null) || perm(MustTerminate(_cthread_149)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_2 := Seq[Measure$]()
    assert issubtype(typeof(_checkDefined(myb_2, 3436594958337672851)), B()) || (issubtype(typeof(_checkDefined(myb_2, 3436594958337672851).A_a), bool()) || (issubtype(typeof(_checkDefined(item_0, 3941470541295815575)), B()) || issubtype(typeof(_checkDefined(item_0, 3941470541295815575).A_a), bool())))
    myb_2 := _checkDefined(item_0, 3941470541295815575)
    inhale _isDefined(3436594958337672851)
    i_2 := __prim__int___box__(int___add__(int___unbox__(i_2), 1))
    inhale _isDefined(3301225)
    label loop_end_2
    _cwl_149, loop_target_0, iter_err_0 := Iterator___next__(_cthread_149, _method_measures_149, _residue_149, iter_0)
    if (iter_err_0 == null) {
      item_0 := loop_target_0
      inhale _isDefined(3941470541295815575)
    }
    // We are after loop body._loop_check_before_2 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_2 ==> !(iter_err_0 == null)
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_149)) > none ==> acc(MustTerminate(_cthread_149), perm(MustTerminate(_cthread_149)) - _loop_original_must_terminate_2)
  _cwl_149 := Iterator___del__(_cthread_149, _method_measures_149, _residue_153, iter_0)
  label post_loop_2
  goto __end
  label __end
}

method A___init__(_cthread_145: Ref, _caller_measures_145: Seq[Measure$], _residue_145: Perm, self: Ref) returns (_current_wait_level_145: Perm)
  requires _cthread_145 != null
  requires issubtype(typeof(_cthread_145), Thread_0())
  requires self != null
  requires acc(_MaySet(self, 6381377), write)
  requires issubtype(typeof(self), A())
  requires self != null
  requires [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _current_wait_level_145) && ((forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]
  ensures [true, (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_0: Ref
  var _cwl_145: Perm
  var _method_measures_145: Seq[Measure$]
  _method_measures_145 := Seq[Measure$]()
  inhale typeof(self) == A()
  _err := null
  self_0 := self
  if (perm(_MaySet(self_0, 6381377)) > none) {
    exhale acc(_MaySet(self_0, 6381377), write)
    inhale acc(self_0.A_a, write)
  }
  self_0.A_a := __prim__int___box__(15)
  goto __end
  label __end
}

method main(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_154: Perm) returns (_current_wait_level_150: Perm)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_22: Ref [_r_22.MustReleaseBounded] :: Level(_r_22) <= _current_wait_level_150) && ((forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: Level(_r_22) <= _current_wait_level_150) && _residue_154 <= _current_wait_level_150), true]
  ensures [true, (forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_names_0 := (module_names_0 union Set(_single(1953720652)))
  module_names_0 := (module_names_0 union Set(_single(5123216512802524336881954895)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(65)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(66)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(109)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(12909)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(13165)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(13421)))
  goto __end
  label __end
}

method Iterator___next__(_cthread_140: Ref, _caller_measures_140: Seq[Measure$], _residue_140: Perm, self: Ref) returns (_current_wait_level_140: Perm, _res: Ref, _err: Ref)
  requires _cthread_140 != null
  requires Measure$check(_caller_measures_140, _cthread_140, 1)
  requires issubtype(typeof(_cthread_140), Thread_0())
  requires acc(self.list_acc, 1 / 40)
  requires acc(self.__iter_index, write)
  requires acc(self.__previous, write)
  requires [true, Measure$check(_caller_measures_140, _cthread_140, 1)]
  ensures [(forperm _r_25: Ref [_r_25.MustReleaseBounded] :: Level(_r_25) <= _current_wait_level_140) && ((forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: Level(_r_25) <= _current_wait_level_140) && _residue_140 <= _current_wait_level_140), true]
  ensures acc(self.list_acc, 1 / 40) && self.list_acc == old(self.list_acc)
  ensures acc(self.__iter_index, write)
  ensures self.__iter_index <= |self.list_acc|
  ensures old(self.__iter_index == |self.list_acc|) == (_err != null)
  ensures acc(self.__previous, write)
  ensures _err == null ==> self.__iter_index == old(self.__iter_index) + 1
  ensures _err == null ==> self.__iter_index > 0
  ensures _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
  ensures (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || old(self.__iter_index) > 1 && (old(self.__iter_index) != |self.list_acc| && r == old(self.list_acc[self.__iter_index - 1]))))
  ensures |self.list_acc| > 0 ==> self.__iter_index > 0
  ensures |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
  ensures _err != null ==> self.__previous == self.list_acc
  ensures _err != null ==> self.__iter_index == |self.list_acc|
  ensures |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
{
  var _cwl_140: Perm
  inhale false
}

method Iterator___del__(_cthread_141: Ref, _caller_measures_141: Seq[Measure$], _residue_141: Perm, self: Ref) returns (_current_wait_level_141: Perm)
  requires _cthread_141 != null
  requires Measure$check(_caller_measures_141, _cthread_141, 1)
  requires issubtype(typeof(_cthread_141), Thread_0())
  requires acc(self.list_acc, 1 / 20)
  requires acc(self.__container, 1 / 20)
  requires [true, Measure$check(_caller_measures_141, _cthread_141, 1)]
  ensures [(forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_141) && ((forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_141) && _residue_141 <= _current_wait_level_141), true]
  ensures acc(self.__container, 1 / 20)
  ensures issubtype(typeof(self.__container), list(list_arg(typeof(self.__container), 0))) ==> acc(self.__container.list_acc, 1 / 20)
  ensures issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))) ==> acc(self.__container.dict_acc, 1 / 20)
  ensures issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0))) ==> acc(self.__container.set_acc, 1 / 20)
{
  var _cwl_141: Perm
  inhale false
}

method list___iter__(_cthread_14: Ref, _caller_measures_14: Seq[Measure$], _residue_14: Perm, self: Ref) returns (_current_wait_level_14: Perm, _res: Ref)
  requires _cthread_14 != null
  requires Measure$check(_caller_measures_14, _cthread_14, 1)
  requires issubtype(typeof(_cthread_14), Thread_0())
  requires issubtype(typeof(self), list(list_arg(typeof(self), 0)))
  requires acc(self.list_acc, 1 / 10)
  requires [true, Measure$check(_caller_measures_14, _cthread_14, 1)]
  ensures [(forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_14) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_14) && _residue_14 <= _current_wait_level_14), true]
  ensures _res != self
  ensures acc(_res.list_acc, 1 / 20)
  ensures acc(self.list_acc, 1 / 20)
  ensures _res.list_acc == self.list_acc
  ensures acc(_res.__container, write) && _res.__container == self
  ensures acc(_res.__iter_index, write) && _res.__iter_index == 0
  ensures acc(_res.__previous, write) && _res.__previous == Seq[Ref]()
  ensures issubtype(typeof(_res), Iterator(list_arg(typeof(self), 0)))
{
  var _cwl_14: Perm
  inhale false
}