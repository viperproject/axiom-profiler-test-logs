domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function SuperClass(): PyType
  
  unique function SubClass(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_SuperClass {
    extends_(SuperClass(), object()) && get_basic(SuperClass()) == SuperClass()
  }
  
  axiom subtype_SubClass {
    extends_(SubClass(), SuperClass()) && get_basic(SubClass()) == SubClass()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  unique function get_private(): Function
  
  unique function get_public(): Function
  
  unique function get_private_sub(): Function
  
  unique function get_public_sub(): Function
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function main_threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
  
  unique function construct_threading(): ThreadingID
  
  unique function __init___threading_3(): ThreadingID
  
  unique function construct_sub_threading(): ThreadingID
  
  unique function set_private_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field SuperClass_super_field: Ref

field SuperClass___private_field: Ref

field SuperClass_typed_field: Ref

field SubClass___private_field: Ref

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function SuperClass_get_private(self: Ref): Ref
  requires issubtype(typeof(self), SuperClass())
  requires self != null
  requires !object___eq__(self, null)
  requires acc(self.SuperClass___private_field, write) && issubtype(typeof(self.SuperClass___private_field), int())
  ensures issubtype(typeof(result), int()) 
{
  self.SuperClass___private_field
}

function SuperClass_get_public(self_0: Ref): Ref
  requires issubtype(typeof(self_0), SuperClass())
  requires self_0 != null
  requires !object___eq__(self_0, null)
  requires acc(self_0.SuperClass_super_field, write) && issubtype(typeof(self_0.SuperClass_super_field), int())
  ensures issubtype(typeof(result), int()) 
{
  self_0.SuperClass_super_field
}

function SubClass_get_private_sub(self_4: Ref): Ref
  requires issubtype(typeof(self_4), SubClass())
  requires self_4 != null
  requires !object___eq__(self_4, null)
  requires acc(self_4.SubClass___private_field, write) && issubtype(typeof(self_4.SubClass___private_field), int())
  ensures issubtype(typeof(result), int()) 
{
  self_4.SubClass___private_field
}

function SubClass_get_public_sub(self_5: Ref): Ref
  requires issubtype(typeof(self_5), SubClass())
  requires self_5 != null
  requires !object___eq__(self_5, null)
  requires acc(self_5.SuperClass_super_field, write) && issubtype(typeof(self_5.SuperClass_super_field), int())
  ensures issubtype(typeof(result), int()) 
{
  self_5.SuperClass_super_field
}

function __file__(): Ref 


function __name__(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function object___eq__(self: Ref, other: Ref): Bool
  ensures self == other ==> result
  ensures (self == null) != (other == null) ==> !result 


function Level(r: Ref): Perm 


function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate SuperClass_State(self_3: Ref) {
  true && issubtype(typeof(self_3), SuperClass()) && ((issubtype(typeof(self_3), SuperClass()) ==> acc(self_3.SuperClass_super_field, write) && issubtype(typeof(self_3.SuperClass_super_field), int()) && (acc(self_3.SuperClass___private_field, write) && issubtype(typeof(self_3.SuperClass___private_field), int()) && (acc(self_3.SuperClass_typed_field, write) && (self_3.SuperClass_typed_field == null || issubtype(typeof(self_3.SuperClass_typed_field), SuperClass()))))) && (issubtype(typeof(self_3), SubClass()) ==> acc(self_3.SubClass___private_field, write) && issubtype(typeof(self_3.SubClass___private_field), int())))
}

method main(_cthread_156: Ref, _caller_measures_156: Seq[Measure$], _residue_156: Perm) returns (_current_wait_level_156: Perm)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires [true, perm(MustTerminate(_cthread_156)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_156) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var sub: Ref
  var SubClass_res: Ref
  var _cwl_156: Perm
  var _method_measures_156: Seq[Measure$]
  _method_measures_156 := Seq[Measure$]()
  _err := null
  SubClass_res := new()
  inhale typeof(SubClass_res) == SubClass()
  inhale acc(_MaySet(SubClass_res, 176049849123071851299890621955864725824708841630218271619681514835), write)
  inhale acc(_MaySet(SubClass_res, 73240280564683190639872818243703879801933726569229945517), write)
  inhale acc(_MaySet(SubClass_res, 194004309462035935700889983196474431158128894803299913792949876051), write)
  inhale acc(_MaySet(SubClass_res, 88565237327800138372540933763837114397092802626524777133), write)
  _cwl_156 := SubClass___init__(_cthread_156, _method_measures_156, _residue_156, SubClass_res)
  sub := SubClass_res
  inhale _isDefined(6452595)
  unfold acc(SuperClass_State(_checkDefined(sub, 6452595)), write)
  _cwl_156 := SuperClass_construct(_cthread_156, _method_measures_156, _residue_156, _checkDefined(sub, 6452595))
  assert int___eq__(SuperClass_get_private(_checkDefined(sub, 6452595)), __prim__int___box__(15))
  assert int___eq__(SuperClass_get_public(_checkDefined(sub, 6452595)), __prim__int___box__(12))
  assert int___eq__(SuperClass_get_public(_checkDefined(sub, 6452595)), SubClass_get_public_sub(_checkDefined(sub, 6452595)))
  _cwl_156 := SubClass_construct_sub(_cthread_156, _method_measures_156, _residue_156, _checkDefined(sub, 6452595))
  assert int___eq__(SuperClass_get_private(_checkDefined(sub, 6452595)), __prim__int___box__(15))
  assert int___eq__(SubClass_get_private_sub(_checkDefined(sub, 6452595)), __prim__int___box__(35))
  assert !int___eq__(SuperClass_get_private(_checkDefined(sub, 6452595)), SubClass_get_private_sub(_checkDefined(sub, 6452595)))
  assert int___eq__(SuperClass_get_public(_checkDefined(sub, 6452595)), __prim__int___box__(45))
  assert int___eq__(SuperClass_get_public(_checkDefined(sub, 6452595)), SubClass_get_public_sub(_checkDefined(sub, 6452595)))
  assert int___eq__(SuperClass_get_public(_checkDefined(sub, 6452595)), _checkDefined(sub, 6452595).SuperClass_super_field)
  if (perm(_MaySet(_checkDefined(sub, 6452595), 73240280564683190639872818243703879801933726569229945517)) > none) {
    exhale acc(_MaySet(_checkDefined(sub, 6452595), 73240280564683190639872818243703879801933726569229945517), write)
    inhale acc(_checkDefined(sub, 6452595).SuperClass_super_field, write)
  }
  _checkDefined(sub, 6452595).SuperClass_super_field := __prim__int___box__(77)
  assert int___eq__(SuperClass_get_public(_checkDefined(sub, 6452595)), __prim__int___box__(77))
  assert int___eq__(SubClass_get_public_sub(_checkDefined(sub, 6452595)), __prim__int___box__(77))
  _cwl_156 := SubClass_set_private(_cthread_156, _method_measures_156, _residue_156, _checkDefined(sub, 6452595), __prim__int___box__(15))
  assert int___eq__(SuperClass_get_private(_checkDefined(sub, 6452595)), SubClass_get_private_sub(_checkDefined(sub, 6452595)))
  assert int___eq__(SuperClass_get_private(_checkDefined(sub, 6452595)), __prim__int___box__(99))
  goto __end
  label __end
}

method SuperClass___init__(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, self_1: Ref) returns (_current_wait_level_147: Perm)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires self_1 != null
  requires acc(_MaySet(self_1, 73240280564683190639872818243703879801933726569229945517), write)
  requires acc(_MaySet(self_1, 194004309462035935700889983196474431158128894803299913792949876051), write)
  requires acc(_MaySet(self_1, 88565237327800138372540933763837114397092802626524777133), write)
  requires issubtype(typeof(self_1), SuperClass())
  requires self_1 != null
  requires [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_147) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures acc(self_1.SuperClass_super_field, write) && issubtype(typeof(self_1.SuperClass_super_field), int())
  ensures acc(self_1.SuperClass___private_field, write) && issubtype(typeof(self_1.SuperClass___private_field), int())
  ensures acc(self_1.SuperClass_typed_field, write) && (self_1.SuperClass_typed_field == null || issubtype(typeof(self_1.SuperClass_typed_field), SuperClass()))
  ensures [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_10: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq[Measure$]()
  inhale typeof(self_1) == SuperClass()
  _err := null
  self_10 := self_1
  if (perm(_MaySet(self_10, 73240280564683190639872818243703879801933726569229945517)) > none) {
    exhale acc(_MaySet(self_10, 73240280564683190639872818243703879801933726569229945517), write)
    inhale acc(self_10.SuperClass_super_field, write)
  }
  self_10.SuperClass_super_field := __prim__int___box__(0)
  if (perm(_MaySet(self_10, 194004309462035935700889983196474431158128894803299913792949876051)) > none) {
    exhale acc(_MaySet(self_10, 194004309462035935700889983196474431158128894803299913792949876051), write)
    inhale acc(self_10.SuperClass___private_field, write)
  }
  self_10.SuperClass___private_field := __prim__int___box__(0)
  if (perm(_MaySet(self_10, 88565237327800138372540933763837114397092802626524777133)) > none) {
    exhale acc(_MaySet(self_10, 88565237327800138372540933763837114397092802626524777133), write)
    inhale acc(self_10.SuperClass_typed_field, write)
  }
  self_10.SuperClass_typed_field := null
  goto __end
  label __end
}

method SuperClass_construct(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, self_2: Ref) returns (_current_wait_level_148: Perm)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires issubtype(typeof(self_2), SuperClass())
  requires self_2 != null
  requires !object___eq__(self_2, null)
  requires acc(self_2.SuperClass_super_field, write) && issubtype(typeof(self_2.SuperClass_super_field), int())
  requires acc(self_2.SuperClass___private_field, write) && issubtype(typeof(self_2.SuperClass___private_field), int())
  requires acc(self_2.SuperClass_typed_field, write) && (self_2.SuperClass_typed_field == null || issubtype(typeof(self_2.SuperClass_typed_field), SuperClass()))
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_148) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures acc(self_2.SuperClass_super_field, write) && issubtype(typeof(self_2.SuperClass_super_field), int()) && int___eq__(self_2.SuperClass_super_field, __prim__int___box__(12))
  ensures acc(self_2.SuperClass___private_field, write) && issubtype(typeof(self_2.SuperClass___private_field), int()) && int___eq__(self_2.SuperClass___private_field, __prim__int___box__(15))
  ensures acc(self_2.SuperClass_typed_field, write) && (self_2.SuperClass_typed_field == null || issubtype(typeof(self_2.SuperClass_typed_field), SuperClass())) && issubtype(typeof(self_2.SuperClass_typed_field), SuperClass())
  ensures [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_11: Ref
  var SuperClass_res: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq[Measure$]()
  inhale typeof(self_2) == SuperClass()
  _err := null
  self_11 := self_2
  if (perm(_MaySet(self_11, 73240280564683190639872818243703879801933726569229945517)) > none) {
    exhale acc(_MaySet(self_11, 73240280564683190639872818243703879801933726569229945517), write)
    inhale acc(self_11.SuperClass_super_field, write)
  }
  self_11.SuperClass_super_field := __prim__int___box__(12)
  if (perm(_MaySet(self_11, 194004309462035935700889983196474431158128894803299913792949876051)) > none) {
    exhale acc(_MaySet(self_11, 194004309462035935700889983196474431158128894803299913792949876051), write)
    inhale acc(self_11.SuperClass___private_field, write)
  }
  self_11.SuperClass___private_field := __prim__int___box__(15)
  SuperClass_res := new()
  inhale typeof(SuperClass_res) == SuperClass()
  inhale acc(_MaySet(SuperClass_res, 73240280564683190639872818243703879801933726569229945517), write)
  inhale acc(_MaySet(SuperClass_res, 194004309462035935700889983196474431158128894803299913792949876051), write)
  inhale acc(_MaySet(SuperClass_res, 88565237327800138372540933763837114397092802626524777133), write)
  _cwl_148 := SuperClass___init__(_cthread_148, _method_measures_148, _residue_148, SuperClass_res)
  if (perm(_MaySet(self_11, 88565237327800138372540933763837114397092802626524777133)) > none) {
    exhale acc(_MaySet(self_11, 88565237327800138372540933763837114397092802626524777133), write)
    inhale acc(self_11.SuperClass_typed_field, write)
  }
  self_11.SuperClass_typed_field := SuperClass_res
  goto __end
  label __end
}

method SubClass___init__(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm, self_6: Ref) returns (_current_wait_level_152: Perm)
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires self_6 != null
  requires acc(_MaySet(self_6, 176049849123071851299890621955864725824708841630218271619681514835), write)
  requires acc(_MaySet(self_6, 73240280564683190639872818243703879801933726569229945517), write)
  requires acc(_MaySet(self_6, 194004309462035935700889983196474431158128894803299913792949876051), write)
  requires acc(_MaySet(self_6, 88565237327800138372540933763837114397092802626524777133), write)
  requires issubtype(typeof(self_6), SubClass())
  requires self_6 != null
  requires [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_152) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures acc(SuperClass_State(self_6), write)
  ensures [true, (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_12: Ref
  var arg: Ref
  var error: Ref
  var self_10_0: Ref
  var _cwl_152: Perm
  var _method_measures_152: Seq[Measure$]
  _method_measures_152 := Seq[Measure$]()
  inhale typeof(self_6) == SubClass()
  _err := null
  self_12 := self_6
  arg := self_6
  if (perm(_MaySet(arg, 73240280564683190639872818243703879801933726569229945517)) > none) {
    exhale acc(_MaySet(arg, 73240280564683190639872818243703879801933726569229945517), write)
    inhale acc(arg.SuperClass_super_field, write)
  }
  arg.SuperClass_super_field := __prim__int___box__(0)
  if (perm(_MaySet(arg, 194004309462035935700889983196474431158128894803299913792949876051)) > none) {
    exhale acc(_MaySet(arg, 194004309462035935700889983196474431158128894803299913792949876051), write)
    inhale acc(arg.SuperClass___private_field, write)
  }
  arg.SuperClass___private_field := __prim__int___box__(0)
  if (perm(_MaySet(arg, 88565237327800138372540933763837114397092802626524777133)) > none) {
    exhale acc(_MaySet(arg, 88565237327800138372540933763837114397092802626524777133), write)
    inhale acc(arg.SuperClass_typed_field, write)
  }
  arg.SuperClass_typed_field := null
  label __end_0
  if (perm(_MaySet(self_12, 176049849123071851299890621955864725824708841630218271619681514835)) > none) {
    exhale acc(_MaySet(self_12, 176049849123071851299890621955864725824708841630218271619681514835), write)
    inhale acc(self_12.SubClass___private_field, write)
  }
  self_12.SubClass___private_field := __prim__int___box__(0)
  fold acc(SuperClass_State(self_12), write)
  goto __end
  label __end
}

method SubClass_construct_sub(_cthread_153: Ref, _caller_measures_153: Seq[Measure$], _residue_153: Perm, self_7: Ref) returns (_current_wait_level_153: Perm)
  requires _cthread_153 != null
  requires issubtype(typeof(_cthread_153), Thread_0())
  requires issubtype(typeof(self_7), SubClass())
  requires self_7 != null
  requires !object___eq__(self_7, null)
  requires acc(self_7.SubClass___private_field, write) && issubtype(typeof(self_7.SubClass___private_field), int())
  requires acc(self_7.SuperClass_super_field, write) && issubtype(typeof(self_7.SuperClass_super_field), int())
  requires [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_153) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]
  ensures acc(self_7.SubClass___private_field, write) && issubtype(typeof(self_7.SubClass___private_field), int()) && int___eq__(self_7.SubClass___private_field, __prim__int___box__(35))
  ensures acc(self_7.SuperClass_super_field, write) && issubtype(typeof(self_7.SuperClass_super_field), int()) && int___eq__(self_7.SuperClass_super_field, __prim__int___box__(45))
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_13: Ref
  var _cwl_153: Perm
  var _method_measures_153: Seq[Measure$]
  _method_measures_153 := Seq[Measure$]()
  inhale typeof(self_7) == SubClass()
  _err := null
  self_13 := self_7
  if (perm(_MaySet(self_13, 176049849123071851299890621955864725824708841630218271619681514835)) > none) {
    exhale acc(_MaySet(self_13, 176049849123071851299890621955864725824708841630218271619681514835), write)
    inhale acc(self_13.SubClass___private_field, write)
  }
  self_13.SubClass___private_field := __prim__int___box__(35)
  if (perm(_MaySet(self_13, 73240280564683190639872818243703879801933726569229945517)) > none) {
    exhale acc(_MaySet(self_13, 73240280564683190639872818243703879801933726569229945517), write)
    inhale acc(self_13.SuperClass_super_field, write)
  }
  self_13.SuperClass_super_field := __prim__int___box__(45)
  goto __end
  label __end
}

method SubClass_set_private(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm, self_8: Ref, i: Ref) returns (_current_wait_level_154: Perm)
  requires _cthread_154 != null
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires issubtype(typeof(self_8), SubClass())
  requires issubtype(typeof(i), int())
  requires self_8 != null
  requires !object___eq__(self_8, null)
  requires acc(self_8.SubClass___private_field, write) && issubtype(typeof(self_8.SubClass___private_field), int())
  requires [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_154) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]
  ensures acc(self_8.SubClass___private_field, write) && issubtype(typeof(self_8.SubClass___private_field), int()) && int___eq__(self_8.SubClass___private_field, i)
  ensures [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_14: Ref
  var i_0: Ref
  var _cwl_154: Perm
  var _method_measures_154: Seq[Measure$]
  _method_measures_154 := Seq[Measure$]()
  inhale typeof(self_8) == SubClass()
  _err := null
  self_14 := self_8
  i_0 := i
  if (perm(_MaySet(self_14, 176049849123071851299890621955864725824708841630218271619681514835)) > none) {
    exhale acc(_MaySet(self_14, 176049849123071851299890621955864725824708841630218271619681514835), write)
    inhale acc(self_14.SubClass___private_field, write)
  }
  self_14.SubClass___private_field := i_0
  goto __end
  label __end
}

method SubClass_construct_inherit_check(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, self_2: Ref) returns (_current_wait_level_148: Perm)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires self_2 != null
  requires typeof(self_2) == SubClass()
  requires issubtype(typeof(self_2), SuperClass())
  requires self_2 != null
  requires !object___eq__(self_2, null)
  requires acc(self_2.SuperClass_super_field, write) && issubtype(typeof(self_2.SuperClass_super_field), int())
  requires acc(self_2.SuperClass___private_field, write) && issubtype(typeof(self_2.SuperClass___private_field), int())
  requires acc(self_2.SuperClass_typed_field, write) && (self_2.SuperClass_typed_field == null || issubtype(typeof(self_2.SuperClass_typed_field), SuperClass()))
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_19: Ref [MustInvokeBounded(_r_19)] :: false) && ((forperm _r_19: Ref [MustInvokeUnbounded(_r_19)] :: false) && ((forperm _r_19: Ref [_r_19.MustReleaseBounded] :: false) && (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_148) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures acc(self_2.SuperClass_super_field, write) && issubtype(typeof(self_2.SuperClass_super_field), int()) && int___eq__(self_2.SuperClass_super_field, __prim__int___box__(12))
  ensures acc(self_2.SuperClass___private_field, write) && issubtype(typeof(self_2.SuperClass___private_field), int()) && int___eq__(self_2.SuperClass___private_field, __prim__int___box__(15))
  ensures acc(self_2.SuperClass_typed_field, write) && (self_2.SuperClass_typed_field == null || issubtype(typeof(self_2.SuperClass_typed_field), SuperClass())) && issubtype(typeof(self_2.SuperClass_typed_field), SuperClass())
  ensures [true, (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))]
{
  var self_11_0: Ref
  var SuperClass_res_0: Ref
  var SuperClass_res_1: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq[Measure$]()
  if (perm(_MaySet(self_2, 73240280564683190639872818243703879801933726569229945517)) > none) {
    exhale acc(_MaySet(self_2, 73240280564683190639872818243703879801933726569229945517), write)
    inhale acc(self_2.SuperClass_super_field, write)
  }
  self_2.SuperClass_super_field := __prim__int___box__(12)
  if (perm(_MaySet(self_2, 194004309462035935700889983196474431158128894803299913792949876051)) > none) {
    exhale acc(_MaySet(self_2, 194004309462035935700889983196474431158128894803299913792949876051), write)
    inhale acc(self_2.SuperClass___private_field, write)
  }
  self_2.SuperClass___private_field := __prim__int___box__(15)
  SuperClass_res_1 := new()
  inhale typeof(SuperClass_res_1) == SuperClass()
  inhale acc(_MaySet(SuperClass_res_1, 73240280564683190639872818243703879801933726569229945517), write)
  inhale acc(_MaySet(SuperClass_res_1, 194004309462035935700889983196474431158128894803299913792949876051), write)
  inhale acc(_MaySet(SuperClass_res_1, 88565237327800138372540933763837114397092802626524777133), write)
  _cwl_148 := SuperClass___init__(_cthread_148, _method_measures_148, _residue_148, SuperClass_res_1)
  if (perm(_MaySet(self_2, 88565237327800138372540933763837114397092802626524777133)) > none) {
    exhale acc(_MaySet(self_2, 88565237327800138372540933763837114397092802626524777133), write)
    inhale acc(self_2.SuperClass_typed_field, write)
  }
  self_2.SuperClass_typed_field := SuperClass_res_1
  goto __end_1
  label __end_1
}

method main_0(_cthread_157: Ref, _caller_measures_157: Seq[Measure$], _residue_157: Perm) returns (_current_wait_level_157: Perm)
  requires _cthread_157 != null
  requires issubtype(typeof(_cthread_157), Thread_0())
  requires [true, perm(MustTerminate(_cthread_157)) == none && ((forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_157) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]
  ensures [true, (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var _cwl_157: Perm
  var _method_measures_157: Seq[Measure$]
  _method_measures_157 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_names_0 := (module_names_0 union Set(_single(5123216512802524336881954895)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(4514532904864795022972579683)))
  module_names_0 := (module_names_0 union Set(_single(6024412410388341216813278567)))
  module_names_0 := (module_names_0 union Set(_single(4350581564747898201289549159)))
  module_names_0 := (module_names_0 union Set(_single(3117453727947663118255027539)))
  assert true
  assert true && (_single(3117453727947663118255027539) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(2683659911187830773915470311474696349)))
  module_names_0 := (module_names_0 union Set(_single(6024412465728573386402325875)))
  module_names_0 := (module_names_0 union Set(_single(12783940411519133192215579037470005913)))
  module_names_0 := (module_names_0 union Set(_single(951451892676464973005454170974296729)))
  module_names_0 := (module_names_0 union Set(_single(3271721820649106859662406995)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(1852399981)))
  goto __end
  label __end
}