domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function Container(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_Container {
    extends_(Container(), object()) && get_basic(Container()) == Container()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function updating_id_threading(): ThreadingID
  
  unique function test_and_threading(): ThreadingID
  
  unique function test_or_threading(): ThreadingID
  
  unique function test_and_fail_threading(): ThreadingID
  
  unique function test_or_fail_threading(): ThreadingID
  
  unique function updating_id_int_threading(): ThreadingID
  
  unique function test_ternary_threading(): ThreadingID
  
  unique function test_ternary_fail_threading(): ThreadingID
  
  unique function test_mod_threading(): ThreadingID
  
  unique function test_mod_fail_threading(): ThreadingID
  
  unique function test_div_threading(): ThreadingID
  
  unique function test_div_fail_threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field Container_value: Ref

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function bool___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), bool())
  requires issubtype(typeof(other), bool()) 
{
  bool___unbox__(self) == bool___unbox__(other)
}

function int___ge__(self: Int, other: Int): Bool 
{
  self >= other
}

function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function int___floordiv__(self: Int, other: Int): Int
  requires other != 0 
{
  self \ other
}

function int___mod__(self: Int, other: Int): Int
  requires other != 0 
{
  self % other
}

function Level(r: Ref): Perm 


function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

method updating_id(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm, b: Ref, c: Ref) returns (_current_wait_level_146: Perm, _res: Ref)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires issubtype(typeof(b), bool())
  requires issubtype(typeof(c), Container())
  requires acc(c.Container_value, write) && issubtype(typeof(c.Container_value), int())
  requires [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_146) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures issubtype(typeof(_res), bool())
  ensures acc(c.Container_value, write) && issubtype(typeof(c.Container_value), int()) && int___eq__(c.Container_value, __prim__int___box__(int___add__(int___unbox__(old(c.Container_value)), 1)))
  ensures bool___eq__(_res, b)
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var b_3: Ref
  var c_5: Ref
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq[Measure$]()
  _res := null
  _err := null
  b_3 := b
  c_5 := c
  if (perm(_MaySet(c_5, 12015246693702276493947828542597337277)) > none) {
    exhale acc(_MaySet(c_5, 12015246693702276493947828542597337277), write)
    inhale acc(c_5.Container_value, write)
  }
  c_5.Container_value := __prim__int___box__(int___add__(int___unbox__(c_5.Container_value), 1))
  _res := b_3
  goto __end
  goto __end
  label __end
}

method test_and(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, b1: Ref, b2: Ref) returns (_current_wait_level_147: Perm, _res: Ref)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires issubtype(typeof(b1), bool())
  requires issubtype(typeof(b2), bool())
  requires [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_147) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures issubtype(typeof(_res), bool())
  ensures bool___unbox__(_res) ==> bool___unbox__(b1)
  ensures bool___unbox__(_res) ==> bool___unbox__(b2)
  ensures [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_0: Ref
  var res: Ref
  var b1_3: Ref
  var b2_3: Ref
  var Container_res: Ref
  var updating_id_res: Ref
  var updating_id_res_0: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq[Measure$]()
  _res := null
  _err := null
  b1_3 := b1
  b2_3 := b2
  Container_res := new()
  inhale typeof(Container_res) == Container()
  inhale acc(_MaySet(Container_res, 12015246693702276493947828542597337277), write)
  _cwl_147 := Container___init__(_cthread_147, _method_measures_147, _residue_147, Container_res)
  c_0 := Container_res
  inhale _isDefined(3170147)
  _cwl_147, updating_id_res := updating_id(_cthread_147, _method_measures_147, _residue_147, b1_3, _checkDefined(c_0, 3170147))
  if (bool___unbox__(updating_id_res)) {
    _cwl_147, updating_id_res_0 := updating_id(_cthread_147, _method_measures_147, _residue_147, b2_3, _checkDefined(c_0, 3170147))
  }
  res := __prim__bool___box__(bool___unbox__(updating_id_res) && bool___unbox__(updating_id_res_0))
  inhale _isDefined(7562610)
  assert bool___unbox__(b1_3) ==> int___eq__(_checkDefined(c_0, 3170147).Container_value, __prim__int___box__(2))
  assert !bool___unbox__(b1_3) ==> int___eq__(_checkDefined(c_0, 3170147).Container_value, __prim__int___box__(1))
  _res := _checkDefined(res, 7562610)
  goto __end
  goto __end
  label __end
}

method test_or(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, b1_0: Ref, b2_0: Ref) returns (_current_wait_level_148: Perm, _res: Ref)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires issubtype(typeof(b1_0), bool())
  requires issubtype(typeof(b2_0), bool())
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_148) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures issubtype(typeof(_res), bool())
  ensures bool___unbox__(b1_0) ==> bool___unbox__(_res)
  ensures bool___unbox__(b2_0) ==> bool___unbox__(_res)
  ensures [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_1: Ref
  var res_0: Ref
  var b1_4: Ref
  var b2_4: Ref
  var Container_res_0: Ref
  var updating_id_res_1: Ref
  var updating_id_res_2: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq[Measure$]()
  _res := null
  _err := null
  b1_4 := b1_0
  b2_4 := b2_0
  Container_res_0 := new()
  inhale typeof(Container_res_0) == Container()
  inhale acc(_MaySet(Container_res_0, 12015246693702276493947828542597337277), write)
  _cwl_148 := Container___init__(_cthread_148, _method_measures_148, _residue_148, Container_res_0)
  c_1 := Container_res_0
  inhale _isDefined(3235683)
  _cwl_148, updating_id_res_1 := updating_id(_cthread_148, _method_measures_148, _residue_148, b1_4, _checkDefined(c_1, 3235683))
  if (!bool___unbox__(updating_id_res_1)) {
    _cwl_148, updating_id_res_2 := updating_id(_cthread_148, _method_measures_148, _residue_148, b2_4, _checkDefined(c_1, 3235683))
  }
  res_0 := __prim__bool___box__(bool___unbox__(updating_id_res_1) || bool___unbox__(updating_id_res_2))
  inhale _isDefined(3438976502669810318)
  assert !bool___unbox__(b1_4) ==> int___eq__(_checkDefined(c_1, 3235683).Container_value, __prim__int___box__(2))
  assert bool___unbox__(b1_4) ==> int___eq__(_checkDefined(c_1, 3235683).Container_value, __prim__int___box__(1))
  _res := _checkDefined(res_0, 3438976502669810318)
  goto __end
  goto __end
  label __end
}

method test_and_fail(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm, b1_1: Ref, b2_1: Ref) returns (_current_wait_level_149: Perm, _res: Ref)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires issubtype(typeof(b1_1), bool())
  requires issubtype(typeof(b2_1), bool())
  requires [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_149) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures issubtype(typeof(_res), bool())
  ensures bool___unbox__(_res) ==> bool___unbox__(b1_1)
  ensures bool___unbox__(_res) ==> bool___unbox__(b2_1)
  ensures [true, (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_2: Ref
  var res_1: Ref
  var b1_5: Ref
  var b2_5: Ref
  var Container_res_1: Ref
  var updating_id_res_3: Ref
  var updating_id_res_4: Ref
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq[Measure$]()
  _res := null
  _err := null
  b1_5 := b1_1
  b2_5 := b2_1
  Container_res_1 := new()
  inhale typeof(Container_res_1) == Container()
  inhale acc(_MaySet(Container_res_1, 12015246693702276493947828542597337277), write)
  _cwl_149 := Container___init__(_cthread_149, _method_measures_149, _residue_149, Container_res_1)
  c_2 := Container_res_1
  inhale _isDefined(3301219)
  assert int___eq__(_checkDefined(c_2, 3301219).Container_value, __prim__int___box__(0))
  _cwl_149, updating_id_res_3 := updating_id(_cthread_149, _method_measures_149, _residue_149, b1_5, _checkDefined(c_2, 3301219))
  if (bool___unbox__(updating_id_res_3)) {
    _cwl_149, updating_id_res_4 := updating_id(_cthread_149, _method_measures_149, _residue_149, b2_5, _checkDefined(c_2, 3301219))
  }
  res_1 := __prim__bool___box__(bool___unbox__(updating_id_res_3) && bool___unbox__(updating_id_res_4))
  inhale _isDefined(3438976506964777614)
  assert !int___eq__(_checkDefined(c_2, 3301219).Container_value, __prim__int___box__(0))
  assert int___eq__(_checkDefined(c_2, 3301219).Container_value, __prim__int___box__(2)) || int___eq__(_checkDefined(c_2, 3301219).Container_value, __prim__int___box__(0))
  _res := _checkDefined(res_1, 3438976506964777614)
  goto __end
  goto __end
  label __end
}

method test_or_fail(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm, b1_2: Ref, b2_2: Ref) returns (_current_wait_level_150: Perm, _res: Ref)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires issubtype(typeof(b1_2), bool())
  requires issubtype(typeof(b2_2), bool())
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_150) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures issubtype(typeof(_res), bool())
  ensures bool___unbox__(b1_2) ==> bool___unbox__(_res)
  ensures bool___unbox__(b2_2) ==> bool___unbox__(_res)
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_3: Ref
  var res_2: Ref
  var b1_6: Ref
  var b2_6: Ref
  var Container_res_2: Ref
  var updating_id_res_5: Ref
  var updating_id_res_6: Ref
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq[Measure$]()
  _res := null
  _err := null
  b1_6 := b1_2
  b2_6 := b2_2
  Container_res_2 := new()
  inhale typeof(Container_res_2) == Container()
  inhale acc(_MaySet(Container_res_2, 12015246693702276493947828542597337277), write)
  _cwl_150 := Container___init__(_cthread_150, _method_measures_150, _residue_150, Container_res_2)
  c_3 := Container_res_2
  inhale _isDefined(3366755)
  assert int___eq__(_checkDefined(c_3, 3366755).Container_value, __prim__int___box__(0))
  _cwl_150, updating_id_res_5 := updating_id(_cthread_150, _method_measures_150, _residue_150, b1_6, _checkDefined(c_3, 3366755))
  if (!bool___unbox__(updating_id_res_5)) {
    _cwl_150, updating_id_res_6 := updating_id(_cthread_150, _method_measures_150, _residue_150, b2_6, _checkDefined(c_3, 3366755))
  }
  res_2 := __prim__bool___box__(bool___unbox__(updating_id_res_5) || bool___unbox__(updating_id_res_6))
  inhale _isDefined(3438976511259744910)
  assert !int___eq__(_checkDefined(c_3, 3366755).Container_value, __prim__int___box__(0))
  assert int___eq__(_checkDefined(c_3, 3366755).Container_value, __prim__int___box__(2)) || int___eq__(_checkDefined(c_3, 3366755).Container_value, __prim__int___box__(0))
  _res := _checkDefined(res_2, 3438976511259744910)
  goto __end
  goto __end
  label __end
}

method updating_id_int(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_151: Perm, b_0: Ref, c_4: Ref) returns (_current_wait_level_151: Perm, _res: Ref)
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires issubtype(typeof(b_0), int())
  requires issubtype(typeof(c_4), Container())
  requires acc(c_4.Container_value, write) && issubtype(typeof(c_4.Container_value), int())
  requires [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_151) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]
  ensures issubtype(typeof(_res), int())
  ensures acc(c_4.Container_value, write) && issubtype(typeof(c_4.Container_value), int()) && int___eq__(c_4.Container_value, __prim__int___box__(int___add__(int___unbox__(old(c_4.Container_value)), 1)))
  ensures int___eq__(_res, b_0)
  ensures [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var b_4: Ref
  var c_6: Ref
  var _cwl_151: Perm
  var _method_measures_151: Seq[Measure$]
  _method_measures_151 := Seq[Measure$]()
  _res := null
  _err := null
  b_4 := b_0
  c_6 := c_4
  if (perm(_MaySet(c_6, 12015246693702276493947828542597337277)) > none) {
    exhale acc(_MaySet(c_6, 12015246693702276493947828542597337277), write)
    inhale acc(c_6.Container_value, write)
  }
  c_6.Container_value := __prim__int___box__(int___add__(int___unbox__(c_6.Container_value), 1))
  _res := b_4
  goto __end
  goto __end
  label __end
}

method test_ternary(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm, b_1: Ref) returns (_current_wait_level_152: Perm, _res: Ref)
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires issubtype(typeof(b_1), bool())
  requires [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_19: Ref [MustInvokeBounded(_r_19)] :: false) && ((forperm _r_19: Ref [MustInvokeUnbounded(_r_19)] :: false) && ((forperm _r_19: Ref [_r_19.MustReleaseBounded] :: false) && (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_152) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures issubtype(typeof(_res), int())
  ensures bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(15))
  ensures !bool___unbox__(b_1) ==> int___eq__(_res, __prim__int___box__(32))
  ensures [true, (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c1: Ref
  var c2: Ref
  var res_3: Ref
  var b_5: Ref
  var Container_res_3: Ref
  var Container_res_4: Ref
  var updating_id_res_7: Ref
  var updating_id_int_res: Ref
  var updating_id_int_res_0: Ref
  var _cwl_152: Perm
  var _method_measures_152: Seq[Measure$]
  _method_measures_152 := Seq[Measure$]()
  _res := null
  _err := null
  b_5 := b_1
  Container_res_3 := new()
  inhale typeof(Container_res_3) == Container()
  inhale acc(_MaySet(Container_res_3, 12015246693702276493947828542597337277), write)
  _cwl_152 := Container___init__(_cthread_152, _method_measures_152, _residue_152, Container_res_3)
  c1 := Container_res_3
  inhale _isDefined(12643)
  Container_res_4 := new()
  inhale typeof(Container_res_4) == Container()
  inhale acc(_MaySet(Container_res_4, 12015246693702276493947828542597337277), write)
  _cwl_152 := Container___init__(_cthread_152, _method_measures_152, _residue_152, Container_res_4)
  c2 := Container_res_4
  inhale _isDefined(12899)
  _cwl_152, updating_id_res_7 := updating_id(_cthread_152, _method_measures_152, _residue_152, b_5, _checkDefined(c1, 12643))
  if (bool___unbox__(updating_id_res_7)) {
    _cwl_152, updating_id_int_res := updating_id_int(_cthread_152, _method_measures_152, _residue_152, __prim__int___box__(15), _checkDefined(c1, 12643))
  } else {
    _cwl_152, updating_id_int_res_0 := updating_id_int(_cthread_152, _method_measures_152, _residue_152, __prim__int___box__(32), _checkDefined(c2, 12899))
  }
  res_3 := (bool___unbox__(updating_id_res_7) ? updating_id_int_res : updating_id_int_res_0)
  inhale _isDefined(3438976515554712206)
  assert int___ge__(int___unbox__(_checkDefined(c1, 12643).Container_value), 1)
  assert bool___unbox__(b_5) ==> int___eq__(_checkDefined(c1, 12643).Container_value, __prim__int___box__(2))
  assert bool___unbox__(b_5) ==> int___eq__(_checkDefined(c2, 12899).Container_value, __prim__int___box__(0))
  assert !bool___unbox__(b_5) ==> int___eq__(_checkDefined(c1, 12643).Container_value, __prim__int___box__(1))
  assert !bool___unbox__(b_5) ==> int___eq__(_checkDefined(c2, 12899).Container_value, __prim__int___box__(1))
  _res := _checkDefined(res_3, 3438976515554712206)
  goto __end
  goto __end
  label __end
}

method test_ternary_fail(_cthread_153: Ref, _caller_measures_153: Seq[Measure$], _residue_153: Perm, b_2: Ref) returns (_current_wait_level_153: Perm, _res: Ref)
  requires _cthread_153 != null
  requires issubtype(typeof(_cthread_153), Thread_0())
  requires issubtype(typeof(b_2), bool())
  requires [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_153) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]
  ensures issubtype(typeof(_res), int())
  ensures bool___unbox__(b_2) ==> int___eq__(_res, __prim__int___box__(15))
  ensures !bool___unbox__(b_2) ==> int___eq__(_res, __prim__int___box__(32))
  ensures [true, (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c1_0: Ref
  var c2_0: Ref
  var res_4: Ref
  var b_6: Ref
  var Container_res_5: Ref
  var Container_res_6: Ref
  var updating_id_res_8: Ref
  var updating_id_int_res_1: Ref
  var updating_id_int_res_2: Ref
  var _cwl_153: Perm
  var _method_measures_153: Seq[Measure$]
  _method_measures_153 := Seq[Measure$]()
  _res := null
  _err := null
  b_6 := b_2
  Container_res_5 := new()
  inhale typeof(Container_res_5) == Container()
  inhale acc(_MaySet(Container_res_5, 12015246693702276493947828542597337277), write)
  _cwl_153 := Container___init__(_cthread_153, _method_measures_153, _residue_153, Container_res_5)
  c1_0 := Container_res_5
  inhale _isDefined(811544931)
  Container_res_6 := new()
  inhale typeof(Container_res_6) == Container()
  inhale acc(_MaySet(Container_res_6, 12015246693702276493947828542597337277), write)
  _cwl_153 := Container___init__(_cthread_153, _method_measures_153, _residue_153, Container_res_6)
  c2_0 := Container_res_6
  inhale _isDefined(811545187)
  _cwl_153, updating_id_res_8 := updating_id(_cthread_153, _method_measures_153, _residue_153, b_6, _checkDefined(c1_0, 811544931))
  if (bool___unbox__(updating_id_res_8)) {
    _cwl_153, updating_id_int_res_1 := updating_id_int(_cthread_153, _method_measures_153, _residue_153, __prim__int___box__(15), _checkDefined(c1_0, 811544931))
  } else {
    _cwl_153, updating_id_int_res_2 := updating_id_int(_cthread_153, _method_measures_153, _residue_153, __prim__int___box__(32), _checkDefined(c2_0, 811545187))
  }
  res_4 := (bool___unbox__(updating_id_res_8) ? updating_id_int_res_1 : updating_id_int_res_2)
  inhale _isDefined(3438976519849679502)
  assert !int___eq__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(c1_0, 811544931).Container_value), int___unbox__(_checkDefined(c2_0, 811545187).Container_value))), __prim__int___box__(2))
  _res := _checkDefined(res_4, 3438976519849679502)
  goto __end
  goto __end
  label __end
}

method test_mod(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm, i: Ref) returns (_current_wait_level_154: Perm, _res: Ref)
  requires _cthread_154 != null
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires issubtype(typeof(i), int())
  requires [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_154) && ((forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]
  ensures issubtype(typeof(_res), bool())
  ensures int___eq__(i, __prim__int___box__(2)) ==> bool___unbox__(_res)
  ensures [true, (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var i_3: Ref
  var _cwl_154: Perm
  var _method_measures_154: Seq[Measure$]
  _method_measures_154 := Seq[Measure$]()
  _res := null
  _err := null
  i_3 := i
  _res := __prim__bool___box__(int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_3), 2)), __prim__int___box__(0)))
  goto __end
  goto __end
  label __end
}

method test_mod_fail(_cthread_155: Ref, _caller_measures_155: Seq[Measure$], _residue_155: Perm, i_0: Ref) returns (_current_wait_level_155: Perm, _res: Ref)
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires issubtype(typeof(i_0), int())
  requires [true, perm(MustTerminate(_cthread_155)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_155) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_155) && _residue_155 <= _current_wait_level_155), true]
  ensures issubtype(typeof(_res), bool())
  ensures int___eq__(i_0, __prim__int___box__(3)) ==> bool___unbox__(_res)
  ensures [true, (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var i_4: Ref
  var _cwl_155: Perm
  var _method_measures_155: Seq[Measure$]
  _method_measures_155 := Seq[Measure$]()
  _res := null
  _err := null
  i_4 := i_0
  _res := __prim__bool___box__(int___eq__(__prim__int___box__(int___mod__(int___unbox__(i_4), 2)), __prim__int___box__(0)))
  goto __end
  goto __end
  label __end
}

method test_div(_cthread_156: Ref, _caller_measures_156: Seq[Measure$], _residue_156: Perm, i_1: Ref) returns (_current_wait_level_156: Perm, _res: Ref)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires issubtype(typeof(i_1), int())
  requires [true, perm(MustTerminate(_cthread_156)) == none && ((forperm _r_31: Ref [MustInvokeBounded(_r_31)] :: false) && ((forperm _r_31: Ref [MustInvokeUnbounded(_r_31)] :: false) && ((forperm _r_31: Ref [_r_31.MustReleaseBounded] :: false) && (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_156) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]
  ensures issubtype(typeof(_res), int())
  ensures int___eq__(i_1, __prim__int___box__(16)) || int___eq__(i_1, __prim__int___box__(17)) ==> int___eq__(_res, __prim__int___box__(8))
  ensures [true, (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var i_5: Ref
  var _cwl_156: Perm
  var _method_measures_156: Seq[Measure$]
  _method_measures_156 := Seq[Measure$]()
  _res := null
  _err := null
  i_5 := i_1
  _res := __prim__int___box__(int___floordiv__(int___unbox__(i_5), 2))
  goto __end
  goto __end
  label __end
}

method test_div_fail(_cthread_157: Ref, _caller_measures_157: Seq[Measure$], _residue_157: Perm, i_2: Ref) returns (_current_wait_level_157: Perm, _res: Ref)
  requires _cthread_157 != null
  requires issubtype(typeof(_cthread_157), Thread_0())
  requires issubtype(typeof(i_2), int())
  requires [true, perm(MustTerminate(_cthread_157)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_157) && ((forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]
  ensures issubtype(typeof(_res), int())
  ensures int___eq__(i_2, __prim__int___box__(18)) ==> int___eq__(_res, __prim__int___box__(8))
  ensures [true, (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var i_6: Ref
  var _cwl_157: Perm
  var _method_measures_157: Seq[Measure$]
  _method_measures_157 := Seq[Measure$]()
  _res := null
  _err := null
  i_6 := i_2
  _res := __prim__int___box__(int___floordiv__(int___unbox__(i_6), 2))
  goto __end
  goto __end
  label __end
}

method Container___init__(_cthread_145: Ref, _caller_measures_145: Seq[Measure$], _residue_145: Perm, self: Ref) returns (_current_wait_level_145: Perm)
  requires _cthread_145 != null
  requires issubtype(typeof(_cthread_145), Thread_0())
  requires self != null
  requires acc(_MaySet(self, 12015246693702276493947828542597337277), write)
  requires issubtype(typeof(self), Container())
  requires self != null
  requires [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_37: Ref [MustInvokeBounded(_r_37)] :: false) && ((forperm _r_37: Ref [MustInvokeUnbounded(_r_37)] :: false) && ((forperm _r_37: Ref [_r_37.MustReleaseBounded] :: false) && (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_145) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]
  ensures acc(self.Container_value, write) && issubtype(typeof(self.Container_value), int()) && int___eq__(self.Container_value, __prim__int___box__(0))
  ensures [true, (forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_0: Ref
  var _cwl_145: Perm
  var _method_measures_145: Seq[Measure$]
  _method_measures_145 := Seq[Measure$]()
  inhale typeof(self) == Container()
  _err := null
  self_0 := self
  if (perm(_MaySet(self_0, 12015246693702276493947828542597337277)) > none) {
    exhale acc(_MaySet(self_0, 12015246693702276493947828542597337277), write)
    inhale acc(self_0.Container_value, write)
  }
  self_0.Container_value := __prim__int___box__(0)
  goto __end
  label __end
}

method main(_cthread_158: Ref, _caller_measures_158: Seq[Measure$], _residue_158: Perm) returns (_current_wait_level_158: Perm)
  requires _cthread_158 != null
  requires issubtype(typeof(_cthread_158), Thread_0())
  requires [true, perm(MustTerminate(_cthread_158)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_158) && ((forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158), true]
  ensures [true, (forperm _r_39: Ref [MustInvokeBounded(_r_39)] :: false) && ((forperm _r_39: Ref [MustInvokeUnbounded(_r_39)] :: false) && ((forperm _r_39: Ref [_r_39.MustReleaseBounded] :: false) && (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var _cwl_158: Perm
  var _method_measures_158: Seq[Measure$]
  _method_measures_158 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(4897136316197950463415316291)))
  assert true && (_single(4897136316197950463415316291) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(3854934882420679503746723957)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4743872377847373797671527796)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4227791639009860236)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(16421787473326284379427348663228996236)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(16780067960236228675865711899312953996)))
  assert true && (_single(4897136316197950463415316291) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(8218341471979370711554352157589999499)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(10472751041067554000333916341541837452)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3594675863470720777585235328020873564923323764)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(4744505174955783661013919092)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(16423146394768463447128638733264132748)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(7526222233944534531391579508)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(1129190396583167565834506935187839628)))
  goto __end
  label __end
}