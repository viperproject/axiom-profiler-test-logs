domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function read_int_twice1_threading(): ThreadingID
  
  unique function read_int_twice2_threading(): ThreadingID
  
  unique function read_int_twice3_threading(): ThreadingID
  
  unique function read_int_twice4_threading(): ThreadingID
  
  unique function read_write_int_twice1_threading(): ThreadingID
  
  unique function read_write_int_twice2_threading(): ThreadingID
  
  unique function read_write_int_twice3_threading(): ThreadingID
  
  unique function read_write_int_twice4_threading(): ThreadingID
  
  unique function read_int_threading(): ThreadingID
  
  unique function write_int_threading(): ThreadingID
  
  unique function write_string_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __file___0(): Ref 


function __name___0(): Ref 


function get__read_int_twice_io__number1_6(t_pre: Ref): Int 


function get__read_int_twice_io__number2_6(t_pre: Ref): Int 


function get__read_int_twice_io__t_post(t_pre: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function get__write_int_twice_io__t_post_0(t_pre_0: Ref, number1_7: Int, number2_7: Int): Ref
  ensures issubtype(typeof(result), Place()) 


function get__read_int_io__number(t_pre_1: Ref): Int 


function get__read_int_io__t_post_1(t_pre_1: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function get__write_int_io__t_post_2(t_pre_2: Ref, value_1: Int): Ref
  ensures issubtype(typeof(result), Place()) 


function get__write_string_io__t_post_3(t_pre_3: Ref, value_2: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function Place___eq__(self: Ref, other: Ref): Bool
  ensures result == (self == other) 


function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


function tuple___val__(self: Ref): Seq[Ref] 


function tuple___create3__(arg0: Ref, arg1: Ref, arg2: Ref, t0: PyType, t1: PyType, t2: PyType, ctr: Int): Ref
  requires issubtype(typeof(arg0), t0)
  requires issubtype(typeof(arg1), t1)
  requires issubtype(typeof(arg2), t2)
  ensures result != null
  ensures typeof(result) == tuple(Seq(t0, t1, t2))
  ensures tuple_args(typeof(result)) == Seq(t0, t1, t2)
  ensures tuple___val__(result) == Seq(arg0, arg1, arg2)
  ensures tuple___len__(result) == 3 && (tuple___getitem__(result, 0) == arg0 && (tuple___getitem__(result, 1) == arg1 && tuple___getitem__(result, 2) == arg2)) 


function tuple___len__(self: Ref): Int
  ensures result == |tuple_args(typeof(self))|
  ensures result == |tuple___val__(self)| 


function tuple___getitem__(self: Ref, key: Int): Ref
  requires (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
  ensures key >= 0 ==> issubtype(typeof(result), tuple_arg(typeof(self), key))
  ensures key < 0 ==> issubtype(typeof(result), tuple_arg(typeof(self), tuple___len__(self) + key))
  ensures key >= 0 ==> result == tuple___val__(self)[key]
  ensures key < 0 ==> result == tuple___val__(self)[tuple___len__(self) + key] 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate read_int_twice_io(t_pre: Ref) 

predicate write_int_twice_io(t_pre_0: Ref, number1_7: Int, number2_7: Int) 

predicate read_int_io(t_pre_1: Ref) 

predicate write_int_io(t_pre_2: Ref, value_1: Int) 

predicate write_string_io(t_pre_3: Ref, value_2: Ref) 

method read_int_twice1(_cthread_145: Ref, _caller_measures_145: Seq[Measure$], _residue_145: Perm, t1: Ref) returns (_current_wait_level_145: Perm, _res: Ref)
  requires _cthread_145 != null
  requires issubtype(typeof(_cthread_145), Thread_0())
  requires issubtype(typeof(t1), Place())
  requires [acc(MustInvokeBounded(t1), write), (perm(MustInvokeBounded(t1)) > none && Measure$check(_caller_measures_145, t1, 2) ? acc(MustInvokeBounded(t1), write) : (perm(MustInvokeUnbounded(t1)) > none ? acc(MustInvokeUnbounded(t1), write) : acc(MustInvokeCredit(t1), write)))] && acc(read_int_twice_io(t1), write)
  requires [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_145) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), int(), int())))
  ensures [acc(MustInvokeUnbounded(old(get__read_int_twice_io__t_post(t1))), write), (perm(MustInvokeUnbounded(old(get__read_int_twice_io__t_post(t1)))) > none ? acc(MustInvokeUnbounded(old(get__read_int_twice_io__t_post(t1))), write) : acc(MustInvokeCredit(old(get__read_int_twice_io__t_post(t1))), write))] && (Place___eq__(old(get__read_int_twice_io__t_post(t1)), tuple___getitem__(_res, 0)) && (int___eq__(__prim__int___box__(old(get__read_int_twice_io__number1_6(t1))), tuple___getitem__(_res, 1)) && int___eq__(__prim__int___box__(old(get__read_int_twice_io__number2_6(t1))), tuple___getitem__(_res, 2))))
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var t2: Ref
  var number1: Ref
  var t3: Ref
  var number2: Ref
  var t1_10: Ref
  var number1_8: Int
  var number2_8: Int
  var t_post_4: Ref
  var t2_7: Ref
  var read_int_res: Ref
  var read_int_res_0: Ref
  var _cwl_145: Perm
  var _method_measures_145: Seq[Measure$]
  _method_measures_145 := Seq(Measure$create(true, t1, 2))
  _res := null
  _err := null
  t1_10 := t1
  exhale acc(read_int_twice_io(t1_10), write)
  number1_8 := get__read_int_twice_io__number1_6(t1_10)
  number2_8 := get__read_int_twice_io__number2_6(t1_10)
  t_post_4 := get__read_int_twice_io__t_post(t1_10)
  t2_7 := get__read_int_io__t_post_1(t1_10)
  inhale acc(read_int_io(t1_10), write) && get__read_int_io__number(t1_10) == number1_8 && (acc(read_int_io(t2_7), write) && get__read_int_io__number(t2_7) == number2_8 && get__read_int_io__t_post_1(t2_7) == t_post_4)
  _cwl_145, read_int_res := read_int(_cthread_145, _method_measures_145, _residue_145, t1_10)
  t2 := tuple___getitem__(read_int_res, 0)
  inhale _isDefined(12916)
  number1 := tuple___getitem__(read_int_res, 1)
  inhale _isDefined(3560145102067370642)
  _cwl_145, read_int_res_0 := read_int(_cthread_145, _method_measures_145, _residue_145, _checkDefined(t2, 12916))
  t3 := tuple___getitem__(read_int_res_0, 0)
  inhale _isDefined(13172)
  number2 := tuple___getitem__(read_int_res_0, 1)
  inhale _isDefined(3560426577044081298)
  _res := tuple___create3__(_checkDefined(t3, 13172), _checkDefined(number1, 3560145102067370642), _checkDefined(number2, 3560426577044081298), Place(), int(), int(), 0)
  goto __end
  goto __end
  label __end
}

method read_int_twice2(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm, t1_0: Ref) returns (_current_wait_level_146: Perm, _res: Ref)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires issubtype(typeof(t1_0), Place())
  requires [acc(MustInvokeBounded(t1_0), write), (perm(MustInvokeBounded(t1_0)) > none && Measure$check(_caller_measures_146, t1_0, 2) ? acc(MustInvokeBounded(t1_0), write) : (perm(MustInvokeUnbounded(t1_0)) > none ? acc(MustInvokeUnbounded(t1_0), write) : acc(MustInvokeCredit(t1_0), write)))] && acc(read_int_twice_io(t1_0), write)
  requires [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_146) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), int(), int())))
  ensures [acc(MustInvokeUnbounded(old(get__read_int_twice_io__t_post(t1_0))), write), (perm(MustInvokeUnbounded(old(get__read_int_twice_io__t_post(t1_0)))) > none ? acc(MustInvokeUnbounded(old(get__read_int_twice_io__t_post(t1_0))), write) : acc(MustInvokeCredit(old(get__read_int_twice_io__t_post(t1_0))), write))] && (Place___eq__(old(get__read_int_twice_io__t_post(t1_0)), tuple___getitem__(_res, 0)) && (int___eq__(__prim__int___box__(old(get__read_int_twice_io__number1_6(t1_0))), tuple___getitem__(_res, 1)) && int___eq__(__prim__int___box__(old(get__read_int_twice_io__number2_6(t1_0))), tuple___getitem__(_res, 2))))
  ensures [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var t2_0: Ref
  var number1_0: Ref
  var t3_0: Ref
  var number2_0: Ref
  var t1_11: Ref
  var number1_9: Int
  var number2_9: Int
  var t_post_5: Ref
  var t2_8: Ref
  var read_int_res_1: Ref
  var read_int_res_2: Ref
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq(Measure$create(true, t1_0, 2))
  _res := null
  _err := null
  t1_11 := t1_0
  exhale acc(read_int_twice_io(t1_11), write)
  number1_9 := get__read_int_twice_io__number1_6(t1_11)
  number2_9 := get__read_int_twice_io__number2_6(t1_11)
  t_post_5 := get__read_int_twice_io__t_post(t1_11)
  t2_8 := get__read_int_io__t_post_1(t1_11)
  inhale acc(read_int_io(t1_11), write) && get__read_int_io__number(t1_11) == number1_9 && (acc(read_int_io(t2_8), write) && get__read_int_io__number(t2_8) == number2_9 && get__read_int_io__t_post_1(t2_8) == t_post_5)
  _cwl_146, read_int_res_1 := read_int(_cthread_146, _method_measures_146, _residue_146, t1_11)
  t2_0 := tuple___getitem__(read_int_res_1, 0)
  inhale _isDefined(811545204)
  number1_0 := tuple___getitem__(read_int_res_1, 1)
  inhale _isDefined(2538851627241304904321299822)
  _cwl_146, read_int_res_2 := read_int(_cthread_146, _method_measures_146, _residue_146, _checkDefined(t2_0, 811545204))
  t3_0 := tuple___getitem__(read_int_res_2, 0)
  inhale _isDefined(811545460)
  number2_0 := tuple___getitem__(read_int_res_2, 1)
  inhale _isDefined(2539456090150830743931942254)
  _res := tuple___create3__(_checkDefined(t3_0, 811545460), _checkDefined(number2_0, 2539456090150830743931942254), _checkDefined(number1_0, 2538851627241304904321299822), Place(), int(), int(), 1)
  goto __end
  goto __end
  label __end
}

method read_int_twice3(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, t1_1: Ref) returns (_current_wait_level_147: Perm, _res: Ref)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires issubtype(typeof(t1_1), Place())
  requires [acc(MustInvokeBounded(t1_1), write), (perm(MustInvokeBounded(t1_1)) > none && Measure$check(_caller_measures_147, t1_1, 2) ? acc(MustInvokeBounded(t1_1), write) : (perm(MustInvokeUnbounded(t1_1)) > none ? acc(MustInvokeUnbounded(t1_1), write) : acc(MustInvokeCredit(t1_1), write)))] && acc(read_int_twice_io(t1_1), write)
  requires [true, perm(MustTerminate(_cthread_147)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_147) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), int(), int())))
  ensures [acc(MustInvokeUnbounded(old(get__read_int_twice_io__t_post(t1_1))), write), (perm(MustInvokeUnbounded(old(get__read_int_twice_io__t_post(t1_1)))) > none ? acc(MustInvokeUnbounded(old(get__read_int_twice_io__t_post(t1_1))), write) : acc(MustInvokeCredit(old(get__read_int_twice_io__t_post(t1_1))), write))] && (Place___eq__(old(get__read_int_twice_io__t_post(t1_1)), tuple___getitem__(_res, 0)) && (int___eq__(__prim__int___box__(old(get__read_int_twice_io__number1_6(t1_1))), tuple___getitem__(_res, 1)) && int___eq__(__prim__int___box__(old(get__read_int_twice_io__number2_6(t1_1))), tuple___getitem__(_res, 2))))
  ensures [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var t2_1: Ref
  var number2_1: Ref
  var t3_1: Ref
  var number1_1: Ref
  var t1_12: Ref
  var number1_10: Int
  var number2_10: Int
  var t_post_6: Ref
  var t2_9: Ref
  var read_int_res_3: Ref
  var read_int_res_4: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq(Measure$create(true, t1_1, 2))
  _res := null
  _err := null
  t1_12 := t1_1
  exhale acc(read_int_twice_io(t1_12), write)
  number1_10 := get__read_int_twice_io__number1_6(t1_12)
  number2_10 := get__read_int_twice_io__number2_6(t1_12)
  t_post_6 := get__read_int_twice_io__t_post(t1_12)
  t2_9 := get__read_int_io__t_post_1(t1_12)
  inhale acc(read_int_io(t1_12), write) && get__read_int_io__number(t1_12) == number1_10 && (acc(read_int_io(t2_9), write) && get__read_int_io__number(t2_9) == number2_10 && get__read_int_io__t_post_1(t2_9) == t_post_6)
  _cwl_147, read_int_res_3 := read_int(_cthread_147, _method_measures_147, _residue_147, t1_12)
  t2_1 := tuple___getitem__(read_int_res_3, 0)
  inhale _isDefined(828322420)
  number2_1 := tuple___getitem__(read_int_res_3, 1)
  inhale _isDefined(2539456108597574817641493870)
  _cwl_147, read_int_res_4 := read_int(_cthread_147, _method_measures_147, _residue_147, _checkDefined(t2_1, 828322420))
  t3_1 := tuple___getitem__(read_int_res_4, 0)
  inhale _isDefined(828322676)
  number1_1 := tuple___getitem__(read_int_res_4, 1)
  inhale _isDefined(2538851645688048978030851438)
  _res := tuple___create3__(_checkDefined(t3_1, 828322676), _checkDefined(number2_1, 2539456108597574817641493870), _checkDefined(number1_1, 2538851645688048978030851438), Place(), int(), int(), 2)
  goto __end
  goto __end
  label __end
}

method read_int_twice4(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, t1_2: Ref) returns (_current_wait_level_148: Perm, _res: Ref)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires issubtype(typeof(t1_2), Place())
  requires [acc(MustInvokeBounded(t1_2), write), (perm(MustInvokeBounded(t1_2)) > none && Measure$check(_caller_measures_148, t1_2, 2) ? acc(MustInvokeBounded(t1_2), write) : (perm(MustInvokeUnbounded(t1_2)) > none ? acc(MustInvokeUnbounded(t1_2), write) : acc(MustInvokeCredit(t1_2), write)))] && acc(read_int_twice_io(t1_2), write)
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_148) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), int(), int())))
  ensures [acc(MustInvokeUnbounded(old(get__read_int_twice_io__t_post(t1_2))), write), (perm(MustInvokeUnbounded(old(get__read_int_twice_io__t_post(t1_2)))) > none ? acc(MustInvokeUnbounded(old(get__read_int_twice_io__t_post(t1_2))), write) : acc(MustInvokeCredit(old(get__read_int_twice_io__t_post(t1_2))), write))] && (Place___eq__(old(get__read_int_twice_io__t_post(t1_2)), tuple___getitem__(_res, 0)) && (int___eq__(__prim__int___box__(old(get__read_int_twice_io__number1_6(t1_2))), tuple___getitem__(_res, 1)) && int___eq__(__prim__int___box__(old(get__read_int_twice_io__number2_6(t1_2))), tuple___getitem__(_res, 2))))
  ensures [true, (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var t2_2: Ref
  var value1: Ref
  var t3_2: Ref
  var value2: Ref
  var t1_13: Ref
  var number1_11: Int
  var number2_11: Int
  var t_post_7: Ref
  var t2_10: Ref
  var read_int_res_5: Ref
  var read_int_res_6: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq(Measure$create(true, t1_2, 2))
  _res := null
  _err := null
  t1_13 := t1_2
  exhale acc(read_int_twice_io(t1_13), write)
  number1_11 := get__read_int_twice_io__number1_6(t1_13)
  number2_11 := get__read_int_twice_io__number2_6(t1_13)
  t_post_7 := get__read_int_twice_io__t_post(t1_13)
  t2_10 := get__read_int_io__t_post_1(t1_13)
  inhale acc(read_int_io(t1_13), write) && get__read_int_io__number(t1_13) == number1_11 && (acc(read_int_io(t2_10), write) && get__read_int_io__number(t2_10) == number2_11 && get__read_int_io__t_post_1(t2_10) == t_post_7)
  _cwl_148, read_int_res_5 := read_int(_cthread_148, _method_measures_148, _residue_148, t1_13)
  t2_2 := tuple___getitem__(read_int_res_5, 0)
  inhale _isDefined(845099636)
  value1 := tuple___getitem__(read_int_res_5, 1)
  inhale _isDefined(4230676787569598090)
  _cwl_148, read_int_res_6 := read_int(_cthread_148, _method_measures_148, _residue_148, _checkDefined(t2_2, 845099636))
  t3_2 := tuple___getitem__(read_int_res_6, 0)
  inhale _isDefined(845099892)
  value2 := tuple___getitem__(read_int_res_6, 1)
  inhale _isDefined(4230677887081225866)
  _res := tuple___create3__(_checkDefined(t3_2, 845099892), _checkDefined(value1, 4230676787569598090), _checkDefined(value2, 4230677887081225866), Place(), int(), int(), 3)
  goto __end
  goto __end
  label __end
}

method read_write_int_twice1(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm, t1_3: Ref) returns (_current_wait_level_149: Perm, _res: Ref)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires issubtype(typeof(t1_3), Place())
  requires [acc(MustInvokeBounded(t1_3), write), (perm(MustInvokeBounded(t1_3)) > none && Measure$check(_caller_measures_149, t1_3, 2) ? acc(MustInvokeBounded(t1_3), write) : (perm(MustInvokeUnbounded(t1_3)) > none ? acc(MustInvokeUnbounded(t1_3), write) : acc(MustInvokeCredit(t1_3), write)))] && (acc(read_int_twice_io(t1_3), write) && acc(write_int_twice_io(get__read_int_twice_io__t_post(t1_3), get__read_int_twice_io__number1_6(t1_3), get__read_int_twice_io__number2_6(t1_3)), write))
  requires [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_149) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_3), get__read_int_twice_io__number1_6(t1_3), get__read_int_twice_io__number2_6(t1_3)))), write), (perm(MustInvokeUnbounded(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_3), get__read_int_twice_io__number1_6(t1_3), get__read_int_twice_io__number2_6(t1_3))))) > none ? acc(MustInvokeUnbounded(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_3), get__read_int_twice_io__number1_6(t1_3), get__read_int_twice_io__number2_6(t1_3)))), write) : acc(MustInvokeCredit(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_3), get__read_int_twice_io__number1_6(t1_3), get__read_int_twice_io__number2_6(t1_3)))), write))] && Place___eq__(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_3), get__read_int_twice_io__number1_6(t1_3), get__read_int_twice_io__number2_6(t1_3))), _res)
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var t2_3: Ref
  var number1_2: Ref
  var t3_3: Ref
  var number2_2: Ref
  var t4: Ref
  var t5: Ref
  var t1_14: Ref
  var number1_12: Int
  var number2_12: Int
  var t_post_8: Ref
  var t2_11: Ref
  var read_int_res_7: Ref
  var read_int_res_8: Ref
  var t_post_9: Ref
  var t2_12: Ref
  var write_int_res: Ref
  var write_int_res_0: Ref
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq(Measure$create(true, t1_3, 2))
  _res := null
  _err := null
  t1_14 := t1_3
  exhale acc(read_int_twice_io(t1_14), write)
  number1_12 := get__read_int_twice_io__number1_6(t1_14)
  number2_12 := get__read_int_twice_io__number2_6(t1_14)
  t_post_8 := get__read_int_twice_io__t_post(t1_14)
  t2_11 := get__read_int_io__t_post_1(t1_14)
  inhale acc(read_int_io(t1_14), write) && get__read_int_io__number(t1_14) == number1_12 && (acc(read_int_io(t2_11), write) && get__read_int_io__number(t2_11) == number2_12 && get__read_int_io__t_post_1(t2_11) == t_post_8)
  _cwl_149, read_int_res_7 := read_int(_cthread_149, _method_measures_149, _residue_149, t1_14)
  t2_3 := tuple___getitem__(read_int_res_7, 0)
  inhale _isDefined(861876852)
  number1_2 := tuple___getitem__(read_int_res_7, 1)
  inhale _isDefined(2538851664134793051740403054)
  _cwl_149, read_int_res_8 := read_int(_cthread_149, _method_measures_149, _residue_149, _checkDefined(t2_3, 861876852))
  t3_3 := tuple___getitem__(read_int_res_8, 0)
  inhale _isDefined(861877108)
  number2_2 := tuple___getitem__(read_int_res_8, 1)
  inhale _isDefined(2539456127044318891351045486)
  exhale acc(write_int_twice_io(_checkDefined(t3_3, 861877108), int___unbox__(_checkDefined(number1_2, 2538851664134793051740403054)), int___unbox__(_checkDefined(number2_2, 2539456127044318891351045486))), write)
  t_post_9 := get__write_int_twice_io__t_post_0(_checkDefined(t3_3, 861877108), int___unbox__(_checkDefined(number1_2, 2538851664134793051740403054)), int___unbox__(_checkDefined(number2_2, 2539456127044318891351045486)))
  t2_12 := get__write_int_io__t_post_2(_checkDefined(t3_3, 861877108), int___unbox__(_checkDefined(number1_2, 2538851664134793051740403054)))
  inhale acc(write_int_io(_checkDefined(t3_3, 861877108), int___unbox__(_checkDefined(number1_2, 2538851664134793051740403054))), write) && (acc(write_int_io(t2_12, int___unbox__(_checkDefined(number2_2, 2539456127044318891351045486))), write) && get__write_int_io__t_post_2(t2_12, int___unbox__(_checkDefined(number2_2, 2539456127044318891351045486))) == t_post_9)
  _cwl_149, write_int_res := write_int(_cthread_149, _method_measures_149, _residue_149, _checkDefined(t3_3, 861877108), _checkDefined(number1_2, 2538851664134793051740403054))
  t4 := write_int_res
  inhale _isDefined(13428)
  _cwl_149, write_int_res_0 := write_int(_cthread_149, _method_measures_149, _residue_149, _checkDefined(t4, 13428), _checkDefined(number2_2, 2539456127044318891351045486))
  t5 := write_int_res_0
  inhale _isDefined(13684)
  _res := _checkDefined(t5, 13684)
  goto __end
  goto __end
  label __end
}

method read_write_int_twice2(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm, t1_4: Ref) returns (_current_wait_level_150: Perm, _res: Ref)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires issubtype(typeof(t1_4), Place())
  requires [acc(MustInvokeBounded(t1_4), write), (perm(MustInvokeBounded(t1_4)) > none && Measure$check(_caller_measures_150, t1_4, 2) ? acc(MustInvokeBounded(t1_4), write) : (perm(MustInvokeUnbounded(t1_4)) > none ? acc(MustInvokeUnbounded(t1_4), write) : acc(MustInvokeCredit(t1_4), write)))] && (acc(read_int_twice_io(t1_4), write) && acc(write_int_twice_io(get__read_int_twice_io__t_post(t1_4), get__read_int_twice_io__number1_6(t1_4), get__read_int_twice_io__number2_6(t1_4)), write))
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_150) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_4), get__read_int_twice_io__number1_6(t1_4), get__read_int_twice_io__number2_6(t1_4)))), write), (perm(MustInvokeUnbounded(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_4), get__read_int_twice_io__number1_6(t1_4), get__read_int_twice_io__number2_6(t1_4))))) > none ? acc(MustInvokeUnbounded(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_4), get__read_int_twice_io__number1_6(t1_4), get__read_int_twice_io__number2_6(t1_4)))), write) : acc(MustInvokeCredit(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_4), get__read_int_twice_io__number1_6(t1_4), get__read_int_twice_io__number2_6(t1_4)))), write))] && Place___eq__(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_4), get__read_int_twice_io__number1_6(t1_4), get__read_int_twice_io__number2_6(t1_4))), _res)
  ensures [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var t2_4: Ref
  var number1_3: Ref
  var t3_4: Ref
  var number2_3: Ref
  var t4_0: Ref
  var t5_0: Ref
  var t1_15: Ref
  var number1_13: Int
  var number2_13: Int
  var t_post_10: Ref
  var t2_13: Ref
  var read_int_res_9: Ref
  var read_int_res_10: Ref
  var t_post_11: Ref
  var t2_14: Ref
  var write_int_res_1: Ref
  var write_int_res_2: Ref
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq(Measure$create(true, t1_4, 2))
  _res := null
  _err := null
  t1_15 := t1_4
  exhale acc(read_int_twice_io(t1_15), write)
  number1_13 := get__read_int_twice_io__number1_6(t1_15)
  number2_13 := get__read_int_twice_io__number2_6(t1_15)
  t_post_10 := get__read_int_twice_io__t_post(t1_15)
  t2_13 := get__read_int_io__t_post_1(t1_15)
  inhale acc(read_int_io(t1_15), write) && get__read_int_io__number(t1_15) == number1_13 && (acc(read_int_io(t2_13), write) && get__read_int_io__number(t2_13) == number2_13 && get__read_int_io__t_post_1(t2_13) == t_post_10)
  _cwl_150, read_int_res_9 := read_int(_cthread_150, _method_measures_150, _residue_150, t1_15)
  t2_4 := tuple___getitem__(read_int_res_9, 0)
  inhale _isDefined(878654068)
  number1_3 := tuple___getitem__(read_int_res_9, 1)
  inhale _isDefined(2538851682581537125449954670)
  _cwl_150, read_int_res_10 := read_int(_cthread_150, _method_measures_150, _residue_150, _checkDefined(t2_4, 878654068))
  t3_4 := tuple___getitem__(read_int_res_10, 0)
  inhale _isDefined(878654324)
  number2_3 := tuple___getitem__(read_int_res_10, 1)
  inhale _isDefined(2539456145491062965060597102)
  exhale acc(write_int_twice_io(_checkDefined(t3_4, 878654324), int___unbox__(_checkDefined(number2_3, 2539456145491062965060597102)), int___unbox__(_checkDefined(number1_3, 2538851682581537125449954670))), write)
  t_post_11 := get__write_int_twice_io__t_post_0(_checkDefined(t3_4, 878654324), int___unbox__(_checkDefined(number2_3, 2539456145491062965060597102)), int___unbox__(_checkDefined(number1_3, 2538851682581537125449954670)))
  t2_14 := get__write_int_io__t_post_2(_checkDefined(t3_4, 878654324), int___unbox__(_checkDefined(number2_3, 2539456145491062965060597102)))
  inhale acc(write_int_io(_checkDefined(t3_4, 878654324), int___unbox__(_checkDefined(number2_3, 2539456145491062965060597102))), write) && (acc(write_int_io(t2_14, int___unbox__(_checkDefined(number1_3, 2538851682581537125449954670))), write) && get__write_int_io__t_post_2(t2_14, int___unbox__(_checkDefined(number1_3, 2538851682581537125449954670))) == t_post_11)
  _cwl_150, write_int_res_1 := write_int(_cthread_150, _method_measures_150, _residue_150, _checkDefined(t3_4, 878654324), _checkDefined(number1_3, 2538851682581537125449954670))
  t4_0 := write_int_res_1
  inhale _isDefined(811545716)
  _cwl_150, write_int_res_2 := write_int(_cthread_150, _method_measures_150, _residue_150, _checkDefined(t4_0, 811545716), _checkDefined(number2_3, 2539456145491062965060597102))
  t5_0 := write_int_res_2
  inhale _isDefined(811545972)
  _res := _checkDefined(t5_0, 811545972)
  goto __end
  goto __end
  label __end
}

method read_write_int_twice3(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_151: Perm, t1_5: Ref) returns (_current_wait_level_151: Perm, _res: Ref)
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires issubtype(typeof(t1_5), Place())
  requires [acc(MustInvokeBounded(t1_5), write), (perm(MustInvokeBounded(t1_5)) > none && Measure$check(_caller_measures_151, t1_5, 2) ? acc(MustInvokeBounded(t1_5), write) : (perm(MustInvokeUnbounded(t1_5)) > none ? acc(MustInvokeUnbounded(t1_5), write) : acc(MustInvokeCredit(t1_5), write)))] && (acc(read_int_twice_io(t1_5), write) && acc(write_int_twice_io(get__read_int_twice_io__t_post(t1_5), get__read_int_twice_io__number1_6(t1_5), get__read_int_twice_io__number2_6(t1_5)), write))
  requires [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_19: Ref [MustInvokeBounded(_r_19)] :: false) && ((forperm _r_19: Ref [MustInvokeUnbounded(_r_19)] :: false) && ((forperm _r_19: Ref [_r_19.MustReleaseBounded] :: false) && (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_151) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_5), get__read_int_twice_io__number1_6(t1_5), get__read_int_twice_io__number2_6(t1_5)))), write), (perm(MustInvokeUnbounded(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_5), get__read_int_twice_io__number1_6(t1_5), get__read_int_twice_io__number2_6(t1_5))))) > none ? acc(MustInvokeUnbounded(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_5), get__read_int_twice_io__number1_6(t1_5), get__read_int_twice_io__number2_6(t1_5)))), write) : acc(MustInvokeCredit(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_5), get__read_int_twice_io__number1_6(t1_5), get__read_int_twice_io__number2_6(t1_5)))), write))] && Place___eq__(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_5), get__read_int_twice_io__number1_6(t1_5), get__read_int_twice_io__number2_6(t1_5))), _res)
  ensures [true, (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var t2_5: Ref
  var number1_4: Ref
  var t3_5: Ref
  var number2_4: Ref
  var t4_1: Ref
  var t5_1: Ref
  var t1_16: Ref
  var number1_14: Int
  var number2_14: Int
  var t_post_12: Ref
  var t2_15: Ref
  var read_int_res_11: Ref
  var read_int_res_12: Ref
  var write_int_res_3: Ref
  var write_int_res_4: Ref
  var _cwl_151: Perm
  var _method_measures_151: Seq[Measure$]
  _method_measures_151 := Seq(Measure$create(true, t1_5, 2))
  _res := null
  _err := null
  t1_16 := t1_5
  exhale acc(read_int_twice_io(t1_16), write)
  number1_14 := get__read_int_twice_io__number1_6(t1_16)
  number2_14 := get__read_int_twice_io__number2_6(t1_16)
  t_post_12 := get__read_int_twice_io__t_post(t1_16)
  t2_15 := get__read_int_io__t_post_1(t1_16)
  inhale acc(read_int_io(t1_16), write) && get__read_int_io__number(t1_16) == number1_14 && (acc(read_int_io(t2_15), write) && get__read_int_io__number(t2_15) == number2_14 && get__read_int_io__t_post_1(t2_15) == t_post_12)
  _cwl_151, read_int_res_11 := read_int(_cthread_151, _method_measures_151, _residue_151, t1_16)
  t2_5 := tuple___getitem__(read_int_res_11, 0)
  inhale _isDefined(895431284)
  number1_4 := tuple___getitem__(read_int_res_11, 1)
  inhale _isDefined(2538851701028281199159506286)
  _cwl_151, read_int_res_12 := read_int(_cthread_151, _method_measures_151, _residue_151, _checkDefined(t2_5, 895431284))
  t3_5 := tuple___getitem__(read_int_res_12, 0)
  inhale _isDefined(895431540)
  number2_4 := tuple___getitem__(read_int_res_12, 1)
  inhale _isDefined(2539456163937807038770148718)
  _cwl_151, write_int_res_3 := write_int(_cthread_151, _method_measures_151, _residue_151, _checkDefined(t3_5, 895431540), _checkDefined(number1_4, 2538851701028281199159506286))
  t4_1 := write_int_res_3
  inhale _isDefined(828322932)
  _cwl_151, write_int_res_4 := write_int(_cthread_151, _method_measures_151, _residue_151, _checkDefined(t4_1, 828322932), _checkDefined(number2_4, 2539456163937807038770148718))
  t5_1 := write_int_res_4
  inhale _isDefined(828323188)
  _res := _checkDefined(t5_1, 828323188)
  goto __end
  goto __end
  label __end
}

method read_write_int_twice4(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm, t1_6: Ref) returns (_current_wait_level_152: Perm, _res: Ref)
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires issubtype(typeof(t1_6), Place())
  requires [acc(MustInvokeBounded(t1_6), write), (perm(MustInvokeBounded(t1_6)) > none && Measure$check(_caller_measures_152, t1_6, 2) ? acc(MustInvokeBounded(t1_6), write) : (perm(MustInvokeUnbounded(t1_6)) > none ? acc(MustInvokeUnbounded(t1_6), write) : acc(MustInvokeCredit(t1_6), write)))] && (acc(read_int_twice_io(t1_6), write) && acc(write_int_twice_io(get__read_int_twice_io__t_post(t1_6), get__read_int_twice_io__number1_6(t1_6), get__read_int_twice_io__number2_6(t1_6)), write))
  requires [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_152) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_6), get__read_int_twice_io__number1_6(t1_6), get__read_int_twice_io__number2_6(t1_6)))), write), (perm(MustInvokeUnbounded(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_6), get__read_int_twice_io__number1_6(t1_6), get__read_int_twice_io__number2_6(t1_6))))) > none ? acc(MustInvokeUnbounded(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_6), get__read_int_twice_io__number1_6(t1_6), get__read_int_twice_io__number2_6(t1_6)))), write) : acc(MustInvokeCredit(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_6), get__read_int_twice_io__number1_6(t1_6), get__read_int_twice_io__number2_6(t1_6)))), write))] && Place___eq__(old(get__write_int_twice_io__t_post_0(get__read_int_twice_io__t_post(t1_6), get__read_int_twice_io__number1_6(t1_6), get__read_int_twice_io__number2_6(t1_6))), _res)
  ensures [true, (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var t2_6: Ref
  var number1_5: Ref
  var t3_6: Ref
  var number2_5: Ref
  var t4_2: Ref
  var t5_2: Ref
  var t1_17: Ref
  var number1_15: Int
  var number2_15: Int
  var t_post_13: Ref
  var t2_16: Ref
  var read_int_res_13: Ref
  var read_int_res_14: Ref
  var t_post_14: Ref
  var t2_17: Ref
  var write_int_res_5: Ref
  var write_int_res_6: Ref
  var _cwl_152: Perm
  var _method_measures_152: Seq[Measure$]
  _method_measures_152 := Seq(Measure$create(true, t1_6, 2))
  _res := null
  _err := null
  t1_17 := t1_6
  exhale acc(read_int_twice_io(t1_17), write)
  number1_15 := get__read_int_twice_io__number1_6(t1_17)
  number2_15 := get__read_int_twice_io__number2_6(t1_17)
  t_post_13 := get__read_int_twice_io__t_post(t1_17)
  t2_16 := get__read_int_io__t_post_1(t1_17)
  inhale acc(read_int_io(t1_17), write) && get__read_int_io__number(t1_17) == number1_15 && (acc(read_int_io(t2_16), write) && get__read_int_io__number(t2_16) == number2_15 && get__read_int_io__t_post_1(t2_16) == t_post_13)
  _cwl_152, read_int_res_13 := read_int(_cthread_152, _method_measures_152, _residue_152, t1_17)
  t2_6 := tuple___getitem__(read_int_res_13, 0)
  inhale _isDefined(912208500)
  number1_5 := tuple___getitem__(read_int_res_13, 1)
  inhale _isDefined(2538851719475025272869057902)
  _cwl_152, read_int_res_14 := read_int(_cthread_152, _method_measures_152, _residue_152, _checkDefined(t2_6, 912208500))
  t3_6 := tuple___getitem__(read_int_res_14, 0)
  inhale _isDefined(912208756)
  number2_5 := tuple___getitem__(read_int_res_14, 1)
  inhale _isDefined(2539456182384551112479700334)
  exhale acc(write_int_twice_io(_checkDefined(t3_6, 912208756), int___unbox__(_checkDefined(number1_5, 2538851719475025272869057902)), int___unbox__(_checkDefined(number2_5, 2539456182384551112479700334))), write)
  t_post_14 := get__write_int_twice_io__t_post_0(_checkDefined(t3_6, 912208756), int___unbox__(_checkDefined(number1_5, 2538851719475025272869057902)), int___unbox__(_checkDefined(number2_5, 2539456182384551112479700334)))
  t2_17 := get__write_int_io__t_post_2(_checkDefined(t3_6, 912208756), int___unbox__(_checkDefined(number1_5, 2538851719475025272869057902)))
  inhale acc(write_int_io(_checkDefined(t3_6, 912208756), int___unbox__(_checkDefined(number1_5, 2538851719475025272869057902))), write) && (acc(write_int_io(t2_17, int___unbox__(_checkDefined(number2_5, 2539456182384551112479700334))), write) && get__write_int_io__t_post_2(t2_17, int___unbox__(_checkDefined(number2_5, 2539456182384551112479700334))) == t_post_14)
  _cwl_152, write_int_res_5 := write_int(_cthread_152, _method_measures_152, _residue_152, _checkDefined(t3_6, 912208756), _checkDefined(number2_5, 2539456182384551112479700334))
  t4_2 := write_int_res_5
  inhale _isDefined(845100148)
  _cwl_152, write_int_res_6 := write_int(_cthread_152, _method_measures_152, _residue_152, _checkDefined(t4_2, 845100148), _checkDefined(number1_5, 2538851719475025272869057902))
  t5_2 := write_int_res_6
  inhale _isDefined(845100404)
  _res := _checkDefined(t5_2, 845100404)
  goto __end
  goto __end
  label __end
}

method read_int(_cthread_153: Ref, _caller_measures_153: Seq[Measure$], _residue_153: Perm, t1_7: Ref) returns (_current_wait_level_153: Perm, _res: Ref)
  requires _cthread_153 != null
  requires issubtype(typeof(_cthread_153), Thread_0())
  requires issubtype(typeof(t1_7), Place())
  requires [acc(MustInvokeBounded(t1_7), write), (perm(MustInvokeBounded(t1_7)) > none && Measure$check(_caller_measures_153, t1_7, 1) ? acc(MustInvokeBounded(t1_7), write) : (perm(MustInvokeUnbounded(t1_7)) > none ? acc(MustInvokeUnbounded(t1_7), write) : acc(MustInvokeCredit(t1_7), write)))] && acc(read_int_io(t1_7), write)
  requires [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_153) && ((forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), int())))
  ensures [acc(MustInvokeUnbounded(old(get__read_int_io__t_post_1(t1_7))), write), (perm(MustInvokeUnbounded(old(get__read_int_io__t_post_1(t1_7)))) > none ? acc(MustInvokeUnbounded(old(get__read_int_io__t_post_1(t1_7))), write) : acc(MustInvokeCredit(old(get__read_int_io__t_post_1(t1_7))), write))] && (Place___eq__(old(get__read_int_io__t_post_1(t1_7)), tuple___getitem__(_res, 0)) && int___eq__(__prim__int___box__(old(get__read_int_io__number(t1_7))), tuple___getitem__(_res, 1)))
{
  var _cwl_153: Perm
  _res := null
  inhale false
}

method write_int(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm, t1_8: Ref, value: Ref) returns (_current_wait_level_154: Perm, _res: Ref)
  requires _cthread_154 != null
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires issubtype(typeof(t1_8), Place())
  requires issubtype(typeof(value), int())
  requires [acc(MustInvokeBounded(t1_8), write), (perm(MustInvokeBounded(t1_8)) > none && Measure$check(_caller_measures_154, t1_8, 1) ? acc(MustInvokeBounded(t1_8), write) : (perm(MustInvokeUnbounded(t1_8)) > none ? acc(MustInvokeUnbounded(t1_8), write) : acc(MustInvokeCredit(t1_8), write)))] && acc(write_int_io(t1_8, int___unbox__(value)), write)
  requires [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_26: Ref [MustInvokeBounded(_r_26)] :: false) && ((forperm _r_26: Ref [MustInvokeUnbounded(_r_26)] :: false) && ((forperm _r_26: Ref [_r_26.MustReleaseBounded] :: false) && (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_25: Ref [_r_25.MustReleaseBounded] :: Level(_r_25) <= _current_wait_level_154) && ((forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: Level(_r_25) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__write_int_io__t_post_2(t1_8, int___unbox__(value)))), write), (perm(MustInvokeUnbounded(old(get__write_int_io__t_post_2(t1_8, int___unbox__(value))))) > none ? acc(MustInvokeUnbounded(old(get__write_int_io__t_post_2(t1_8, int___unbox__(value)))), write) : acc(MustInvokeCredit(old(get__write_int_io__t_post_2(t1_8, int___unbox__(value)))), write))] && Place___eq__(old(get__write_int_io__t_post_2(t1_8, int___unbox__(value))), _res)
{
  var _cwl_154: Perm
  _res := null
  inhale false
}

method write_string(_cthread_155: Ref, _caller_measures_155: Seq[Measure$], _residue_155: Perm, t1_9: Ref, value_0: Ref) returns (_current_wait_level_155: Perm, _res: Ref)
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires issubtype(typeof(t1_9), Place())
  requires issubtype(typeof(value_0), str())
  requires [acc(MustInvokeBounded(t1_9), write), (perm(MustInvokeBounded(t1_9)) > none && Measure$check(_caller_measures_155, t1_9, 1) ? acc(MustInvokeBounded(t1_9), write) : (perm(MustInvokeUnbounded(t1_9)) > none ? acc(MustInvokeUnbounded(t1_9), write) : acc(MustInvokeCredit(t1_9), write)))] && acc(write_string_io(t1_9, value_0), write)
  requires [true, perm(MustTerminate(_cthread_155)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_155) && ((forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_155) && _residue_155 <= _current_wait_level_155), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__write_string_io__t_post_3(t1_9, value_0))), write), (perm(MustInvokeUnbounded(old(get__write_string_io__t_post_3(t1_9, value_0)))) > none ? acc(MustInvokeUnbounded(old(get__write_string_io__t_post_3(t1_9, value_0))), write) : acc(MustInvokeCredit(old(get__write_string_io__t_post_3(t1_9, value_0))), write))] && Place___eq__(old(get__write_string_io__t_post_3(t1_9, value_0)), _res)
{
  var _cwl_155: Perm
  _res := null
  inhale false
}

method main(_cthread_156: Ref, _caller_measures_156: Seq[Measure$], _residue_156: Perm) returns (_current_wait_level_156: Perm)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires [true, perm(MustTerminate(_cthread_156)) == none && ((forperm _r_31: Ref [MustInvokeBounded(_r_31)] :: false) && ((forperm _r_31: Ref [MustInvokeUnbounded(_r_31)] :: false) && ((forperm _r_31: Ref [_r_31.MustReleaseBounded] :: false) && (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_156) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]
  ensures [true, (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var module_defined_1: Bool
  var module_names_1: Set[_Name]
  var _cwl_156: Perm
  var _method_measures_156: Seq[Measure$]
  _method_measures_156 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_defined_1 := false
  module_names_1 := Set[_Name]()
  module_names_1 := (module_names_1 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file___0()._val, 99 / 100) && issubtype(typeof(__file___0()._val), str()) && issubtype(typeof(__file___0()._val), str())
  module_names_1 := (module_names_1 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name___0()._val, 99 / 100) && issubtype(typeof(__name___0()._val), str()) && issubtype(typeof(__name___0()._val), str()) && !str___eq__(str___create__(8, 2489249333222104298408468319), __name___0()._val)
  module_names_0 := (module_names_0 union Set(_single(4264095844347449787)))
  module_names_0 := (module_names_0 union Set(_single(7136376649266381199951095122)))
  module_names_0 := (module_names_0 union Set(_single(4231737769045301934)))
  module_names_0 := (module_names_0 union Set(_single(3906937610535144108)))
  if (!module_defined_1) {
    module_defined_1 := true
    module_names_1 := (module_names_1 union Set(_single(4264095844347449787)))
    module_names_1 := (module_names_1 union Set(_single(7136376649266381199951095122)))
    module_names_1 := (module_names_1 union Set(_single(4231737769045301934)))
    module_names_1 := (module_names_1 union Set(_single(3906937610535144108)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(6111079498090717598365869426)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(5976391131192105444818642290)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(2472626250624378018628953877194902921)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(6285265631461849329830556279)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(21021749102801168044272806511802486153)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(20443266971819979896999335571198741897)))
  }
  assert (_single(6111079498090717598365869426) in module_names_1)
  module_names_0 := (module_names_0 union Set(_single(6111079498090717598365869426)))
  assert (_single(5976391131192105444818642290) in module_names_1)
  module_names_0 := (module_names_0 union Set(_single(5976391131192105444818642290)))
  assert (_single(2472626250624378018628953877194902921) in module_names_1)
  module_names_0 := (module_names_0 union Set(_single(2472626250624378018628953877194902921)))
  assert (_single(6285265631461849329830556279) in module_names_1)
  module_names_0 := (module_names_0 union Set(_single(6285265631461849329830556279)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(22154721830420495671476013826975503006061127026)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(15074960489231218079321603259806651224238420599)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(19382328939424081073855446966450690702)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(19387521236282615901483977462779910798)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(19392713533141150729112507959109130894)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(19397905829999685556741038455438350990)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(65867880482840434111469438120500053884115656463303481998)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(65867881944342071442372356324184886600398676119236024974)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(65867883405843708773275274527869719316681695775168567950)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(65867884867345346104178192731554552032964715431101110926)))
  goto __end
  label __end
}

method read_int_twice_io__termination_check(t_pre: Ref)
  requires issubtype(typeof(t_pre), Place())
{
  // Termination measure must be positive.assert false ==> 1 > 0
  // Termination condition of read_int_io (30:8).assert false ==> false
  // Termination measure of read_int_io (30:8).assert false ==> 1 > 1
  // Termination condition of read_int_io (31:8).assert false ==> false
  // Termination measure of read_int_io (31:8).assert false ==> 1 > 1
}

method write_int_twice_io__termination_check(t_pre_0: Ref, number1_7: Int, number2_7: Int)
  requires issubtype(typeof(t_pre_0), Place())
{
  // Termination measure must be positive.assert true ==> 2 > 0
  // Termination condition of write_int_io (47:8).assert true ==> true
  // Termination measure of write_int_io (47:8).assert true ==> 2 > 1
  // Termination condition of write_int_io (48:8).assert true ==> true
  // Termination measure of write_int_io (48:8).assert true ==> 2 > 1
}

method read_int_io__termination_check(t_pre_1: Ref)
  requires issubtype(typeof(t_pre_1), Place())
{
  // Termination measure must be positive.assert false ==> 1 > 0
}

method write_int_io__termination_check(t_pre_2: Ref, value_1: Int)
  requires issubtype(typeof(t_pre_2), Place())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method write_string_io__termination_check(t_pre_3: Ref, value_2: Ref)
  requires issubtype(typeof(t_pre_3), Place())
  requires issubtype(typeof(value_2), str())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}