domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  unique function max_2(): Function
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function print_int_threading(): ThreadingID
  
  unique function print_sequence1_threading(): ThreadingID
  
  unique function print_sequence2_threading(): ThreadingID
  
  unique function print_sequence3_threading(): ThreadingID
  
  unique function print_sequence4_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function max_1(a: Ref, b: Ref): Ref
  requires issubtype(typeof(a), int())
  requires issubtype(typeof(b), int())
  ensures issubtype(typeof(result), int()) 
{
  (int___gt__(int___unbox__(a), int___unbox__(b)) ? a : b)
}

function __file__(): Ref 


function __name__(): Ref 


function get__print_int_io__t_post(t_pre: Ref, value_0: Int): Ref
  ensures issubtype(typeof(result), Place()) 


function get__print_sequence_io__t_post_0(t_pre_0: Ref, n_3: Int): Ref
  ensures issubtype(typeof(result), Place()) 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___gt__(self: Int, other: Int): Bool 
{
  self > other
}

function int___add__(self: Int, other: Int): Int 
{
  self + other
}

function int___sub__(self: Int, other: Int): Int 
{
  self - other
}

function Place___eq__(self: Ref, other: Ref): Bool
  ensures result == (self == other) 


function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate print_int_io(t_pre: Ref, value_0: Int) 

predicate print_sequence_io(t_pre_0: Ref, n_3: Int) 

method print_int(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm, t1: Ref, value: Ref) returns (_current_wait_level_146: Perm, _res: Ref)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires issubtype(typeof(t1), Place())
  requires issubtype(typeof(value), int())
  requires [acc(MustInvokeBounded(t1), write), (perm(MustInvokeBounded(t1)) > none && Measure$check(_caller_measures_146, t1, 1) ? acc(MustInvokeBounded(t1), write) : (perm(MustInvokeUnbounded(t1)) > none ? acc(MustInvokeUnbounded(t1), write) : acc(MustInvokeCredit(t1), write)))] && (acc(print_int_io(t1, int___unbox__(value)), write) && [acc(MustTerminate(_cthread_146), write), true])
  requires [true, Measure$check(_caller_measures_146, _cthread_146, 1) || perm(MustTerminate(_cthread_146)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_146) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__print_int_io__t_post(t1, int___unbox__(value)))), write), (perm(MustInvokeUnbounded(old(get__print_int_io__t_post(t1, int___unbox__(value))))) > none ? acc(MustInvokeUnbounded(old(get__print_int_io__t_post(t1, int___unbox__(value)))), write) : acc(MustInvokeCredit(old(get__print_int_io__t_post(t1, int___unbox__(value)))), write))] && Place___eq__(_res, old(get__print_int_io__t_post(t1, int___unbox__(value))))
{
  var _cwl_146: Perm
  _res := null
  inhale false
}

method print_sequence1(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, t1_0: Ref, n: Ref) returns (_current_wait_level_147: Perm, _res: Ref)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires issubtype(typeof(t1_0), Place())
  requires issubtype(typeof(n), int())
  requires int___gt__(int___unbox__(n), 0) && (int___add__(int___unbox__(n), 1) > 0 && [acc(MustInvokeBounded(t1_0), write), (perm(MustInvokeBounded(t1_0)) > none && Measure$check(_caller_measures_147, t1_0, int___add__(int___unbox__(n), 1)) ? acc(MustInvokeBounded(t1_0), write) : (perm(MustInvokeUnbounded(t1_0)) > none ? acc(MustInvokeUnbounded(t1_0), write) : acc(MustInvokeCredit(t1_0), write)))] && (acc(print_sequence_io(t1_0, int___unbox__(n)), write) && (int___add__(int___unbox__(n), 1) > 0 && [acc(MustTerminate(_cthread_147), write), true])))
  requires [true, Measure$check(_caller_measures_147, _cthread_147, int___add__(int___unbox__(n), 1)) || perm(MustTerminate(_cthread_147)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_147) && ((forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__print_sequence_io__t_post_0(t1_0, int___unbox__(n)))), write), (perm(MustInvokeUnbounded(old(get__print_sequence_io__t_post_0(t1_0, int___unbox__(n))))) > none ? acc(MustInvokeUnbounded(old(get__print_sequence_io__t_post_0(t1_0, int___unbox__(n)))), write) : acc(MustInvokeCredit(old(get__print_sequence_io__t_post_0(t1_0, int___unbox__(n)))), write))] && Place___eq__(old(get__print_sequence_io__t_post_0(t1_0, int___unbox__(n))), _res)
  ensures [true, (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var t3: Ref
  var t2: Ref
  var t1_4: Ref
  var n_4: Ref
  var t_post_1: Ref
  var t2_3: Ref
  var print_int_res: Ref
  var print_sequence1_res: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq(Measure$create(true, _cthread_147, int___add__(int___unbox__(n), 1)), Measure$create(true, t1_0, int___add__(int___unbox__(n), 1)))
  _res := null
  _err := null
  t1_4 := t1_0
  n_4 := n
  exhale acc(print_sequence_io(t1_4, int___unbox__(n_4)), write)
  t_post_1 := get__print_sequence_io__t_post_0(t1_4, int___unbox__(n_4))
  t2_3 := get__print_int_io__t_post(t1_4, int___unbox__(n_4))
  inhale (int___gt__(int___unbox__(n_4), 1) ? acc(print_int_io(t1_4, int___unbox__(n_4)), write) && (acc(print_sequence_io(t2_3, int___sub__(int___unbox__(n_4), 1)), write) && get__print_sequence_io__t_post_0(t2_3, int___sub__(int___unbox__(n_4), 1)) == t_post_1) : acc(print_int_io(t1_4, 1), write) && get__print_int_io__t_post(t1_4, 1) == t_post_1)
  _cwl_147, print_int_res := print_int(_cthread_147, _method_measures_147, _residue_147, t1_4, n_4)
  t3 := print_int_res
  inhale _isDefined(13172)
  if (int___gt__(int___unbox__(n_4), 1)) {
    _cwl_147, print_sequence1_res := print_sequence1(_cthread_147, _method_measures_147, _residue_147, _checkDefined(t3, 13172), __prim__int___box__(int___sub__(int___unbox__(n_4), 1)))
    t2 := print_sequence1_res
    inhale _isDefined(12916)
  } else {
    t2 := _checkDefined(t3, 13172)
    inhale _isDefined(12916)
  }
  _res := _checkDefined(t2, 12916)
  goto __end
  goto __end
  label __end
}

method print_sequence2(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, t1_1: Ref, n_0: Ref) returns (_current_wait_level_148: Perm, _res: Ref)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires issubtype(typeof(t1_1), Place())
  requires issubtype(typeof(n_0), int())
  requires int___gt__(int___unbox__(n_0), 0) && ([acc(MustInvokeBounded(t1_1), write), (perm(MustInvokeBounded(t1_1)) > none && Measure$check(_caller_measures_148, t1_1, 2) ? acc(MustInvokeBounded(t1_1), write) : (perm(MustInvokeUnbounded(t1_1)) > none ? acc(MustInvokeUnbounded(t1_1), write) : acc(MustInvokeCredit(t1_1), write)))] && (acc(print_sequence_io(t1_1, int___unbox__(n_0)), write) && [acc(MustTerminate(_cthread_148), write), true]))
  requires [true, Measure$check(_caller_measures_148, _cthread_148, 2) || perm(MustTerminate(_cthread_148)) == none && ((forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false) && ((forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false) && ((forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false) && (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_148) && ((forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__print_sequence_io__t_post_0(t1_1, int___unbox__(n_0)))), write), (perm(MustInvokeUnbounded(old(get__print_sequence_io__t_post_0(t1_1, int___unbox__(n_0))))) > none ? acc(MustInvokeUnbounded(old(get__print_sequence_io__t_post_0(t1_1, int___unbox__(n_0)))), write) : acc(MustInvokeCredit(old(get__print_sequence_io__t_post_0(t1_1, int___unbox__(n_0)))), write))] && Place___eq__(old(get__print_sequence_io__t_post_0(t1_1, int___unbox__(n_0))), _res)
  ensures [true, (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var t_0: Ref
  var t2_0: Ref
  var t1_5: Ref
  var n_5: Ref
  var _loop_measures: Seq[Measure$]
  var _loop_check_before: Bool
  var _loop_termination_flag: Bool
  var _loop_original_must_terminate: Perm
  var _residue_151: Perm
  var t_post_2: Ref
  var t2_4: Ref
  var print_int_res_0: Ref
  var t_post_3: Ref
  var t2_5: Ref
  var print_int_res_1: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq(Measure$create(true, _cthread_148, 2), Measure$create(true, t1_1, 2))
  _res := null
  _err := null
  t1_5 := t1_1
  n_5 := n_0
  t_0 := t1_5
  inhale _isDefined(3170164)
  t2_0 := get__print_sequence_io__t_post_0(_checkDefined(t_0, 3170164), int___unbox__(n_5))
  inhale _isDefined(811545204)
  // Save current MustTerminate amount._loop_original_must_terminate := perm(MustTerminate(_cthread_148))
  // Save loop termination promise._loop_termination_flag := true
  // We are before loop._loop_check_before := true
  while (int___gt__(int___unbox__(n_5), 1))
    invariant [(forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_151) && ((forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_151) && _residue_148 <= _residue_151), true]
    invariant true
    invariant issubtype(typeof(t_0), Place())
    invariant issubtype(typeof(n_5), int())
    invariant [acc(MustInvokeBounded(_checkDefined(t_0, 3170164)), write), (_loop_check_before ? (perm(MustInvokeBounded(_checkDefined(t_0, 3170164))) > none ? acc(MustInvokeBounded(_checkDefined(t_0, 3170164)), write) : (perm(MustInvokeUnbounded(_checkDefined(t_0, 3170164))) > none ? acc(MustInvokeUnbounded(_checkDefined(t_0, 3170164)), write) : acc(MustInvokeCredit(_checkDefined(t_0, 3170164)), write))) : (perm(MustInvokeBounded(_checkDefined(t_0, 3170164))) > none && Measure$check(_loop_measures, _checkDefined(t_0, 3170164), 1) ? acc(MustInvokeBounded(_checkDefined(t_0, 3170164)), write) : (perm(MustInvokeUnbounded(_checkDefined(t_0, 3170164))) > none ? acc(MustInvokeUnbounded(_checkDefined(t_0, 3170164)), write) : acc(MustInvokeCredit(_checkDefined(t_0, 3170164)), write))))] && (acc(print_sequence_io(_checkDefined(t_0, 3170164), int___unbox__(n_5)), write) && get__print_sequence_io__t_post_0(_checkDefined(t_0, 3170164), int___unbox__(n_5)) == t2_0 && ((int___gt__(int___unbox__(n_5), 1) ==> int___unbox__(n_5) > 0) && [acc(MustTerminate(_cthread_148), write), true]))
    invariant [true, _loop_check_before ==> _loop_termination_flag || (!int___gt__(int___unbox__(n_5), 1) || perm(MustTerminate(_cthread_148)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures := Seq(Measure$create(true, _checkDefined(t_0, 3170164), 1), Measure$create(true, _cthread_148, int___unbox__(n_5)))
    exhale acc(print_sequence_io(_checkDefined(t_0, 3170164), int___unbox__(n_5)), write)
    t_post_2 := get__print_sequence_io__t_post_0(_checkDefined(t_0, 3170164), int___unbox__(n_5))
    t2_4 := get__print_int_io__t_post(_checkDefined(t_0, 3170164), int___unbox__(n_5))
    inhale (int___gt__(int___unbox__(n_5), 1) ? acc(print_int_io(_checkDefined(t_0, 3170164), int___unbox__(n_5)), write) && (acc(print_sequence_io(t2_4, int___sub__(int___unbox__(n_5), 1)), write) && get__print_sequence_io__t_post_0(t2_4, int___sub__(int___unbox__(n_5), 1)) == t_post_2) : acc(print_int_io(_checkDefined(t_0, 3170164), 1), write) && get__print_int_io__t_post(_checkDefined(t_0, 3170164), 1) == t_post_2)
    _cwl_148, print_int_res_0 := print_int(_cthread_148, _method_measures_148, _residue_151, _checkDefined(t_0, 3170164), n_5)
    t_0 := print_int_res_0
    inhale _isDefined(3170164)
    n_5 := __prim__int___box__(int___sub__(int___unbox__(n_5), 1))
    label loop_end
    // We are after loop body._loop_check_before := false
    // Check if loop continues to terminate.assert _loop_termination_flag ==> !int___gt__(int___unbox__(n_5), 1) || Measure$check(_loop_measures, _cthread_148, int___unbox__(n_5))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_148)) > none ==> acc(MustTerminate(_cthread_148), perm(MustTerminate(_cthread_148)) - _loop_original_must_terminate)
  label post_loop
  _res := null
  exhale acc(print_sequence_io(_checkDefined(t_0, 3170164), int___unbox__(n_5)), write)
  t_post_3 := get__print_sequence_io__t_post_0(_checkDefined(t_0, 3170164), int___unbox__(n_5))
  t2_5 := get__print_int_io__t_post(_checkDefined(t_0, 3170164), int___unbox__(n_5))
  inhale (int___gt__(int___unbox__(n_5), 1) ? acc(print_int_io(_checkDefined(t_0, 3170164), int___unbox__(n_5)), write) && (acc(print_sequence_io(t2_5, int___sub__(int___unbox__(n_5), 1)), write) && get__print_sequence_io__t_post_0(t2_5, int___sub__(int___unbox__(n_5), 1)) == t_post_3) : acc(print_int_io(_checkDefined(t_0, 3170164), 1), write) && get__print_int_io__t_post(_checkDefined(t_0, 3170164), 1) == t_post_3)
  _cwl_148, print_int_res_1 := print_int(_cthread_148, _method_measures_148, _residue_148, _checkDefined(t_0, 3170164), __prim__int___box__(1))
  t_0 := print_int_res_1
  inhale _isDefined(3170164)
  _res := _checkDefined(t_0, 3170164)
  goto __end
  goto __end
  label __end
}

method print_sequence3(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm, t1_2: Ref, n_1: Ref) returns (_current_wait_level_149: Perm, _res: Ref)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires issubtype(typeof(t1_2), Place())
  requires issubtype(typeof(n_1), int())
  requires int___gt__(int___unbox__(n_1), 0) && ([acc(MustInvokeBounded(t1_2), write), (perm(MustInvokeBounded(t1_2)) > none && Measure$check(_caller_measures_149, t1_2, 2) ? acc(MustInvokeBounded(t1_2), write) : (perm(MustInvokeUnbounded(t1_2)) > none ? acc(MustInvokeUnbounded(t1_2), write) : acc(MustInvokeCredit(t1_2), write)))] && (acc(print_sequence_io(t1_2, int___unbox__(n_1)), write) && [acc(MustTerminate(_cthread_149), write), true]))
  requires [true, Measure$check(_caller_measures_149, _cthread_149, 2) || perm(MustTerminate(_cthread_149)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_149) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__print_sequence_io__t_post_0(t1_2, int___unbox__(n_1)))), write), (perm(MustInvokeUnbounded(old(get__print_sequence_io__t_post_0(t1_2, int___unbox__(n_1))))) > none ? acc(MustInvokeUnbounded(old(get__print_sequence_io__t_post_0(t1_2, int___unbox__(n_1)))), write) : acc(MustInvokeCredit(old(get__print_sequence_io__t_post_0(t1_2, int___unbox__(n_1)))), write))] && Place___eq__(old(get__print_sequence_io__t_post_0(t1_2, int___unbox__(n_1))), _res)
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var t_1: Ref
  var t2_1: Ref
  var t1_6: Ref
  var n_6: Ref
  var t_post_4: Ref
  var t2_6: Ref
  var _loop_measures_0: Seq[Measure$]
  var _loop_check_before_0: Bool
  var _loop_termination_flag_0: Bool
  var _loop_original_must_terminate_0: Perm
  var _residue_152: Perm
  var print_int_res_2: Ref
  var t_post_5: Ref
  var t2_7: Ref
  var print_int_res_3: Ref
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  _method_measures_149 := Seq(Measure$create(true, _cthread_149, 2), Measure$create(true, t1_2, 2))
  _res := null
  _err := null
  t1_6 := t1_2
  n_6 := n_1
  t_1 := t1_6
  inhale _isDefined(3235700)
  exhale acc(print_sequence_io(_checkDefined(t_1, 3235700), int___unbox__(n_6)), write)
  t_post_4 := get__print_sequence_io__t_post_0(_checkDefined(t_1, 3235700), int___unbox__(n_6))
  t2_6 := get__print_int_io__t_post(_checkDefined(t_1, 3235700), int___unbox__(n_6))
  inhale (int___gt__(int___unbox__(n_6), 1) ? acc(print_int_io(_checkDefined(t_1, 3235700), int___unbox__(n_6)), write) && (acc(print_sequence_io(t2_6, int___sub__(int___unbox__(n_6), 1)), write) && get__print_sequence_io__t_post_0(t2_6, int___sub__(int___unbox__(n_6), 1)) == t_post_4) : acc(print_int_io(_checkDefined(t_1, 3235700), 1), write) && get__print_int_io__t_post(_checkDefined(t_1, 3235700), 1) == t_post_4)
  t2_1 := get__print_sequence_io__t_post_0(_checkDefined(t_1, 3235700), int___unbox__(n_6))
  inhale _isDefined(828322420)
  // Save current MustTerminate amount._loop_original_must_terminate_0 := perm(MustTerminate(_cthread_149))
  // Save loop termination promise._loop_termination_flag_0 := true
  // We are before loop._loop_check_before_0 := true
  while (int___gt__(int___unbox__(n_6), 1))
    invariant [(forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _residue_152) && ((forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _residue_152) && _residue_149 <= _residue_152), true]
    invariant true
    invariant issubtype(typeof(t_1), Place())
    invariant issubtype(typeof(n_6), int())
    invariant [acc(MustInvokeBounded(_checkDefined(t_1, 3235700)), write), (_loop_check_before_0 ? (perm(MustInvokeBounded(_checkDefined(t_1, 3235700))) > none ? acc(MustInvokeBounded(_checkDefined(t_1, 3235700)), write) : (perm(MustInvokeUnbounded(_checkDefined(t_1, 3235700))) > none ? acc(MustInvokeUnbounded(_checkDefined(t_1, 3235700)), write) : acc(MustInvokeCredit(_checkDefined(t_1, 3235700)), write))) : (perm(MustInvokeBounded(_checkDefined(t_1, 3235700))) > none && Measure$check(_loop_measures_0, _checkDefined(t_1, 3235700), 1) ? acc(MustInvokeBounded(_checkDefined(t_1, 3235700)), write) : (perm(MustInvokeUnbounded(_checkDefined(t_1, 3235700))) > none ? acc(MustInvokeUnbounded(_checkDefined(t_1, 3235700)), write) : acc(MustInvokeCredit(_checkDefined(t_1, 3235700)), write))))] && ((int___gt__(int___unbox__(n_6), 1) ==> acc(print_int_io(_checkDefined(t_1, 3235700), int___unbox__(n_6)), write) && (acc(print_sequence_io(get__print_int_io__t_post(_checkDefined(t_1, 3235700), int___unbox__(n_6)), int___sub__(int___unbox__(n_6), 1)), write) && get__print_sequence_io__t_post_0(get__print_int_io__t_post(_checkDefined(t_1, 3235700), int___unbox__(n_6)), int___sub__(int___unbox__(n_6), 1)) == t2_1)) && (!int___gt__(int___unbox__(n_6), 1) ==> acc(print_int_io(_checkDefined(t_1, 3235700), int___unbox__(n_6)), write) && get__print_int_io__t_post(_checkDefined(t_1, 3235700), int___unbox__(n_6)) == t2_1))
    invariant (int___gt__(int___unbox__(n_6), 1) ==> int___unbox__(n_6) > 0) && [acc(MustTerminate(_cthread_149), write), true]
    invariant [true, _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___gt__(int___unbox__(n_6), 1) || perm(MustTerminate(_cthread_149)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_0 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_0 := Seq(Measure$create(true, _checkDefined(t_1, 3235700), 1), Measure$create(true, _cthread_149, int___unbox__(n_6)))
    _cwl_149, print_int_res_2 := print_int(_cthread_149, _method_measures_149, _residue_152, _checkDefined(t_1, 3235700), n_6)
    t_1 := print_int_res_2
    inhale _isDefined(3235700)
    n_6 := __prim__int___box__(int___sub__(int___unbox__(n_6), 1))
    exhale acc(print_sequence_io(_checkDefined(t_1, 3235700), int___unbox__(n_6)), write)
    t_post_5 := get__print_sequence_io__t_post_0(_checkDefined(t_1, 3235700), int___unbox__(n_6))
    t2_7 := get__print_int_io__t_post(_checkDefined(t_1, 3235700), int___unbox__(n_6))
    inhale (int___gt__(int___unbox__(n_6), 1) ? acc(print_int_io(_checkDefined(t_1, 3235700), int___unbox__(n_6)), write) && (acc(print_sequence_io(t2_7, int___sub__(int___unbox__(n_6), 1)), write) && get__print_sequence_io__t_post_0(t2_7, int___sub__(int___unbox__(n_6), 1)) == t_post_5) : acc(print_int_io(_checkDefined(t_1, 3235700), 1), write) && get__print_int_io__t_post(_checkDefined(t_1, 3235700), 1) == t_post_5)
    label loop_end_0
    // We are after loop body._loop_check_before_0 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_0 ==> !int___gt__(int___unbox__(n_6), 1) || Measure$check(_loop_measures_0, _cthread_149, int___unbox__(n_6))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_149)) > none ==> acc(MustTerminate(_cthread_149), perm(MustTerminate(_cthread_149)) - _loop_original_must_terminate_0)
  label post_loop_0
  _res := null
  _cwl_149, print_int_res_3 := print_int(_cthread_149, _method_measures_149, _residue_149, _checkDefined(t_1, 3235700), n_6)
  t_1 := print_int_res_3
  inhale _isDefined(3235700)
  _res := _checkDefined(t_1, 3235700)
  goto __end
  goto __end
  label __end
}

method print_sequence4(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm, t1_3: Ref, n_2: Ref) returns (_current_wait_level_150: Perm, _res: Ref)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires issubtype(typeof(t1_3), Place())
  requires issubtype(typeof(n_2), int())
  requires int___gt__(int___unbox__(n_2), 0) && ([acc(MustInvokeBounded(t1_3), write), (perm(MustInvokeBounded(t1_3)) > none && Measure$check(_caller_measures_150, t1_3, 2) ? acc(MustInvokeBounded(t1_3), write) : (perm(MustInvokeUnbounded(t1_3)) > none ? acc(MustInvokeUnbounded(t1_3), write) : acc(MustInvokeCredit(t1_3), write)))] && (acc(print_sequence_io(t1_3, int___unbox__(n_2)), write) && [acc(MustTerminate(_cthread_150), write), true]))
  requires [true, Measure$check(_caller_measures_150, _cthread_150, 2) || perm(MustTerminate(_cthread_150)) == none && ((forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_150) && ((forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__print_sequence_io__t_post_0(t1_3, int___unbox__(n_2)))), write), (perm(MustInvokeUnbounded(old(get__print_sequence_io__t_post_0(t1_3, int___unbox__(n_2))))) > none ? acc(MustInvokeUnbounded(old(get__print_sequence_io__t_post_0(t1_3, int___unbox__(n_2)))), write) : acc(MustInvokeCredit(old(get__print_sequence_io__t_post_0(t1_3, int___unbox__(n_2)))), write))] && Place___eq__(old(get__print_sequence_io__t_post_0(t1_3, int___unbox__(n_2))), _res)
  ensures [true, (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var t_2: Ref
  var t2_2: Ref
  var t1_7: Ref
  var n_7: Ref
  var t_post_6: Ref
  var t2_8: Ref
  var _loop_measures_1: Seq[Measure$]
  var _loop_check_before_1: Bool
  var _loop_termination_flag_1: Bool
  var _loop_original_must_terminate_1: Perm
  var _residue_153: Perm
  var print_int_res_4: Ref
  var t_post_7: Ref
  var t2_9: Ref
  var print_int_res_5: Ref
  var _cwl_150: Perm
  var _method_measures_150: Seq[Measure$]
  _method_measures_150 := Seq(Measure$create(true, _cthread_150, 2), Measure$create(true, t1_3, 2))
  _res := null
  _err := null
  t1_7 := t1_3
  n_7 := n_2
  t_2 := t1_7
  inhale _isDefined(3301236)
  exhale acc(print_sequence_io(_checkDefined(t_2, 3301236), int___unbox__(n_7)), write)
  t_post_6 := get__print_sequence_io__t_post_0(_checkDefined(t_2, 3301236), int___unbox__(n_7))
  t2_8 := get__print_int_io__t_post(_checkDefined(t_2, 3301236), int___unbox__(n_7))
  inhale (int___gt__(int___unbox__(n_7), 1) ? acc(print_int_io(_checkDefined(t_2, 3301236), int___unbox__(n_7)), write) && (acc(print_sequence_io(t2_8, int___sub__(int___unbox__(n_7), 1)), write) && get__print_sequence_io__t_post_0(t2_8, int___sub__(int___unbox__(n_7), 1)) == t_post_6) : acc(print_int_io(_checkDefined(t_2, 3301236), 1), write) && get__print_int_io__t_post(_checkDefined(t_2, 3301236), 1) == t_post_6)
  t2_2 := get__print_sequence_io__t_post_0(_checkDefined(t_2, 3301236), int___unbox__(n_7))
  inhale _isDefined(845099636)
  // Save current MustTerminate amount._loop_original_must_terminate_1 := perm(MustTerminate(_cthread_150))
  // Save loop termination promise._loop_termination_flag_1 := true
  // We are before loop._loop_check_before_1 := true
  while (int___gt__(int___unbox__(n_7), 1))
    invariant [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _residue_153) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _residue_153) && _residue_150 <= _residue_153), true]
    invariant true
    invariant issubtype(typeof(t_2), Place())
    invariant issubtype(typeof(n_7), int())
    invariant [acc(MustInvokeBounded(_checkDefined(t_2, 3301236)), write), (_loop_check_before_1 ? (perm(MustInvokeBounded(_checkDefined(t_2, 3301236))) > none ? acc(MustInvokeBounded(_checkDefined(t_2, 3301236)), write) : (perm(MustInvokeUnbounded(_checkDefined(t_2, 3301236))) > none ? acc(MustInvokeUnbounded(_checkDefined(t_2, 3301236)), write) : acc(MustInvokeCredit(_checkDefined(t_2, 3301236)), write))) : (perm(MustInvokeBounded(_checkDefined(t_2, 3301236))) > none && Measure$check(_loop_measures_1, _checkDefined(t_2, 3301236), 1) ? acc(MustInvokeBounded(_checkDefined(t_2, 3301236)), write) : (perm(MustInvokeUnbounded(_checkDefined(t_2, 3301236))) > none ? acc(MustInvokeUnbounded(_checkDefined(t_2, 3301236)), write) : acc(MustInvokeCredit(_checkDefined(t_2, 3301236)), write))))] && ((int___gt__(int___unbox__(n_7), 1) ==> acc(print_int_io(_checkDefined(t_2, 3301236), int___unbox__(n_7)), write) && (acc(print_sequence_io(get__print_int_io__t_post(_checkDefined(t_2, 3301236), int___unbox__(n_7)), int___sub__(int___unbox__(n_7), 1)), write) && get__print_sequence_io__t_post_0(get__print_int_io__t_post(_checkDefined(t_2, 3301236), int___unbox__(n_7)), int___sub__(int___unbox__(n_7), 1)) == t2_2)) && ((!int___gt__(int___unbox__(n_7), 1) ==> acc(print_int_io(_checkDefined(t_2, 3301236), int___unbox__(n_7)), write) && get__print_int_io__t_post(_checkDefined(t_2, 3301236), int___unbox__(n_7)) == t2_2) && ((int___gt__(int___unbox__(n_7), 1) ==> int___unbox__(n_7) > 0) && [acc(MustTerminate(_cthread_150), write), true])))
    invariant [true, _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___gt__(int___unbox__(n_7), 1) || perm(MustTerminate(_cthread_150)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))))]
    invariant [true, !_loop_check_before_1 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))] 
  {
    _loop_measures_1 := Seq(Measure$create(true, _checkDefined(t_2, 3301236), 1), Measure$create(true, _cthread_150, int___unbox__(n_7)))
    _cwl_150, print_int_res_4 := print_int(_cthread_150, _method_measures_150, _residue_153, _checkDefined(t_2, 3301236), n_7)
    t_2 := print_int_res_4
    inhale _isDefined(3301236)
    n_7 := __prim__int___box__(int___sub__(int___unbox__(n_7), 1))
    exhale acc(print_sequence_io(_checkDefined(t_2, 3301236), int___unbox__(n_7)), write)
    t_post_7 := get__print_sequence_io__t_post_0(_checkDefined(t_2, 3301236), int___unbox__(n_7))
    t2_9 := get__print_int_io__t_post(_checkDefined(t_2, 3301236), int___unbox__(n_7))
    inhale (int___gt__(int___unbox__(n_7), 1) ? acc(print_int_io(_checkDefined(t_2, 3301236), int___unbox__(n_7)), write) && (acc(print_sequence_io(t2_9, int___sub__(int___unbox__(n_7), 1)), write) && get__print_sequence_io__t_post_0(t2_9, int___sub__(int___unbox__(n_7), 1)) == t_post_7) : acc(print_int_io(_checkDefined(t_2, 3301236), 1), write) && get__print_int_io__t_post(_checkDefined(t_2, 3301236), 1) == t_post_7)
    label loop_end_1
    // We are after loop body._loop_check_before_1 := false
    // Check if loop continues to terminate.assert _loop_termination_flag_1 ==> !int___gt__(int___unbox__(n_7), 1) || Measure$check(_loop_measures_1, _cthread_150, int___unbox__(n_7))
  }
  // Reset MustTerminate amount to original level.exhale perm(MustTerminate(_cthread_150)) > none ==> acc(MustTerminate(_cthread_150), perm(MustTerminate(_cthread_150)) - _loop_original_must_terminate_1)
  label post_loop_1
  _res := null
  _cwl_150, print_int_res_5 := print_int(_cthread_150, _method_measures_150, _residue_150, _checkDefined(t_2, 3301236), n_7)
  t_2 := print_int_res_5
  inhale _isDefined(3301236)
  _res := _checkDefined(t_2, 3301236)
  goto __end
  goto __end
  label __end
}

method main(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_154: Perm) returns (_current_wait_level_151: Perm)
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _current_wait_level_151) && ((forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _current_wait_level_151) && _residue_154 <= _current_wait_level_151), true]
  ensures [true, (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var _cwl_151: Perm
  var _method_measures_151: Seq[Measure$]
  _method_measures_151 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_names_0 := (module_names_0 union Set(_single(11116006324067352974226974112924930237)))
  module_names_0 := (module_names_0 union Set(_single(4264095844347449787)))
  module_names_0 := (module_names_0 union Set(_single(3939413879042314935)))
  module_names_0 := (module_names_0 union Set(_single(4814323939045640847723228745)))
  module_names_0 := (module_names_0 union Set(_single(1701999952)))
  module_names_0 := (module_names_0 union Set(_single(4231737769045301934)))
  module_names_0 := (module_names_0 union Set(_single(7136376649266381199951095122)))
  module_names_0 := (module_names_0 union Set(_single(5460990052674857173734662115181759155)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(1475705482959340706152848927103552912)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(5821038223230955680340472432)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(7889261)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(22079442865513164501933260956210648180402516592)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(19347274439701815589454879202422984080)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(19352466736560350417083409698752204176)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(19357659033418885244711940195081424272)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(19362851330277420072340470691410644368)))
  goto __end
  label __end
}

method print_int_io__termination_check(t_pre: Ref, value_0: Int)
  requires issubtype(typeof(t_pre), Place())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method print_sequence_io__termination_check(t_pre_0: Ref, n_3: Int)
  requires issubtype(typeof(t_pre_0), Place())
{
  // Termination measure must be positive.assert true ==> int___unbox__(max_1(__prim__int___box__(int___add__(n_3, 1)), __prim__int___box__(2))) > 0
  // Termination condition of print_int_io (56:16).assert true && int___gt__(n_3, 1) ==> true
  // Termination measure of print_int_io (56:16).assert true && int___gt__(n_3, 1) ==> int___unbox__(max_1(__prim__int___box__(int___add__(n_3, 1)), __prim__int___box__(2))) > 1
  // Termination condition of print_sequence_io (57:16).assert true && int___gt__(n_3, 1) ==> true
  // Termination measure of print_sequence_io (57:16).assert true && int___gt__(n_3, 1) ==> int___unbox__(max_1(__prim__int___box__(int___add__(n_3, 1)), __prim__int___box__(2))) > int___unbox__(max_1(__prim__int___box__(int___add__(int___sub__(n_3, 1), 1)), __prim__int___box__(2)))
  // Termination condition of print_int_io (60:17).assert true && !int___gt__(n_3, 1) ==> true
  // Termination measure of print_int_io (60:17).assert true && !int___gt__(n_3, 1) ==> int___unbox__(max_1(__prim__int___box__(int___add__(n_3, 1)), __prim__int___box__(2))) > 1
}