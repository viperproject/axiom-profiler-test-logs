domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function A(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_A {
    extends_(A(), object()) && get_basic(A()) == A()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  unique function getv_0(): Function
  
  unique function getv_2_0(): Function
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function lock_a_threading(): ThreadingID
  
  unique function unlock_a_threading(): ThreadingID
  
  unique function write_int_threading(): ThreadingID
  
  unique function use_threading(): ThreadingID
  
  unique function use_ctoken_threading(): ThreadingID
  
  unique function wrong_func_threading(): ThreadingID
  
  unique function wrong_arg_threading(): ThreadingID
  
  unique function no_token_threading(): ThreadingID
  
  unique function no_io_perm_threading(): ThreadingID
  
  unique function no_func_perm_threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
  
  unique function NoOp_threading(): ThreadingID
  
  unique function Split_threading(): ThreadingID
  
  unique function Join_threading(): ThreadingID
  
  unique function Gap_threading(): ThreadingID
  
  unique function End_threading(): ThreadingID
  
  unique function SetVar_threading(): ThreadingID
  
  unique function Eval_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field A_v: Ref

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function getv(a: Ref): Ref
  requires issubtype(typeof(a), A())
  requires acc(a.A_v, write) && issubtype(typeof(a.A_v), int())
  ensures issubtype(typeof(result), int()) 
{
  a.A_v
}

function getv_2(a_0: Ref): Ref
  requires issubtype(typeof(a_0), A())
  requires acc(a_0.A_v, write) && issubtype(typeof(a_0.A_v), int())
  ensures issubtype(typeof(result), int()) 
{
  a_0.A_v
}

function __file__(): Ref 


function __name__(): Ref 


function __file___0(): Ref 


function __name___0(): Ref 


function get__write_int_io__t_post(t_pre: Ref, value_0: Int): Ref
  ensures issubtype(typeof(result), Place()) 


function get__no_op_io__t_post_0(t_pre_6: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function get__split_io__t_post1(t_pre_7: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function get__split_io__t_post2(t_pre_7: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function get__join_io__t_post_1(t_pre1_0: Ref, t_pre2_0: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function get__gap_io__t_post_2(t_pre_8: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function get__set_var_io__result_0(t_pre_10: Ref, value_2: Int): Int 


function get__set_var_io__t_post_3(t_pre_10: Ref, value_2: Int): Ref
  ensures issubtype(typeof(result), Place()) 


function get__eval_io__result_1(t_pre_11: Ref, func_0: Function, arg_13: Ref): Ref
  ensures issubtype(typeof(result), object())
  ensures getv_0() == func_0 ==> issubtype(typeof(result), int())
  ensures getv_0() == func_0 ==> issubtype(typeof(result), int())
  ensures getv_0() == func_0 ==> issubtype(typeof(result), int())
  ensures getv_0() == func_0 ==> issubtype(typeof(result), int())
  ensures getv_0() == func_0 ==> issubtype(typeof(result), int())
  ensures getv_0() == func_0 ==> issubtype(typeof(result), int()) 


function get__eval_io__t_post_4(t_pre_11: Ref, func_0: Function, arg_13: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function Place___eq__(self: Ref, other: Ref): Bool
  ensures result == (self == other) 


function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


function tuple___val__(self: Ref): Seq[Ref] 


function tuple___create2__(arg0: Ref, arg1: Ref, t0: PyType, t1: PyType, ctr: Int): Ref
  requires issubtype(typeof(arg0), t0)
  requires issubtype(typeof(arg1), t1)
  ensures result != null
  ensures typeof(result) == tuple(Seq(t0, t1))
  ensures tuple_args(typeof(result)) == Seq(t0, t1)
  ensures tuple_args(typeof(result)) == Seq(t0, t1)
  ensures tuple___val__(result) == Seq(arg0, arg1)
  ensures tuple___len__(result) == 2 && (tuple___getitem__(result, 0) == arg0 && tuple___getitem__(result, 1) == arg1) 


function tuple___len__(self: Ref): Int
  ensures result == |tuple_args(typeof(self))|
  ensures result == |tuple___val__(self)| 


function tuple___getitem__(self: Ref, key: Int): Ref
  requires (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
  ensures key >= 0 ==> issubtype(typeof(result), tuple_arg(typeof(self), key))
  ensures key < 0 ==> issubtype(typeof(result), tuple_arg(typeof(self), tuple___len__(self) + key))
  ensures key >= 0 ==> result == tuple___val__(self)[key]
  ensures key < 0 ==> result == tuple___val__(self)[tuple___len__(self) + key] 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate write_int_io(t_pre: Ref, value_0: Int) 

predicate no_op_io(t_pre_6: Ref) 

predicate split_io(t_pre_7: Ref) 

predicate join_io(t_pre1_0: Ref, t_pre2_0: Ref) 

predicate gap_io(t_pre_8: Ref) 

predicate end_io(t_pre_9: Ref) 

predicate set_var_io(t_pre_10: Ref, value_2: Int) 

predicate eval_io(t_pre_11: Ref, func_0: Function, arg_13: Ref) 

method lock_a(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, a_1: Ref) returns (_current_wait_level_148: Perm)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires issubtype(typeof(a_1), A())
  requires [acc(MustTerminate(_cthread_148), write), true]
  requires [true, Measure$check(_caller_measures_148, _cthread_148, 1) || perm(MustTerminate(_cthread_148)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_148) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures acc(a_1.A_v, write) && issubtype(typeof(a_1.A_v), int())
{
  var _cwl_148: Perm
  inhale false
}

method unlock_a(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm, a_2: Ref) returns (_current_wait_level_149: Perm)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires issubtype(typeof(a_2), A())
  requires [acc(MustTerminate(_cthread_149), write), true]
  requires acc(a_2.A_v, write) && issubtype(typeof(a_2.A_v), int())
  requires [true, Measure$check(_caller_measures_149, _cthread_149, 1) || perm(MustTerminate(_cthread_149)) == none && ((forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false) && ((forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false) && ((forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false) && (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_149) && ((forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
{
  var _cwl_149: Perm
  inhale false
}

method write_int(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm, t1: Ref, value: Ref) returns (_current_wait_level_150: Perm, _res: Ref)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires issubtype(typeof(t1), Place())
  requires issubtype(typeof(value), int())
  requires [acc(MustInvokeBounded(t1), write), (perm(MustInvokeBounded(t1)) > none && Measure$check(_caller_measures_150, t1, 1) ? acc(MustInvokeBounded(t1), write) : (perm(MustInvokeUnbounded(t1)) > none ? acc(MustInvokeUnbounded(t1), write) : acc(MustInvokeCredit(t1), write)))] && acc(write_int_io(t1, int___unbox__(value)), write)
  requires [true, perm(MustTerminate(_cthread_150)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_3: Ref [_r_3.MustReleaseBounded] :: Level(_r_3) <= _current_wait_level_150) && ((forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: Level(_r_3) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__write_int_io__t_post(t1, int___unbox__(value)))), write), (perm(MustInvokeUnbounded(old(get__write_int_io__t_post(t1, int___unbox__(value))))) > none ? acc(MustInvokeUnbounded(old(get__write_int_io__t_post(t1, int___unbox__(value)))), write) : acc(MustInvokeCredit(old(get__write_int_io__t_post(t1, int___unbox__(value)))), write))] && Place___eq__(old(get__write_int_io__t_post(t1, int___unbox__(value))), _res)
{
  var _cwl_150: Perm
  _res := null
  inhale false
}

method use(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_151: Perm, t1_0: Ref, a_3: Ref, b: Ref) returns (_current_wait_level_151: Perm, _res: Ref)
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires issubtype(typeof(t1_0), Place())
  requires issubtype(typeof(a_3), A())
  requires issubtype(typeof(b), A())
  requires [acc(MustInvokeBounded(t1_0), write), (perm(MustInvokeBounded(t1_0)) > none && Measure$check(_caller_measures_151, t1_0, 2) ? acc(MustInvokeBounded(t1_0), write) : (perm(MustInvokeUnbounded(t1_0)) > none ? acc(MustInvokeUnbounded(t1_0), write) : acc(MustInvokeCredit(t1_0), write)))] && (acc(eval_io(t1_0, getv_0(), a_3), write) && acc(write_int_io(get__eval_io__t_post_4(t1_0, getv_0(), a_3), int___unbox__(get__eval_io__result_1(t1_0, getv_0(), a_3))), write))
  requires [true, perm(MustTerminate(_cthread_151)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_151) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), int())))
  ensures [acc(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_0, getv_0(), a_3), int___unbox__(get__eval_io__result_1(t1_0, getv_0(), a_3))))), write), (perm(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_0, getv_0(), a_3), int___unbox__(get__eval_io__result_1(t1_0, getv_0(), a_3)))))) > none ? acc(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_0, getv_0(), a_3), int___unbox__(get__eval_io__result_1(t1_0, getv_0(), a_3))))), write) : acc(MustInvokeCredit(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_0, getv_0(), a_3), int___unbox__(get__eval_io__result_1(t1_0, getv_0(), a_3))))), write))] && (Place___eq__(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_0, getv_0(), a_3), int___unbox__(get__eval_io__result_1(t1_0, getv_0(), a_3)))), tuple___getitem__(_res, 0)) && int___eq__(old(get__eval_io__result_1(t1_0, getv_0(), a_3)), tuple___getitem__(_res, 1)))
  ensures [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var r: Ref
  var t_0: Ref
  var t1_7: Ref
  var a_10: Ref
  var b_6: Ref
  var Eval_res: Ref
  var write_int_res: Ref
  var _cwl_151: Perm
  var _method_measures_151: Seq[Measure$]
  _method_measures_151 := Seq(Measure$create(true, t1_0, 2))
  _res := null
  _err := null
  t1_7 := t1_0
  a_10 := a_3
  b_6 := b
  _cwl_151 := lock_a(_cthread_151, _method_measures_151, _residue_151, a_10)
  _cwl_151, Eval_res := Eval(_cthread_151, _method_measures_151, _residue_151, t1_7, getv_0(), a_10)
  inhale getv(a_10) == get__eval_io__result_1(t1_7, getv_0(), a_10)
  r := tuple___getitem__(Eval_res, 0)
  inhale _isDefined(114)
  t_0 := tuple___getitem__(Eval_res, 1)
  inhale _isDefined(3170164)
  assert int___eq__(_checkDefined(r, 114), getv(a_10))
  _cwl_151 := unlock_a(_cthread_151, _method_measures_151, _residue_151, a_10)
  _cwl_151, write_int_res := write_int(_cthread_151, _method_measures_151, _residue_151, _checkDefined(t_0, 3170164), _checkDefined(r, 114))
  t_0 := write_int_res
  inhale _isDefined(3170164)
  _res := tuple___create2__(_checkDefined(t_0, 3170164), _checkDefined(r, 114), Place(), int(), 0)
  goto __end
  goto __end
  label __end
}

method use_ctoken(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm, t1_1: Ref, a_4: Ref, b_0: Ref) returns (_current_wait_level_152: Perm, _res: Ref)
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires issubtype(typeof(t1_1), Place())
  requires issubtype(typeof(a_4), A())
  requires issubtype(typeof(b_0), A())
  requires acc(MustInvokeCredit(t1_1), write) && (acc(eval_io(t1_1, getv_0(), a_4), write) && acc(write_int_io(get__eval_io__t_post_4(t1_1, getv_0(), a_4), int___unbox__(get__eval_io__result_1(t1_1, getv_0(), a_4))), write))
  requires [true, perm(MustTerminate(_cthread_152)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_152) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), int())))
  ensures [acc(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_1, getv_0(), a_4), int___unbox__(get__eval_io__result_1(t1_1, getv_0(), a_4))))), write), (perm(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_1, getv_0(), a_4), int___unbox__(get__eval_io__result_1(t1_1, getv_0(), a_4)))))) > none ? acc(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_1, getv_0(), a_4), int___unbox__(get__eval_io__result_1(t1_1, getv_0(), a_4))))), write) : acc(MustInvokeCredit(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_1, getv_0(), a_4), int___unbox__(get__eval_io__result_1(t1_1, getv_0(), a_4))))), write))] && (Place___eq__(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_1, getv_0(), a_4), int___unbox__(get__eval_io__result_1(t1_1, getv_0(), a_4)))), tuple___getitem__(_res, 0)) && int___eq__(old(get__eval_io__result_1(t1_1, getv_0(), a_4)), tuple___getitem__(_res, 1)))
  ensures [true, (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var r_0: Ref
  var t_1: Ref
  var t1_8: Ref
  var a_11: Ref
  var b_7: Ref
  var Eval_res_0: Ref
  var write_int_res_0: Ref
  var _cwl_152: Perm
  var _method_measures_152: Seq[Measure$]
  _method_measures_152 := Seq[Measure$]()
  _res := null
  _err := null
  t1_8 := t1_1
  a_11 := a_4
  b_7 := b_0
  _cwl_152 := lock_a(_cthread_152, _method_measures_152, _residue_152, a_11)
  _cwl_152, Eval_res_0 := Eval(_cthread_152, _method_measures_152, _residue_152, t1_8, getv_0(), a_11)
  inhale getv(a_11) == get__eval_io__result_1(t1_8, getv_0(), a_11)
  r_0 := tuple___getitem__(Eval_res_0, 0)
  inhale _isDefined(3170162)
  t_1 := tuple___getitem__(Eval_res_0, 1)
  inhale _isDefined(3235700)
  assert int___eq__(_checkDefined(r_0, 3170162), getv(a_11))
  _cwl_152 := unlock_a(_cthread_152, _method_measures_152, _residue_152, a_11)
  _cwl_152, write_int_res_0 := write_int(_cthread_152, _method_measures_152, _residue_152, _checkDefined(t_1, 3235700), _checkDefined(r_0, 3170162))
  t_1 := write_int_res_0
  inhale _isDefined(3235700)
  _res := tuple___create2__(_checkDefined(t_1, 3235700), _checkDefined(r_0, 3170162), Place(), int(), 1)
  goto __end
  goto __end
  label __end
}

method wrong_func(_cthread_153: Ref, _caller_measures_153: Seq[Measure$], _residue_153: Perm, t1_2: Ref, a_5: Ref, b_1: Ref) returns (_current_wait_level_153: Perm, _res: Ref)
  requires _cthread_153 != null
  requires issubtype(typeof(_cthread_153), Thread_0())
  requires issubtype(typeof(t1_2), Place())
  requires issubtype(typeof(a_5), A())
  requires issubtype(typeof(b_1), A())
  requires [acc(MustInvokeBounded(t1_2), write), (perm(MustInvokeBounded(t1_2)) > none && Measure$check(_caller_measures_153, t1_2, 2) ? acc(MustInvokeBounded(t1_2), write) : (perm(MustInvokeUnbounded(t1_2)) > none ? acc(MustInvokeUnbounded(t1_2), write) : acc(MustInvokeCredit(t1_2), write)))] && (acc(eval_io(t1_2, getv_0(), a_5), write) && acc(write_int_io(get__eval_io__t_post_4(t1_2, getv_0(), a_5), int___unbox__(get__eval_io__result_1(t1_2, getv_0(), a_5))), write))
  requires [true, perm(MustTerminate(_cthread_153)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_153) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), int())))
  ensures [acc(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_2, getv_0(), a_5), int___unbox__(get__eval_io__result_1(t1_2, getv_0(), a_5))))), write), (perm(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_2, getv_0(), a_5), int___unbox__(get__eval_io__result_1(t1_2, getv_0(), a_5)))))) > none ? acc(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_2, getv_0(), a_5), int___unbox__(get__eval_io__result_1(t1_2, getv_0(), a_5))))), write) : acc(MustInvokeCredit(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_2, getv_0(), a_5), int___unbox__(get__eval_io__result_1(t1_2, getv_0(), a_5))))), write))] && (Place___eq__(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_2, getv_0(), a_5), int___unbox__(get__eval_io__result_1(t1_2, getv_0(), a_5)))), tuple___getitem__(_res, 0)) && int___eq__(old(get__eval_io__result_1(t1_2, getv_0(), a_5)), tuple___getitem__(_res, 1)))
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var r_1: Ref
  var t_2: Ref
  var t1_9: Ref
  var a_12: Ref
  var b_8: Ref
  var Eval_res_1: Ref
  var write_int_res_1: Ref
  var _cwl_153: Perm
  var _method_measures_153: Seq[Measure$]
  _method_measures_153 := Seq(Measure$create(true, t1_2, 2))
  _res := null
  _err := null
  t1_9 := t1_2
  a_12 := a_5
  b_8 := b_1
  _cwl_153 := lock_a(_cthread_153, _method_measures_153, _residue_153, a_12)
  _cwl_153, Eval_res_1 := Eval(_cthread_153, _method_measures_153, _residue_153, t1_9, getv_2_0(), a_12)
  inhale getv_2(a_12) == get__eval_io__result_1(t1_9, getv_2_0(), a_12)
  r_1 := tuple___getitem__(Eval_res_1, 0)
  inhale _isDefined(3235698)
  t_2 := tuple___getitem__(Eval_res_1, 1)
  inhale _isDefined(3301236)
  _cwl_153 := unlock_a(_cthread_153, _method_measures_153, _residue_153, a_12)
  _cwl_153, write_int_res_1 := write_int(_cthread_153, _method_measures_153, _residue_153, _checkDefined(t_2, 3301236), _checkDefined(r_1, 3235698))
  t_2 := write_int_res_1
  inhale _isDefined(3301236)
  _res := tuple___create2__(_checkDefined(t_2, 3301236), _checkDefined(r_1, 3235698), Place(), int(), 2)
  goto __end
  goto __end
  label __end
}

method wrong_arg(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm, t1_3: Ref, a_6: Ref, b_2: Ref) returns (_current_wait_level_154: Perm, _res: Ref)
  requires _cthread_154 != null
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires issubtype(typeof(t1_3), Place())
  requires issubtype(typeof(a_6), A())
  requires issubtype(typeof(b_2), A())
  requires [acc(MustInvokeBounded(t1_3), write), (perm(MustInvokeBounded(t1_3)) > none && Measure$check(_caller_measures_154, t1_3, 2) ? acc(MustInvokeBounded(t1_3), write) : (perm(MustInvokeUnbounded(t1_3)) > none ? acc(MustInvokeUnbounded(t1_3), write) : acc(MustInvokeCredit(t1_3), write)))] && (acc(eval_io(t1_3, getv_0(), a_6), write) && acc(write_int_io(get__eval_io__t_post_4(t1_3, getv_0(), a_6), int___unbox__(get__eval_io__result_1(t1_3, getv_0(), a_6))), write))
  requires [true, perm(MustTerminate(_cthread_154)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_154) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), int())))
  ensures [acc(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_3, getv_0(), a_6), int___unbox__(get__eval_io__result_1(t1_3, getv_0(), a_6))))), write), (perm(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_3, getv_0(), a_6), int___unbox__(get__eval_io__result_1(t1_3, getv_0(), a_6)))))) > none ? acc(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_3, getv_0(), a_6), int___unbox__(get__eval_io__result_1(t1_3, getv_0(), a_6))))), write) : acc(MustInvokeCredit(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_3, getv_0(), a_6), int___unbox__(get__eval_io__result_1(t1_3, getv_0(), a_6))))), write))] && (Place___eq__(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_3, getv_0(), a_6), int___unbox__(get__eval_io__result_1(t1_3, getv_0(), a_6)))), tuple___getitem__(_res, 0)) && int___eq__(old(get__eval_io__result_1(t1_3, getv_0(), a_6)), tuple___getitem__(_res, 1)))
  ensures [true, (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var r_2: Ref
  var t_3: Ref
  var t1_10: Ref
  var a_13: Ref
  var b_9: Ref
  var Eval_res_2: Ref
  var write_int_res_2: Ref
  var _cwl_154: Perm
  var _method_measures_154: Seq[Measure$]
  _method_measures_154 := Seq(Measure$create(true, t1_3, 2))
  _res := null
  _err := null
  t1_10 := t1_3
  a_13 := a_6
  b_9 := b_2
  _cwl_154 := lock_a(_cthread_154, _method_measures_154, _residue_154, b_9)
  _cwl_154, Eval_res_2 := Eval(_cthread_154, _method_measures_154, _residue_154, t1_10, getv_0(), b_9)
  inhale getv(b_9) == get__eval_io__result_1(t1_10, getv_0(), b_9)
  r_2 := tuple___getitem__(Eval_res_2, 0)
  inhale _isDefined(3301234)
  t_3 := tuple___getitem__(Eval_res_2, 1)
  inhale _isDefined(3366772)
  _cwl_154 := unlock_a(_cthread_154, _method_measures_154, _residue_154, b_9)
  _cwl_154, write_int_res_2 := write_int(_cthread_154, _method_measures_154, _residue_154, _checkDefined(t_3, 3366772), _checkDefined(r_2, 3301234))
  t_3 := write_int_res_2
  inhale _isDefined(3366772)
  _res := tuple___create2__(_checkDefined(t_3, 3366772), _checkDefined(r_2, 3301234), Place(), int(), 3)
  goto __end
  goto __end
  label __end
}

method no_token(_cthread_155: Ref, _caller_measures_155: Seq[Measure$], _residue_155: Perm, t1_4: Ref, a_7: Ref, b_3: Ref) returns (_current_wait_level_155: Perm, _res: Ref)
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires issubtype(typeof(t1_4), Place())
  requires issubtype(typeof(a_7), A())
  requires issubtype(typeof(b_3), A())
  requires acc(eval_io(t1_4, getv_0(), a_7), write) && acc(write_int_io(get__eval_io__t_post_4(t1_4, getv_0(), a_7), int___unbox__(get__eval_io__result_1(t1_4, getv_0(), a_7))), write)
  requires [true, perm(MustTerminate(_cthread_155)) == none && ((forperm _r_19: Ref [MustInvokeBounded(_r_19)] :: false) && ((forperm _r_19: Ref [MustInvokeUnbounded(_r_19)] :: false) && ((forperm _r_19: Ref [_r_19.MustReleaseBounded] :: false) && (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_155) && ((forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_155) && _residue_155 <= _current_wait_level_155), true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), int())))
  ensures [acc(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_4, getv_0(), a_7), int___unbox__(get__eval_io__result_1(t1_4, getv_0(), a_7))))), write), (perm(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_4, getv_0(), a_7), int___unbox__(get__eval_io__result_1(t1_4, getv_0(), a_7)))))) > none ? acc(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_4, getv_0(), a_7), int___unbox__(get__eval_io__result_1(t1_4, getv_0(), a_7))))), write) : acc(MustInvokeCredit(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_4, getv_0(), a_7), int___unbox__(get__eval_io__result_1(t1_4, getv_0(), a_7))))), write))] && (Place___eq__(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_4, getv_0(), a_7), int___unbox__(get__eval_io__result_1(t1_4, getv_0(), a_7)))), tuple___getitem__(_res, 0)) && int___eq__(old(get__eval_io__result_1(t1_4, getv_0(), a_7)), tuple___getitem__(_res, 1)))
  ensures [true, (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false) && ((forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false) && ((forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false) && (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var r_3: Ref
  var t_4: Ref
  var t1_11: Ref
  var a_14: Ref
  var b_10: Ref
  var Eval_res_3: Ref
  var write_int_res_3: Ref
  var _cwl_155: Perm
  var _method_measures_155: Seq[Measure$]
  _method_measures_155 := Seq[Measure$]()
  _res := null
  _err := null
  t1_11 := t1_4
  a_14 := a_7
  b_10 := b_3
  _cwl_155 := lock_a(_cthread_155, _method_measures_155, _residue_155, a_14)
  _cwl_155, Eval_res_3 := Eval(_cthread_155, _method_measures_155, _residue_155, t1_11, getv_0(), a_14)
  inhale getv(a_14) == get__eval_io__result_1(t1_11, getv_0(), a_14)
  r_3 := tuple___getitem__(Eval_res_3, 0)
  inhale _isDefined(3366770)
  t_4 := tuple___getitem__(Eval_res_3, 1)
  inhale _isDefined(3432308)
  _cwl_155 := unlock_a(_cthread_155, _method_measures_155, _residue_155, a_14)
  _cwl_155, write_int_res_3 := write_int(_cthread_155, _method_measures_155, _residue_155, _checkDefined(t_4, 3432308), _checkDefined(r_3, 3366770))
  t_4 := write_int_res_3
  inhale _isDefined(3432308)
  _res := tuple___create2__(_checkDefined(t_4, 3432308), _checkDefined(r_3, 3366770), Place(), int(), 4)
  goto __end
  goto __end
  label __end
}

method no_io_perm(_cthread_156: Ref, _caller_measures_156: Seq[Measure$], _residue_156: Perm, t1_5: Ref, a_8: Ref, b_4: Ref) returns (_current_wait_level_156: Perm)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires issubtype(typeof(t1_5), Place())
  requires issubtype(typeof(a_8), A())
  requires issubtype(typeof(b_4), A())
  requires [acc(MustInvokeBounded(t1_5), write), (perm(MustInvokeBounded(t1_5)) > none && Measure$check(_caller_measures_156, t1_5, 2) ? acc(MustInvokeBounded(t1_5), write) : (perm(MustInvokeUnbounded(t1_5)) > none ? acc(MustInvokeUnbounded(t1_5), write) : acc(MustInvokeCredit(t1_5), write)))]
  requires [true, perm(MustTerminate(_cthread_156)) == none && ((forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false) && ((forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false) && ((forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false) && (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_156) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]
  ensures [acc(MustInvokeBounded(t1_5), write), (perm(MustInvokeBounded(t1_5)) > none ? acc(MustInvokeBounded(t1_5), write) : (perm(MustInvokeUnbounded(t1_5)) > none ? acc(MustInvokeUnbounded(t1_5), write) : acc(MustInvokeCredit(t1_5), write)))]
  ensures [true, (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var r_4: Ref
  var t_5: Ref
  var t1_12: Ref
  var a_15: Ref
  var b_11: Ref
  var Eval_res_4: Ref
  var _cwl_156: Perm
  var _method_measures_156: Seq[Measure$]
  _method_measures_156 := Seq(Measure$create(true, t1_5, 2))
  _err := null
  t1_12 := t1_5
  a_15 := a_8
  b_11 := b_4
  _cwl_156 := lock_a(_cthread_156, _method_measures_156, _residue_156, a_15)
  _cwl_156, Eval_res_4 := Eval(_cthread_156, _method_measures_156, _residue_156, t1_12, getv_0(), a_15)
  inhale getv(a_15) == get__eval_io__result_1(t1_12, getv_0(), a_15)
  r_4 := tuple___getitem__(Eval_res_4, 0)
  inhale _isDefined(3432306)
  t_5 := tuple___getitem__(Eval_res_4, 1)
  inhale _isDefined(3497844)
  goto __end
  label __end
}

method no_func_perm(_cthread_157: Ref, _caller_measures_157: Seq[Measure$], _residue_157: Perm, t1_6: Ref, a_9: Ref, b_5: Ref) returns (_current_wait_level_157: Perm, _res: Ref)
  requires _cthread_157 != null
  requires issubtype(typeof(_cthread_157), Thread_0())
  requires issubtype(typeof(t1_6), Place())
  requires issubtype(typeof(a_9), A())
  requires issubtype(typeof(b_5), A())
  requires [acc(MustInvokeBounded(t1_6), write), (perm(MustInvokeBounded(t1_6)) > none && Measure$check(_caller_measures_157, t1_6, 2) ? acc(MustInvokeBounded(t1_6), write) : (perm(MustInvokeUnbounded(t1_6)) > none ? acc(MustInvokeUnbounded(t1_6), write) : acc(MustInvokeCredit(t1_6), write)))] && (acc(eval_io(t1_6, getv_0(), a_9), write) && acc(write_int_io(get__eval_io__t_post_4(t1_6, getv_0(), a_9), int___unbox__(get__eval_io__result_1(t1_6, getv_0(), a_9))), write))
  requires [true, perm(MustTerminate(_cthread_157)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_157) && ((forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), int())))
  ensures [acc(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_6, getv_0(), a_9), int___unbox__(get__eval_io__result_1(t1_6, getv_0(), a_9))))), write), (perm(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_6, getv_0(), a_9), int___unbox__(get__eval_io__result_1(t1_6, getv_0(), a_9)))))) > none ? acc(MustInvokeUnbounded(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_6, getv_0(), a_9), int___unbox__(get__eval_io__result_1(t1_6, getv_0(), a_9))))), write) : acc(MustInvokeCredit(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_6, getv_0(), a_9), int___unbox__(get__eval_io__result_1(t1_6, getv_0(), a_9))))), write))] && (Place___eq__(old(get__write_int_io__t_post(get__eval_io__t_post_4(t1_6, getv_0(), a_9), int___unbox__(get__eval_io__result_1(t1_6, getv_0(), a_9)))), tuple___getitem__(_res, 0)) && int___eq__(old(get__eval_io__result_1(t1_6, getv_0(), a_9)), tuple___getitem__(_res, 1)))
  ensures [true, (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false) && ((forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false) && ((forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false) && (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var r_5: Ref
  var t_6: Ref
  var t1_13: Ref
  var a_16: Ref
  var b_12: Ref
  var Eval_res_5: Ref
  var _cwl_157: Perm
  var _method_measures_157: Seq[Measure$]
  _method_measures_157 := Seq(Measure$create(true, t1_6, 2))
  _res := null
  _err := null
  t1_13 := t1_6
  a_16 := a_9
  b_12 := b_5
  _cwl_157, Eval_res_5 := Eval(_cthread_157, _method_measures_157, _residue_157, t1_13, getv_0(), a_16)
  inhale getv(a_16) == get__eval_io__result_1(t1_13, getv_0(), a_16)
  r_5 := tuple___getitem__(Eval_res_5, 0)
  inhale _isDefined(3497842)
  t_6 := tuple___getitem__(Eval_res_5, 1)
  inhale _isDefined(3563380)
  _res := tuple___create2__(_checkDefined(t_6, 3563380), _checkDefined(r_5, 3497842), Place(), int(), 5)
  goto __end
  goto __end
  label __end
}

method A___init__(_cthread_145: Ref, _caller_measures_145: Seq[Measure$], _residue_145: Perm, self: Ref) returns (_current_wait_level_145: Perm)
  requires _cthread_145 != null
  requires issubtype(typeof(_cthread_145), Thread_0())
  requires self != null
  requires acc(_MaySet(self, 7757633), write)
  requires issubtype(typeof(self), A())
  requires self != null
  requires [true, perm(MustTerminate(_cthread_145)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_145) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]
  ensures acc(self.A_v, write) && issubtype(typeof(self.A_v), int())
  ensures [true, (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_0: Ref
  var _cwl_145: Perm
  var _method_measures_145: Seq[Measure$]
  _method_measures_145 := Seq[Measure$]()
  inhale typeof(self) == A()
  _err := null
  self_0 := self
  if (perm(_MaySet(self_0, 7757633)) > none) {
    exhale acc(_MaySet(self_0, 7757633), write)
    inhale acc(self_0.A_v, write)
  }
  self_0.A_v := __prim__int___box__(12)
  goto __end
  label __end
}

method NoOp(_cthread_158: Ref, _caller_measures_158: Seq[Measure$], _residue_158: Perm, t_pre_0: Ref) returns (_current_wait_level_158: Perm, _res: Ref)
  requires _cthread_158 != null
  requires issubtype(typeof(_cthread_158), Thread_0())
  requires issubtype(typeof(t_pre_0), Place())
  requires [acc(MustInvokeBounded(t_pre_0), write), (perm(MustInvokeBounded(t_pre_0)) > none && Measure$check(_caller_measures_158, t_pre_0, 1) ? acc(MustInvokeBounded(t_pre_0), write) : (perm(MustInvokeUnbounded(t_pre_0)) > none ? acc(MustInvokeUnbounded(t_pre_0), write) : acc(MustInvokeCredit(t_pre_0), write)))] && (acc(no_op_io(t_pre_0), write) && [acc(MustTerminate(_cthread_158), write), true])
  requires [true, Measure$check(_caller_measures_158, _cthread_158, 1) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_158) && ((forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__no_op_io__t_post_0(t_pre_0))), write), (perm(MustInvokeUnbounded(old(get__no_op_io__t_post_0(t_pre_0)))) > none ? acc(MustInvokeUnbounded(old(get__no_op_io__t_post_0(t_pre_0))), write) : acc(MustInvokeCredit(old(get__no_op_io__t_post_0(t_pre_0))), write))] && Place___eq__(old(get__no_op_io__t_post_0(t_pre_0)), _res)
{
  var _cwl_158: Perm
  _res := null
  inhale false
}

method Split(_cthread_159: Ref, _caller_measures_159: Seq[Measure$], _residue_159: Perm, t_pre_1: Ref) returns (_current_wait_level_159: Perm, _res: Ref)
  requires _cthread_159 != null
  requires issubtype(typeof(_cthread_159), Thread_0())
  requires issubtype(typeof(t_pre_1), Place())
  requires [acc(MustInvokeBounded(t_pre_1), write), (perm(MustInvokeBounded(t_pre_1)) > none && Measure$check(_caller_measures_159, t_pre_1, 1) ? acc(MustInvokeBounded(t_pre_1), write) : (perm(MustInvokeUnbounded(t_pre_1)) > none ? acc(MustInvokeUnbounded(t_pre_1), write) : acc(MustInvokeCredit(t_pre_1), write)))] && (acc(split_io(t_pre_1), write) && [acc(MustTerminate(_cthread_159), write), true])
  requires [true, Measure$check(_caller_measures_159, _cthread_159, 1) || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_32: Ref [MustInvokeBounded(_r_32)] :: false) && ((forperm _r_32: Ref [MustInvokeUnbounded(_r_32)] :: false) && ((forperm _r_32: Ref [_r_32.MustReleaseBounded] :: false) && (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_31: Ref [_r_31.MustReleaseBounded] :: Level(_r_31) <= _current_wait_level_159) && ((forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: Level(_r_31) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159), true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), Place())))
  ensures [acc(MustInvokeUnbounded(old(get__split_io__t_post1(t_pre_1))), write), (perm(MustInvokeUnbounded(old(get__split_io__t_post1(t_pre_1)))) > none ? acc(MustInvokeUnbounded(old(get__split_io__t_post1(t_pre_1))), write) : acc(MustInvokeCredit(old(get__split_io__t_post1(t_pre_1))), write))] && (Place___eq__(old(get__split_io__t_post1(t_pre_1)), tuple___getitem__(_res, 0)) && ([acc(MustInvokeUnbounded(old(get__split_io__t_post2(t_pre_1))), write), (perm(MustInvokeUnbounded(old(get__split_io__t_post2(t_pre_1)))) > none ? acc(MustInvokeUnbounded(old(get__split_io__t_post2(t_pre_1))), write) : acc(MustInvokeCredit(old(get__split_io__t_post2(t_pre_1))), write))] && Place___eq__(old(get__split_io__t_post2(t_pre_1)), tuple___getitem__(_res, 1))))
{
  var _cwl_159: Perm
  _res := null
  inhale false
}

method Join(_cthread_160: Ref, _caller_measures_160: Seq[Measure$], _residue_160: Perm, t_pre1: Ref, t_pre2: Ref) returns (_current_wait_level_160: Perm, _res: Ref)
  requires _cthread_160 != null
  requires issubtype(typeof(_cthread_160), Thread_0())
  requires issubtype(typeof(t_pre1), Place())
  requires issubtype(typeof(t_pre2), Place())
  requires [acc(MustInvokeBounded(t_pre1), write), (perm(MustInvokeBounded(t_pre1)) > none && Measure$check(_caller_measures_160, t_pre1, 1) ? acc(MustInvokeBounded(t_pre1), write) : (perm(MustInvokeUnbounded(t_pre1)) > none ? acc(MustInvokeUnbounded(t_pre1), write) : acc(MustInvokeCredit(t_pre1), write)))] && ([acc(MustInvokeBounded(t_pre2), write), (perm(MustInvokeBounded(t_pre2)) > none && Measure$check(_caller_measures_160, t_pre2, 1) ? acc(MustInvokeBounded(t_pre2), write) : (perm(MustInvokeUnbounded(t_pre2)) > none ? acc(MustInvokeUnbounded(t_pre2), write) : acc(MustInvokeCredit(t_pre2), write)))] && (acc(join_io(t_pre1, t_pre2), write) && [acc(MustTerminate(_cthread_160), write), true]))
  requires [true, Measure$check(_caller_measures_160, _cthread_160, 1) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_33: Ref [_r_33.MustReleaseBounded] :: Level(_r_33) <= _current_wait_level_160) && ((forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: Level(_r_33) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__join_io__t_post_1(t_pre1, t_pre2))), write), (perm(MustInvokeUnbounded(old(get__join_io__t_post_1(t_pre1, t_pre2)))) > none ? acc(MustInvokeUnbounded(old(get__join_io__t_post_1(t_pre1, t_pre2))), write) : acc(MustInvokeCredit(old(get__join_io__t_post_1(t_pre1, t_pre2))), write))] && Place___eq__(old(get__join_io__t_post_1(t_pre1, t_pre2)), _res)
{
  var _cwl_160: Perm
  _res := null
  inhale false
}

method Gap(_cthread_161: Ref, _caller_measures_161: Seq[Measure$], _residue_161: Perm, t_pre_2: Ref) returns (_current_wait_level_161: Perm, _res: Ref)
  requires _cthread_161 != null
  requires issubtype(typeof(_cthread_161), Thread_0())
  requires issubtype(typeof(t_pre_2), Place())
  requires [acc(MustInvokeBounded(t_pre_2), write), (perm(MustInvokeBounded(t_pre_2)) > none && Measure$check(_caller_measures_161, t_pre_2, 1) ? acc(MustInvokeBounded(t_pre_2), write) : (perm(MustInvokeUnbounded(t_pre_2)) > none ? acc(MustInvokeUnbounded(t_pre_2), write) : acc(MustInvokeCredit(t_pre_2), write)))] && (acc(gap_io(t_pre_2), write) && [acc(MustTerminate(_cthread_161), write), true])
  requires [true, Measure$check(_caller_measures_161, _cthread_161, 1) || perm(MustTerminate(_cthread_161)) == none && ((forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_161) && ((forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_161) && _residue_161 <= _current_wait_level_161), true]
  ensures issubtype(typeof(_res), Place())
  ensures acc(MustInvokeCredit(old(get__gap_io__t_post_2(t_pre_2))), write) && Place___eq__(old(get__gap_io__t_post_2(t_pre_2)), _res)
{
  var _cwl_161: Perm
  _res := null
  inhale false
}

method End(_cthread_162: Ref, _caller_measures_162: Seq[Measure$], _residue_162: Perm, t_pre_3: Ref) returns (_current_wait_level_162: Perm, _res: Ref)
  requires _cthread_162 != null
  requires issubtype(typeof(_cthread_162), Thread_0())
  requires issubtype(typeof(t_pre_3), Place())
  requires [acc(MustInvokeBounded(t_pre_3), write), (perm(MustInvokeBounded(t_pre_3)) > none && Measure$check(_caller_measures_162, t_pre_3, 1) ? acc(MustInvokeBounded(t_pre_3), write) : (perm(MustInvokeUnbounded(t_pre_3)) > none ? acc(MustInvokeUnbounded(t_pre_3), write) : acc(MustInvokeCredit(t_pre_3), write)))] && (acc(end_io(t_pre_3), write) && [acc(MustTerminate(_cthread_162), write), true])
  requires [true, Measure$check(_caller_measures_162, _cthread_162, 1) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_38: Ref [MustInvokeBounded(_r_38)] :: false) && ((forperm _r_38: Ref [MustInvokeUnbounded(_r_38)] :: false) && ((forperm _r_38: Ref [_r_38.MustReleaseBounded] :: false) && (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_37: Ref [_r_37.MustReleaseBounded] :: Level(_r_37) <= _current_wait_level_162) && ((forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: Level(_r_37) <= _current_wait_level_162) && _residue_162 <= _current_wait_level_162), true]
  ensures issubtype(typeof(_res), Place())
{
  var _cwl_162: Perm
  _res := null
  inhale false
}

method SetVar(_cthread_163: Ref, _caller_measures_163: Seq[Measure$], _residue_163: Perm, t_pre_4: Ref, value_1: Ref) returns (_current_wait_level_163: Perm, _res: Ref)
  requires _cthread_163 != null
  requires issubtype(typeof(_cthread_163), Thread_0())
  requires issubtype(typeof(t_pre_4), Place())
  requires issubtype(typeof(value_1), int())
  requires [acc(MustInvokeBounded(t_pre_4), write), (perm(MustInvokeBounded(t_pre_4)) > none && Measure$check(_caller_measures_163, t_pre_4, 1) ? acc(MustInvokeBounded(t_pre_4), write) : (perm(MustInvokeUnbounded(t_pre_4)) > none ? acc(MustInvokeUnbounded(t_pre_4), write) : acc(MustInvokeCredit(t_pre_4), write)))] && (acc(set_var_io(t_pre_4, int___unbox__(value_1)), write) && [acc(MustTerminate(_cthread_163), write), true])
  requires [true, Measure$check(_caller_measures_163, _cthread_163, 1) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_39: Ref [_r_39.MustReleaseBounded] :: Level(_r_39) <= _current_wait_level_163) && ((forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: Level(_r_39) <= _current_wait_level_163) && _residue_163 <= _current_wait_level_163), true]
  ensures issubtype(typeof(_res), tuple(Seq(int(), Place())))
  ensures [acc(MustInvokeUnbounded(old(get__set_var_io__t_post_3(t_pre_4, int___unbox__(value_1)))), write), (perm(MustInvokeUnbounded(old(get__set_var_io__t_post_3(t_pre_4, int___unbox__(value_1))))) > none ? acc(MustInvokeUnbounded(old(get__set_var_io__t_post_3(t_pre_4, int___unbox__(value_1)))), write) : acc(MustInvokeCredit(old(get__set_var_io__t_post_3(t_pre_4, int___unbox__(value_1)))), write))] && (Place___eq__(old(get__set_var_io__t_post_3(t_pre_4, int___unbox__(value_1))), tuple___getitem__(_res, 1)) && (int___eq__(__prim__int___box__(old(get__set_var_io__result_0(t_pre_4, int___unbox__(value_1)))), tuple___getitem__(_res, 0)) && int___eq__(value_1, __prim__int___box__(old(get__set_var_io__result_0(t_pre_4, int___unbox__(value_1)))))))
{
  var _cwl_163: Perm
  _res := null
  inhale false
}

method Eval(_cthread_164: Ref, _caller_measures_164: Seq[Measure$], _residue_164: Perm, t_pre_5: Ref, func: Function, arg: Ref) returns (_current_wait_level_164: Perm, _res: Ref)
  requires _cthread_164 != null
  requires issubtype(typeof(_cthread_164), Thread_0())
  requires issubtype(typeof(t_pre_5), Place())
  requires issubtype(typeof(arg), typeof(arg))
  requires [acc(MustInvokeBounded(t_pre_5), write), (perm(MustInvokeBounded(t_pre_5)) > none && Measure$check(_caller_measures_164, t_pre_5, 1) ? acc(MustInvokeBounded(t_pre_5), write) : (perm(MustInvokeUnbounded(t_pre_5)) > none ? acc(MustInvokeUnbounded(t_pre_5), write) : acc(MustInvokeCredit(t_pre_5), write)))] && (acc(eval_io(t_pre_5, func, arg), write) && [acc(MustTerminate(_cthread_164), write), true])
  requires [true, Measure$check(_caller_measures_164, _cthread_164, 1) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_42: Ref [MustInvokeBounded(_r_42)] :: false) && ((forperm _r_42: Ref [MustInvokeUnbounded(_r_42)] :: false) && ((forperm _r_42: Ref [_r_42.MustReleaseBounded] :: false) && (forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_41: Ref [_r_41.MustReleaseBounded] :: Level(_r_41) <= _current_wait_level_164) && ((forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: Level(_r_41) <= _current_wait_level_164) && _residue_164 <= _current_wait_level_164), true]
  ensures issubtype(typeof(_res), tuple(Seq(object(), Place())))
  ensures [acc(MustInvokeUnbounded(old(get__eval_io__t_post_4(t_pre_5, func, arg))), write), (perm(MustInvokeUnbounded(old(get__eval_io__t_post_4(t_pre_5, func, arg)))) > none ? acc(MustInvokeUnbounded(old(get__eval_io__t_post_4(t_pre_5, func, arg))), write) : acc(MustInvokeCredit(old(get__eval_io__t_post_4(t_pre_5, func, arg))), write))] && (old(get__eval_io__t_post_4(t_pre_5, func, arg)) == tuple___getitem__(_res, 1) && old(get__eval_io__result_1(t_pre_5, func, arg)) == tuple___getitem__(_res, 0))
{
  var _cwl_164: Perm
  _res := null
  inhale false
}

method main(_cthread_165: Ref, _caller_measures_165: Seq[Measure$], _residue_165: Perm) returns (_current_wait_level_165: Perm)
  requires _cthread_165 != null
  requires issubtype(typeof(_cthread_165), Thread_0())
  requires [true, perm(MustTerminate(_cthread_165)) == none && ((forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false) && ((forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false) && ((forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false) && (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_43: Ref [_r_43.MustReleaseBounded] :: Level(_r_43) <= _current_wait_level_165) && ((forperm _r_43: Ref [_r_43.MustReleaseUnbounded] :: Level(_r_43) <= _current_wait_level_165) && _residue_165 <= _current_wait_level_165), true]
  ensures [true, (forperm _r_44: Ref [MustInvokeBounded(_r_44)] :: false) && ((forperm _r_44: Ref [MustInvokeUnbounded(_r_44)] :: false) && ((forperm _r_44: Ref [_r_44.MustReleaseBounded] :: false) && (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var module_defined_1: Bool
  var module_names_1: Set[_Name]
  var _cwl_165: Perm
  var _method_measures_165: Seq[Measure$]
  _method_measures_165 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_defined_1 := false
  module_names_1 := Set[_Name]()
  module_names_1 := (module_names_1 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file___0()._val, 99 / 100) && issubtype(typeof(__file___0()._val), str()) && issubtype(typeof(__file___0()._val), str())
  module_names_1 := (module_names_1 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name___0()._val, 99 / 100) && issubtype(typeof(__name___0()._val), str()) && issubtype(typeof(__name___0()._val), str()) && !str___eq__(str___create__(8, 2489249333222104298408468319), __name___0()._val)
  if (!module_defined_1) {
    module_defined_1 := true
    module_names_1 := (module_names_1 union Set(_single(4276317748909243633618411843)))
    module_names_1 := (module_names_1 union Set(_single(3906937610535144108)))
    module_names_1 := (module_names_1 union Set(_single(3686932966091490988)))
    module_names_1 := (module_names_1 union Set(_single(11116006324067352974226974112924930237)))
    module_names_1 := (module_names_1 union Set(_single(4264095844347449787)))
    module_names_1 := (module_names_1 union Set(_single(4158991341743806393)))
    module_names_1 := (module_names_1 union Set(_single(4231737769045301934)))
    module_names_1 := (module_names_1 union Set(_single(7136376649266381199951095122)))
    module_names_1 := (module_names_1 union Set(_single(3870888504780163997)))
    module_names_1 := (module_names_1 union Set(_single(7364236416608623017735835465)))
    module_names_1 := (module_names_1 union Set(_single(7364236435055367091445387081)))
    module_names_1 := (module_names_1 union Set(_single(7364236453502111165154938697)))
    module_names_1 := (module_names_1 union Set(_single(7025051079424386845369126729)))
    module_names_1 := (module_names_1 union Set(_single(3580562418798859184)))
    module_names_1 := (module_names_1 union Set(_single(6670569014612377719754876244)))
    module_names_1 := (module_names_1 union Set(_single(3654029152917688460)))
    module_names_1 := (module_names_1 union Set(_single(5460990052674857173734662115181759155)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(6050123938192595908143574894)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(1884254030)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(5589826673346550058105729139)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(3798285583073382317)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(4009365936197243030)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(1852403530)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(3438674358163185305)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(7364935)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(3436992650834317723)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(6581829)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(2348609963811769505312695667)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(3114983555345390253)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(3936186279839828379)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(1818326597)))
  }
  module_names_0 := (module_names_0 union module_names_1)
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(65)))
  assert true && (_single(65) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(1987339623)))
  assert true && (_single(65) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(4267834725030927001)))
  assert true && (_single(65) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(3869182606048006292)))
  assert true && (_single(65) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(3881640316252046799097589365)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(2472626250624378018628953877194902921)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(6285265631461849329830556279)))
  assert true && (_single(65) in module_names_0) && (_single(65) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(6648693)))
  assert true && (_single(65) in module_names_0) && (_single(65) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(4199229589917323802267972469)))
  assert true && (_single(65) in module_names_0) && (_single(65) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(6904703073079721165950251639)))
  assert true && (_single(65) in module_names_0) && (_single(65) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(6436985600607234536080634487)))
  assert true && (_single(65) in module_names_0) && (_single(65) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(6279848168607782966348705646)))
  assert true && (_single(65) in module_names_0) && (_single(65) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(4043219447525540504870547310)))
  assert true && (_single(65) in module_names_0) && (_single(65) in module_names_0)
  module_names_0 := (module_names_0 union Set(_single(15109508068671488297329880891945685138)))
  goto __end
  label __end
}

method write_int_io__termination_check(t_pre: Ref, value_0: Int)
  requires issubtype(typeof(t_pre), Place())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method no_op_io__termination_check(t_pre_6: Ref)
  requires issubtype(typeof(t_pre_6), Place())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method split_io__termination_check(t_pre_7: Ref)
  requires issubtype(typeof(t_pre_7), Place())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method join_io__termination_check(t_pre1_0: Ref, t_pre2_0: Ref)
  requires issubtype(typeof(t_pre1_0), Place())
  requires issubtype(typeof(t_pre2_0), Place())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method gap_io__termination_check(t_pre_8: Ref)
  requires issubtype(typeof(t_pre_8), Place())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method end_io__termination_check(t_pre_9: Ref)
  requires issubtype(typeof(t_pre_9), Place())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method set_var_io__termination_check(t_pre_10: Ref, value_2: Int)
  requires issubtype(typeof(t_pre_10), Place())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method eval_io__termination_check(t_pre_11: Ref, func_0: Function, arg_13: Ref)
  requires issubtype(typeof(t_pre_11), Place())
  requires issubtype(typeof(arg_13), object())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}