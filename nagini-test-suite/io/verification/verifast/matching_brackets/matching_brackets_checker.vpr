domain PyType {
  
  function extends_(sub: PyType, super: PyType): Bool
  
  function issubtype(sub: PyType, super: PyType): Bool
  
  function isnotsubtype(sub: PyType, super: PyType): Bool
  
  function tuple_args(t: PyType): Seq[PyType]
  
  function typeof(obj: Ref): PyType
  
  function get_basic(t: PyType): PyType
  
  function union_type_1(arg_1: PyType): PyType
  
  function union_type_2(arg_1: PyType, arg_2: PyType): PyType
  
  function union_type_3(arg_1: PyType, arg_2: PyType, arg_3: PyType): PyType
  
  function union_type_4(arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType): PyType
  
  unique function Place(): PyType
  
  unique function object(): PyType
  
  unique function list_basic(): PyType
  
  function list(arg0: PyType): PyType
  
  function list_arg(typ: PyType, index: Int): PyType
  
  unique function set_basic(): PyType
  
  function set(arg0: PyType): PyType
  
  function set_arg(typ: PyType, index: Int): PyType
  
  unique function dict_basic(): PyType
  
  function dict(arg0: PyType, arg1: PyType): PyType
  
  function dict_arg(typ: PyType, index: Int): PyType
  
  unique function int(): PyType
  
  unique function float(): PyType
  
  unique function bool(): PyType
  
  unique function NoneType(): PyType
  
  unique function Exception(): PyType
  
  unique function traceback(): PyType
  
  unique function str(): PyType
  
  unique function bytes(): PyType
  
  unique function tuple_basic(): PyType
  
  function tuple(args: Seq[PyType]): PyType
  
  function tuple_arg(typ: PyType, index: Int): PyType
  
  unique function Sequence_basic(): PyType
  
  function Sequence(arg0: PyType): PyType
  
  function Sequence_arg(typ: PyType, index: Int): PyType
  
  unique function PSet_basic(): PyType
  
  function PSet(arg0: PyType): PyType
  
  function PSet_arg(typ: PyType, index: Int): PyType
  
  unique function slice(): PyType
  
  unique function range(): PyType
  
  unique function Iterator_basic(): PyType
  
  function Iterator(arg0: PyType): PyType
  
  function Iterator_arg(typ: PyType, index: Int): PyType
  
  unique function Thread_0(): PyType
  
  unique function LevelType(): PyType
  
  unique function type(): PyType
  
  unique function __prim__Sequence_type(): PyType
  
  unique function Matcher(): PyType
  
  axiom issubtype_transitivity {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),issubtype(middle, super) } issubtype(sub, middle) && issubtype(middle, super) ==> issubtype(sub, super))
  }
  
  axiom issubtype_reflexivity {
    (forall type_: PyType :: { issubtype(type_, type_) } issubtype(type_, type_))
  }
  
  axiom extends_implies_subtype {
    (forall sub: PyType, sub2: PyType :: { extends_(sub, sub2) } extends_(sub, sub2) ==> issubtype(sub, sub2))
  }
  
  axiom null_nonetype {
    (forall r: Ref :: { typeof(r) } issubtype(typeof(r), NoneType()) == (r == null))
  }
  
  axiom issubtype_object {
    (forall type_: PyType :: { issubtype(type_, object()) } issubtype(type_, object()))
  }
  
  axiom issubtype_exclusion {
    (forall sub: PyType, sub2: PyType, super: PyType :: { extends_(sub, super),extends_(sub2, super) } extends_(sub, super) && extends_(sub2, super) && sub != sub2 ==> isnotsubtype(sub, sub2) && isnotsubtype(sub2, sub))
  }
  
  axiom issubtype_exclusion_2 {
    (forall sub: PyType, super: PyType :: { issubtype(sub, super) } { issubtype(super, sub) } issubtype(sub, super) && sub != super ==> !issubtype(super, sub))
  }
  
  axiom issubtype_exclusion_propagation {
    (forall sub: PyType, middle: PyType, super: PyType :: { issubtype(sub, middle),isnotsubtype(middle, super) } issubtype(sub, middle) && isnotsubtype(middle, super) ==> !issubtype(sub, super))
  }
  
  axiom tuple_arg_def {
    (forall seq: Seq[PyType], i: Int, Z: PyType :: { tuple(seq),tuple_arg(Z, i) } issubtype(Z, tuple(seq)) ==> issubtype(tuple_arg(Z, i), seq[i]))
  }
  
  axiom tuple_args_def {
    (forall seq: Seq[PyType], Z: PyType :: { issubtype(Z, tuple(seq)) } issubtype(Z, tuple(seq)) ==> |tuple_args(Z)| == |seq|)
  }
  
  axiom tuple_self_subtype {
    (forall seq1: Seq[PyType], seq2: Seq[PyType] :: seq1 != seq2 && |seq1| == |seq2| && (forall i: Int :: i >= 0 && i < |seq1| ==> issubtype(seq1[i], seq2[i])) ==> issubtype(tuple(seq1), tuple(seq2)))
  }
  
  axiom union_subtype_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(X, union_type_1(arg_1)) } issubtype(X, union_type_1(arg_1)) == (false || issubtype(X, arg_1)))
  }
  
  axiom union_subtype_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(X, union_type_2(arg_1, arg_2)) } issubtype(X, union_type_2(arg_1, arg_2)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2)))
  }
  
  axiom union_subtype_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(X, union_type_3(arg_1, arg_2, arg_3)) } issubtype(X, union_type_3(arg_1, arg_2, arg_3)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3)))
  }
  
  axiom union_subtype_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) } issubtype(X, union_type_4(arg_1, arg_2, arg_3, arg_4)) == (false || issubtype(X, arg_1) || issubtype(X, arg_2) || issubtype(X, arg_3) || issubtype(X, arg_4)))
  }
  
  axiom subtype_union_1 {
    (forall arg_1: PyType, X: PyType :: { issubtype(union_type_1(arg_1), X) } issubtype(union_type_1(arg_1), X) == (true && issubtype(arg_1, X)))
  }
  
  axiom subtype_union_2 {
    (forall arg_1: PyType, arg_2: PyType, X: PyType :: { issubtype(union_type_2(arg_1, arg_2), X) } issubtype(union_type_2(arg_1, arg_2), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X)))
  }
  
  axiom subtype_union_3 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, X: PyType :: { issubtype(union_type_3(arg_1, arg_2, arg_3), X) } issubtype(union_type_3(arg_1, arg_2, arg_3), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X)))
  }
  
  axiom subtype_union_4 {
    (forall arg_1: PyType, arg_2: PyType, arg_3: PyType, arg_4: PyType, X: PyType :: { issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) } issubtype(union_type_4(arg_1, arg_2, arg_3, arg_4), X) == (true && issubtype(arg_1, X) && issubtype(arg_2, X) && issubtype(arg_3, X) && issubtype(arg_4, X)))
  }
  
  axiom subtype_Place {
    extends_(Place(), object()) && get_basic(Place()) == Place()
  }
  
  axiom subtype_list {
    (forall var0: PyType :: { list(var0) } extends_(list(var0), object()) && get_basic(list(var0)) == list_basic())
  }
  
  axiom list_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, list(arg0)) ==> list_arg(Z, 0) == arg0)
  }
  
  axiom subtype_set {
    (forall var0: PyType :: { set(var0) } extends_(set(var0), object()) && get_basic(set(var0)) == set_basic())
  }
  
  axiom set_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, set(arg0)) ==> set_arg(Z, 0) == arg0)
  }
  
  axiom subtype_dict {
    (forall var0: PyType, var1: PyType :: { dict(var0, var1) } extends_(dict(var0, var1), object()) && get_basic(dict(var0, var1)) == dict_basic())
  }
  
  axiom dict_args0 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 0) == arg0)
  }
  
  axiom dict_args1 {
    (forall Z: PyType, arg0: PyType, arg1: PyType :: issubtype(Z, dict(arg0, arg1)) ==> dict_arg(Z, 1) == arg1)
  }
  
  axiom subtype_int {
    extends_(int(), float()) && get_basic(int()) == int()
  }
  
  axiom subtype_float {
    extends_(float(), object()) && get_basic(float()) == float()
  }
  
  axiom subtype_bool {
    extends_(bool(), int()) && get_basic(bool()) == bool()
  }
  
  axiom subtype_NoneType {
    extends_(NoneType(), object()) && get_basic(NoneType()) == NoneType()
  }
  
  axiom subtype_Exception {
    extends_(Exception(), object()) && get_basic(Exception()) == Exception()
  }
  
  axiom subtype_traceback {
    extends_(traceback(), object()) && get_basic(traceback()) == traceback()
  }
  
  axiom subtype_str {
    extends_(str(), object()) && get_basic(str()) == str()
  }
  
  axiom subtype_bytes {
    extends_(bytes(), object()) && get_basic(bytes()) == bytes()
  }
  
  axiom subtype_tuple {
    (forall args: Seq[PyType] :: { tuple(args) } ((forall e: PyType :: (e in args) ==> e == object()) ==> extends_(tuple(args), object())) && get_basic(tuple(args)) == tuple_basic())
  }
  
  axiom subtype_Sequence {
    (forall var0: PyType :: { Sequence(var0) } extends_(Sequence(var0), object()) && get_basic(Sequence(var0)) == Sequence_basic())
  }
  
  axiom Sequence_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Sequence(arg0)) ==> Sequence_arg(Z, 0) == arg0)
  }
  
  axiom subtype_PSet {
    (forall var0: PyType :: { PSet(var0) } extends_(PSet(var0), object()) && get_basic(PSet(var0)) == PSet_basic())
  }
  
  axiom PSet_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, PSet(arg0)) ==> PSet_arg(Z, 0) == arg0)
  }
  
  axiom subtype_slice {
    extends_(slice(), object()) && get_basic(slice()) == slice()
  }
  
  axiom subtype_range {
    extends_(range(), object()) && get_basic(range()) == range()
  }
  
  axiom subtype_Iterator {
    (forall var0: PyType :: { Iterator(var0) } extends_(Iterator(var0), object()) && get_basic(Iterator(var0)) == Iterator_basic())
  }
  
  axiom Iterator_args0 {
    (forall Z: PyType, arg0: PyType :: issubtype(Z, Iterator(arg0)) ==> Iterator_arg(Z, 0) == arg0)
  }
  
  axiom subtype_Thread_0 {
    extends_(Thread_0(), object()) && get_basic(Thread_0()) == Thread_0()
  }
  
  axiom subtype_type {
    extends_(type(), object()) && get_basic(type()) == type()
  }
  
  axiom subtype___prim__Sequence_type {
    extends_(__prim__Sequence_type(), object()) && get_basic(__prim__Sequence_type()) == __prim__Sequence_type()
  }
  
  axiom subtype_Matcher {
    extends_(Matcher(), object()) && get_basic(Matcher()) == Matcher()
  }
}

domain Thread {
  
  function getMethod(t: Ref): ThreadingID
  
  function getArg(t: Ref, i: Int): Ref
  
  function getOld(t: Ref, i: Int): Ref
}

domain Function {
  
  
}

domain ThreadingID {
  
  unique function __init___threading(): ThreadingID
  
  unique function append_threading(): ThreadingID
  
  unique function extend_threading(): ThreadingID
  
  unique function reverse_threading(): ThreadingID
  
  unique function __setitem___threading(): ThreadingID
  
  unique function __iter___threading(): ThreadingID
  
  unique function __getitem_slice___threading(): ThreadingID
  
  unique function __add___threading(): ThreadingID
  
  unique function __mul___threading(): ThreadingID
  
  unique function __init___threading_0(): ThreadingID
  
  unique function add_threading(): ThreadingID
  
  unique function remove_threading(): ThreadingID
  
  unique function clear_threading(): ThreadingID
  
  unique function __iter___threading_0(): ThreadingID
  
  unique function __init___threading_1(): ThreadingID
  
  unique function keys_threading(): ThreadingID
  
  unique function __setitem___threading_0(): ThreadingID
  
  unique function __iter___threading_1(): ThreadingID
  
  unique function values_threading(): ThreadingID
  
  unique function split_threading(): ThreadingID
  
  unique function __iter___threading_2(): ThreadingID
  
  unique function __next___threading(): ThreadingID
  
  unique function __del___threading(): ThreadingID
  
  unique function main_threading(): ThreadingID
  
  unique function __init___threading_2(): ThreadingID
  
  unique function pop_read_ahead_threading(): ThreadingID
  
  unique function peek_read_ahead_threading(): ThreadingID
  
  unique function brackets_threading(): ThreadingID
  
  unique function NoOp_threading(): ThreadingID
  
  unique function Split_threading(): ThreadingID
  
  unique function Join_threading(): ThreadingID
  
  unique function Gap_threading(): ThreadingID
  
  unique function End_threading(): ThreadingID
  
  unique function SetVar_threading(): ThreadingID
  
  unique function Eval_threading(): ThreadingID
  
  unique function putchar_threading(): ThreadingID
  
  unique function putc_threading(): ThreadingID
  
  unique function getchar_threading(): ThreadingID
}

domain SIFDomain[T] {
  
  function Low(x: T): Bool
  
  axiom low_true {
    (forall x: T :: { Low(x) } Low(x))
  }
}

domain Measure$ {
  
  function Measure$create(guard: Bool, key: Ref, value: Int): Measure$
  
  function Measure$guard(m: Measure$): Bool
  
  function Measure$key(m: Measure$): Ref
  
  function Measure$value(m: Measure$): Int
  
  axiom Measure$A0 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$guard(Measure$create(g, k, v)) } Measure$guard(Measure$create(g, k, v)) == g)
  }
  
  axiom Measure$A1 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$key(Measure$create(g, k, v)) } Measure$key(Measure$create(g, k, v)) == k)
  }
  
  axiom Measure$A2 {
    (forall g: Bool, k: Ref, v: Int :: { Measure$value(Measure$create(g, k, v)) } Measure$value(Measure$create(g, k, v)) == v)
  }
}

domain _Name {
  
  function _combine(n1: _Name, n2: _Name): _Name
  
  function _single(n: Int): _Name
  
  function _get_combined_prefix(n: _Name): _Name
  
  function _get_combined_name(n: _Name): _Name
  
  function _get_value(n: _Name): Int
  
  function _is_single(n: _Name): Bool
  
  axiom all_single_or_combined {
    (forall n: _Name :: n == _single(_get_value(n)) || n == _combine(_get_combined_prefix(n), _get_combined_name(n)))
  }
  
  axiom single_is_single {
    (forall i: Int :: { _single(i) } _is_single(_single(i)))
  }
  
  axiom combined_is_not_single {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } !_is_single(_combine(n1, n2)))
  }
  
  axiom decompose_single {
    (forall i: Int :: { _single(i) } _get_value(_single(i)) == i)
  }
  
  axiom decompose_combined_prefix {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_prefix(_combine(n1, n2)) == n1)
  }
  
  axiom decompose_combined_name {
    (forall n1: _Name, n2: _Name :: { _combine(n1, n2) } _get_combined_name(_combine(n1, n2)) == n2)
  }
}

field _val: Ref

field __container: Ref

field __iter_index: Int

field __previous: Seq[Ref]

field list_acc: Seq[Ref]

field set_acc: Set[Ref]

field dict_acc: Set[Ref]

field Measure$acc: Seq[Ref]

field MustReleaseBounded: Int

field MustReleaseUnbounded: Int

field Matcher_c: Ref

function _joinable(t: Ref): Bool 


function _isDefined(id: Int): Bool 


function _checkDefined(val: Ref, id: Int): Ref
  requires _isDefined(id) 
{
  val
}

function _asserting(val: Ref, ass: Bool): Ref
  requires ass 
{
  val
}

function _int_to_bool(i: Int): Bool 


function __file__(): Ref 


function __name__(): Ref 


function __file___0(): Ref 


function __name___0(): Ref 


function __file___1(): Ref 


function __name___1(): Ref 


function stdin(): Ref
  ensures issubtype(typeof(result), int())
  ensures result == __prim__int___box__(0) 
{
  __prim__int___box__(0)
}

function stdout(): Ref
  ensures issubtype(typeof(result), int())
  ensures result == __prim__int___box__(1) 
{
  __prim__int___box__(1)
}

function stderr(): Ref
  ensures issubtype(typeof(result), int())
  ensures result == __prim__int___box__(2) 
{
  __prim__int___box__(2)
}

function get__brackets_io__read5(t_read1_0: Ref, read1: Ref): Ref
  ensures issubtype(typeof(result), str()) 


function get__brackets_io__valid(t_read1_0: Ref, read1: Ref): Bool 


function get__brackets_io__t_read5_0(t_read1_0: Ref, read1: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function get__no_op_io__t_post(t_pre_5: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function get__split_io__t_post1(t_pre_6: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function get__split_io__t_post2(t_pre_6: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function get__join_io__t_post_0(t_pre1_0: Ref, t_pre2_0: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function get__gap_io__t_post_1(t_pre_7: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function get__set_var_io__result_0(t_pre_9: Ref, value_0: Int): Int 


function get__set_var_io__t_post_2(t_pre_9: Ref, value_0: Int): Ref
  ensures issubtype(typeof(result), Place()) 


function get__eval_io__result_1(t_pre_10: Ref, func_0: Function, arg_13: Ref): Ref
  ensures issubtype(typeof(result), object()) 


function get__eval_io__t_post_3(t_pre_10: Ref, func_0: Function, arg_13: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function get__write_char_io__success_1(t_pre_11: Ref, fp_0: Int, c_2: Ref): Bool 


function get__write_char_io__t_post_4(t_pre_11: Ref, fp_0: Int, c_2: Ref): Ref
  ensures issubtype(typeof(result), Place()) 


function get__read_char_io__c_3(t_pre_12: Ref, fp_1: Int): Ref
  ensures issubtype(typeof(result), str()) 


function get__read_char_io__success_2(t_pre_12: Ref, fp_1: Int): Bool 


function get__read_char_io__t_post_5(t_pre_12: Ref, fp_1: Int): Ref
  ensures issubtype(typeof(result), Place()) 


function __prim__int___box__(prim: Int): Ref
  ensures typeof(result) == int()
  ensures int___unbox__(result) == prim
  ensures (forall other: Int :: { __prim__int___box__(other) } (__prim__int___box__(other) == result) == (other == prim)) 


function int___unbox__(box: Ref): Int
  requires issubtype(typeof(box), int())
  ensures !issubtype(typeof(box), bool()) ==> __prim__int___box__(result) == box
  ensures issubtype(typeof(box), bool()) ==> __prim__bool___box__(result != 0) == box 


function __prim__bool___box__(prim: Bool): Ref
  ensures typeof(result) == bool()
  ensures bool___unbox__(result) == prim
  ensures int___unbox__(result) == (prim ? 1 : 0) 


function bool___unbox__(box: Ref): Bool
  requires issubtype(typeof(box), bool())
  ensures __prim__bool___box__(result) == box 


function int___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), int())
  requires issubtype(typeof(other), int()) 
{
  int___unbox__(self) == int___unbox__(other)
}

function bool___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), bool())
  requires issubtype(typeof(other), bool()) 
{
  bool___unbox__(self) == bool___unbox__(other)
}

function Place___eq__(self: Ref, other: Ref): Bool
  ensures result == (self == other) 


function Level(r: Ref): Perm 


function Measure$check(map: Seq[Measure$], key: Ref, value: Int): Bool 
{
  (forall m: Measure$ :: { (m in map) } (m in map) ==> Measure$guard(m) && Measure$key(m) == key ==> Measure$value(m) > value)
}

function str___len__(self: Ref): Int
  ensures result >= 0 


function str___val__(self: Ref): Int 


function str___create__(len: Int, value: Int): Ref
  ensures str___len__(result) == len
  ensures str___val__(result) == value
  ensures typeof(result) == str() 


function str___eq__(self: Ref, other: Ref): Bool
  requires issubtype(typeof(self), str())
  ensures (str___val__(self) == str___val__(other)) == result
  ensures result ==> str___len__(self) == str___len__(other) 


function tuple___val__(self: Ref): Seq[Ref] 


function tuple___create2__(arg0: Ref, arg1: Ref, t0: PyType, t1: PyType, ctr: Int): Ref
  requires issubtype(typeof(arg0), t0)
  requires issubtype(typeof(arg1), t1)
  ensures result != null
  ensures typeof(result) == tuple(Seq(t0, t1))
  ensures tuple_args(typeof(result)) == Seq(t0, t1)
  ensures tuple_args(typeof(result)) == Seq(t0, t1)
  ensures tuple___val__(result) == Seq(arg0, arg1)
  ensures tuple___len__(result) == 2 && (tuple___getitem__(result, 0) == arg0 && tuple___getitem__(result, 1) == arg1) 


function tuple___len__(self: Ref): Int
  ensures result == |tuple_args(typeof(self))|
  ensures result == |tuple___val__(self)| 


function tuple___getitem__(self: Ref, key: Int): Ref
  requires (let ln == (tuple___len__(self)) in (key >= 0 ==> key < ln) && (key < 0 ==> key >= -ln))
  ensures key >= 0 ==> issubtype(typeof(result), tuple_arg(typeof(self), key))
  ensures key < 0 ==> issubtype(typeof(result), tuple_arg(typeof(self), tuple___len__(self) + key))
  ensures key >= 0 ==> result == tuple___val__(self)[key]
  ensures key < 0 ==> result == tuple___val__(self)[tuple___len__(self) + key] 


predicate MustTerminate(r: Ref) 

predicate MustInvokeBounded(r: Ref) 

predicate MustInvokeUnbounded(r: Ref) 

predicate MustInvokeCredit(r: Ref) 

predicate _thread_start(t: Ref) 

predicate _thread_post(t: Ref) 

predicate _MaySet(rec: Ref, id: Int) 

predicate brackets_io(t_read1_0: Ref, read1: Ref) 

predicate no_op_io(t_pre_5: Ref) 

predicate split_io(t_pre_6: Ref) 

predicate join_io(t_pre1_0: Ref, t_pre2_0: Ref) 

predicate gap_io(t_pre_7: Ref) 

predicate end_io(t_pre_8: Ref) 

predicate set_var_io(t_pre_9: Ref, value_0: Int) 

predicate eval_io(t_pre_10: Ref, func_0: Function, arg_13: Ref) 

predicate write_char_io(t_pre_11: Ref, fp_0: Int, c_2: Ref) 

predicate read_char_io(t_pre_12: Ref, fp_1: Int) 

method main(_cthread_149: Ref, _caller_measures_149: Seq[Measure$], _residue_149: Perm, t1_0: Ref) returns (_current_wait_level_149: Perm, _res: Ref)
  requires _cthread_149 != null
  requires issubtype(typeof(_cthread_149), Thread_0())
  requires issubtype(typeof(t1_0), Place())
  requires [acc(MustInvokeUnbounded(t1_0), write), (perm(MustInvokeUnbounded(t1_0)) > none ? acc(MustInvokeUnbounded(t1_0), write) : acc(MustInvokeCredit(t1_0), write))] && (acc(read_char_io(t1_0, int___unbox__(stdin())), write) && (acc(brackets_io(get__read_char_io__t_post_5(t1_0, int___unbox__(stdin())), get__read_char_io__c_3(t1_0, int___unbox__(stdin()))), write) && (get__brackets_io__read5(get__read_char_io__t_post_5(t1_0, int___unbox__(stdin())), get__read_char_io__c_3(t1_0, int___unbox__(stdin()))) == null && acc(write_char_io(get__brackets_io__t_read5_0(get__read_char_io__t_post_5(t1_0, int___unbox__(stdin())), get__read_char_io__c_3(t1_0, int___unbox__(stdin()))), int___unbox__(stdout()), (get__brackets_io__valid(get__read_char_io__t_post_5(t1_0, int___unbox__(stdin())), get__read_char_io__c_3(t1_0, int___unbox__(stdin()))) ? str___create__(1, 49) : str___create__(1, 48))), write))))
  requires [true, perm(MustTerminate(_cthread_149)) == none && ((forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false) && ((forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false) && ((forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false) && (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_149) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_149) && _residue_149 <= _current_wait_level_149), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__write_char_io__t_post_4(get__brackets_io__t_read5_0(get__read_char_io__t_post_5(t1_0, int___unbox__(stdin())), get__read_char_io__c_3(t1_0, int___unbox__(stdin()))), int___unbox__(stdout()), (get__brackets_io__valid(get__read_char_io__t_post_5(t1_0, int___unbox__(stdin())), get__read_char_io__c_3(t1_0, int___unbox__(stdin()))) ? str___create__(1, 49) : str___create__(1, 48))))), write), (perm(MustInvokeUnbounded(old(get__write_char_io__t_post_4(get__brackets_io__t_read5_0(get__read_char_io__t_post_5(t1_0, int___unbox__(stdin())), get__read_char_io__c_3(t1_0, int___unbox__(stdin()))), int___unbox__(stdout()), (get__brackets_io__valid(get__read_char_io__t_post_5(t1_0, int___unbox__(stdin())), get__read_char_io__c_3(t1_0, int___unbox__(stdin()))) ? str___create__(1, 49) : str___create__(1, 48)))))) > none ? acc(MustInvokeUnbounded(old(get__write_char_io__t_post_4(get__brackets_io__t_read5_0(get__read_char_io__t_post_5(t1_0, int___unbox__(stdin())), get__read_char_io__c_3(t1_0, int___unbox__(stdin()))), int___unbox__(stdout()), (get__brackets_io__valid(get__read_char_io__t_post_5(t1_0, int___unbox__(stdin())), get__read_char_io__c_3(t1_0, int___unbox__(stdin()))) ? str___create__(1, 49) : str___create__(1, 48))))), write) : acc(MustInvokeCredit(old(get__write_char_io__t_post_4(get__brackets_io__t_read5_0(get__read_char_io__t_post_5(t1_0, int___unbox__(stdin())), get__read_char_io__c_3(t1_0, int___unbox__(stdin()))), int___unbox__(stdout()), (get__brackets_io__valid(get__read_char_io__t_post_5(t1_0, int___unbox__(stdin())), get__read_char_io__c_3(t1_0, int___unbox__(stdin()))) ? str___create__(1, 49) : str___create__(1, 48))))), write))] && Place___eq__(old(get__write_char_io__t_post_4(get__brackets_io__t_read5_0(get__read_char_io__t_post_5(t1_0, int___unbox__(stdin())), get__read_char_io__c_3(t1_0, int___unbox__(stdin()))), int___unbox__(stdout()), (get__brackets_io__valid(get__read_char_io__t_post_5(t1_0, int___unbox__(stdin())), get__read_char_io__c_3(t1_0, int___unbox__(stdin()))) ? str___create__(1, 49) : str___create__(1, 48)))), _res)
  ensures [true, (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var m_0: Ref
  var success_0: Ref
  var t2_0: Ref
  var t3: Ref
  var match: Ref
  var t4: Ref
  var t1_4: Ref
  var Matcher_res: Ref
  var getchar_res: Ref
  var brackets_res: Ref
  var putchar_res: Ref
  var putchar_res_0: Ref
  var _cwl_149: Perm
  var _method_measures_149: Seq[Measure$]
  if (perm(MustInvokeUnbounded(t1_0)) > none) {
    exhale acc(MustInvokeUnbounded(t1_0), write)
    inhale acc(MustInvokeBounded(t1_0), write)
  }
  _method_measures_149 := Seq[Measure$]()
  _res := null
  _err := null
  t1_4 := t1_0
  Matcher_res := new()
  inhale typeof(Matcher_res) == Matcher()
  inhale acc(_MaySet(Matcher_res, 2657575097980027101852754253), write)
  _cwl_149 := Matcher___init__(_cthread_149, _method_measures_149, _residue_149, Matcher_res)
  m_0 := Matcher_res
  inhale _isDefined(3170157)
  _cwl_149, getchar_res := getchar(_cthread_149, _method_measures_149, _residue_149, t1_4)
  if (perm(_MaySet(_checkDefined(m_0, 3170157), 2657575097980027101852754253)) > none) {
    exhale acc(_MaySet(_checkDefined(m_0, 3170157), 2657575097980027101852754253), write)
    inhale acc(_checkDefined(m_0, 3170157).Matcher_c, write)
  }
  _checkDefined(m_0, 3170157).Matcher_c := tuple___getitem__(getchar_res, 0)
  success_0 := tuple___getitem__(getchar_res, 1)
  inhale _isDefined(2653097501348737574586512755)
  t2_0 := tuple___getitem__(getchar_res, 2)
  inhale _isDefined(811545204)
  _cwl_149, brackets_res := Matcher_brackets(_cthread_149, _method_measures_149, _residue_149, _checkDefined(m_0, 3170157), _checkDefined(t2_0, 811545204))
  t3 := tuple___getitem__(brackets_res, 0)
  inhale _isDefined(13172)
  match := tuple___getitem__(brackets_res, 1)
  inhale _isDefined(3583230458924342931)
  if (bool___unbox__(_checkDefined(match, 3583230458924342931))) {
    _cwl_149, putchar_res := putchar(_cthread_149, _method_measures_149, _residue_149, str___create__(1, 49), _checkDefined(t3, 13172))
    success_0 := tuple___getitem__(putchar_res, 0)
    inhale _isDefined(2653097501348737574586512755)
    t4 := tuple___getitem__(putchar_res, 1)
    inhale _isDefined(13428)
  } else {
    _cwl_149, putchar_res_0 := putchar(_cthread_149, _method_measures_149, _residue_149, str___create__(1, 48), _checkDefined(t3, 13172))
    success_0 := tuple___getitem__(putchar_res_0, 0)
    inhale _isDefined(2653097501348737574586512755)
    t4 := tuple___getitem__(putchar_res_0, 1)
    inhale _isDefined(13428)
  }
  _res := _checkDefined(t4, 13428)
  goto __end
  goto __end
  label __end
}

method Matcher___init__(_cthread_145: Ref, _caller_measures_145: Seq[Measure$], _residue_145: Perm, self: Ref) returns (_current_wait_level_145: Perm)
  requires _cthread_145 != null
  requires issubtype(typeof(_cthread_145), Thread_0())
  requires self != null
  requires acc(_MaySet(self, 2657575097980027101852754253), write)
  requires issubtype(typeof(self), Matcher())
  requires self != null
  requires [acc(MustTerminate(_cthread_145), write), true]
  requires [true, Measure$check(_caller_measures_145, _cthread_145, 1) || perm(MustTerminate(_cthread_145)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_145) && ((forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_145) && _residue_145 <= _current_wait_level_145), true]
  ensures acc(self.Matcher_c, write) && (self.Matcher_c == null || issubtype(typeof(self.Matcher_c), str()))
  ensures [true, (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_3: Ref
  var _cwl_145: Perm
  var _method_measures_145: Seq[Measure$]
  _method_measures_145 := Seq(Measure$create(true, _cthread_145, 1))
  inhale typeof(self) == Matcher()
  _err := null
  self_3 := self
  if (perm(_MaySet(self_3, 2657575097980027101852754253)) > none) {
    exhale acc(_MaySet(self_3, 2657575097980027101852754253), write)
    inhale acc(self_3.Matcher_c, write)
  }
  self_3.Matcher_c := null
  goto __end
  label __end
}

method Matcher_pop_read_ahead(_cthread_146: Ref, _caller_measures_146: Seq[Measure$], _residue_146: Perm, self_0: Ref, t1: Ref) returns (_current_wait_level_146: Perm, _res: Ref)
  requires _cthread_146 != null
  requires issubtype(typeof(_cthread_146), Thread_0())
  requires issubtype(typeof(self_0), Matcher())
  requires issubtype(typeof(t1), Place())
  requires self_0 != null
  requires acc(self_0.Matcher_c, write) && (self_0.Matcher_c == null || issubtype(typeof(self_0.Matcher_c), str())) && ([acc(MustInvokeBounded(t1), write), (perm(MustInvokeBounded(t1)) > none && Measure$check(_caller_measures_146, t1, 2) ? acc(MustInvokeBounded(t1), write) : (perm(MustInvokeUnbounded(t1)) > none ? acc(MustInvokeUnbounded(t1), write) : acc(MustInvokeCredit(t1), write)))] && acc(read_char_io(t1, int___unbox__(stdin())), write))
  requires [true, perm(MustTerminate(_cthread_146)) == none && ((forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_146) && ((forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_146) && _residue_146 <= _current_wait_level_146), true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), union_type_2(NoneType(), str()))))
  ensures acc(self_0.Matcher_c, write) && (self_0.Matcher_c == null || issubtype(typeof(self_0.Matcher_c), str())) && (self_0.Matcher_c == old(get__read_char_io__c_3(t1, int___unbox__(stdin()))) && (old(self_0.Matcher_c) == tuple___getitem__(_res, 1) && ([acc(MustInvokeUnbounded(old(get__read_char_io__t_post_5(t1, int___unbox__(stdin())))), write), (perm(MustInvokeUnbounded(old(get__read_char_io__t_post_5(t1, int___unbox__(stdin()))))) > none ? acc(MustInvokeUnbounded(old(get__read_char_io__t_post_5(t1, int___unbox__(stdin())))), write) : acc(MustInvokeCredit(old(get__read_char_io__t_post_5(t1, int___unbox__(stdin())))), write))] && Place___eq__(old(get__read_char_io__t_post_5(t1, int___unbox__(stdin()))), tuple___getitem__(_res, 0)))))
  ensures [true, (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var c_copy: Ref
  var success: Ref
  var t2: Ref
  var self_4: Ref
  var t1_5: Ref
  var getchar_res_0: Ref
  var _cwl_146: Perm
  var _method_measures_146: Seq[Measure$]
  _method_measures_146 := Seq(Measure$create(true, t1, 2))
  inhale typeof(self_0) == Matcher()
  _res := null
  _err := null
  self_4 := self_0
  t1_5 := t1
  c_copy := self_4.Matcher_c
  inhale _isDefined(4013315439929893021)
  _cwl_146, getchar_res_0 := getchar(_cthread_146, _method_measures_146, _residue_146, t1_5)
  if (perm(_MaySet(self_4, 2657575097980027101852754253)) > none) {
    exhale acc(_MaySet(self_4, 2657575097980027101852754253), write)
    inhale acc(self_4.Matcher_c, write)
  }
  self_4.Matcher_c := tuple___getitem__(getchar_res_0, 0)
  success := tuple___getitem__(getchar_res_0, 1)
  inhale _isDefined(3613344982898608781)
  t2 := tuple___getitem__(getchar_res_0, 2)
  inhale _isDefined(12916)
  _res := tuple___create2__(_checkDefined(t2, 12916), _checkDefined(c_copy, 4013315439929893021), Place(), (issubtype(typeof(_checkDefined(c_copy, 4013315439929893021)), str()) ? str() : NoneType()), 0)
  goto __end
  goto __end
  label __end
}

method Matcher_peek_read_ahead(_cthread_147: Ref, _caller_measures_147: Seq[Measure$], _residue_147: Perm, self_1: Ref) returns (_current_wait_level_147: Perm, _res: Ref)
  requires _cthread_147 != null
  requires issubtype(typeof(_cthread_147), Thread_0())
  requires issubtype(typeof(self_1), Matcher())
  requires self_1 != null
  requires acc(self_1.Matcher_c, 1 / 2) && (self_1.Matcher_c == null || issubtype(typeof(self_1.Matcher_c), str()))
  requires [acc(MustTerminate(_cthread_147), write), true]
  requires [true, Measure$check(_caller_measures_147, _cthread_147, 1) || perm(MustTerminate(_cthread_147)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_147) && ((forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_147) && _residue_147 <= _current_wait_level_147), true]
  ensures _res == null || issubtype(typeof(_res), str())
  ensures acc(self_1.Matcher_c, 1 / 2) && (self_1.Matcher_c == null || issubtype(typeof(self_1.Matcher_c), str())) && _res == self_1.Matcher_c
  ensures [true, (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false) && ((forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false) && ((forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false) && (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var self_5: Ref
  var _cwl_147: Perm
  var _method_measures_147: Seq[Measure$]
  _method_measures_147 := Seq(Measure$create(true, _cthread_147, 1))
  inhale typeof(self_1) == Matcher()
  _res := null
  _err := null
  self_5 := self_1
  _res := self_5.Matcher_c
  goto __end
  goto __end
  label __end
}

method Matcher_brackets(_cthread_148: Ref, _caller_measures_148: Seq[Measure$], _residue_148: Perm, self_2: Ref, t_read1: Ref) returns (_current_wait_level_148: Perm, _res: Ref)
  requires _cthread_148 != null
  requires issubtype(typeof(_cthread_148), Thread_0())
  requires issubtype(typeof(self_2), Matcher())
  requires issubtype(typeof(t_read1), Place())
  requires self_2 != null
  requires acc(self_2.Matcher_c, write) && (self_2.Matcher_c == null || issubtype(typeof(self_2.Matcher_c), str())) && (acc(brackets_io(t_read1, self_2.Matcher_c), write) && [acc(MustInvokeBounded(t_read1), write), (perm(MustInvokeBounded(t_read1)) > none && Measure$check(_caller_measures_148, t_read1, 3) ? acc(MustInvokeBounded(t_read1), write) : (perm(MustInvokeUnbounded(t_read1)) > none ? acc(MustInvokeUnbounded(t_read1), write) : acc(MustInvokeCredit(t_read1), write)))])
  requires [true, perm(MustTerminate(_cthread_148)) == none && ((forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false) && ((forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false) && ((forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false) && (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_148) && ((forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_148) && _residue_148 <= _current_wait_level_148), true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), bool())))
  ensures acc(self_2.Matcher_c, write) && (self_2.Matcher_c == null || issubtype(typeof(self_2.Matcher_c), str())) && (self_2.Matcher_c == old(get__brackets_io__read5(t_read1, self_2.Matcher_c)) && ([acc(MustInvokeUnbounded(old(get__brackets_io__t_read5_0(t_read1, self_2.Matcher_c))), write), (perm(MustInvokeUnbounded(old(get__brackets_io__t_read5_0(t_read1, self_2.Matcher_c)))) > none ? acc(MustInvokeUnbounded(old(get__brackets_io__t_read5_0(t_read1, self_2.Matcher_c))), write) : acc(MustInvokeCredit(old(get__brackets_io__t_read5_0(t_read1, self_2.Matcher_c))), write))] && (Place___eq__(old(get__brackets_io__t_read5_0(t_read1, self_2.Matcher_c)), tuple___getitem__(_res, 0)) && bool___eq__(__prim__bool___box__(old(get__brackets_io__valid(t_read1, self_2.Matcher_c))), tuple___getitem__(_res, 1)))))
  ensures [true, (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false) && ((forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false) && ((forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false) && (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)))]
{
  var _err: Ref
  var t_read2: Ref
  var _: Ref
  var t_read3: Ref
  var brackets1: Ref
  var t_read4: Ref
  var c: Ref
  var should_be_close: Ref
  var t_read5: Ref
  var brackets2: Ref
  var i: Ref
  var self_6: Ref
  var t_read1_1: Ref
  var read5_0: Ref
  var valid_0: Bool
  var t_read5_1: Ref
  var success1: Bool
  var success2: Bool
  var subvalid1: Bool
  var subvalid2: Bool
  var read2: Ref
  var read3: Ref
  var read4: Ref
  var read5_1: Ref
  var t_read2_0: Ref
  var t_read3_0: Ref
  var t_read4_0: Ref
  var peek_read_ahead_res: Ref
  var pop_read_ahead_res: Ref
  var brackets_res_0: Ref
  var pop_read_ahead_res_0: Ref
  var brackets_res_1: Ref
  var peek_read_ahead_res_0: Ref
  var NoOp_res: Ref
  var peek_read_ahead_res_1: Ref
  var _cwl_148: Perm
  var _method_measures_148: Seq[Measure$]
  _method_measures_148 := Seq(Measure$create(true, t_read1, 3))
  inhale typeof(self_2) == Matcher()
  _res := null
  _err := null
  self_6 := self_2
  t_read1_1 := t_read1
  exhale acc(brackets_io(t_read1_1, self_6.Matcher_c), write)
  read5_1 := get__brackets_io__read5(t_read1_1, self_6.Matcher_c)
  valid_0 := get__brackets_io__valid(t_read1_1, self_6.Matcher_c)
  t_read5_1 := get__brackets_io__t_read5_0(t_read1_1, self_6.Matcher_c)
  read2 := get__read_char_io__c_3(t_read1_1, int___unbox__(stdin()))
  success1 := get__read_char_io__success_2(t_read1_1, int___unbox__(stdin()))
  t_read2_0 := get__read_char_io__t_post_5(t_read1_1, int___unbox__(stdin()))
  read3 := get__brackets_io__read5(t_read2_0, read2)
  subvalid1 := get__brackets_io__valid(t_read2_0, read2)
  t_read3_0 := get__brackets_io__t_read5_0(t_read2_0, read2)
  read4 := get__read_char_io__c_3(t_read3_0, int___unbox__(stdin()))
  success2 := get__read_char_io__success_2(t_read3_0, int___unbox__(stdin()))
  t_read4_0 := get__read_char_io__t_post_5(t_read3_0, int___unbox__(stdin()))
  subvalid2 := get__brackets_io__valid(t_read4_0, read4)
  inhale (self_6.Matcher_c == str___create__(1, 40) ? acc(read_char_io(t_read1_1, int___unbox__(stdin())), write) && (acc(brackets_io(t_read2_0, read2), write) && (acc(read_char_io(t_read3_0, int___unbox__(stdin())), write) && (acc(brackets_io(t_read4_0, read4), write) && get__brackets_io__read5(t_read4_0, read4) == read5_1 && get__brackets_io__t_read5_0(t_read4_0, read4) == t_read5_1 && bool___eq__(__prim__bool___box__(valid_0), __prim__bool___box__(subvalid1 && (read3 == str___create__(1, 41) && subvalid2)))))) : acc(no_op_io(t_read1_1), write) && get__no_op_io__t_post(t_read1_1) == t_read5_1 && (read5_1 == self_6.Matcher_c && bool___eq__(__prim__bool___box__(valid_0), __prim__bool___box__(self_6.Matcher_c == null || self_6.Matcher_c == str___create__(1, 41)))))
  _cwl_148, peek_read_ahead_res := Matcher_peek_read_ahead(_cthread_148, _method_measures_148, _residue_148, self_6)
  if (peek_read_ahead_res == str___create__(1, 40)) {
    _cwl_148, pop_read_ahead_res := Matcher_pop_read_ahead(_cthread_148, _method_measures_148, _residue_148, self_6, t_read1_1)
    t_read2 := tuple___getitem__(pop_read_ahead_res, 0)
    inhale _isDefined(3669189163406434444)
    _ := tuple___getitem__(pop_read_ahead_res, 1)
    inhale _isDefined(95)
    _cwl_148, brackets_res_0 := Matcher_brackets(_cthread_148, _method_measures_148, _residue_148, self_6, _checkDefined(t_read2, 3669189163406434444))
    t_read3 := tuple___getitem__(brackets_res_0, 0)
    inhale _isDefined(3669470638383145100)
    brackets1 := tuple___getitem__(brackets_res_0, 1)
    inhale _isDefined(5747910995169408336816861794)
    _cwl_148, pop_read_ahead_res_0 := Matcher_pop_read_ahead(_cthread_148, _method_measures_148, _residue_148, self_6, _checkDefined(t_read3, 3669470638383145100))
    t_read4 := tuple___getitem__(pop_read_ahead_res_0, 0)
    inhale _isDefined(3669752113359855756)
    c := tuple___getitem__(pop_read_ahead_res_0, 1)
    inhale _isDefined(99)
    should_be_close := __prim__bool___box__(_checkDefined(c, 99) == str___create__(1, 41))
    inhale _isDefined(18427001015322440322549379619879950221)
    _cwl_148, brackets_res_1 := Matcher_brackets(_cthread_148, _method_measures_148, _residue_148, self_6, _checkDefined(t_read4, 3669752113359855756))
    t_read5 := tuple___getitem__(brackets_res_1, 0)
    inhale _isDefined(3670033588336566412)
    brackets2 := tuple___getitem__(brackets_res_1, 1)
    inhale _isDefined(5747911013616152410526413410)
    _res := tuple___create2__(_checkDefined(t_read5, 3670033588336566412), __prim__bool___box__(bool___unbox__(_checkDefined(brackets1, 5747910995169408336816861794)) && (bool___unbox__(_checkDefined(should_be_close, 18427001015322440322549379619879950221)) && bool___unbox__(_checkDefined(brackets2, 5747911013616152410526413410)))), Place(), bool(), 1)
    goto __end
  } else {
    _cwl_148, peek_read_ahead_res_0 := Matcher_peek_read_ahead(_cthread_148, _method_measures_148, _residue_148, self_6)
    i := peek_read_ahead_res_0
    inhale _isDefined(105)
    _cwl_148, NoOp_res := NoOp(_cthread_148, _method_measures_148, _residue_148, t_read1_1)
    t_read2 := NoOp_res
    inhale _isDefined(3669189163406434444)
    if (_checkDefined(i, 105) == null) {
      _res := tuple___create2__(_checkDefined(t_read2, 3669189163406434444), __prim__bool___box__(true), Place(), bool(), 2)
      goto __end
    } else {
      _cwl_148, peek_read_ahead_res_1 := Matcher_peek_read_ahead(_cthread_148, _method_measures_148, _residue_148, self_6)
      if (peek_read_ahead_res_1 == str___create__(1, 41)) {
        _res := tuple___create2__(_checkDefined(t_read2, 3669189163406434444), __prim__bool___box__(true), Place(), bool(), 3)
        goto __end
      } else {
        _res := tuple___create2__(_checkDefined(t_read2, 3669189163406434444), __prim__bool___box__(false), Place(), bool(), 4)
        goto __end
      }
    }
  }
  goto __end
  label __end
}

method NoOp(_cthread_150: Ref, _caller_measures_150: Seq[Measure$], _residue_150: Perm, t_pre: Ref) returns (_current_wait_level_150: Perm, _res: Ref)
  requires _cthread_150 != null
  requires issubtype(typeof(_cthread_150), Thread_0())
  requires issubtype(typeof(t_pre), Place())
  requires [acc(MustInvokeBounded(t_pre), write), (perm(MustInvokeBounded(t_pre)) > none && Measure$check(_caller_measures_150, t_pre, 1) ? acc(MustInvokeBounded(t_pre), write) : (perm(MustInvokeUnbounded(t_pre)) > none ? acc(MustInvokeUnbounded(t_pre), write) : acc(MustInvokeCredit(t_pre), write)))] && (acc(no_op_io(t_pre), write) && [acc(MustTerminate(_cthread_150), write), true])
  requires [true, Measure$check(_caller_measures_150, _cthread_150, 1) || perm(MustTerminate(_cthread_150)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_150) && ((forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_150) && _residue_150 <= _current_wait_level_150), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__no_op_io__t_post(t_pre))), write), (perm(MustInvokeUnbounded(old(get__no_op_io__t_post(t_pre)))) > none ? acc(MustInvokeUnbounded(old(get__no_op_io__t_post(t_pre))), write) : acc(MustInvokeCredit(old(get__no_op_io__t_post(t_pre))), write))] && Place___eq__(old(get__no_op_io__t_post(t_pre)), _res)
{
  var _cwl_150: Perm
  _res := null
  inhale false
}

method Split(_cthread_151: Ref, _caller_measures_151: Seq[Measure$], _residue_151: Perm, t_pre_0: Ref) returns (_current_wait_level_151: Perm, _res: Ref)
  requires _cthread_151 != null
  requires issubtype(typeof(_cthread_151), Thread_0())
  requires issubtype(typeof(t_pre_0), Place())
  requires [acc(MustInvokeBounded(t_pre_0), write), (perm(MustInvokeBounded(t_pre_0)) > none && Measure$check(_caller_measures_151, t_pre_0, 1) ? acc(MustInvokeBounded(t_pre_0), write) : (perm(MustInvokeUnbounded(t_pre_0)) > none ? acc(MustInvokeUnbounded(t_pre_0), write) : acc(MustInvokeCredit(t_pre_0), write)))] && (acc(split_io(t_pre_0), write) && [acc(MustTerminate(_cthread_151), write), true])
  requires [true, Measure$check(_caller_measures_151, _cthread_151, 1) || perm(MustTerminate(_cthread_151)) == none && ((forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false) && ((forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false) && ((forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false) && (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_151) && ((forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_151) && _residue_151 <= _current_wait_level_151), true]
  ensures issubtype(typeof(_res), tuple(Seq(Place(), Place())))
  ensures [acc(MustInvokeUnbounded(old(get__split_io__t_post1(t_pre_0))), write), (perm(MustInvokeUnbounded(old(get__split_io__t_post1(t_pre_0)))) > none ? acc(MustInvokeUnbounded(old(get__split_io__t_post1(t_pre_0))), write) : acc(MustInvokeCredit(old(get__split_io__t_post1(t_pre_0))), write))] && (Place___eq__(old(get__split_io__t_post1(t_pre_0)), tuple___getitem__(_res, 0)) && ([acc(MustInvokeUnbounded(old(get__split_io__t_post2(t_pre_0))), write), (perm(MustInvokeUnbounded(old(get__split_io__t_post2(t_pre_0)))) > none ? acc(MustInvokeUnbounded(old(get__split_io__t_post2(t_pre_0))), write) : acc(MustInvokeCredit(old(get__split_io__t_post2(t_pre_0))), write))] && Place___eq__(old(get__split_io__t_post2(t_pre_0)), tuple___getitem__(_res, 1))))
{
  var _cwl_151: Perm
  _res := null
  inhale false
}

method Join(_cthread_152: Ref, _caller_measures_152: Seq[Measure$], _residue_152: Perm, t_pre1: Ref, t_pre2: Ref) returns (_current_wait_level_152: Perm, _res: Ref)
  requires _cthread_152 != null
  requires issubtype(typeof(_cthread_152), Thread_0())
  requires issubtype(typeof(t_pre1), Place())
  requires issubtype(typeof(t_pre2), Place())
  requires [acc(MustInvokeBounded(t_pre1), write), (perm(MustInvokeBounded(t_pre1)) > none && Measure$check(_caller_measures_152, t_pre1, 1) ? acc(MustInvokeBounded(t_pre1), write) : (perm(MustInvokeUnbounded(t_pre1)) > none ? acc(MustInvokeUnbounded(t_pre1), write) : acc(MustInvokeCredit(t_pre1), write)))] && ([acc(MustInvokeBounded(t_pre2), write), (perm(MustInvokeBounded(t_pre2)) > none && Measure$check(_caller_measures_152, t_pre2, 1) ? acc(MustInvokeBounded(t_pre2), write) : (perm(MustInvokeUnbounded(t_pre2)) > none ? acc(MustInvokeUnbounded(t_pre2), write) : acc(MustInvokeCredit(t_pre2), write)))] && (acc(join_io(t_pre1, t_pre2), write) && [acc(MustTerminate(_cthread_152), write), true]))
  requires [true, Measure$check(_caller_measures_152, _cthread_152, 1) || perm(MustTerminate(_cthread_152)) == none && ((forperm _r_19: Ref [MustInvokeBounded(_r_19)] :: false) && ((forperm _r_19: Ref [MustInvokeUnbounded(_r_19)] :: false) && ((forperm _r_19: Ref [_r_19.MustReleaseBounded] :: false) && (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_18: Ref [_r_18.MustReleaseBounded] :: Level(_r_18) <= _current_wait_level_152) && ((forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: Level(_r_18) <= _current_wait_level_152) && _residue_152 <= _current_wait_level_152), true]
  ensures issubtype(typeof(_res), Place())
  ensures [acc(MustInvokeUnbounded(old(get__join_io__t_post_0(t_pre1, t_pre2))), write), (perm(MustInvokeUnbounded(old(get__join_io__t_post_0(t_pre1, t_pre2)))) > none ? acc(MustInvokeUnbounded(old(get__join_io__t_post_0(t_pre1, t_pre2))), write) : acc(MustInvokeCredit(old(get__join_io__t_post_0(t_pre1, t_pre2))), write))] && Place___eq__(old(get__join_io__t_post_0(t_pre1, t_pre2)), _res)
{
  var _cwl_152: Perm
  _res := null
  inhale false
}

method Gap(_cthread_153: Ref, _caller_measures_153: Seq[Measure$], _residue_153: Perm, t_pre_1: Ref) returns (_current_wait_level_153: Perm, _res: Ref)
  requires _cthread_153 != null
  requires issubtype(typeof(_cthread_153), Thread_0())
  requires issubtype(typeof(t_pre_1), Place())
  requires [acc(MustInvokeBounded(t_pre_1), write), (perm(MustInvokeBounded(t_pre_1)) > none && Measure$check(_caller_measures_153, t_pre_1, 1) ? acc(MustInvokeBounded(t_pre_1), write) : (perm(MustInvokeUnbounded(t_pre_1)) > none ? acc(MustInvokeUnbounded(t_pre_1), write) : acc(MustInvokeCredit(t_pre_1), write)))] && (acc(gap_io(t_pre_1), write) && [acc(MustTerminate(_cthread_153), write), true])
  requires [true, Measure$check(_caller_measures_153, _cthread_153, 1) || perm(MustTerminate(_cthread_153)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_153) && ((forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_153) && _residue_153 <= _current_wait_level_153), true]
  ensures issubtype(typeof(_res), Place())
  ensures acc(MustInvokeCredit(old(get__gap_io__t_post_1(t_pre_1))), write) && Place___eq__(old(get__gap_io__t_post_1(t_pre_1)), _res)
{
  var _cwl_153: Perm
  _res := null
  inhale false
}

method End(_cthread_154: Ref, _caller_measures_154: Seq[Measure$], _residue_154: Perm, t_pre_2: Ref) returns (_current_wait_level_154: Perm, _res: Ref)
  requires _cthread_154 != null
  requires issubtype(typeof(_cthread_154), Thread_0())
  requires issubtype(typeof(t_pre_2), Place())
  requires [acc(MustInvokeBounded(t_pre_2), write), (perm(MustInvokeBounded(t_pre_2)) > none && Measure$check(_caller_measures_154, t_pre_2, 1) ? acc(MustInvokeBounded(t_pre_2), write) : (perm(MustInvokeUnbounded(t_pre_2)) > none ? acc(MustInvokeUnbounded(t_pre_2), write) : acc(MustInvokeCredit(t_pre_2), write)))] && (acc(end_io(t_pre_2), write) && [acc(MustTerminate(_cthread_154), write), true])
  requires [true, Measure$check(_caller_measures_154, _cthread_154, 1) || perm(MustTerminate(_cthread_154)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_22: Ref [_r_22.MustReleaseBounded] :: Level(_r_22) <= _current_wait_level_154) && ((forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: Level(_r_22) <= _current_wait_level_154) && _residue_154 <= _current_wait_level_154), true]
  ensures issubtype(typeof(_res), Place())
{
  var _cwl_154: Perm
  _res := null
  inhale false
}

method SetVar(_cthread_155: Ref, _caller_measures_155: Seq[Measure$], _residue_155: Perm, t_pre_3: Ref, value: Ref) returns (_current_wait_level_155: Perm, _res: Ref)
  requires _cthread_155 != null
  requires issubtype(typeof(_cthread_155), Thread_0())
  requires issubtype(typeof(t_pre_3), Place())
  requires issubtype(typeof(value), int())
  requires [acc(MustInvokeBounded(t_pre_3), write), (perm(MustInvokeBounded(t_pre_3)) > none && Measure$check(_caller_measures_155, t_pre_3, 1) ? acc(MustInvokeBounded(t_pre_3), write) : (perm(MustInvokeUnbounded(t_pre_3)) > none ? acc(MustInvokeUnbounded(t_pre_3), write) : acc(MustInvokeCredit(t_pre_3), write)))] && (acc(set_var_io(t_pre_3, int___unbox__(value)), write) && [acc(MustTerminate(_cthread_155), write), true])
  requires [true, Measure$check(_caller_measures_155, _cthread_155, 1) || perm(MustTerminate(_cthread_155)) == none && ((forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false) && ((forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false) && ((forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false) && (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_24: Ref [_r_24.MustReleaseBounded] :: Level(_r_24) <= _current_wait_level_155) && ((forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: Level(_r_24) <= _current_wait_level_155) && _residue_155 <= _current_wait_level_155), true]
  ensures issubtype(typeof(_res), tuple(Seq(int(), Place())))
  ensures [acc(MustInvokeUnbounded(old(get__set_var_io__t_post_2(t_pre_3, int___unbox__(value)))), write), (perm(MustInvokeUnbounded(old(get__set_var_io__t_post_2(t_pre_3, int___unbox__(value))))) > none ? acc(MustInvokeUnbounded(old(get__set_var_io__t_post_2(t_pre_3, int___unbox__(value)))), write) : acc(MustInvokeCredit(old(get__set_var_io__t_post_2(t_pre_3, int___unbox__(value)))), write))] && (Place___eq__(old(get__set_var_io__t_post_2(t_pre_3, int___unbox__(value))), tuple___getitem__(_res, 1)) && (int___eq__(__prim__int___box__(old(get__set_var_io__result_0(t_pre_3, int___unbox__(value)))), tuple___getitem__(_res, 0)) && int___eq__(value, __prim__int___box__(old(get__set_var_io__result_0(t_pre_3, int___unbox__(value)))))))
{
  var _cwl_155: Perm
  _res := null
  inhale false
}

method Eval(_cthread_156: Ref, _caller_measures_156: Seq[Measure$], _residue_156: Perm, t_pre_4: Ref, func: Function, arg: Ref) returns (_current_wait_level_156: Perm, _res: Ref)
  requires _cthread_156 != null
  requires issubtype(typeof(_cthread_156), Thread_0())
  requires issubtype(typeof(t_pre_4), Place())
  requires issubtype(typeof(arg), typeof(arg))
  requires [acc(MustInvokeBounded(t_pre_4), write), (perm(MustInvokeBounded(t_pre_4)) > none && Measure$check(_caller_measures_156, t_pre_4, 1) ? acc(MustInvokeBounded(t_pre_4), write) : (perm(MustInvokeUnbounded(t_pre_4)) > none ? acc(MustInvokeUnbounded(t_pre_4), write) : acc(MustInvokeCredit(t_pre_4), write)))] && (acc(eval_io(t_pre_4, func, arg), write) && [acc(MustTerminate(_cthread_156), write), true])
  requires [true, Measure$check(_caller_measures_156, _cthread_156, 1) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false) && ((forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false) && ((forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false) && (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_156) && ((forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156), true]
  ensures issubtype(typeof(_res), tuple(Seq(object(), Place())))
  ensures [acc(MustInvokeUnbounded(old(get__eval_io__t_post_3(t_pre_4, func, arg))), write), (perm(MustInvokeUnbounded(old(get__eval_io__t_post_3(t_pre_4, func, arg)))) > none ? acc(MustInvokeUnbounded(old(get__eval_io__t_post_3(t_pre_4, func, arg))), write) : acc(MustInvokeCredit(old(get__eval_io__t_post_3(t_pre_4, func, arg))), write))] && (old(get__eval_io__t_post_3(t_pre_4, func, arg)) == tuple___getitem__(_res, 1) && old(get__eval_io__result_1(t_pre_4, func, arg)) == tuple___getitem__(_res, 0))
{
  var _cwl_156: Perm
  _res := null
  inhale false
}

method putchar(_cthread_157: Ref, _caller_measures_157: Seq[Measure$], _residue_157: Perm, c_0: Ref, t1_1: Ref) returns (_current_wait_level_157: Perm, _res: Ref)
  requires _cthread_157 != null
  requires issubtype(typeof(_cthread_157), Thread_0())
  requires issubtype(typeof(c_0), str())
  requires issubtype(typeof(t1_1), Place())
  requires [acc(MustInvokeBounded(t1_1), write), (perm(MustInvokeBounded(t1_1)) > none && Measure$check(_caller_measures_157, t1_1, 1) ? acc(MustInvokeBounded(t1_1), write) : (perm(MustInvokeUnbounded(t1_1)) > none ? acc(MustInvokeUnbounded(t1_1), write) : acc(MustInvokeCredit(t1_1), write)))] && (acc(write_char_io(t1_1, int___unbox__(stdout()), c_0), write) && [acc(MustTerminate(_cthread_157), write), true])
  requires [true, Measure$check(_caller_measures_157, _cthread_157, 1) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_28: Ref [_r_28.MustReleaseBounded] :: Level(_r_28) <= _current_wait_level_157) && ((forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: Level(_r_28) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157), true]
  ensures issubtype(typeof(_res), tuple(Seq(bool(), Place())))
  ensures [acc(MustInvokeUnbounded(old(get__write_char_io__t_post_4(t1_1, int___unbox__(stdout()), c_0))), write), (perm(MustInvokeUnbounded(old(get__write_char_io__t_post_4(t1_1, int___unbox__(stdout()), c_0)))) > none ? acc(MustInvokeUnbounded(old(get__write_char_io__t_post_4(t1_1, int___unbox__(stdout()), c_0))), write) : acc(MustInvokeCredit(old(get__write_char_io__t_post_4(t1_1, int___unbox__(stdout()), c_0))), write))] && (bool___eq__(__prim__bool___box__(old(get__write_char_io__success_1(t1_1, int___unbox__(stdout()), c_0))), tuple___getitem__(_res, 0)) && Place___eq__(old(get__write_char_io__t_post_4(t1_1, int___unbox__(stdout()), c_0)), tuple___getitem__(_res, 1)))
{
  var _cwl_157: Perm
  _res := null
  inhale false
}

method putc(_cthread_158: Ref, _caller_measures_158: Seq[Measure$], _residue_158: Perm, c_1: Ref, fp: Ref, t1_2: Ref) returns (_current_wait_level_158: Perm, _res: Ref)
  requires _cthread_158 != null
  requires issubtype(typeof(_cthread_158), Thread_0())
  requires issubtype(typeof(c_1), str())
  requires issubtype(typeof(fp), int())
  requires issubtype(typeof(t1_2), Place())
  requires [acc(MustInvokeBounded(t1_2), write), (perm(MustInvokeBounded(t1_2)) > none && Measure$check(_caller_measures_158, t1_2, 1) ? acc(MustInvokeBounded(t1_2), write) : (perm(MustInvokeUnbounded(t1_2)) > none ? acc(MustInvokeUnbounded(t1_2), write) : acc(MustInvokeCredit(t1_2), write)))] && (acc(write_char_io(t1_2, int___unbox__(fp), c_1), write) && [acc(MustTerminate(_cthread_158), write), true])
  requires [true, Measure$check(_caller_measures_158, _cthread_158, 1) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_31: Ref [MustInvokeBounded(_r_31)] :: false) && ((forperm _r_31: Ref [MustInvokeUnbounded(_r_31)] :: false) && ((forperm _r_31: Ref [_r_31.MustReleaseBounded] :: false) && (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_30: Ref [_r_30.MustReleaseBounded] :: Level(_r_30) <= _current_wait_level_158) && ((forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: Level(_r_30) <= _current_wait_level_158) && _residue_158 <= _current_wait_level_158), true]
  ensures issubtype(typeof(_res), tuple(Seq(bool(), Place())))
  ensures [acc(MustInvokeUnbounded(old(get__write_char_io__t_post_4(t1_2, int___unbox__(fp), c_1))), write), (perm(MustInvokeUnbounded(old(get__write_char_io__t_post_4(t1_2, int___unbox__(fp), c_1)))) > none ? acc(MustInvokeUnbounded(old(get__write_char_io__t_post_4(t1_2, int___unbox__(fp), c_1))), write) : acc(MustInvokeCredit(old(get__write_char_io__t_post_4(t1_2, int___unbox__(fp), c_1))), write))] && (bool___eq__(__prim__bool___box__(old(get__write_char_io__success_1(t1_2, int___unbox__(fp), c_1))), tuple___getitem__(_res, 0)) && Place___eq__(old(get__write_char_io__t_post_4(t1_2, int___unbox__(fp), c_1)), tuple___getitem__(_res, 1)))
{
  var _cwl_158: Perm
  _res := null
  inhale false
}

method getchar(_cthread_159: Ref, _caller_measures_159: Seq[Measure$], _residue_159: Perm, t1_3: Ref) returns (_current_wait_level_159: Perm, _res: Ref)
  requires _cthread_159 != null
  requires issubtype(typeof(_cthread_159), Thread_0())
  requires issubtype(typeof(t1_3), Place())
  requires [acc(MustInvokeBounded(t1_3), write), (perm(MustInvokeBounded(t1_3)) > none && Measure$check(_caller_measures_159, t1_3, 1) ? acc(MustInvokeBounded(t1_3), write) : (perm(MustInvokeUnbounded(t1_3)) > none ? acc(MustInvokeUnbounded(t1_3), write) : acc(MustInvokeCredit(t1_3), write)))] && acc(read_char_io(t1_3, int___unbox__(stdin())), write)
  requires [true, perm(MustTerminate(_cthread_159)) == none && ((forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false) && ((forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false) && ((forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false) && (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_159) && ((forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_159) && _residue_159 <= _current_wait_level_159), true]
  ensures issubtype(typeof(_res), tuple(Seq(str(), bool(), Place())))
  ensures old(get__read_char_io__c_3(t1_3, int___unbox__(stdin()))) == tuple___getitem__(_res, 0) && (bool___eq__(__prim__bool___box__(old(get__read_char_io__success_2(t1_3, int___unbox__(stdin())))), tuple___getitem__(_res, 1)) && (Place___eq__(old(get__read_char_io__t_post_5(t1_3, int___unbox__(stdin()))), tuple___getitem__(_res, 2)) && [acc(MustInvokeUnbounded(old(get__read_char_io__t_post_5(t1_3, int___unbox__(stdin())))), write), (perm(MustInvokeUnbounded(old(get__read_char_io__t_post_5(t1_3, int___unbox__(stdin()))))) > none ? acc(MustInvokeUnbounded(old(get__read_char_io__t_post_5(t1_3, int___unbox__(stdin())))), write) : acc(MustInvokeCredit(old(get__read_char_io__t_post_5(t1_3, int___unbox__(stdin())))), write))]))
{
  var _cwl_159: Perm
  _res := null
  inhale false
}

method main_0(_cthread_160: Ref, _caller_measures_160: Seq[Measure$], _residue_160: Perm) returns (_current_wait_level_160: Perm)
  requires _cthread_160 != null
  requires issubtype(typeof(_cthread_160), Thread_0())
  requires [true, perm(MustTerminate(_cthread_160)) == none && ((forperm _r_36: Ref [MustInvokeBounded(_r_36)] :: false) && ((forperm _r_36: Ref [MustInvokeUnbounded(_r_36)] :: false) && ((forperm _r_36: Ref [_r_36.MustReleaseBounded] :: false) && (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: false))))]
  ensures [(forperm _r_34: Ref [_r_34.MustReleaseBounded] :: Level(_r_34) <= _current_wait_level_160) && ((forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: Level(_r_34) <= _current_wait_level_160) && _residue_160 <= _current_wait_level_160), true]
  ensures [true, (forperm _r_35: Ref [MustInvokeBounded(_r_35)] :: false) && ((forperm _r_35: Ref [MustInvokeUnbounded(_r_35)] :: false) && ((forperm _r_35: Ref [_r_35.MustReleaseBounded] :: false) && (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: false)))]
{
  var module_defined_0: Bool
  var module_names_0: Set[_Name]
  var module_defined_1: Bool
  var module_names_1: Set[_Name]
  var module_defined_2: Bool
  var module_names_2: Set[_Name]
  var _cwl_160: Perm
  var _method_measures_160: Seq[Measure$]
  _method_measures_160 := Seq[Measure$]()
  module_defined_0 := true
  module_names_0 := Set[_Name]()
  module_names_0 := (module_names_0 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file__()._val, 99 / 100) && issubtype(typeof(__file__()._val), str()) && issubtype(typeof(__file__()._val), str())
  module_names_0 := (module_names_0 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name__()._val, 99 / 100) && issubtype(typeof(__name__()._val), str()) && issubtype(typeof(__name__()._val), str()) && str___eq__(str___create__(8, 2489249333222104298408468319), __name__()._val)
  module_defined_1 := false
  module_names_1 := Set[_Name]()
  module_names_1 := (module_names_1 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file___0()._val, 99 / 100) && issubtype(typeof(__file___0()._val), str()) && issubtype(typeof(__file___0()._val), str())
  module_names_1 := (module_names_1 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name___0()._val, 99 / 100) && issubtype(typeof(__name___0()._val), str()) && issubtype(typeof(__name___0()._val), str()) && !str___eq__(str___create__(8, 2489249333222104298408468319), __name___0()._val)
  module_defined_2 := false
  module_names_2 := Set[_Name]()
  module_names_2 := (module_names_2 union Set(_single(3106082509126931487350218591)))
  inhale acc(__file___1()._val, 99 / 100) && issubtype(typeof(__file___1()._val), str()) && issubtype(typeof(__file___1()._val), str())
  module_names_2 := (module_names_2 union Set(_single(2489530350921051593165922143)))
  inhale acc(__name___1()._val, 99 / 100) && issubtype(typeof(__name___1()._val), str()) && issubtype(typeof(__name___1()._val), str()) && !str___eq__(str___create__(8, 2489249333222104298408468319), __name___1()._val)
  module_names_0 := (module_names_0 union Set(_single(6581327)))
  module_names_0 := (module_names_0 union Set(_single(6513473)))
  module_names_0 := (module_names_0 union Set(_single(11116006324067352974226974112924930237)))
  module_names_0 := (module_names_0 union Set(_single(4264095844347449787)))
  module_names_0 := (module_names_0 union Set(_single(7136376649266381199951095122)))
  module_names_0 := (module_names_0 union Set(_single(4231737769045301934)))
  module_names_0 := (module_names_0 union Set(_single(3655284702854286527)))
  if (!module_defined_1) {
    module_defined_1 := true
    module_names_1 := (module_names_1 union Set(_single(4276317748909243633618411843)))
    module_names_1 := (module_names_1 union Set(_single(3906937610535144108)))
    module_names_1 := (module_names_1 union Set(_single(3686932966091490988)))
    module_names_1 := (module_names_1 union Set(_single(11116006324067352974226974112924930237)))
    module_names_1 := (module_names_1 union Set(_single(4264095844347449787)))
    module_names_1 := (module_names_1 union Set(_single(4158991341743806393)))
    module_names_1 := (module_names_1 union Set(_single(4231737769045301934)))
    module_names_1 := (module_names_1 union Set(_single(7136376649266381199951095122)))
    module_names_1 := (module_names_1 union Set(_single(3870888504780163997)))
    module_names_1 := (module_names_1 union Set(_single(7364236416608623017735835465)))
    module_names_1 := (module_names_1 union Set(_single(7364236435055367091445387081)))
    module_names_1 := (module_names_1 union Set(_single(7364236453502111165154938697)))
    module_names_1 := (module_names_1 union Set(_single(7025051079424386845369126729)))
    module_names_1 := (module_names_1 union Set(_single(3580562418798859184)))
    module_names_1 := (module_names_1 union Set(_single(6670569014612377719754876244)))
    module_names_1 := (module_names_1 union Set(_single(3654029152917688460)))
    module_names_1 := (module_names_1 union Set(_single(5460990052674857173734662115181759155)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(6050123938192595908143574894)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(1884254030)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(5589826673346550058105729139)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(3798285583073382317)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(4009365936197243030)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(1852403530)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(3438674358163185305)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(7364935)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(3436992650834317723)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(6581829)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(2348609963811769505312695667)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(3114983555345390253)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(3936186279839828379)))
    assert true
    module_names_1 := (module_names_1 union Set(_single(1818326597)))
  }
  assert (_single(6050123938192595908143574894) in module_names_1)
  module_names_0 := (module_names_0 union Set(_single(6050123938192595908143574894)))
  assert (_single(1884254030) in module_names_1)
  module_names_0 := (module_names_0 union Set(_single(1884254030)))
  module_names_0 := (module_names_0 union Set(_single(5460990052674857173734662115181759155)))
  if (!module_defined_2) {
    module_defined_2 := true
    module_names_2 := (module_names_2 union Set(_single(11116006324067352974226974112924930237)))
    module_names_2 := (module_names_2 union Set(_single(4264095844347449787)))
    module_names_2 := (module_names_2 union Set(_single(7136376649266381199951095122)))
    module_names_2 := (module_names_2 union Set(_single(4231737769045301934)))
    module_names_2 := (module_names_2 union Set(_single(5460990052674857173734662115181759155)))
    module_names_2 := (module_names_2 union Set(_single(3906937610535144108)))
    inhale stdin() == __prim__int___box__(0)
    module_names_2 := (module_names_2 union Set(_single(3797161925139991437)))
    inhale stdout() == __prim__int___box__(1)
    module_names_2 := (module_names_2 union Set(_single(4013462280566705037)))
    inhale stderr() == __prim__int___box__(2)
    module_names_2 := (module_names_2 union Set(_single(3653172098636680077)))
    assert true
    module_names_2 := (module_names_2 union Set(_single(17725198961239156388123744733574368649)))
    assert true
    module_names_2 := (module_names_2 union Set(_single(3615436260455975568)))
    assert true
    module_names_2 := (module_names_2 union Set(_single(1668576624)))
    assert true
    module_names_2 := (module_names_2 union Set(_single(16755323878276578838323049233655962254)))
    assert true
    module_names_2 := (module_names_2 union Set(_single(3615427445035604633)))
  }
  assert (_single(3797161925139991437) in module_names_2)
  module_names_0 := (module_names_0 union Set(_single(3797161925139991437)))
  assert (_single(4013462280566705037) in module_names_2)
  module_names_0 := (module_names_0 union Set(_single(4013462280566705037)))
  assert (_single(17725198961239156388123744733574368649) in module_names_2)
  module_names_0 := (module_names_0 union Set(_single(17725198961239156388123744733574368649)))
  assert (_single(3615436260455975568) in module_names_2)
  module_names_0 := (module_names_0 union Set(_single(3615436260455975568)))
  assert (_single(16755323878276578838323049233655962254) in module_names_2)
  module_names_0 := (module_names_0 union Set(_single(16755323878276578838323049233655962254)))
  assert (_single(3615427445035604633) in module_names_2)
  module_names_0 := (module_names_0 union Set(_single(3615427445035604633)))
  module_names_0 := (module_names_0 union Set(_single(3906937610535144108)))
  module_names_0 := (module_names_0 union Set(_single(5123216512802524336881954895)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(5882598458177560878596059746)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(3493880855485680332086796127)))
  module_names_0 := (module_names_0 union Set(_single(10275481607307390786260791716071051408)))
  module_names_0 := (module_names_0 union Set(_single(13765313694504887660388239447741340304)))
  module_names_0 := (module_names_0 union Set(_single(5747910091278948725048832610)))
  module_names_0 := (module_names_0 union Set(_single(3615429588224286387)))
  assert true
  module_names_0 := (module_names_0 union Set(_single(1852399981)))
  goto __end
  label __end
}

method brackets_io__termination_check(t_read1_0: Ref, read1: Ref)
  requires issubtype(typeof(t_read1_0), Place())
  requires issubtype(typeof(read1), str())
{
  // Termination measure must be positive.assert false ==> 1 > 0
  // Termination condition of read_char_io (44:16).assert false && read1 == str___create__(1, 40) ==> false
  // Termination measure of read_char_io (44:16).assert false && read1 == str___create__(1, 40) ==> 1 > 1
  // Termination condition of brackets_io (45:16).assert false && read1 == str___create__(1, 40) ==> false
  // Termination measure of brackets_io (45:16).assert false && read1 == str___create__(1, 40) ==> 1 > 1
  // Termination condition of read_char_io (46:16).assert false && read1 == str___create__(1, 40) ==> false
  // Termination measure of read_char_io (46:16).assert false && read1 == str___create__(1, 40) ==> 1 > 1
  // Termination condition of brackets_io (47:16).assert false && read1 == str___create__(1, 40) ==> false
  // Termination measure of brackets_io (47:16).assert false && read1 == str___create__(1, 40) ==> 1 > 1
  // Termination condition of no_op_io (51:16).assert false && !(read1 == str___create__(1, 40)) ==> true
  // Termination measure of no_op_io (51:16).assert false && !(read1 == str___create__(1, 40)) ==> 1 > 1
}

method no_op_io__termination_check(t_pre_5: Ref)
  requires issubtype(typeof(t_pre_5), Place())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method split_io__termination_check(t_pre_6: Ref)
  requires issubtype(typeof(t_pre_6), Place())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method join_io__termination_check(t_pre1_0: Ref, t_pre2_0: Ref)
  requires issubtype(typeof(t_pre1_0), Place())
  requires issubtype(typeof(t_pre2_0), Place())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method gap_io__termination_check(t_pre_7: Ref)
  requires issubtype(typeof(t_pre_7), Place())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method end_io__termination_check(t_pre_8: Ref)
  requires issubtype(typeof(t_pre_8), Place())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method set_var_io__termination_check(t_pre_9: Ref, value_0: Int)
  requires issubtype(typeof(t_pre_9), Place())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method eval_io__termination_check(t_pre_10: Ref, func_0: Function, arg_13: Ref)
  requires issubtype(typeof(t_pre_10), Place())
  requires issubtype(typeof(arg_13), object())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method write_char_io__termination_check(t_pre_11: Ref, fp_0: Int, c_2: Ref)
  requires issubtype(typeof(t_pre_11), Place())
  requires issubtype(typeof(c_2), str())
{
  // Termination measure must be positive.assert true ==> 1 > 0
}

method read_char_io__termination_check(t_pre_12: Ref, fp_1: Int)
  requires issubtype(typeof(t_pre_12), Place())
{
  // Termination measure must be positive.assert false ==> 1 > 0
}